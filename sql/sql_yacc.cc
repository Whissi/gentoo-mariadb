/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */
#line 25 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:339  */

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include <my_global.h>
#include "sql_priv.h"
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_show.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"
#include "lex_token.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(thd, (char*) (A));              \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)                  \
  if (!(A))                                      \
  {                                              \
    my_parse_error(thd, ER_SYNTAX_ERROR);        \
    MYSQL_YYABORT;                               \
  }

#define my_yyabort_error(A)                      \
  do { my_error A; MYSQL_YYABORT; } while(0)

#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

static void my_parse_error_intern(THD *thd, const char *err_text,
                                  const char *yytext)
{
  Lex_input_stream *lip= &thd->m_parser_state->m_lip;
  if (!yytext)
  {
    if (!(yytext= lip->get_tok_start()))
      yytext= "";
  }
  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext),
                    thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER_THD(thd, ER_PARSE_ERROR), MYF(0),
                  err_text, err.ptr(), lip->yylineno);
}


static void my_parse_error(THD *thd, uint err_number, const char *yytext=0)
{
  return my_parse_error_intern(thd, ER_THD(thd, err_number), yytext);
}

void LEX::parse_error()
{
  my_parse_error(thd, ER_SYNTAX_ERROR);
}


/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER_THD(thd, ER_SYNTAX_ERROR);
  my_parse_error_intern(thd, s, 0);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


static sp_head *make_sp_head(THD *thd, sp_name *name,
                             enum stored_procedure_type type)
{
  LEX *lex= thd->lex;
  sp_head *sp;

  /* Order is important here: new - reset - init */
  if ((sp= sp_head::create()))
  {
    sp->reset_thd_mem_root(thd);
    sp->init(lex);
    sp->m_type= type;
    if (name)
      sp->init_sp_name(thd, name);
    sp->m_chistics= &lex->sp_chistics;
    lex->sphead= sp;
  }
  bzero(&lex->sp_chistics, sizeof(lex->sp_chistics));
  return sp;
}

static bool maybe_start_compound_statement(THD *thd)
{
  if (!thd->lex->sphead)
  {
    if (!make_sp_head(thd, NULL, TYPE_ENUM_PROCEDURE))
      return 1;

    Lex->sp_chistics.suid= SP_IS_NOT_SUID;
    Lex->sphead->set_body_start(thd, YYLIP->get_cpp_ptr());
  }
  return 0;
}

static bool push_sp_label(THD *thd, LEX_STRING label)
{
  sp_pcontext *ctx= thd->lex->spcont;
  sp_label *lab= ctx->find_label(label);

  if (lab)
  {
    my_error(ER_SP_LABEL_REDEFINE, MYF(0), label.str);
    return 1;
  }
  else
  {
    lab= thd->lex->spcont->push_label(thd, label,
        thd->lex->sphead->instructions());
    lab->type= sp_label::ITERATION;
  }
  return 0;
}

static bool push_sp_empty_label(THD *thd)
{
  if (maybe_start_compound_statement(thd))
    return 1;
  /* Unlabeled controls get an empty label. */
  thd->lex->spcont->push_label(thd, empty_lex_str,
      thd->lex->sphead->instructions());
  return 0;
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new (lex->thd->mem_root)
    sp_instr_set_case_expr(sp->instructions(), parsing_ctx, case_expr_id, expr,
                           lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;
  THD *thd= lex->thd;

  if (simple)
  {
    var= new (thd->mem_root)
         Item_case_expr(thd, ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new (thd->mem_root) Item_func_eq(thd, var, when);
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !MY_TEST(i) ||
         sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i= new (lex->thd->mem_root) sp_instr_jump(ip, ctx);
  if (!MY_TEST(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to after END CASE
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var != NULL)
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new (thd->mem_root)
         set_var(thd, var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var, thd->mem_root);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null(thd);
    if (it == NULL)
      return TRUE;
  }

  sp_set= new (thd->mem_root)
         sp_instr_set(lex->sphead->instructions(), lex->spcont,
                                   spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new (thd->mem_root) Item_null(thd);

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(thd, lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new (thd->mem_root)
        sp_instr_set_trigger_field(lex->sphead->instructions(),
                                                 lex->spcont, trg_fld, val,
         lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - lex->sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(thd, name, spvar->offset, spvar->type, pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(thd, left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(thd, left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(thd, left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select
          statement uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
                       is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->order_list.first && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "ORDER BY");
    return TRUE;
  }

  if (lex->current_select->explicit_limit && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "LIMIT");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  /*
  if (sel->set_braces(1))
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  */
  DBUG_ASSERT(sel->braces);
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  return FALSE;
}

static bool add_create_index_prepare(LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->option_list= NULL;
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    if (no_lookahead)
        lex->sphead->m_tmp_query= lip->get_ptr();
    else
        lex->sphead->m_tmp_query= lip->get_tok_end();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex->spcont, lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}


static void add_key_to_list(LEX *lex, LEX_STRING *field_name,
                            enum Key::Keytype type, bool check_exists)
{
  Key *key;
  MEM_ROOT *mem_root= lex->thd->mem_root;
  key= new (mem_root)
        Key(type, null_lex_str, HA_KEY_ALG_UNDEF, false,
             DDL_options(check_exists ?
                         DDL_options::OPT_IF_NOT_EXISTS :
                         DDL_options::OPT_NONE));
  key->columns.push_back(new (mem_root) Key_part_spec(*field_name, 0),
                         mem_root);
  lex->alter_info.key_list.push_back(key, mem_root);
}

void LEX::init_last_field(Create_field *field, const char *field_name,
         CHARSET_INFO *cs)
{
  last_field= field;

  field->field_name= field_name;

  /* reset LEX fields that are used in Create_field::set_and_check() */
  length= 0;
  dec= 0;
  charset= cs;
}

void LEX::set_last_field_type(enum enum_field_types field_type)
{
  last_field->sql_type= field_type;
  last_field->create_if_not_exists= check_exists;
  last_field->charset= charset;

  if (length)
  {
    int err;
    last_field->length= my_strtoll10(length, NULL, &err);
    if (err)
      last_field->length= ~0ULL; // safety
  }
  else
    last_field->length= 0;

  last_field->decimals= dec ? (uint)atoi(dec) : 0;
}

bool LEX::set_bincmp(CHARSET_INFO *cs, bool bin)
{
  /*
     if charset is NULL - we're parsing a field declaration.
     we cannot call find_bin_collation for a field here, because actual
     field charset is determined in get_sql_field_charset() much later.
     so we only set a flag.
  */
  if (!charset)
  {
    charset= cs;
    last_field->flags|= bin ? BINCMP_FLAG : 0;
    return false;
  }

  charset= bin ? find_bin_collation(cs ? cs : charset)
               :                    cs ? cs : charset;
  return charset == NULL;
}

#define bincmp_collation(X,Y)           \
  do                                    \
  {                                     \
     if (Lex->set_bincmp(X,Y))          \
       MYSQL_YYABORT;                   \
  } while(0)


#line 996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "sql_yacc.h".  */
#ifndef YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED
# define YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int MYSQLdebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    ABORT_SYM = 258,
    ACCESSIBLE_SYM = 259,
    ACTION = 260,
    ADD = 261,
    ADMIN_SYM = 262,
    ADDDATE_SYM = 263,
    AFTER_SYM = 264,
    AGAINST = 265,
    AGGREGATE_SYM = 266,
    ALGORITHM_SYM = 267,
    ALL = 268,
    ALTER = 269,
    ALWAYS_SYM = 270,
    ANALYZE_SYM = 271,
    AND_AND_SYM = 272,
    AND_SYM = 273,
    ANY_SYM = 274,
    AS = 275,
    ASC = 276,
    ASCII_SYM = 277,
    ASENSITIVE_SYM = 278,
    AT_SYM = 279,
    ATOMIC_SYM = 280,
    AUTHORS_SYM = 281,
    AUTOEXTEND_SIZE_SYM = 282,
    AUTO_INC = 283,
    AUTO_SYM = 284,
    AVG_ROW_LENGTH = 285,
    AVG_SYM = 286,
    BACKUP_SYM = 287,
    BEFORE_SYM = 288,
    BEGIN_SYM = 289,
    BETWEEN_SYM = 290,
    BIGINT = 291,
    BINARY = 292,
    BINLOG_SYM = 293,
    BIN_NUM = 294,
    BIT_AND = 295,
    BIT_OR = 296,
    BIT_SYM = 297,
    BIT_XOR = 298,
    BLOB_SYM = 299,
    BLOCK_SYM = 300,
    BOOLEAN_SYM = 301,
    BOOL_SYM = 302,
    BOTH = 303,
    BTREE_SYM = 304,
    BY = 305,
    BYTE_SYM = 306,
    CACHE_SYM = 307,
    CALL_SYM = 308,
    CASCADE = 309,
    CASCADED = 310,
    CASE_SYM = 311,
    CAST_SYM = 312,
    CATALOG_NAME_SYM = 313,
    CHAIN_SYM = 314,
    CHANGE = 315,
    CHANGED = 316,
    CHARSET = 317,
    CHAR_SYM = 318,
    CHECKPOINT_SYM = 319,
    CHECKSUM_SYM = 320,
    CHECK_SYM = 321,
    CIPHER_SYM = 322,
    CLASS_ORIGIN_SYM = 323,
    CLIENT_SYM = 324,
    CLOSE_SYM = 325,
    COALESCE = 326,
    CODE_SYM = 327,
    COLLATE_SYM = 328,
    COLLATION_SYM = 329,
    COLUMNS = 330,
    COLUMN_ADD_SYM = 331,
    COLUMN_CHECK_SYM = 332,
    COLUMN_CREATE_SYM = 333,
    COLUMN_DELETE_SYM = 334,
    COLUMN_GET_SYM = 335,
    COLUMN_SYM = 336,
    COLUMN_NAME_SYM = 337,
    COMMENT_SYM = 338,
    COMMITTED_SYM = 339,
    COMMIT_SYM = 340,
    COMPACT_SYM = 341,
    COMPLETION_SYM = 342,
    COMPRESSED_SYM = 343,
    CONCURRENT = 344,
    CONDITION_SYM = 345,
    CONNECTION_SYM = 346,
    CONSISTENT_SYM = 347,
    CONSTRAINT = 348,
    CONSTRAINT_CATALOG_SYM = 349,
    CONSTRAINT_NAME_SYM = 350,
    CONSTRAINT_SCHEMA_SYM = 351,
    CONTAINS_SYM = 352,
    CONTEXT_SYM = 353,
    CONTINUE_SYM = 354,
    CONTRIBUTORS_SYM = 355,
    CONVERT_SYM = 356,
    COUNT_SYM = 357,
    CPU_SYM = 358,
    CREATE = 359,
    CROSS = 360,
    CUBE_SYM = 361,
    CURDATE = 362,
    CURRENT_SYM = 363,
    CURRENT_USER = 364,
    CURRENT_ROLE = 365,
    CURRENT_POS_SYM = 366,
    CURSOR_SYM = 367,
    CURSOR_NAME_SYM = 368,
    CURTIME = 369,
    DATABASE = 370,
    DATABASES = 371,
    DATAFILE_SYM = 372,
    DATA_SYM = 373,
    DATETIME = 374,
    DATE_ADD_INTERVAL = 375,
    DATE_SUB_INTERVAL = 376,
    DATE_SYM = 377,
    DAY_HOUR_SYM = 378,
    DAY_MICROSECOND_SYM = 379,
    DAY_MINUTE_SYM = 380,
    DAY_SECOND_SYM = 381,
    DAY_SYM = 382,
    DEALLOCATE_SYM = 383,
    DECIMAL_NUM = 384,
    DECIMAL_SYM = 385,
    DECLARE_SYM = 386,
    DEFAULT = 387,
    DEFINER_SYM = 388,
    DELAYED_SYM = 389,
    DELAY_KEY_WRITE_SYM = 390,
    DELETE_SYM = 391,
    DELETE_DOMAIN_ID_SYM = 392,
    DESC = 393,
    DESCRIBE = 394,
    DES_KEY_FILE = 395,
    DETERMINISTIC_SYM = 396,
    DIAGNOSTICS_SYM = 397,
    DIRECTORY_SYM = 398,
    DISABLE_SYM = 399,
    DISCARD = 400,
    DISK_SYM = 401,
    DISTINCT = 402,
    DIV_SYM = 403,
    DOUBLE_SYM = 404,
    DO_DOMAIN_IDS_SYM = 405,
    DO_SYM = 406,
    DROP = 407,
    DUAL_SYM = 408,
    DUMPFILE = 409,
    DUPLICATE_SYM = 410,
    DYNAMIC_SYM = 411,
    EACH_SYM = 412,
    ELSE = 413,
    ELSEIF_SYM = 414,
    ENABLE_SYM = 415,
    ENCLOSED = 416,
    END = 417,
    ENDS_SYM = 418,
    END_OF_INPUT = 419,
    ENGINES_SYM = 420,
    ENGINE_SYM = 421,
    ENUM = 422,
    EQUAL_SYM = 423,
    ERROR_SYM = 424,
    ERRORS = 425,
    ESCAPED = 426,
    ESCAPE_SYM = 427,
    EVENTS_SYM = 428,
    EVENT_SYM = 429,
    EVERY_SYM = 430,
    EXCHANGE_SYM = 431,
    EXAMINED_SYM = 432,
    EXECUTE_SYM = 433,
    EXISTS = 434,
    EXIT_SYM = 435,
    EXPANSION_SYM = 436,
    EXPORT_SYM = 437,
    EXTENDED_SYM = 438,
    EXTENT_SIZE_SYM = 439,
    EXTRACT_SYM = 440,
    FALSE_SYM = 441,
    FAST_SYM = 442,
    FAULTS_SYM = 443,
    FETCH_SYM = 444,
    FILE_SYM = 445,
    FIRST_SYM = 446,
    FIXED_SYM = 447,
    FLOAT_NUM = 448,
    FLOAT_SYM = 449,
    FLUSH_SYM = 450,
    FORCE_SYM = 451,
    FOREIGN = 452,
    FOR_SYM = 453,
    FORMAT_SYM = 454,
    FOUND_SYM = 455,
    FROM = 456,
    FULL = 457,
    FULLTEXT_SYM = 458,
    FUNCTION_SYM = 459,
    GE = 460,
    GENERAL = 461,
    GENERATED_SYM = 462,
    GEOMETRYCOLLECTION = 463,
    GEOMETRY_SYM = 464,
    GET_FORMAT = 465,
    GET_SYM = 466,
    GLOBAL_SYM = 467,
    GRANT = 468,
    GRANTS = 469,
    GROUP_SYM = 470,
    GROUP_CONCAT_SYM = 471,
    HANDLER_SYM = 472,
    HARD_SYM = 473,
    HASH_SYM = 474,
    HAVING = 475,
    HELP_SYM = 476,
    HEX_NUM = 477,
    HEX_STRING = 478,
    HIGH_PRIORITY = 479,
    HOST_SYM = 480,
    HOSTS_SYM = 481,
    HOUR_MICROSECOND_SYM = 482,
    HOUR_MINUTE_SYM = 483,
    HOUR_SECOND_SYM = 484,
    HOUR_SYM = 485,
    ID_SYM = 486,
    IDENT = 487,
    IDENTIFIED_SYM = 488,
    IDENT_QUOTED = 489,
    IF_SYM = 490,
    IGNORE_DOMAIN_IDS_SYM = 491,
    IGNORE_SYM = 492,
    IGNORE_SERVER_IDS_SYM = 493,
    IMPORT = 494,
    INDEXES = 495,
    INDEX_SYM = 496,
    INFILE = 497,
    INITIAL_SIZE_SYM = 498,
    INNER_SYM = 499,
    INOUT_SYM = 500,
    INSENSITIVE_SYM = 501,
    INSERT = 502,
    INSERT_METHOD = 503,
    INSTALL_SYM = 504,
    INTERVAL_SYM = 505,
    INTO = 506,
    INT_SYM = 507,
    INVOKER_SYM = 508,
    IN_SYM = 509,
    IO_SYM = 510,
    IPC_SYM = 511,
    IS = 512,
    ISOLATION = 513,
    ISSUER_SYM = 514,
    ITERATE_SYM = 515,
    JOIN_SYM = 516,
    KEYS = 517,
    KEY_BLOCK_SIZE = 518,
    KEY_SYM = 519,
    KILL_SYM = 520,
    LANGUAGE_SYM = 521,
    LAST_SYM = 522,
    LAST_VALUE = 523,
    LE = 524,
    LEADING = 525,
    LEAVES = 526,
    LEAVE_SYM = 527,
    LEFT = 528,
    LESS_SYM = 529,
    LEVEL_SYM = 530,
    LEX_HOSTNAME = 531,
    LIKE = 532,
    LIMIT = 533,
    LINEAR_SYM = 534,
    LINES = 535,
    LINESTRING = 536,
    LIST_SYM = 537,
    LOAD = 538,
    LOCAL_SYM = 539,
    LOCATOR_SYM = 540,
    LOCKS_SYM = 541,
    LOCK_SYM = 542,
    LOGFILE_SYM = 543,
    LOGS_SYM = 544,
    LONGBLOB = 545,
    LONGTEXT = 546,
    LONG_NUM = 547,
    LONG_SYM = 548,
    LOOP_SYM = 549,
    LOW_PRIORITY = 550,
    MASTER_CONNECT_RETRY_SYM = 551,
    MASTER_GTID_POS_SYM = 552,
    MASTER_HOST_SYM = 553,
    MASTER_LOG_FILE_SYM = 554,
    MASTER_LOG_POS_SYM = 555,
    MASTER_PASSWORD_SYM = 556,
    MASTER_PORT_SYM = 557,
    MASTER_SERVER_ID_SYM = 558,
    MASTER_SSL_CAPATH_SYM = 559,
    MASTER_SSL_CA_SYM = 560,
    MASTER_SSL_CERT_SYM = 561,
    MASTER_SSL_CIPHER_SYM = 562,
    MASTER_SSL_CRL_SYM = 563,
    MASTER_SSL_CRLPATH_SYM = 564,
    MASTER_SSL_KEY_SYM = 565,
    MASTER_SSL_SYM = 566,
    MASTER_SSL_VERIFY_SERVER_CERT_SYM = 567,
    MASTER_SYM = 568,
    MASTER_USER_SYM = 569,
    MASTER_USE_GTID_SYM = 570,
    MASTER_HEARTBEAT_PERIOD_SYM = 571,
    MATCH = 572,
    MAX_CONNECTIONS_PER_HOUR = 573,
    MAX_QUERIES_PER_HOUR = 574,
    MAX_ROWS = 575,
    MAX_SIZE_SYM = 576,
    MAX_SYM = 577,
    MAX_UPDATES_PER_HOUR = 578,
    MAX_STATEMENT_TIME_SYM = 579,
    MAX_USER_CONNECTIONS_SYM = 580,
    MAX_VALUE_SYM = 581,
    MEDIUMBLOB = 582,
    MEDIUMINT = 583,
    MEDIUMTEXT = 584,
    MEDIUM_SYM = 585,
    MEMORY_SYM = 586,
    MERGE_SYM = 587,
    MESSAGE_TEXT_SYM = 588,
    MICROSECOND_SYM = 589,
    MIGRATE_SYM = 590,
    MINUTE_MICROSECOND_SYM = 591,
    MINUTE_SECOND_SYM = 592,
    MINUTE_SYM = 593,
    MIN_ROWS = 594,
    MIN_SYM = 595,
    MODE_SYM = 596,
    MODIFIES_SYM = 597,
    MODIFY_SYM = 598,
    MOD_SYM = 599,
    MONTH_SYM = 600,
    MULTILINESTRING = 601,
    MULTIPOINT = 602,
    MULTIPOLYGON = 603,
    MUTEX_SYM = 604,
    MYSQL_SYM = 605,
    MYSQL_ERRNO_SYM = 606,
    NAMES_SYM = 607,
    NAME_SYM = 608,
    NATIONAL_SYM = 609,
    NATURAL = 610,
    NCHAR_STRING = 611,
    NCHAR_SYM = 612,
    NE = 613,
    NEG = 614,
    NEW_SYM = 615,
    NEXT_SYM = 616,
    NODEGROUP_SYM = 617,
    NONE_SYM = 618,
    NOT2_SYM = 619,
    NOT_SYM = 620,
    NOW_SYM = 621,
    NO_SYM = 622,
    NO_WAIT_SYM = 623,
    NO_WRITE_TO_BINLOG = 624,
    NULL_SYM = 625,
    NUM = 626,
    NUMBER_SYM = 627,
    NUMERIC_SYM = 628,
    NVARCHAR_SYM = 629,
    OFFSET_SYM = 630,
    OLD_PASSWORD_SYM = 631,
    ON = 632,
    ONE_SYM = 633,
    ONLY_SYM = 634,
    ONLINE_SYM = 635,
    OPEN_SYM = 636,
    OPTIMIZE = 637,
    OPTIONS_SYM = 638,
    OPTION = 639,
    OPTIONALLY = 640,
    OR2_SYM = 641,
    ORDER_SYM = 642,
    OR_OR_SYM = 643,
    OR_SYM = 644,
    OUTER = 645,
    OUTFILE = 646,
    OUT_SYM = 647,
    OWNER_SYM = 648,
    PACK_KEYS_SYM = 649,
    PAGE_SYM = 650,
    PAGE_CHECKSUM_SYM = 651,
    PARAM_MARKER = 652,
    PARSER_SYM = 653,
    PARSE_VCOL_EXPR_SYM = 654,
    PARTIAL = 655,
    PARTITION_SYM = 656,
    PARTITIONS_SYM = 657,
    PARTITIONING_SYM = 658,
    PASSWORD_SYM = 659,
    PERSISTENT_SYM = 660,
    PHASE_SYM = 661,
    PLUGINS_SYM = 662,
    PLUGIN_SYM = 663,
    POINT_SYM = 664,
    POLYGON = 665,
    PORT_SYM = 666,
    POSITION_SYM = 667,
    PRECISION = 668,
    PREPARE_SYM = 669,
    PRESERVE_SYM = 670,
    PREV_SYM = 671,
    PRIMARY_SYM = 672,
    PRIVILEGES = 673,
    PROCEDURE_SYM = 674,
    PROCESS = 675,
    PROCESSLIST_SYM = 676,
    PROFILE_SYM = 677,
    PROFILES_SYM = 678,
    PROXY_SYM = 679,
    PURGE = 680,
    QUARTER_SYM = 681,
    QUERY_SYM = 682,
    QUICK = 683,
    RANGE_SYM = 684,
    READS_SYM = 685,
    READ_ONLY_SYM = 686,
    READ_SYM = 687,
    READ_WRITE_SYM = 688,
    REAL = 689,
    REBUILD_SYM = 690,
    RECOVER_SYM = 691,
    REDOFILE_SYM = 692,
    REDO_BUFFER_SIZE_SYM = 693,
    REDUNDANT_SYM = 694,
    REFERENCES = 695,
    REGEXP = 696,
    RELAY = 697,
    RELAYLOG_SYM = 698,
    RELAY_LOG_FILE_SYM = 699,
    RELAY_LOG_POS_SYM = 700,
    RELAY_THREAD = 701,
    RELEASE_SYM = 702,
    RELOAD = 703,
    REMOVE_SYM = 704,
    RENAME = 705,
    REORGANIZE_SYM = 706,
    REPAIR = 707,
    REPEATABLE_SYM = 708,
    REPEAT_SYM = 709,
    REPLACE = 710,
    REPLICATION = 711,
    REQUIRE_SYM = 712,
    RESET_SYM = 713,
    RESIGNAL_SYM = 714,
    RESOURCES = 715,
    RESTORE_SYM = 716,
    RESTRICT = 717,
    RESUME_SYM = 718,
    RETURNED_SQLSTATE_SYM = 719,
    RETURNING_SYM = 720,
    RETURNS_SYM = 721,
    RETURN_SYM = 722,
    REVERSE_SYM = 723,
    REVOKE = 724,
    RIGHT = 725,
    ROLE_SYM = 726,
    ROLLBACK_SYM = 727,
    ROLLUP_SYM = 728,
    ROUTINE_SYM = 729,
    ROWS_SYM = 730,
    ROW_FORMAT_SYM = 731,
    ROW_SYM = 732,
    ROW_COUNT_SYM = 733,
    RTREE_SYM = 734,
    SAVEPOINT_SYM = 735,
    SCHEDULE_SYM = 736,
    SCHEMA_NAME_SYM = 737,
    SECOND_MICROSECOND_SYM = 738,
    SECOND_SYM = 739,
    SECURITY_SYM = 740,
    SELECT_SYM = 741,
    SENSITIVE_SYM = 742,
    SEPARATOR_SYM = 743,
    SERIALIZABLE_SYM = 744,
    SERIAL_SYM = 745,
    SESSION_SYM = 746,
    SERVER_SYM = 747,
    SERVER_OPTIONS = 748,
    SET = 749,
    SET_VAR = 750,
    SHARE_SYM = 751,
    SHIFT_LEFT = 752,
    SHIFT_RIGHT = 753,
    SHOW = 754,
    SHUTDOWN = 755,
    SIGNAL_SYM = 756,
    SIGNED_SYM = 757,
    SIMPLE_SYM = 758,
    SLAVE = 759,
    SLAVES = 760,
    SLAVE_POS_SYM = 761,
    SLOW = 762,
    SMALLINT = 763,
    SNAPSHOT_SYM = 764,
    SOCKET_SYM = 765,
    SOFT_SYM = 766,
    SONAME_SYM = 767,
    SOUNDS_SYM = 768,
    SOURCE_SYM = 769,
    SPATIAL_SYM = 770,
    SPECIFIC_SYM = 771,
    SQLEXCEPTION_SYM = 772,
    SQLSTATE_SYM = 773,
    SQLWARNING_SYM = 774,
    SQL_BIG_RESULT = 775,
    SQL_BUFFER_RESULT = 776,
    SQL_CACHE_SYM = 777,
    SQL_CALC_FOUND_ROWS = 778,
    SQL_NO_CACHE_SYM = 779,
    SQL_SMALL_RESULT = 780,
    SQL_SYM = 781,
    SQL_THREAD = 782,
    REF_SYSTEM_ID_SYM = 783,
    SSL_SYM = 784,
    STARTING = 785,
    STARTS_SYM = 786,
    START_SYM = 787,
    STATEMENT_SYM = 788,
    STATS_AUTO_RECALC_SYM = 789,
    STATS_PERSISTENT_SYM = 790,
    STATS_SAMPLE_PAGES_SYM = 791,
    STATUS_SYM = 792,
    STDDEV_SAMP_SYM = 793,
    STD_SYM = 794,
    STOP_SYM = 795,
    STORAGE_SYM = 796,
    STRAIGHT_JOIN = 797,
    STRING_SYM = 798,
    SUBCLASS_ORIGIN_SYM = 799,
    SUBDATE_SYM = 800,
    SUBJECT_SYM = 801,
    SUBPARTITIONS_SYM = 802,
    SUBPARTITION_SYM = 803,
    SUBSTRING = 804,
    SUM_SYM = 805,
    SUPER_SYM = 806,
    SUSPEND_SYM = 807,
    SWAPS_SYM = 808,
    SWITCHES_SYM = 809,
    SYSDATE = 810,
    TABLES = 811,
    TABLESPACE = 812,
    TABLE_REF_PRIORITY = 813,
    TABLE_SYM = 814,
    TABLE_CHECKSUM_SYM = 815,
    TABLE_NAME_SYM = 816,
    TEMPORARY = 817,
    TEMPTABLE_SYM = 818,
    TERMINATED = 819,
    TEXT_STRING = 820,
    TEXT_SYM = 821,
    THAN_SYM = 822,
    THEN_SYM = 823,
    TIMESTAMP = 824,
    TIMESTAMP_ADD = 825,
    TIMESTAMP_DIFF = 826,
    TIME_SYM = 827,
    TINYBLOB = 828,
    TINYINT = 829,
    TINYTEXT = 830,
    TO_SYM = 831,
    TRAILING = 832,
    TRANSACTION_SYM = 833,
    TRANSACTIONAL_SYM = 834,
    TRIGGERS_SYM = 835,
    TRIGGER_SYM = 836,
    TRIM = 837,
    TRUE_SYM = 838,
    TRUNCATE_SYM = 839,
    TYPES_SYM = 840,
    TYPE_SYM = 841,
    UDF_RETURNS_SYM = 842,
    ULONGLONG_NUM = 843,
    UNCOMMITTED_SYM = 844,
    UNDEFINED_SYM = 845,
    UNDERSCORE_CHARSET = 846,
    UNDOFILE_SYM = 847,
    UNDO_BUFFER_SIZE_SYM = 848,
    UNDO_SYM = 849,
    UNICODE_SYM = 850,
    UNINSTALL_SYM = 851,
    UNION_SYM = 852,
    UNIQUE_SYM = 853,
    UNKNOWN_SYM = 854,
    UNLOCK_SYM = 855,
    UNSIGNED = 856,
    UNTIL_SYM = 857,
    UPDATE_SYM = 858,
    UPGRADE_SYM = 859,
    USAGE = 860,
    USER_SYM = 861,
    USE_FRM = 862,
    USE_SYM = 863,
    USING = 864,
    UTC_DATE_SYM = 865,
    UTC_TIMESTAMP_SYM = 866,
    UTC_TIME_SYM = 867,
    VALUES = 868,
    VALUE_SYM = 869,
    VARBINARY = 870,
    VARCHAR = 871,
    VARIABLES = 872,
    VARIANCE_SYM = 873,
    VARYING = 874,
    VAR_SAMP_SYM = 875,
    VIA_SYM = 876,
    VIEW_SYM = 877,
    VIRTUAL_SYM = 878,
    WAIT_SYM = 879,
    WARNINGS = 880,
    WEEK_SYM = 881,
    WEIGHT_STRING_SYM = 882,
    WHEN_SYM = 883,
    WHERE = 884,
    WHILE_SYM = 885,
    WITH = 886,
    WITH_CUBE_SYM = 887,
    WITH_ROLLUP_SYM = 888,
    WORK_SYM = 889,
    WRAPPER_SYM = 890,
    WRITE_SYM = 891,
    X509_SYM = 892,
    XA_SYM = 893,
    XML_SYM = 894,
    XOR = 895,
    YEAR_MONTH_SYM = 896,
    YEAR_SYM = 897,
    ZEROFILL = 898,
    IMPOSSIBLE_ACTION = 899,
    CONDITIONLESS_JOIN = 900,
    ON_SYM = 901
  };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define ATOMIC_SYM 280
#define AUTHORS_SYM 281
#define AUTOEXTEND_SIZE_SYM 282
#define AUTO_INC 283
#define AUTO_SYM 284
#define AVG_ROW_LENGTH 285
#define AVG_SYM 286
#define BACKUP_SYM 287
#define BEFORE_SYM 288
#define BEGIN_SYM 289
#define BETWEEN_SYM 290
#define BIGINT 291
#define BINARY 292
#define BINLOG_SYM 293
#define BIN_NUM 294
#define BIT_AND 295
#define BIT_OR 296
#define BIT_SYM 297
#define BIT_XOR 298
#define BLOB_SYM 299
#define BLOCK_SYM 300
#define BOOLEAN_SYM 301
#define BOOL_SYM 302
#define BOTH 303
#define BTREE_SYM 304
#define BY 305
#define BYTE_SYM 306
#define CACHE_SYM 307
#define CALL_SYM 308
#define CASCADE 309
#define CASCADED 310
#define CASE_SYM 311
#define CAST_SYM 312
#define CATALOG_NAME_SYM 313
#define CHAIN_SYM 314
#define CHANGE 315
#define CHANGED 316
#define CHARSET 317
#define CHAR_SYM 318
#define CHECKPOINT_SYM 319
#define CHECKSUM_SYM 320
#define CHECK_SYM 321
#define CIPHER_SYM 322
#define CLASS_ORIGIN_SYM 323
#define CLIENT_SYM 324
#define CLOSE_SYM 325
#define COALESCE 326
#define CODE_SYM 327
#define COLLATE_SYM 328
#define COLLATION_SYM 329
#define COLUMNS 330
#define COLUMN_ADD_SYM 331
#define COLUMN_CHECK_SYM 332
#define COLUMN_CREATE_SYM 333
#define COLUMN_DELETE_SYM 334
#define COLUMN_GET_SYM 335
#define COLUMN_SYM 336
#define COLUMN_NAME_SYM 337
#define COMMENT_SYM 338
#define COMMITTED_SYM 339
#define COMMIT_SYM 340
#define COMPACT_SYM 341
#define COMPLETION_SYM 342
#define COMPRESSED_SYM 343
#define CONCURRENT 344
#define CONDITION_SYM 345
#define CONNECTION_SYM 346
#define CONSISTENT_SYM 347
#define CONSTRAINT 348
#define CONSTRAINT_CATALOG_SYM 349
#define CONSTRAINT_NAME_SYM 350
#define CONSTRAINT_SCHEMA_SYM 351
#define CONTAINS_SYM 352
#define CONTEXT_SYM 353
#define CONTINUE_SYM 354
#define CONTRIBUTORS_SYM 355
#define CONVERT_SYM 356
#define COUNT_SYM 357
#define CPU_SYM 358
#define CREATE 359
#define CROSS 360
#define CUBE_SYM 361
#define CURDATE 362
#define CURRENT_SYM 363
#define CURRENT_USER 364
#define CURRENT_ROLE 365
#define CURRENT_POS_SYM 366
#define CURSOR_SYM 367
#define CURSOR_NAME_SYM 368
#define CURTIME 369
#define DATABASE 370
#define DATABASES 371
#define DATAFILE_SYM 372
#define DATA_SYM 373
#define DATETIME 374
#define DATE_ADD_INTERVAL 375
#define DATE_SUB_INTERVAL 376
#define DATE_SYM 377
#define DAY_HOUR_SYM 378
#define DAY_MICROSECOND_SYM 379
#define DAY_MINUTE_SYM 380
#define DAY_SECOND_SYM 381
#define DAY_SYM 382
#define DEALLOCATE_SYM 383
#define DECIMAL_NUM 384
#define DECIMAL_SYM 385
#define DECLARE_SYM 386
#define DEFAULT 387
#define DEFINER_SYM 388
#define DELAYED_SYM 389
#define DELAY_KEY_WRITE_SYM 390
#define DELETE_SYM 391
#define DELETE_DOMAIN_ID_SYM 392
#define DESC 393
#define DESCRIBE 394
#define DES_KEY_FILE 395
#define DETERMINISTIC_SYM 396
#define DIAGNOSTICS_SYM 397
#define DIRECTORY_SYM 398
#define DISABLE_SYM 399
#define DISCARD 400
#define DISK_SYM 401
#define DISTINCT 402
#define DIV_SYM 403
#define DOUBLE_SYM 404
#define DO_DOMAIN_IDS_SYM 405
#define DO_SYM 406
#define DROP 407
#define DUAL_SYM 408
#define DUMPFILE 409
#define DUPLICATE_SYM 410
#define DYNAMIC_SYM 411
#define EACH_SYM 412
#define ELSE 413
#define ELSEIF_SYM 414
#define ENABLE_SYM 415
#define ENCLOSED 416
#define END 417
#define ENDS_SYM 418
#define END_OF_INPUT 419
#define ENGINES_SYM 420
#define ENGINE_SYM 421
#define ENUM 422
#define EQUAL_SYM 423
#define ERROR_SYM 424
#define ERRORS 425
#define ESCAPED 426
#define ESCAPE_SYM 427
#define EVENTS_SYM 428
#define EVENT_SYM 429
#define EVERY_SYM 430
#define EXCHANGE_SYM 431
#define EXAMINED_SYM 432
#define EXECUTE_SYM 433
#define EXISTS 434
#define EXIT_SYM 435
#define EXPANSION_SYM 436
#define EXPORT_SYM 437
#define EXTENDED_SYM 438
#define EXTENT_SIZE_SYM 439
#define EXTRACT_SYM 440
#define FALSE_SYM 441
#define FAST_SYM 442
#define FAULTS_SYM 443
#define FETCH_SYM 444
#define FILE_SYM 445
#define FIRST_SYM 446
#define FIXED_SYM 447
#define FLOAT_NUM 448
#define FLOAT_SYM 449
#define FLUSH_SYM 450
#define FORCE_SYM 451
#define FOREIGN 452
#define FOR_SYM 453
#define FORMAT_SYM 454
#define FOUND_SYM 455
#define FROM 456
#define FULL 457
#define FULLTEXT_SYM 458
#define FUNCTION_SYM 459
#define GE 460
#define GENERAL 461
#define GENERATED_SYM 462
#define GEOMETRYCOLLECTION 463
#define GEOMETRY_SYM 464
#define GET_FORMAT 465
#define GET_SYM 466
#define GLOBAL_SYM 467
#define GRANT 468
#define GRANTS 469
#define GROUP_SYM 470
#define GROUP_CONCAT_SYM 471
#define HANDLER_SYM 472
#define HARD_SYM 473
#define HASH_SYM 474
#define HAVING 475
#define HELP_SYM 476
#define HEX_NUM 477
#define HEX_STRING 478
#define HIGH_PRIORITY 479
#define HOST_SYM 480
#define HOSTS_SYM 481
#define HOUR_MICROSECOND_SYM 482
#define HOUR_MINUTE_SYM 483
#define HOUR_SECOND_SYM 484
#define HOUR_SYM 485
#define ID_SYM 486
#define IDENT 487
#define IDENTIFIED_SYM 488
#define IDENT_QUOTED 489
#define IF_SYM 490
#define IGNORE_DOMAIN_IDS_SYM 491
#define IGNORE_SYM 492
#define IGNORE_SERVER_IDS_SYM 493
#define IMPORT 494
#define INDEXES 495
#define INDEX_SYM 496
#define INFILE 497
#define INITIAL_SIZE_SYM 498
#define INNER_SYM 499
#define INOUT_SYM 500
#define INSENSITIVE_SYM 501
#define INSERT 502
#define INSERT_METHOD 503
#define INSTALL_SYM 504
#define INTERVAL_SYM 505
#define INTO 506
#define INT_SYM 507
#define INVOKER_SYM 508
#define IN_SYM 509
#define IO_SYM 510
#define IPC_SYM 511
#define IS 512
#define ISOLATION 513
#define ISSUER_SYM 514
#define ITERATE_SYM 515
#define JOIN_SYM 516
#define KEYS 517
#define KEY_BLOCK_SIZE 518
#define KEY_SYM 519
#define KILL_SYM 520
#define LANGUAGE_SYM 521
#define LAST_SYM 522
#define LAST_VALUE 523
#define LE 524
#define LEADING 525
#define LEAVES 526
#define LEAVE_SYM 527
#define LEFT 528
#define LESS_SYM 529
#define LEVEL_SYM 530
#define LEX_HOSTNAME 531
#define LIKE 532
#define LIMIT 533
#define LINEAR_SYM 534
#define LINES 535
#define LINESTRING 536
#define LIST_SYM 537
#define LOAD 538
#define LOCAL_SYM 539
#define LOCATOR_SYM 540
#define LOCKS_SYM 541
#define LOCK_SYM 542
#define LOGFILE_SYM 543
#define LOGS_SYM 544
#define LONGBLOB 545
#define LONGTEXT 546
#define LONG_NUM 547
#define LONG_SYM 548
#define LOOP_SYM 549
#define LOW_PRIORITY 550
#define MASTER_CONNECT_RETRY_SYM 551
#define MASTER_GTID_POS_SYM 552
#define MASTER_HOST_SYM 553
#define MASTER_LOG_FILE_SYM 554
#define MASTER_LOG_POS_SYM 555
#define MASTER_PASSWORD_SYM 556
#define MASTER_PORT_SYM 557
#define MASTER_SERVER_ID_SYM 558
#define MASTER_SSL_CAPATH_SYM 559
#define MASTER_SSL_CA_SYM 560
#define MASTER_SSL_CERT_SYM 561
#define MASTER_SSL_CIPHER_SYM 562
#define MASTER_SSL_CRL_SYM 563
#define MASTER_SSL_CRLPATH_SYM 564
#define MASTER_SSL_KEY_SYM 565
#define MASTER_SSL_SYM 566
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 567
#define MASTER_SYM 568
#define MASTER_USER_SYM 569
#define MASTER_USE_GTID_SYM 570
#define MASTER_HEARTBEAT_PERIOD_SYM 571
#define MATCH 572
#define MAX_CONNECTIONS_PER_HOUR 573
#define MAX_QUERIES_PER_HOUR 574
#define MAX_ROWS 575
#define MAX_SIZE_SYM 576
#define MAX_SYM 577
#define MAX_UPDATES_PER_HOUR 578
#define MAX_STATEMENT_TIME_SYM 579
#define MAX_USER_CONNECTIONS_SYM 580
#define MAX_VALUE_SYM 581
#define MEDIUMBLOB 582
#define MEDIUMINT 583
#define MEDIUMTEXT 584
#define MEDIUM_SYM 585
#define MEMORY_SYM 586
#define MERGE_SYM 587
#define MESSAGE_TEXT_SYM 588
#define MICROSECOND_SYM 589
#define MIGRATE_SYM 590
#define MINUTE_MICROSECOND_SYM 591
#define MINUTE_SECOND_SYM 592
#define MINUTE_SYM 593
#define MIN_ROWS 594
#define MIN_SYM 595
#define MODE_SYM 596
#define MODIFIES_SYM 597
#define MODIFY_SYM 598
#define MOD_SYM 599
#define MONTH_SYM 600
#define MULTILINESTRING 601
#define MULTIPOINT 602
#define MULTIPOLYGON 603
#define MUTEX_SYM 604
#define MYSQL_SYM 605
#define MYSQL_ERRNO_SYM 606
#define NAMES_SYM 607
#define NAME_SYM 608
#define NATIONAL_SYM 609
#define NATURAL 610
#define NCHAR_STRING 611
#define NCHAR_SYM 612
#define NE 613
#define NEG 614
#define NEW_SYM 615
#define NEXT_SYM 616
#define NODEGROUP_SYM 617
#define NONE_SYM 618
#define NOT2_SYM 619
#define NOT_SYM 620
#define NOW_SYM 621
#define NO_SYM 622
#define NO_WAIT_SYM 623
#define NO_WRITE_TO_BINLOG 624
#define NULL_SYM 625
#define NUM 626
#define NUMBER_SYM 627
#define NUMERIC_SYM 628
#define NVARCHAR_SYM 629
#define OFFSET_SYM 630
#define OLD_PASSWORD_SYM 631
#define ON 632
#define ONE_SYM 633
#define ONLY_SYM 634
#define ONLINE_SYM 635
#define OPEN_SYM 636
#define OPTIMIZE 637
#define OPTIONS_SYM 638
#define OPTION 639
#define OPTIONALLY 640
#define OR2_SYM 641
#define ORDER_SYM 642
#define OR_OR_SYM 643
#define OR_SYM 644
#define OUTER 645
#define OUTFILE 646
#define OUT_SYM 647
#define OWNER_SYM 648
#define PACK_KEYS_SYM 649
#define PAGE_SYM 650
#define PAGE_CHECKSUM_SYM 651
#define PARAM_MARKER 652
#define PARSER_SYM 653
#define PARSE_VCOL_EXPR_SYM 654
#define PARTIAL 655
#define PARTITION_SYM 656
#define PARTITIONS_SYM 657
#define PARTITIONING_SYM 658
#define PASSWORD_SYM 659
#define PERSISTENT_SYM 660
#define PHASE_SYM 661
#define PLUGINS_SYM 662
#define PLUGIN_SYM 663
#define POINT_SYM 664
#define POLYGON 665
#define PORT_SYM 666
#define POSITION_SYM 667
#define PRECISION 668
#define PREPARE_SYM 669
#define PRESERVE_SYM 670
#define PREV_SYM 671
#define PRIMARY_SYM 672
#define PRIVILEGES 673
#define PROCEDURE_SYM 674
#define PROCESS 675
#define PROCESSLIST_SYM 676
#define PROFILE_SYM 677
#define PROFILES_SYM 678
#define PROXY_SYM 679
#define PURGE 680
#define QUARTER_SYM 681
#define QUERY_SYM 682
#define QUICK 683
#define RANGE_SYM 684
#define READS_SYM 685
#define READ_ONLY_SYM 686
#define READ_SYM 687
#define READ_WRITE_SYM 688
#define REAL 689
#define REBUILD_SYM 690
#define RECOVER_SYM 691
#define REDOFILE_SYM 692
#define REDO_BUFFER_SIZE_SYM 693
#define REDUNDANT_SYM 694
#define REFERENCES 695
#define REGEXP 696
#define RELAY 697
#define RELAYLOG_SYM 698
#define RELAY_LOG_FILE_SYM 699
#define RELAY_LOG_POS_SYM 700
#define RELAY_THREAD 701
#define RELEASE_SYM 702
#define RELOAD 703
#define REMOVE_SYM 704
#define RENAME 705
#define REORGANIZE_SYM 706
#define REPAIR 707
#define REPEATABLE_SYM 708
#define REPEAT_SYM 709
#define REPLACE 710
#define REPLICATION 711
#define REQUIRE_SYM 712
#define RESET_SYM 713
#define RESIGNAL_SYM 714
#define RESOURCES 715
#define RESTORE_SYM 716
#define RESTRICT 717
#define RESUME_SYM 718
#define RETURNED_SQLSTATE_SYM 719
#define RETURNING_SYM 720
#define RETURNS_SYM 721
#define RETURN_SYM 722
#define REVERSE_SYM 723
#define REVOKE 724
#define RIGHT 725
#define ROLE_SYM 726
#define ROLLBACK_SYM 727
#define ROLLUP_SYM 728
#define ROUTINE_SYM 729
#define ROWS_SYM 730
#define ROW_FORMAT_SYM 731
#define ROW_SYM 732
#define ROW_COUNT_SYM 733
#define RTREE_SYM 734
#define SAVEPOINT_SYM 735
#define SCHEDULE_SYM 736
#define SCHEMA_NAME_SYM 737
#define SECOND_MICROSECOND_SYM 738
#define SECOND_SYM 739
#define SECURITY_SYM 740
#define SELECT_SYM 741
#define SENSITIVE_SYM 742
#define SEPARATOR_SYM 743
#define SERIALIZABLE_SYM 744
#define SERIAL_SYM 745
#define SESSION_SYM 746
#define SERVER_SYM 747
#define SERVER_OPTIONS 748
#define SET 749
#define SET_VAR 750
#define SHARE_SYM 751
#define SHIFT_LEFT 752
#define SHIFT_RIGHT 753
#define SHOW 754
#define SHUTDOWN 755
#define SIGNAL_SYM 756
#define SIGNED_SYM 757
#define SIMPLE_SYM 758
#define SLAVE 759
#define SLAVES 760
#define SLAVE_POS_SYM 761
#define SLOW 762
#define SMALLINT 763
#define SNAPSHOT_SYM 764
#define SOCKET_SYM 765
#define SOFT_SYM 766
#define SONAME_SYM 767
#define SOUNDS_SYM 768
#define SOURCE_SYM 769
#define SPATIAL_SYM 770
#define SPECIFIC_SYM 771
#define SQLEXCEPTION_SYM 772
#define SQLSTATE_SYM 773
#define SQLWARNING_SYM 774
#define SQL_BIG_RESULT 775
#define SQL_BUFFER_RESULT 776
#define SQL_CACHE_SYM 777
#define SQL_CALC_FOUND_ROWS 778
#define SQL_NO_CACHE_SYM 779
#define SQL_SMALL_RESULT 780
#define SQL_SYM 781
#define SQL_THREAD 782
#define REF_SYSTEM_ID_SYM 783
#define SSL_SYM 784
#define STARTING 785
#define STARTS_SYM 786
#define START_SYM 787
#define STATEMENT_SYM 788
#define STATS_AUTO_RECALC_SYM 789
#define STATS_PERSISTENT_SYM 790
#define STATS_SAMPLE_PAGES_SYM 791
#define STATUS_SYM 792
#define STDDEV_SAMP_SYM 793
#define STD_SYM 794
#define STOP_SYM 795
#define STORAGE_SYM 796
#define STRAIGHT_JOIN 797
#define STRING_SYM 798
#define SUBCLASS_ORIGIN_SYM 799
#define SUBDATE_SYM 800
#define SUBJECT_SYM 801
#define SUBPARTITIONS_SYM 802
#define SUBPARTITION_SYM 803
#define SUBSTRING 804
#define SUM_SYM 805
#define SUPER_SYM 806
#define SUSPEND_SYM 807
#define SWAPS_SYM 808
#define SWITCHES_SYM 809
#define SYSDATE 810
#define TABLES 811
#define TABLESPACE 812
#define TABLE_REF_PRIORITY 813
#define TABLE_SYM 814
#define TABLE_CHECKSUM_SYM 815
#define TABLE_NAME_SYM 816
#define TEMPORARY 817
#define TEMPTABLE_SYM 818
#define TERMINATED 819
#define TEXT_STRING 820
#define TEXT_SYM 821
#define THAN_SYM 822
#define THEN_SYM 823
#define TIMESTAMP 824
#define TIMESTAMP_ADD 825
#define TIMESTAMP_DIFF 826
#define TIME_SYM 827
#define TINYBLOB 828
#define TINYINT 829
#define TINYTEXT 830
#define TO_SYM 831
#define TRAILING 832
#define TRANSACTION_SYM 833
#define TRANSACTIONAL_SYM 834
#define TRIGGERS_SYM 835
#define TRIGGER_SYM 836
#define TRIM 837
#define TRUE_SYM 838
#define TRUNCATE_SYM 839
#define TYPES_SYM 840
#define TYPE_SYM 841
#define UDF_RETURNS_SYM 842
#define ULONGLONG_NUM 843
#define UNCOMMITTED_SYM 844
#define UNDEFINED_SYM 845
#define UNDERSCORE_CHARSET 846
#define UNDOFILE_SYM 847
#define UNDO_BUFFER_SIZE_SYM 848
#define UNDO_SYM 849
#define UNICODE_SYM 850
#define UNINSTALL_SYM 851
#define UNION_SYM 852
#define UNIQUE_SYM 853
#define UNKNOWN_SYM 854
#define UNLOCK_SYM 855
#define UNSIGNED 856
#define UNTIL_SYM 857
#define UPDATE_SYM 858
#define UPGRADE_SYM 859
#define USAGE 860
#define USER_SYM 861
#define USE_FRM 862
#define USE_SYM 863
#define USING 864
#define UTC_DATE_SYM 865
#define UTC_TIMESTAMP_SYM 866
#define UTC_TIME_SYM 867
#define VALUES 868
#define VALUE_SYM 869
#define VARBINARY 870
#define VARCHAR 871
#define VARIABLES 872
#define VARIANCE_SYM 873
#define VARYING 874
#define VAR_SAMP_SYM 875
#define VIA_SYM 876
#define VIEW_SYM 877
#define VIRTUAL_SYM 878
#define WAIT_SYM 879
#define WARNINGS 880
#define WEEK_SYM 881
#define WEIGHT_STRING_SYM 882
#define WHEN_SYM 883
#define WHERE 884
#define WHILE_SYM 885
#define WITH 886
#define WITH_CUBE_SYM 887
#define WITH_ROLLUP_SYM 888
#define WORK_SYM 889
#define WRAPPER_SYM 890
#define WRITE_SYM 891
#define X509_SYM 892
#define XA_SYM 893
#define XML_SYM 894
#define XOR 895
#define YEAR_MONTH_SYM 896
#define YEAR_SYM 897
#define ZEROFILL 898
#define IMPOSSIBLE_ACTION 899
#define CONDITIONLESS_JOIN 900
#define ON_SYM 901

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:355  */

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;

  /* structs */
  LEX_STRING lex_str;
  LEX_SYMBOL symbol;
  struct sys_var_with_base variable;
  struct { int vars, conds, hndlrs, curs; } spblock;

  /* pointers */
  CHARSET_INFO *charset;
  Condition_information_item *cond_info_item;
  DYNCALL_CREATE_DEF *dyncol_def;
  Diagnostics_information *diag_info;
  Item *item;
  Item_num *item_num;
  Item_param *item_param;
  Key_part_spec *key_part;
  LEX *lex;
  LEX_STRING *lex_str_ptr;
  LEX_USER *lex_user;
  List<Condition_information_item> *cond_info_list;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  List<Item> *item_list;
  List<Statement_information_item> *stmt_info_list;
  List<String> *string_list;
  Statement_information_item *stmt_info_item;
  String *string;
  TABLE_LIST *table_list;
  Table_ident *table;
  char *simple_string;
  chooser_compare_func_creator boolfunc2creator;
  class my_var *myvar;
  class sp_condition_value *spcondvalue;
  class sp_head *sphead;
  class sp_label *splabel;
  class sp_name *spname;
  class sp_variable *spvar;
  handlerton *db_type;
  st_select_lex *select_lex;
  struct p_elem_val *p_elem_value;
  udf_func *udf;

  /* enums */
  enum Cast_target cast_type;
  enum Condition_information_item::Name cond_info_item_name;
  enum enum_diag_condition_item_name diag_condition_item_name;
  enum Diagnostics_information::Which_area diag_area;
  enum Field::geometry_type geom_type;
  enum enum_fk_option m_fk_option;
  enum Item_udftype udf_type;
  enum Key::Keytype key_type;
  enum Statement_information_item::Name stmt_info_item_name;
  enum enum_field_types field_type;
  enum enum_filetype filetype;
  enum enum_tx_isolation tx_isolation;
  enum enum_var_type var_type;
  enum enum_yes_no_unknown m_yes_no_unk;
  enum ha_choice choice;
  enum ha_key_alg key_alg;
  enum ha_rkey_function ha_rkey_mode;
  enum index_hint_type index_hint;
  enum interval_type interval, interval_time_st;
  enum row_type row_type;
  enum sp_variable::enum_mode spvar_mode;
  enum thr_lock_type lock_type;
  enum enum_mysql_timestamp_type date_time_type;
  DDL_options_st object_ddl_options;

#line 2401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int MYSQLparse (THD *thd);

#endif /* !YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 1021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:358  */

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);

#line 2418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  636
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   67023

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  669
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  1031
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2861
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  4906

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   901

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   662,     2,     2,     2,   656,   651,     2,
     659,   660,   654,   653,   661,   652,   667,   655,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   668,   665,
     649,   647,   648,     2,   666,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   657,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   663,   650,   664,   658,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  2025,  2025,  2035,  2034,  2059,  2066,  2068,  2072,  2073,
    2074,  2079,  2080,  2081,  2082,  2083,  2084,  2085,  2086,  2087,
    2088,  2089,  2090,  2091,  2092,  2093,  2094,  2095,  2096,  2097,
    2098,  2099,  2100,  2101,  2102,  2103,  2104,  2105,  2106,  2107,
    2108,  2109,  2110,  2111,  2112,  2113,  2114,  2115,  2116,  2117,
    2118,  2119,  2120,  2121,  2122,  2123,  2124,  2125,  2126,  2127,
    2128,  2129,  2130,  2131,  2132,  2133,  2134,  2138,  2147,  2148,
    2152,  2161,  2167,  2177,  2176,  2186,  2188,  2192,  2193,  2197,
    2211,  2210,  2227,  2226,  2235,  2236,  2240,  2244,  2248,  2252,
    2256,  2260,  2265,  2269,  2273,  2277,  2281,  2285,  2290,  2294,
    2299,  2326,  2330,  2334,  2339,  2342,  2344,  2345,  2349,  2355,
    2357,  2358,  2362,  2368,  2370,  2371,  2375,  2382,  2386,  2401,
    2405,  2411,  2417,  2423,  2433,  2437,  2441,  2455,  2454,  2485,
    2482,  2495,  2493,  2505,  2503,  2514,  2513,  2526,  2525,  2534,
    2539,  2545,  2549,  2553,  2553,  2560,  2559,  2571,  2572,  2576,
    2581,  2586,  2591,  2596,  2601,  2606,  2614,  2613,  2645,  2644,
    2651,  2658,  2659,  2665,  2671,  2681,  2687,  2693,  2695,  2702,
    2703,  2707,  2717,  2718,  2726,  2726,  2770,  2784,  2795,  2813,
    2814,  2818,  2819,  2824,  2826,  2828,  2830,  2832,  2834,  2836,
    2842,  2843,  2847,  2851,  2859,  2858,  2871,  2873,  2876,  2878,
    2882,  2886,  2893,  2895,  2899,  2900,  2905,  2904,  2937,  2939,
    2943,  2944,  2948,  2952,  2953,  2954,  2955,  2959,  2960,  2964,
    2965,  2970,  2973,  2992,  2991,  3063,  3076,  3075,  3134,  3156,
    3156,  3175,  3176,  3181,  3183,  3188,  3203,  3211,  3215,  3234,
    3235,  3239,  3243,  3249,  3255,  3261,  3270,  3284,  3299,  3305,
    3306,  3312,  3315,  3319,  3327,  3344,  3346,  3364,  3370,  3372,
    3374,  3376,  3378,  3380,  3382,  3384,  3386,  3388,  3390,  3392,
    3397,  3412,  3428,  3429,  3434,  3440,  3449,  3455,  3464,  3472,
    3481,  3490,  3492,  3501,  3506,  3512,  3521,  3529,  3531,  3533,
    3535,  3537,  3539,  3541,  3543,  3545,  3547,  3549,  3551,  3553,
    3558,  3570,  3585,  3586,  3590,  3591,  3592,  3593,  3594,  3595,
    3596,  3597,  3598,  3599,  3600,  3604,  3605,  3606,  3607,  3612,
    3611,  3622,  3622,  3675,  3674,  3699,  3749,  3790,  3809,  3808,
    3828,  3845,  3847,  3848,  3852,  3866,  3883,  3885,  3901,  3883,
    3920,  3922,  3923,  3928,  3927,  3997,  3999,  3997,  4008,  4013,
    4014,  4018,  4019,  4024,  4028,  4023,  4049,  4053,  4048,  4072,
    4082,  4086,  4087,  4092,  4091,  4113,  4112,  4122,  4121,  4132,
    4132,  4172,  4187,  4186,  4218,  4217,  4237,  4251,  4260,  4259,
    4267,  4266,  4275,  4274,  4285,  4284,  4293,  4292,  4302,  4301,
    4312,  4314,  4319,  4321,  4323,  4340,  4345,  4351,  4358,  4359,
    4367,  4373,  4382,  4388,  4394,  4395,  4399,  4399,  4404,  4405,
    4406,  4410,  4411,  4412,  4416,  4420,  4421,  4422,  4426,  4427,
    4428,  4429,  4430,  4431,  4432,  4433,  4437,  4441,  4442,  4443,
    4447,  4448,  4449,  4450,  4451,  4455,  4459,  4460,  4461,  4465,
    4466,  4467,  4468,  4469,  4470,  4471,  4475,  4479,  4480,  4481,
    4485,  4486,  4487,  4492,  4500,  4508,  4516,  4529,  4542,  4547,
    4552,  4560,  4568,  4576,  4584,  4592,  4600,  4608,  4618,  4628,
    4638,  4640,  4644,  4649,  4659,  4660,  4699,  4698,  4701,  4707,
    4707,  4708,  4722,  4723,  4727,  4729,  4728,  4732,  4731,  4737,
    4774,  4775,  4780,  4779,  4798,  4813,  4812,  4829,  4833,  4841,
    4840,  4843,  4845,  4847,  4849,  4854,  4855,  4861,  4862,  4879,
    4880,  4884,  4885,  4889,  4905,  4915,  4926,  4935,  4936,  4949,
    4951,  4950,  4955,  4953,  4964,  4965,  4969,  4984,  5000,  5001,
    5014,  5023,  5045,  5046,  5051,  5050,  5075,  5087,  5099,  5098,
    5113,  5112,  5129,  5151,  5155,  5184,  5196,  5197,  5202,  5213,
    5201,  5238,  5239,  5243,  5256,  5277,  5290,  5316,  5317,  5322,
    5321,  5359,  5368,  5369,  5373,  5374,  5378,  5380,  5386,  5392,
    5394,  5396,  5398,  5400,  5402,  5412,  5427,  5411,  5441,  5442,
    5446,  5447,  5451,  5452,  5456,  5457,  5462,  5465,  5473,  5476,
    5483,  5487,  5493,  5495,  5499,  5500,  5504,  5505,  5506,  5510,
    5525,  5530,  5535,  5540,  5545,  5550,  5555,  5570,  5576,  5591,
    5596,  5611,  5617,  5635,  5640,  5645,  5650,  5655,  5660,  5666,
    5665,  5691,  5692,  5693,  5698,  5703,  5708,  5710,  5712,  5714,
    5720,  5725,  5730,  5738,  5746,  5752,  5761,  5769,  5786,  5796,
    5807,  5808,  5809,  5810,  5811,  5812,  5813,  5817,  5818,  5819,
    5823,  5824,  5825,  5826,  5831,  5838,  5839,  5843,  5844,  5848,
    5849,  5854,  5853,  5861,  5860,  5868,  5867,  5875,  5874,  5884,
    5881,  5892,  5890,  5899,  5898,  5933,  5936,  5938,  5942,  5946,
    5947,  5951,  5956,  5969,  5955,  5988,  5989,  5995,  5996,  6001,
    6004,  6008,  6015,  6016,  6020,  6021,  6025,  6031,  6037,  6041,
    6054,  6071,  6072,  6073,  6088,  6093,  6097,  6102,  6107,  6111,
    6116,  6121,  6127,  6132,  6138,  6142,  6147,  6152,  6170,  6172,
    6175,  6192,  6195,  6200,  6205,  6216,  6221,  6226,  6231,  6233,
    6235,  6237,  6239,  6241,  6243,  6245,  6247,  6249,  6251,  6253,
    6262,  6263,  6264,  6270,  6271,  6272,  6273,  6274,  6278,  6282,
    6283,  6287,  6288,  6292,  6293,  6294,  6295,  6296,  6300,  6301,
    6302,  6303,  6304,  6308,  6313,  6315,  6321,  6323,  6331,  6332,
    6334,  6339,  6348,  6349,  6353,  6354,  6358,  6359,  6360,  6364,
    6365,  6366,  6367,  6370,  6371,  6375,  6376,  6380,  6381,  6385,
    6386,  6390,  6391,  6392,  6393,  6400,  6401,  6407,  6413,  6419,
    6425,  6426,  6433,  6441,  6449,  6455,  6464,  6479,  6485,  6490,
    6491,  6495,  6500,  6504,  6505,  6509,  6510,  6514,  6520,  6524,
    6525,  6529,  6537,  6538,  6542,  6543,  6547,  6548,  6552,  6553,
    6554,  6562,  6563,  6564,  6565,  6566,  6570,  6571,  6576,  6575,
    6588,  6589,  6593,  6596,  6597,  6598,  6599,  6603,  6611,  6618,
    6619,  6623,  6633,  6634,  6638,  6639,  6642,  6644,  6648,  6660,
    6661,  6665,  6672,  6685,  6686,  6688,  6690,  6696,  6701,  6707,
    6713,  6720,  6730,  6731,  6732,  6733,  6734,  6738,  6739,  6743,
    6744,  6748,  6749,  6753,  6754,  6755,  6759,  6760,  6764,  6768,
    6780,  6781,  6785,  6786,  6790,  6791,  6795,  6796,  6800,  6801,
    6805,  6806,  6810,  6811,  6815,  6816,  6817,  6820,  6822,  6827,
    6829,  6831,  6839,  6847,  6853,  6861,  6862,  6866,  6870,  6871,
    6881,  6882,  6883,  6887,  6891,  6898,  6904,  6916,  6917,  6921,
    6922,  6926,  6928,  6937,  6951,  6936,  6971,  6970,  6984,  6993,
    6992,  7008,  7007,  7023,  7022,  7038,  7032,  7049,  7048,  7083,
    7088,  7093,  7098,  7104,  7103,  7112,  7113,  7114,  7115,  7119,
    7120,  7132,  7133,  7137,  7138,  7141,  7143,  7151,  7159,  7161,
    7163,  7164,  7172,  7173,  7179,  7188,  7186,  7199,  7212,  7211,
    7224,  7222,  7235,  7242,  7252,  7253,  7280,  7287,  7291,  7297,
    7295,  7314,  7316,  7321,  7329,  7328,  7344,  7348,  7347,  7359,
    7360,  7364,  7380,  7381,  7385,  7393,  7397,  7402,  7407,  7414,
    7421,  7431,  7441,  7452,  7462,  7468,  7474,  7483,  7493,  7509,
    7523,  7528,  7532,  7537,  7538,  7541,  7543,  7544,  7545,  7546,
    7549,  7554,  7562,  7567,  7575,  7576,  7580,  7581,  7585,  7585,
    7588,  7590,  7594,  7595,  7599,  7600,  7608,  7609,  7610,  7614,
    7615,  7620,  7628,  7629,  7630,  7631,  7636,  7635,  7645,  7644,
    7651,  7658,  7668,  7685,  7688,  7695,  7699,  7706,  7710,  7714,
    7721,  7721,  7727,  7728,  7732,  7733,  7734,  7738,  7739,  7748,
    7755,  7756,  7761,  7760,  7772,  7773,  7774,  7778,  7779,  7779,
    7784,  7783,  7804,  7805,  7809,  7810,  7814,  7815,  7816,  7820,
    7821,  7826,  7825,  7846,  7847,  7851,  7856,  7857,  7864,  7866,
    7870,  7872,  7871,  7883,  7885,  7884,  7897,  7898,  7903,  7912,
    7913,  7914,  7918,  7925,  7935,  7943,  7952,  7953,  7953,  7957,
    7956,  7979,  7980,  7984,  7985,  7989,  7990,  7991,  7992,  7993,
    7994,  7998,  7999,  8004,  8003,  8024,  8025,  8026,  8031,  8030,
    8036,  8043,  8049,  8058,  8059,  8063,  8077,  8076,  8089,  8090,
    8094,  8095,  8099,  8109,  8119,  8120,  8125,  8124,  8135,  8136,
    8140,  8141,  8145,  8155,  8166,  8165,  8173,  8173,  8182,  8183,
    8188,  8189,  8198,  8207,  8208,  8212,  8212,  8224,  8229,  8229,
    8238,  8243,  8242,  8257,  8261,  8262,  8283,  8283,  8297,  8308,
    8311,  8313,  8317,  8323,  8330,  8332,  8340,  8341,  8345,  8346,
    8363,  8382,  8384,  8391,  8402,  8403,  8404,  8418,  8423,  8445,
    8451,  8457,  8463,  8464,  8465,  8466,  8467,  8471,  8472,  8473,
    8477,  8478,  8479,  8483,  8484,  8489,  8540,  8547,  8590,  8596,
    8602,  8608,  8614,  8620,  8626,  8632,  8636,  8642,  8648,  8654,
    8660,  8666,  8670,  8676,  8685,  8691,  8699,  8705,  8715,  8721,
    8730,  8740,  8747,  8757,  8763,  8772,  8776,  8782,  8788,  8794,
    8800,  8806,  8812,  8818,  8824,  8830,  8836,  8842,  8848,  8854,
    8860,  8864,  8865,  8869,  8870,  8874,  8875,  8879,  8880,  8884,
    8885,  8886,  8887,  8888,  8889,  8893,  8894,  8899,  8905,  8909,
    8916,  8923,  8930,  8937,  8944,  8950,  8949,  8957,  8964,  8971,
    8979,  8990,  9012,  9019,  9027,  9028,  9029,  9030,  9031,  9032,
    9043,  9044,  9045,  9046,  9047,  9053,  9057,  9063,  9069,  9075,
    9081,  9083,  9090,  9097,  9103,  9127,  9137,  9144,  9152,  9158,
    9165,  9171,  9181,  9188,  9204,  9210,  9216,  9225,  9234,  9240,
    9246,  9252,  9258,  9272,  9283,  9289,  9295,  9301,  9307,  9313,
    9320,  9327,  9333,  9339,  9345,  9351,  9357,  9363,  9369,  9375,
    9381,  9389,  9410,  9417,  9423,  9430,  9437,  9444,  9451,  9457,
    9463,  9470,  9476,  9483,  9489,  9495,  9501,  9507,  9513,  9531,
    9537,  9543,  9550,  9557,  9565,  9572,  9579,  9586,  9593,  9610,
    9616,  9622,  9628,  9634,  9641,  9647,  9653,  9659,  9665,  9671,
    9677,  9684,  9692,  9698,  9704,  9710,  9716,  9724,  9730,  9744,
    9750,  9756,  9764,  9776,  9783,  9798,  9804,  9811,  9818,  9825,
    9832,  9839,  9843,  9863,  9862,  9934,  9972,  9974,  9979,  9980,
    9984,  9985,  9989,  9990,  9994, 10001, 10009, 10036, 10042, 10048,
   10054, 10060, 10066, 10075, 10082, 10084, 10081, 10091, 10102, 10108,
   10114, 10120, 10126, 10132, 10138, 10144, 10150, 10157, 10156, 10176,
   10175, 10187, 10197, 10205, 10221, 10222, 10227, 10232, 10235, 10238,
   10237, 10253, 10255, 10261, 10260, 10277, 10280, 10279, 10283, 10285,
   10287, 10289, 10291, 10293, 10295, 10297, 10303, 10309, 10312, 10311,
   10317, 10318, 10322, 10329, 10337, 10338, 10342, 10349, 10357, 10358,
   10362, 10363, 10367, 10375, 10386, 10387, 10399, 10410, 10411, 10417,
   10418, 10436, 10445, 10443, 10461, 10459, 10470, 10480, 10478, 10496,
   10495, 10505, 10516, 10514, 10533, 10532, 10543, 10555, 10556, 10557,
   10561, 10562, 10570, 10571, 10575, 10590, 10590, 10605, 10641, 10726,
   10737, 10734, 10759, 10772, 10772, 10788, 10787, 10808, 10825, 10808,
   10832, 10836, 10859, 10860, 10865, 10868, 10869, 10870, 10874, 10875,
   10880, 10879, 10885, 10884, 10892, 10893, 10896, 10898, 10898, 10902,
   10902, 10907, 10908, 10912, 10914, 10919, 10920, 10924, 10935, 10948,
   10949, 10950, 10951, 10952, 10953, 10954, 10955, 10956, 10957, 10958,
   10959, 10963, 10964, 10965, 10966, 10967, 10968, 10969, 10970, 10971,
   10975, 10976, 10977, 10978, 10981, 10983, 10984, 10988, 10989, 10997,
   10999, 11003, 11005, 11004, 11018, 11021, 11020, 11035, 11041, 11055,
   11057, 11061, 11063, 11068, 11069, 11086, 11108, 11112, 11113, 11117,
   11129, 11131, 11136, 11135, 11185, 11187, 11192, 11193, 11194, 11198,
   11199, 11203, 11216, 11223, 11228, 11235, 11242, 11249, 11259, 11286,
   11290, 11296, 11302, 11311, 11319, 11323, 11330, 11331, 11335, 11336,
   11337, 11341, 11342, 11343, 11344, 11345, 11346, 11350, 11351, 11352,
   11353, 11354, 11358, 11359, 11360, 11361, 11362, 11366, 11367, 11368,
   11369, 11370, 11374, 11379, 11380, 11384, 11385, 11389, 11391, 11390,
   11428, 11429, 11433, 11434, 11438, 11448, 11448, 11459, 11460, 11463,
   11483, 11487, 11501, 11502, 11507, 11506, 11516, 11526, 11515, 11528,
   11541, 11553, 11552, 11570, 11569, 11578, 11578, 11595, 11601, 11616,
   11632, 11640, 11644, 11649, 11648, 11657, 11662, 11668, 11673, 11678,
   11686, 11687, 11691, 11702, 11715, 11716, 11720, 11732, 11736, 11745,
   11748, 11755, 11756, 11764, 11772, 11763, 11782, 11789, 11781, 11799,
   11807, 11808, 11816, 11820, 11821, 11832, 11833, 11837, 11846, 11847,
   11848, 11850, 11849, 11860, 11862, 11866, 11867, 11869, 11868, 11872,
   11871, 11877, 11878, 11882, 11883, 11887, 11897, 11898, 11902, 11903,
   11908, 11907, 11921, 11922, 11926, 11931, 11939, 11940, 11948, 11950,
   11950, 11958, 11966, 11957, 11988, 11989, 11993, 12001, 12002, 12006,
   12016, 12017, 12024, 12023, 12039, 12050, 12038, 12053, 12052, 12064,
   12063, 12076, 12078, 12082, 12083, 12087, 12100, 12116, 12117, 12121,
   12122, 12126, 12127, 12128, 12133, 12132, 12153, 12155, 12158, 12160,
   12163, 12164, 12167, 12171, 12175, 12179, 12183, 12187, 12191, 12195,
   12199, 12207, 12210, 12220, 12219, 12235, 12242, 12250, 12258, 12266,
   12274, 12282, 12289, 12296, 12302, 12304, 12306, 12315, 12319, 12324,
   12323, 12330, 12329, 12334, 12343, 12350, 12355, 12360, 12365, 12367,
   12369, 12371, 12373, 12375, 12382, 12390, 12392, 12400, 12407, 12414,
   12421, 12427, 12432, 12440, 12448, 12452, 12457, 12464, 12469, 12476,
   12483, 12489, 12496, 12503, 12508, 12513, 12518, 12525, 12547, 12549,
   12551, 12556, 12557, 12560, 12562, 12566, 12567, 12571, 12572, 12576,
   12577, 12581, 12582, 12586, 12587, 12591, 12592, 12600, 12612, 12611,
   12627, 12626, 12636, 12637, 12638, 12639, 12640, 12644, 12645, 12649,
   12656, 12657, 12658, 12662, 12663, 12675, 12676, 12677, 12692, 12691,
   12704, 12703, 12715, 12719, 12720, 12733, 12736, 12735, 12747, 12748,
   12753, 12755, 12757, 12759, 12761, 12763, 12771, 12773, 12775, 12777,
   12782, 12784, 12792, 12794, 12796, 12798, 12814, 12815, 12819, 12820,
   12823, 12825, 12826, 12830, 12846, 12847, 12851, 12850, 12860, 12861,
   12865, 12865, 12869, 12868, 12874, 12878, 12879, 12883, 12884, 12892,
   12891, 12902, 12906, 12910, 12923, 12922, 12937, 12938, 12939, 12942,
   12943, 12944, 12945, 12953, 12957, 12966, 12972, 12984, 12996, 13006,
   13017, 12983, 13025, 13026, 13030, 13031, 13035, 13036, 13044, 13048,
   13049, 13050, 13053, 13055, 13059, 13060, 13064, 13069, 13076, 13081,
   13088, 13090, 13094, 13095, 13099, 13104, 13112, 13113, 13116, 13118,
   13126, 13127, 13131, 13132, 13133, 13137, 13139, 13144, 13145, 13154,
   13155, 13159, 13160, 13164, 13177, 13201, 13213, 13220, 13239, 13247,
   13252, 13265, 13274, 13290, 13307, 13308, 13309, 13317, 13318, 13319,
   13320, 13334, 13340, 13346, 13352, 13358, 13364, 13382, 13392, 13402,
   13408, 13417, 13429, 13435, 13441, 13457, 13458, 13462, 13471, 13486,
   13490, 13533, 13537, 13554, 13558, 13630, 13654, 13684, 13685, 13695,
   13702, 13706, 13712, 13718, 13728, 13734, 13743, 13753, 13754, 13782,
   13796, 13810, 13825, 13826, 13836, 13837, 13847, 13848, 13849, 13853,
   13866, 13896, 13906, 13906, 13908, 13918, 13919, 13920, 13921, 13922,
   13923, 13924, 13925, 13926, 13927, 13928, 13929, 13930, 13931, 13932,
   13933, 13934, 13935, 13936, 13937, 13938, 13939, 13940, 13941, 13942,
   13943, 13944, 13945, 13946, 13947, 13948, 13949, 13950, 13951, 13952,
   13953, 13954, 13955, 13956, 13957, 13958, 13959, 13960, 13961, 13962,
   13963, 13964, 13965, 13966, 13967, 13968, 13969, 13970, 13971, 13972,
   13973, 13974, 13975, 13976, 13977, 13978, 13988, 13989, 13990, 13991,
   13992, 13993, 13994, 13995, 13996, 13997, 13998, 13999, 14000, 14001,
   14002, 14003, 14004, 14005, 14006, 14007, 14008, 14009, 14010, 14011,
   14012, 14013, 14014, 14015, 14016, 14017, 14018, 14019, 14020, 14021,
   14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029, 14030, 14031,
   14032, 14033, 14034, 14035, 14036, 14037, 14042, 14043, 14044, 14045,
   14046, 14047, 14048, 14049, 14050, 14051, 14052, 14053, 14054, 14055,
   14056, 14057, 14058, 14059, 14060, 14061, 14062, 14063, 14064, 14065,
   14066, 14067, 14068, 14069, 14070, 14071, 14072, 14073, 14074, 14075,
   14076, 14077, 14078, 14079, 14080, 14081, 14082, 14083, 14084, 14085,
   14086, 14087, 14088, 14089, 14090, 14091, 14092, 14093, 14094, 14095,
   14096, 14097, 14098, 14099, 14100, 14101, 14102, 14103, 14104, 14105,
   14106, 14107, 14108, 14109, 14110, 14111, 14112, 14113, 14114, 14115,
   14116, 14117, 14118, 14119, 14120, 14121, 14122, 14123, 14124, 14125,
   14126, 14127, 14128, 14129, 14130, 14131, 14132, 14133, 14134, 14135,
   14136, 14137, 14138, 14139, 14140, 14141, 14142, 14143, 14144, 14145,
   14146, 14147, 14148, 14149, 14150, 14151, 14152, 14153, 14154, 14155,
   14156, 14157, 14158, 14159, 14160, 14161, 14162, 14163, 14164, 14165,
   14166, 14167, 14168, 14169, 14170, 14171, 14172, 14173, 14174, 14175,
   14176, 14177, 14178, 14179, 14180, 14181, 14182, 14183, 14184, 14185,
   14186, 14187, 14188, 14189, 14190, 14191, 14192, 14193, 14194, 14195,
   14196, 14197, 14198, 14199, 14200, 14201, 14202, 14203, 14204, 14205,
   14206, 14207, 14208, 14209, 14210, 14211, 14212, 14213, 14214, 14215,
   14216, 14217, 14218, 14219, 14220, 14221, 14222, 14223, 14224, 14225,
   14226, 14227, 14228, 14229, 14230, 14231, 14232, 14233, 14234, 14235,
   14236, 14237, 14238, 14239, 14240, 14241, 14242, 14243, 14244, 14245,
   14246, 14247, 14248, 14249, 14250, 14251, 14252, 14253, 14254, 14255,
   14256, 14257, 14258, 14259, 14260, 14261, 14262, 14263, 14264, 14265,
   14266, 14267, 14268, 14269, 14270, 14271, 14272, 14273, 14274, 14275,
   14276, 14277, 14278, 14279, 14280, 14281, 14282, 14283, 14284, 14285,
   14286, 14287, 14288, 14289, 14290, 14291, 14292, 14293, 14294, 14295,
   14296, 14297, 14298, 14299, 14300, 14312, 14311, 14324, 14332, 14323,
   14349, 14350, 14355, 14354, 14361, 14360, 14370, 14369, 14380, 14379,
   14385, 14393, 14395, 14400, 14400, 14409, 14408, 14422, 14421, 14426,
   14430, 14431, 14432, 14436, 14437, 14438, 14439, 14443, 14444, 14445,
   14446, 14451, 14475, 14501, 14512, 14529, 14543, 14558, 14577, 14594,
   14606, 14614, 14630, 14656, 14693, 14707, 14708, 14709, 14710, 14714,
   14732, 14750, 14751, 14755, 14756, 14757, 14758, 14762, 14776, 14780,
   14781, 14782, 14792, 14793, 14794, 14800, 14806, 14818, 14817, 14830,
   14831, 14835, 14836, 14840, 14858, 14859, 14860, 14865, 14866, 14871,
   14870, 14887, 14896, 14906, 14905, 14936, 14937, 14941, 14942, 14946,
   14947, 14948, 14949, 14951, 14950, 14963, 14964, 14965, 14966, 14967,
   14973, 14978, 14984, 14995, 15006, 15010, 15017, 15026, 15028, 15033,
   15038, 15045, 15057, 15069, 15076, 15088, 15089, 15092, 15093, 15096,
   15101, 15109, 15119, 15138, 15141, 15143, 15147, 15148, 15155, 15157,
   15161, 15162, 15167, 15166, 15170, 15169, 15173, 15172, 15176, 15175,
   15178, 15179, 15180, 15181, 15182, 15183, 15184, 15185, 15186, 15187,
   15188, 15189, 15190, 15191, 15192, 15193, 15194, 15195, 15196, 15197,
   15198, 15199, 15200, 15201, 15202, 15203, 15207, 15208, 15212, 15213,
   15217, 15224, 15231, 15241, 15252, 15261, 15270, 15282, 15287, 15295,
   15300, 15308, 15313, 15320, 15320, 15321, 15321, 15324, 15331, 15336,
   15342, 15348, 15354, 15358, 15362, 15363, 15367, 15395, 15397, 15401,
   15405, 15409, 15416, 15417, 15421, 15422, 15426, 15427, 15431, 15432,
   15438, 15444, 15450, 15456, 15466, 15465, 15475, 15484, 15485, 15489,
   15490, 15495, 15496, 15497, 15502, 15503, 15504, 15508, 15509, 15513,
   15525, 15534, 15544, 15553, 15567, 15568, 15573, 15572, 15588, 15589,
   15593, 15594, 15598, 15598, 15619, 15620, 15624, 15625, 15626, 15630,
   15635, 15643, 15646, 15644, 15659, 15666, 15687, 15713, 15715, 15719,
   15720, 15724, 15725, 15733, 15734, 15735, 15736, 15742, 15748, 15758,
   15760, 15762, 15767, 15768, 15769, 15770, 15771, 15775, 15776, 15777,
   15778, 15779, 15780, 15790, 15791, 15796, 15809, 15825, 15827, 15829,
   15835, 15836, 15838, 15844, 15843, 15862, 15863, 15867, 15873, 15882,
   15882, 15906, 15907, 15912, 15913, 15915, 15917, 15931, 15940, 15946,
   15951, 15928, 16001, 16002, 16006, 16026, 16047, 16051, 16057, 16063,
   16022, 16122, 16134, 16143, 16147, 16121, 16164, 16168, 16172, 16176,
   16180, 16184, 16191, 16198, 16205, 16215, 16216, 16220, 16221, 16222,
   16226, 16227, 16232, 16234, 16233, 16239, 16240, 16244, 16251, 16261,
   16267, 16278
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "ATOMIC_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_ADD_SYM",
  "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM",
  "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONSTRAINT_CATALOG_SYM",
  "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM",
  "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE",
  "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE", "CURRENT_POS_SYM",
  "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES",
  "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM",
  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DELETE_DOMAIN_ID_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE",
  "DETERMINISTIC_SYM", "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM",
  "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM",
  "DO_DOMAIN_IDS_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE",
  "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM",
  "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT",
  "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQUAL_SYM", "ERROR_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM",
  "EXCHANGE_SYM", "EXAMINED_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM",
  "EXPANSION_SYM", "EXPORT_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM",
  "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM",
  "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM",
  "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FORMAT_SYM",
  "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE",
  "GENERAL", "GENERATED_SYM", "GEOMETRYCOLLECTION", "GEOMETRY_SYM",
  "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "ID_SYM", "IDENT", "IDENTIFIED_SYM",
  "IDENT_QUOTED", "IF_SYM", "IGNORE_DOMAIN_IDS_SYM", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM",
  "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO",
  "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM", "IPC_SYM", "IS",
  "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LAST_VALUE", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM",
  "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES",
  "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_GTID_POS_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_STATEMENT_TIME_SYM", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD_SYM", "ON", "ONE_SYM", "ONLY_SYM",
  "ONLINE_SYM", "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION",
  "OPTIONALLY", "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER",
  "OUTFILE", "OUT_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PAGE_CHECKSUM_SYM", "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD_SYM", "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM",
  "PLUGIN_SYM", "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM",
  "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM",
  "PRIVILEGES", "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM",
  "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM",
  "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM",
  "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM",
  "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES",
  "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLE_SYM", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "ROW_COUNT_SYM", "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM",
  "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM",
  "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM",
  "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM",
  "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM", "SHIFT_LEFT",
  "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM", "SIGNED_SYM",
  "SIMPLE_SYM", "SLAVE", "SLAVES", "SLAVE_POS_SYM", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM",
  "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM",
  "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "REF_SYSTEM_ID_SYM",
  "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM", "STATEMENT_SYM",
  "STATS_AUTO_RECALC_SYM", "STATS_PERSISTENT_SYM",
  "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_CHECKSUM_SYM",
  "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIMESTAMP",
  "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB", "TINYINT",
  "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM", "TRANSACTIONAL_SYM",
  "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER_SYM", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM",
  "VIRTUAL_SYM", "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM",
  "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH", "WITH_CUBE_SYM",
  "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM",
  "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL",
  "IMPOSSIBLE_ACTION", "CONDITIONLESS_JOIN", "ON_SYM", "'='", "'>'", "'<'",
  "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('",
  "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept",
  "query", "$@1", "opt_end_of_input", "verb_clause", "statement",
  "deallocate", "deallocate_or_drop", "prepare", "prepare_src", "execute",
  "$@2", "execute_using", "execute_var_list", "execute_var_ident", "help",
  "$@3", "change", "$@4", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "do_domain_id_list",
  "do_domain_id", "ignore_domain_id_list", "ignore_domain_id",
  "master_file_def", "optional_connection_name", "connection_name",
  "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10", "$@11",
  "server_def", "$@12", "server_options_list", "server_option",
  "event_tail", "$@13", "ev_schedule_time", "$@14", "opt_ev_status",
  "ev_starts", "ev_ends", "opt_ev_on_completion", "ev_on_completion",
  "opt_ev_comment", "ev_sql_stmt", "$@15", "clear_privileges", "sp_name",
  "sp_a_chistics", "sp_c_chistics", "sp_chistic", "sp_c_chistic",
  "sp_suid", "call", "$@16", "opt_sp_cparam_list", "opt_sp_cparams",
  "sp_cparams", "sp_fdparam_list", "sp_fdparams", "sp_param_name_and_type",
  "@17", "sp_pdparam_list", "sp_pdparams", "sp_pdparam", "sp_opt_inout",
  "sp_proc_stmts", "sp_proc_stmts1", "sp_decls", "sp_decl", "$@18", "$@19",
  "sp_cursor_stmt", "$@20", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_compound_ok", "sp_proc_stmt_if", "$@21",
  "sp_proc_stmt_statement", "$@22", "sp_proc_stmt_return", "$@23",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@24", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@25", "$@26", "$@27", "sp_elseifs",
  "case_stmt_specification", "$@28", "case_stmt_body", "$@29", "$@30",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@31", "$@32", "searched_when_clause", "$@33",
  "$@34", "else_clause_opt", "sp_opt_label", "sp_labeled_block", "$@35",
  "sp_unlabeled_block", "$@36", "sp_unlabeled_block_not_atomic", "$@37",
  "sp_block_content", "$@38", "loop_body", "while_body", "$@39",
  "repeat_body", "$@40", "pop_sp_label", "pop_sp_empty_label",
  "sp_labeled_control", "$@41", "$@42", "$@43", "sp_unlabeled_control",
  "$@44", "$@45", "$@46", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@47", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@48", "$@49", "create_like", "opt_create_select", "$@50", "$@51",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@52",
  "have_partitioning", "partition_entry", "$@53", "partition",
  "part_type_def", "$@54", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@55",
  "$@56", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@57", "part_name", "opt_part_values", "$@58", "$@59", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@60", "$@61",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@62", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@63", "$@64", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option",
  "opt_if_not_exists_table_element", "opt_if_not_exists",
  "create_or_replace", "opt_create_table_options",
  "create_table_options_space_separated", "create_table_options",
  "create_table_option", "$@65", "default_charset", "default_collation",
  "storage_engines", "known_storage_engines", "row_types",
  "merge_insert_types", "udf_type", "create_field_list", "field_list",
  "field_list_item", "column_def", "key_def", "$@66", "$@67", "$@68",
  "$@69", "$@70", "$@71", "$@72", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@73",
  "$@74", "field_def", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "field_type", "spatial_type",
  "char", "nchar", "varchar", "nvarchar", "int_type", "real_type",
  "srid_option", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "charset_or_alias", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@75", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "constraint_key_type", "key_or_index", "opt_key_or_index",
  "keys_or_index", "opt_unique", "fulltext", "spatial",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "opt_USING_key_algorithm", "opt_key_algorithm_clause", "key_using_alg",
  "all_key_opt", "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@76", "$@77", "$@78", "$@79", "$@80", "$@81",
  "$@82", "$@83", "$@84", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@85", "$@86", "$@87", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@88",
  "add_part_extra", "reorg_partition_rule", "$@89", "reorg_parts_rule",
  "$@90", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "opt_index_lock_algorithm",
  "alter_algorithm_option", "alter_lock_option", "opt_column",
  "opt_ignore", "alter_options", "$@91", "alter_options_part2",
  "alter_option_list", "alter_option", "opt_restrict", "opt_place",
  "opt_to", "slave", "$@92", "$@93", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@94",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@95", "opt_checksum_type",
  "repair_table_or_view", "$@96", "repair", "$@97", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "opt_view_repair_type", "analyze",
  "$@98", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@99", "persistent_index_stat_spec",
  "$@100", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check_view_or_table", "$@101", "check", "$@102",
  "opt_mi_check_type", "mi_check_types", "mi_check_type",
  "opt_view_check_type", "optimize", "$@103", "opt_no_write_to_binlog",
  "rename", "$@104", "rename_list", "table_to_table_list",
  "table_to_table", "keycache", "$@105", "keycache_list_or_parts",
  "keycache_list", "assign_to_keycache", "assign_to_keycache_parts",
  "key_cache_name", "preload", "$@106", "preload_list_or_parts",
  "preload_list", "preload_keys", "preload_keys_parts", "adm_partition",
  "$@107", "cache_keys_spec", "$@108", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "select_paren", "$@109",
  "select_paren_derived", "$@110", "select_init2", "$@111", "select_part2",
  "select_options_and_item_list", "$@112", "table_expression",
  "from_clause", "opt_from_clause", "table_reference_list",
  "select_options", "select_option_list", "select_option",
  "opt_select_lock_type", "select_item_list", "select_item",
  "remember_tok_start", "remember_name", "remember_end", "select_alias",
  "opt_default_time_precision", "opt_time_precision", "optional_braces",
  "expr", "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "opt_dyncol_type", "dyncol_type", "$@113",
  "dyncall_create_element", "dyncall_create_list", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@114", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@115", "$@116", "$@117", "variable", "$@118",
  "variable_aux", "opt_distinct", "opt_gconcat_separator",
  "opt_gorder_clause", "$@119", "gorder_list", "in_sum_expr", "$@120",
  "cast_type", "$@121", "$@122", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@123", "$@124", "$@125", "$@126", "$@127", "$@128",
  "inner_join", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "$@129", "select_derived_union", "$@130",
  "select_init2_derived", "select_part2_derived", "$@131",
  "select_derived", "$@132", "select_derived2", "$@133", "$@134",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@135",
  "$@136", "index_hints_list", "opt_index_hints_list", "$@137",
  "opt_key_definition", "$@138", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "opt_where_clause", "$@139", "opt_having_clause", "$@140", "opt_escape",
  "opt_group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@141", "order_list", "order_dir", "opt_limit_clause",
  "limit_clause_init", "limit_clause", "limit_options", "limit_option",
  "limit_rows_option", "delete_limit_clause", "int_num", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "choice", "opt_procedure_clause", "$@142", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@143",
  "select_var_list", "select_var_ident", "select_outvar", "opt_into",
  "into", "$@144", "into_destination", "$@145", "$@146", "do", "$@147",
  "drop", "$@148", "$@149", "$@150", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists_table_element", "opt_if_exists",
  "opt_temporary", "insert", "$@151", "$@152", "replace", "$@153", "$@154",
  "insert_lock_option", "replace_lock_option", "insert2", "insert_table",
  "insert_field_spec", "$@155", "fields", "insert_values", "$@156",
  "$@157", "values_list", "ident_eq_list", "ident_eq_value", "equal",
  "opt_equal", "no_braces", "$@158", "opt_values", "values",
  "expr_or_default", "opt_insert_update", "$@159", "update", "$@160",
  "$@161", "update_list", "update_elem", "insert_update_list",
  "insert_update_elem", "opt_low_priority", "delete", "$@162",
  "single_multi", "$@163", "$@164", "$@165", "$@166",
  "opt_select_expressions", "table_wild_list", "table_wild_one",
  "opt_wild", "opt_delete_options", "opt_delete_option", "truncate",
  "$@167", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@168", "show_param",
  "$@169", "$@170", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@171", "$@172", "explainable_command",
  "describe_command", "analyze_stmt_command", "opt_extended_describe",
  "opt_format_json", "opt_describe_column", "flush", "$@173",
  "flush_options", "$@174", "opt_flush_lock", "flush_lock", "$@175",
  "flush_options_list", "flush_option", "opt_table_list",
  "opt_delete_gtid_domain", "delete_domain_id_list", "delete_domain_id",
  "optional_flush_tables_arguments", "reset", "$@176", "reset_options",
  "reset_option", "$@177", "$@178", "slave_reset_options",
  "master_reset_options", "purge", "$@179", "purge_options",
  "purge_option", "kill", "$@180", "kill_type", "kill_option", "kill_expr",
  "shutdown", "use", "load", "$@181", "$@182", "$@183", "$@184",
  "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "hex_or_bin_String", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user_maybe_role", "user_or_role", "user", "keyword",
  "keyword_sp", "set", "$@185", "$@186", "$@187",
  "set_stmt_option_value_following_option_type_list",
  "start_option_value_list", "$@188", "$@189", "$@190",
  "start_option_value_list_following_option_type", "$@191",
  "option_value_list_continued", "option_value_list", "$@192", "$@193",
  "option_value", "$@194", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "opt_for_user", "text_or_password", "set_expr_or_default", "lock",
  "$@195", "table_or_tables", "table_lock_list", "table_lock",
  "lock_option", "unlock", "$@196", "handler", "$@197",
  "handler_read_or_scan", "handler_scan_function", "handler_rkey_function",
  "$@198", "handler_rkey_mode", "revoke", "revoke_command",
  "admin_option_for_role", "grant", "grant_command", "opt_with_admin",
  "opt_with_admin_option", "role_list", "current_role", "grant_role",
  "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@199", "$@200", "$@201",
  "$@202", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "user_and_role_list",
  "via_or_with", "using_or_as", "grant_user", "opt_column_list",
  "column_list", "column_list_id", "require_clause", "grant_options",
  "opt_grant_option", "grant_option_list", "grant_option", "begin",
  "$@203", "compound_statement", "opt_not", "opt_work", "opt_chain",
  "opt_release", "opt_savepoint", "commit", "rollback", "savepoint",
  "release", "union_clause", "union_list", "$@204", "union_opt",
  "opt_union_order_or_limit", "union_order_or_limit", "$@205",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@206", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_algorithm", "view_suid",
  "view_tail", "$@207", "view_list_opt", "view_list", "view_select",
  "$@208", "view_select_aux", "view_check_option", "trigger_tail", "$@209",
  "$@210", "$@211", "$@212", "udf_tail", "udf_tail2", "sf_tail", "$@213",
  "$@214", "$@215", "$@216", "$@217", "sp_tail", "$@218", "$@219", "$@220",
  "$@221", "xa", "xid", "begin_or_start", "opt_join_or_resume",
  "opt_one_phase", "opt_suspend", "$@222", "opt_migrate", "install",
  "uninstall", "keep_gcc_happy", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   899,   900,   901,    61,    62,    60,
     124,    38,    45,    43,    42,    47,    37,    94,   126,    40,
      41,    44,    33,   123,   125,    59,    64,    46,    58
};
# endif

#define YYPACT_NINF -4295

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-4295)))

#define YYTABLE_NINF -2801

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    6410,  1955,  1828,  1709,   988,   184, 58749, -4295,   122,  1568,
   -4295,  -184,   765, -4295, -4295, -4295, -4295, -4295,  3882, -4295,
   58749,  1127,   949, -4295, 26861, -4295, -4295, -4295,   -32, -4295,
     117,  1568, -4295,  1127,   419, -4295, 58749, -4295,   612,  1572,
    1127, -4295, -4295, -4295, 51753, -4295,  -184, 58749, -4295,   571,
   -4295, -4295, 51753,   303,   390,   561,   -13, -4295, -4295, 58749,
   -4295,  1877, -4295,   473,  1260,  1136, -4295, -4295,  1008, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295,  3726, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, 27505,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295,   780, 58749,   816, 58749,  1303, 58749,
   49845, 58749, -4295,  1300, -4295, -4295,  1413,   941, -4295, -4295,
    1568,  1055, -4295, -4295,  1623,  -184, -4295, 49845, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295,  1005, -4295, -4295,  1091,  1191, -4295, -4295,
   -4295,  1472, -4295,  1759,  1566,  1332, 58749,  1098, 13112,  1590,
    1590,  1590,  1598,  1626,  1590,  1590,  1590, 58749, -4295,  1590,
    1590,  1590,  1568, -4295, -4295, -4295,  1731, 38397, 58749,  1515,
     209,   -69, 49845, -4295,  1080, 58749,  1191,    96, -4295,  1662,
   -4295, -4295, -4295, 65109,  1568, -4295,  1946,  1802,   257, 58749,
   -4295, -4295, -4295, 65109,   884,    28,  1400, -4295, -4295,  1529,
   -4295, 39033,   193, -4295, -4295, -4295,   119,  1806, -4295, 29437,
    5359,  1529,  1532,  1191,   668,  1536,  1191, -4295, -4295, 58749,
    1191,  1568,  1760, -4295, 13112, -4295,   198,   198,   198, -4295,
     198, -4295,   198,   473,  1389,  1606, -4295, -4295,  1437, 58749,
    1871, -4295,  1871, -4295, -4295,  1871,  1023,  1627,  1874,  1882,
    1944,  1602,  1212,   941,  1231, -4295, -4295, -4295,  1537,   854,
   -4295,  1621, 42213, -4295, 58749, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295,   992, -4295,  1673,   125,  1708,  2044, -4295,
   49845, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
    1579, 26861,  1586, 58749, -4295,  2095, 13112,  1091, -4295,  1679,
   -4295, -4295, 26861, -4295, -4295, 26861,   237,    27, 58749, -4295,
   -4295,  2255, -4295, -4295, -4295, 52389,  1098,  1607,  1611,  1616,
   18416, -4295,  1647,  1674,  1680, 13112,  1696,  1698,  1702,  1704,
    1711,  1722,  1724,  1729,  1732,  1735,  1738,  1762,  1765,  1775,
    1775,  1775,  1780,  1782,  1784,  1801,  1206,  1814, -4295,  1824,
    1830,  1842, -4295, -4295,  1848,  1851,  1866,  1881, -4295, -4295,
    1883,  1887,  1889, 13775,  1893,  1899,  1907, -4295, 23629,  1915,
    1924,  1930,  1938,  1953,  1960,  1962,  1968,  1971, -4295, -4295,
   13112,  1780, -4295, -4295,  1973, -4295,  1975,  1990,  2000,  2002,
    2005,  2010,  2013,  2022,  2029,  2034,  2038,  2045,  2055,  2062,
    2066,  2068,  2070,  1780, -4295,  1245,  2072,  2079,  1307,  2082,
   -4295,  2092, -4295,   225,  2101,  1775,  1780,  1780,  2105,  2128,
    2143,  2145,  2157,  2166, 18416, 18416, 18416, 13112, -4295, 58749,
   -4295, 58749,  2224,  2586, -4295,  2700, 18416,   214, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295,  1706,  1847, -4295, -4295, -4295,
   -4295, -4295, -4295,  2171,  1795,  2109, 58749, 58749, 58749,  2238,
   58749, 58749, 58749, -4295, 49845,  1937, 58749, -4295, -4295,  1590,
    1908,  4108, 32652,  2103,  2167,  2025,  1775, -4295, -4295,   -62,
     -12,   678,  2135, -4295, -4295,  2233,   695,  2430, -4295,   710,
     454, -4295,   126,   712,   748, -4295, -4295, -4295, -4295, -4295,
   -4295,  2275,  2432,  2179, -4295, -4295,   159, -4295, -4295, 58749,
   -4295,  2682, 13112, -4295, -4295, -4295,  2631,  2365, -4295, -4295,
   -4295,   160,  2833,   246, 26861,  1709, 58749,  1024, 66381, 66381,
   58749, -4295, 61929,  2235, -4295, -4295,  7682, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  2240, -4295,
   -4295,  2243, 13112,  1534, -4295,  1116, -4295, -4295,  2658, -4295,
   -4295, 46665, 26861,  1737, 65745, -4295, -4295, -4295, 24275, -4295,
   -4295,  2882, -4295,  2290, -4295, -4295,  1847,  4265, -4295,  2571,
    2103,  2580, -4295,  2760, -4295,  2589,  2496,    27,  2381, -4295,
    2930,  2713, -4295,  2799,  1753, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295,  2348,  1806, -4295, -4295, 53025,
     873,  2515,  -121,  1156,  1297, 37756,    63, 49845,  1343,   147,
   30080, 42849,  2344, -4295, -4295, -4295,  -127,  2508, -4295,  2853,
   -4295,    44, -4295,  2369,  1504,    44, 47301,  2713,  1441, -4295,
     407, -4295,  2837, -4295, -4295, -4295, -4295,  2506,  2489,  2550,
   -4295,   411,  2739, -4295,  1191, -4295,   752, -4295,  2526,  2713,
      44,  1441, -4295,  2780,  2906,   480,  2875, -4295,  -131, -4295,
   -4295, -4295,   -77,  2982, -4295,  2419, -4295, -4295, -4295, 26861,
   -4295, -4295, -4295,  2631, -4295,   258, -4295, -4295, -4295, -4295,
    2423, -4295, -4295,  2710,  2540, -4295, -4295,    72,  2434,    17,
   -4295,  2932, -4295,  1709, 58749, -4295, -4295, -4295,   993,  1688,
    1413,  1871, -4295,  1871,  1871,  1871,  1871,  1055, 43485, -4295,
   -4295, -4295,  2965,  2980,  1775,  2436, -4295, -4295, -4295, -4295,
   -4295,  3094, -4295, -4295,  2720,  2988,  2988,  2988,  3102, -4295,
   -4295, -4295, 26861, -4295, -4295, -4295,   125, -4295,  2622,  2490,
   -4295, 58749,  1708, -4295, 26861, -4295,  2449,  2863,  2457, -4295,
   -4295,  2718, 13112, -4295, -4295, 13112, 65109,  2958,  2224, -4295,
   -4295,   489, -4295, -4295, 26861,   290, -4295,  3062,  2675, -4295,
   -4295, -4295,  3094,  2988, 26861, -4295,  2462, -4295,  2459, -4295,
   13112, 13112,   351,  3051,  3115,  3115,  3115,  2224,  2501, 13112,
   13112, 13112, 13112, 13112, 13112, 13112, 13112, 13112, 13112, 13112,
   13112,   361,  2470, -4295, -4295, -4295,  1312, -4295,  2471, 13112,
   13112, -4295, 13112, 13112, 28149, -4295,  3984, 13112, 13112,  1021,
    2986, 13112, 13112, 13112, 13112,  2669, 13112, 13112, 13112, 28149,
    3130,  2483, -4295,  2478,   364, 13112, 13112,   384, 13112, 13112,
   13112, 13112, 13112, -4295, -4295, 13112, 13112, 13112, 13112, 18416,
   13112, 13112, 13112, 13112, 13112, 13112,  2486, 13112,  3115,  3115,
   13112, 13112,  1605, -4295, -4295, 13112,  2009,  2009, -4295, 13112,
    9797, 13112, -4295, -4295,  2494, -4295, -4295, -4295, 28149,  3115,
    3115, 13112, 13112, 13112,  3051,  3051,  3051,   186,  2495,   666,
   13112, 30723,  2498, -4295, -4295, -4295, -4295, 13112, 13112, 13112,
   18416, -4295,  1147, -4295, -4295, -4295, -4295, -4295, 14438, 18416,
   18416,  2502, 18416, 18416, 18416, 18416, 18416,  2880, 18416, 18416,
   19079, 19742, 18416, 18416, 18416, 18416,  1270,  3051, 49845, 18416,
   13112, -4295, -4295, 58749, -4295, -4295, -4295,  2507, -4295,  2785,
    1937, -4295, 47937, -4295,   789,  3003, -4295, 46665, 26861, -4295,
    2511, -4295,  2884, -4295,  2892,  2893,  2894, -4295, -4295, -4295,
   -4295,  3133,  2897, -4295,  1191,  2899, -4295, -4295,  2530, -4295,
   -4295, -4295, 20405, 49845, -4295,  2531, -4295,  2542, -4295, -4295,
   -4295, -4295, -4295, -4295,  2638, -4295, -4295, -4295, -4295,  2536,
   -4295, 46665,  2536, -4295, -4295,  2536, -4295, -4295,  2536, 42213,
      65,  3390, -4295, -4295, 58749, -4295, 59385, -4295,  2964,  1384,
   -4295, 24275,  1191, -4295,  2972, 15101, -4295, -4295, -4295,  2921,
     327,  2545, -4295, -4295, -4295, -4295,  3010, 58749, -4295, -4295,
   -4295, 13112,  2920,  2552, -4295, -4295, -4295,   215, 26861, -4295,
    2224, -4295,   130,   130,  2817,  1519, 49845, -4295, -4295,   203,
    2563, -4295,  2651,  2568, -4295,  2654, -4295, -4295, 26861,  2564,
   -4295, 26861, -4295, -4295, -4295,  2835,  2661, -4295,  1191,    28,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295,  2578,  2595,  3048,  2587, 46665, 42213,    77,
   -4295, 58749, -4295,  1614, -4295, -4295,   917, -4295, -4295,  1690,
   44121, -4295,   444,  2618,  2657,  3011, -4295, -4295,  2596, -4295,
   13112, -4295,  2602,  2609, -4295,  -127, -4295, 47937, 58749, -4295,
   -4295, -4295, -4295, -4295,  3201, 13112, -4295, 46665, -4295,   -20,
   -4295,   866,    85,  -127, -4295, -4295, -4295, -4295, -4295, 58749,
   53661,  2616, 10460,  2741,  3025, -4295, -4295, -4295,  2626,  1871,
   58749, 58749, 58749, 26861, 58749, 26861, -4295,   857,   857, -4295,
   -4295, -4295, -4295,    44, 58749, 58749,    44, 42213, -4295,  1441,
      13, 58749,    44, -4295,  3026,  2728, -4295, -4295, -4295,  3097,
   -4295, -4295,  3088,  2630, -4295,  3114, -4295, -4295,  2759,  1441,
   -4295, -4295, 26861, -4295, -4295,  1441, -4295,  1441,  1441, 13112,
      44,    44,    44, -4295,   -45, -4295, -4295, -4295,  2788,   668,
   -4295, -4295, -4295,   755, -4295, -4295,   198,  2898, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,   113,
   -4295, -4295, -4295,  3119, -4295, 47937, 42213,  3096,  1871,  1871,
   -4295, -4295,  3129, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
    1871, -4295, -4295, -4295, -4295, -4295, -4295,  1708, 49845, 58749,
   58749, 58749, 26861, -4295, -4295, -4295, -4295, -4295,   136, -4295,
   -4295, -4295,  2130,  3162, -4295, 49845,  2645,   -82,    39,  2645,
    2648,  1191,   856, -4295,   856, -4295, -4295, -4295,  1125,  1871,
   -4295, -4295,  2647, -4295,  2907, -4295, -4295, 49845, 54297, 26861,
   -4295, -4295, -4295,   199,  2655,  2653,  2224,  2224, 62565,  3261,
    2690,  4529, -4295, -4295, 26861, -4295,   266, -4295, -4295, -4295,
    2715, -4295, -4295, -4295, -4295,  2628, -4295, -4295,  1104,  2716,
    2660, -4295,  2835, -4295,  1601, 58749,  3126, 35212, -4295,   293,
     182, -4295,  3115,  2668, -4295,  2672,  2683,  2684, 13112,   115,
     271,   795,  1509,  1494,  1369,   326,  1373,   355, -4295,  1567,
     409,   414,   441,   239, -4295,  2686,  2693, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295,  2688, -4295, -4295, -4295,   450,
     486,  1412,  1422,  2698,  2699, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295,  3128, -4295,   498,  1617, -4295,
   -4295, -4295, -4295,  2701, -4295, -4295,  1431,   575,   613,   281,
    2708,  1625,   648,  1644,  1659,  2705, 28149, 58749,  3115,  2707,
    1443,  1465,  3115,  2711,   803,  1481,  1664,  1742,  1754,  1498,
    1559,   976,  1769,  2743,  1675,  1030,  1065,  1692,  1111,  1178,
   -4295,  1725,  2719,  2721,  1203,   275,  3115,  2725,   319,  2704,
    2709,  1746, 11123, 11786, 12449,  1301,  1205, -4295,  2727, -4295,
    2478,  2742,  2745,   331,   200,  1758, -4295, 13112, -4295, -4295,
    2714, -4295,  2771,   174,    85, -4295,  2881, 58749,  2435,   177,
   -4295, -4295, -4295, -4295, -4295, -4295,  1097, -4295,  2729, -4295,
    2748,  2265,  2744, 13112,   213,  2744,  3421,  2046,  2046, 18416,
    3241,  2836, 13775,   725, 13775,   725,  2744,  2744,  2744, -4295,
   18416,  2749, 18416, 18416, -4295,  3051,  2224,  2753,  -205, 58749,
   26861,   789,  2754, -4295, -4295, -4295, -4295, -4295,  -127, -4295,
    2756,   143, 26861, 49845,  2757, -4295,  3272, -4295, -4295, -4295,
   -4295,  1191, -4295, -4295,  4468, -4295, 26861,  2854,  2859,  2860,
   -4295, 33295, -4295, -4295, -4295, -4295, 33295,    24, -4295, 58749,
   -4295,  2850, -4295, -4295, -4295,  3196, -4295,  3203,  -208, -4295,
   24919, 24919, -4295, 24919, -4295, -4295, -4295, -4295, -4295,   454,
   -4295, -4295, -4295, -4295,   348,   864,  2301,  2618, -4295, -4295,
   -4295, -4295, -4295, -4295, 34576,  2224, -4295, 26861, -4295,  3192,
     705, 26861, -4295, -4295,  3187,  2224, -4295, -4295, -4295, -4295,
   -4295, -4295,  2779, -4295,  2791, -4295, -4295, -4295, -4295, -4295,
    3009,  2896, -4295,  3441, -4295, 13112,  1191, -4295, 46665, 46665,
   26861, 26861, 26861,   925, 13112, -4295,  1850,  2795, -4295, -4295,
    3210, -4295,  3442, -4295,  4265, 20405, 47937,  3243,  3256, -4295,
    2800, 24919, 24919, 24919, -4295, -4295, -4295, -4295,  2895,  2895,
   -4295, 31366, -4295, 13112, -4295, -4295, -4295,  3288, -4295,  2992,
     -53, -4295, -4295, -4295, -4295, -4295, 58749, -4295,  3372, -4295,
   -4295,  2808, -4295, -4295, 26861, -4295, -4295,  3255, -4295,  2975,
   -4295,  2224, -4295,  2811, 53025,  3277, 10460,  3281, -4295, 48573,
   -4295,  2224,  -127,  2821,  2822, -4295, -4295,  3207,   -40, -4295,
    2823,  2824, -4295,  2816,  2828,  2829, 53025, 13112, -4295,   866,
   -4295, -4295, -4295, -4295, -4295, 18416,  1824, -4295,  2224, -4295,
   -4295,  1191,  3296,  1191, 13112,  2838, 58749, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295,    44, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295,  3072,  2713,  2739,  3025, -4295,    44,  1441, 26861,    44,
      44,  2224, -4295, -4295, -4295, -4295, -4295, -4295,  2839, -4295,
    2902, -4295, -4295,  3013, 65109,  2845, -4295,  3310,  2713, -4295,
   -4295, -4295,   234,  -195,  2849,  1871, -4295, 58749, 58749,  1871,
    1871, 58749, -4295, -4295,   904,  3135,  3140, -4295, -4295,  -127,
    -127,  3165, -4295,  1191,  2993,  2994,  2996,  3001,  3005,  3047,
   -4295, -4295,  1191,  1191, -4295, -4295,  -127, -4295,  1064, -4295,
   -4295, -4295, -4295,  1221, -4295,  -127,  -127, -4295,   244, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295,  1112, -4295,  5099, -4295,
   -4295, 26861,  3156, 26861,  3338, -4295,  3406, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295,  2891, -4295, -4295,
   13112,  2971, -4295, -4295,  2690, -4295,  2904,  2910,  2915,  2916,
    2923,  2924,  2925,  2927,  2928,  2935,  2940,  2942,  2943,  2949,
    2951,  2952,  2953,  2955,  2959,  2963,  2966,  2968,  2973,  2879,
   -4295, -4295, -4295,  2939, -4295, -4295, -4295,  -127,  -127,  -127,
    -127, -4295,  2591, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295,  3266,  2717, 58749,  2970, -4295, 35212, -4295, -4295,   755,
   -4295,  2944, 15764, -4295,  2961, -4295, 13112, -4295, -4295, -4295,
    1788, 13112, 13112,  3415,  3074, -4295, 49209, -4295, -4295, -4295,
   13112, -4295, 13112, -4295, 13112, 13112, 13112, 13112, 49209,  3074,
   13112, -4295,  2967, -4295,  3362,  3369, -4295, -4295, -4295, -4295,
   13112, 13112, -4295, 13112, 13112, -4295, 13112, 13112, 13112, 13112,
   -4295, 13112, -4295, -4295, 18416, -4295,  2974,  2987, -4295, -4295,
   -4295,  2989, -4295, 13112, -4295, -4295, -4295, -4295, -4295, -4295,
   13112, -4295, 13112, -4295, 13112, 13112, -4295, 13112, 13112, -4295,
   -4295, -4295, 16427, 13112, 13112,  2990, -4295, -4295, 13112, 13112,
   13112, -4295, 13112,   416, 13112,  1470, 13112,  2219, 13112, -4295,
   13112, -4295, -4295, -4295, -4295, 13112,  1486,  3009,  3210,  2991,
   -4295,  1816,  2799, -4295,  1279,  2714,  2998,  3139,  1614, -4295,
   -4295, 49845, 13112, -4295, -4295, -4295, -4295, -4295, -4295, 18416,
     336,  2999, 18416, -4295,  3421,  2669,  2669,  2285, 13112,   213,
    3421, 13112,  3002,  2969, -4295, 13112, 58749, -4295, -4295, -4295,
   47937, -4295, 49845, 46665, -4295, -4295, -4295,   143, -4295,  2511,
    2981, -4295, -4295, -4295,  2779,   245,  2985,  3004, -4295, -4295,
   -4295, -4295, -4295, -4295,  1826, -4295, 42213,   162,  3627, 42213,
   -4295,  2997, -4295,  3007,  3077,  3078,  3090, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  2713, 65109,
    1850, -4295, -4295,  3008, -4295, -4295,  2718,  2895,  3040,  3395,
    3591, -4295, -4295, -4295, -4295, 65109, 65109, 13112, 58749, 18416,
   -4295,  3631,  3027,  3028,  3041,  3031,  2224, -4295,  3117, -4295,
   -4295, -4295,    62, -4295, -4295, -4295, -4295, -4295,   827,  1860,
   -4295, -4295,  3032,  3032, 22339, -4295, -4295, -4295, 58749, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  3049, -4295,
   -4295,  3313, 46665, 42213,  3500,  3501,  3503,   724, -4295, -4295,
   -4295, 49845,  3044, -4295, -4295, -4295,  2224,  3045,   354, 44757,
    3530, 44757, 44757, -4295,   798,  3452,  3453, -4295,  3327,  2207,
    3327, -4295, -4295,   798,   755,  2835, -4295, 13112,  3670,  3502,
    3384, -4295, 50481, -4295, 35848, -4295,  7155, -4295, 46665, -4295,
   -4295, -4295, -4295, -4295,  3167,  3169,  1333, -4295, -4295,  3477,
    3304, -4295, -4295, -4295,  -127,  2224, -4295,  2616,  3081, 32009,
   -4295,  1034, -4295, -4295,  2224,   315, -4295, -4295, -4295,  3373,
   -4295, -4295,  3296, -4295,  2618,  1441, -4295, -4295,   -45,  2520,
   -4295, 28149, 63201,  3210,  3408, -4295, -4295, -4295,   247,  3738,
   -4295, 58749,  3087,   515, -4295, -4295, 58749,  3551,   218,   218,
    3374, 26861, 26861,  5132, 48573, 45393, -4295, -4295, -4295, -4295,
    3632, -4295,  3634,  1479, -4295, -4295,  2917,    39, -4295,  1191,
    1191,  1191,  1191,  3210,  1191,  1191,  1843, -4295,  2917,  2917,
     856, -4295,   235, -4295, -4295, -4295, -4295,  2692,  -127,  3674,
    3358,  -127,  -127,  3674,  -127,  3359,  3360,  -127,  -127,  3186,
    3621,  -127,  3504,  3211,  2053,  3508,  -127,  3375, -4295,  3216,
    3635,  -127,  -127,  -127,  -127,  -127,  3674,  3378,  3725,  -127,
    -127, -4295,  -127,  3379,  3381,   202,  3380,  3386,  -127,  -127,
    -127,  -127,   217, 58749,  -127,  -127,  3387,  -127, -4295, -4295,
    6367, -4295, -4295, -4295, -4295, -4295, -4295,   684, 25569, -4295,
   -4295, -4295, -4295,  -127, -4295,   187, -4295,  3332, -4295,  1194,
   51117, 63837,  3131,  3134, 54933,  2224, 65109, 13112, -4295,  3136,
    3138,  3143,  3210,  1191,  1191,  1034,  1191,  3210,  1191,  1191,
    1191,  1191,  1191,  1191,  1191,  3210,  3210,  1191,   930,  1352,
    1191,  3210,  4529, -4295,  1191,  3009,  2917,  2917,  1104, -4295,
    3588,  -127, -4295,  2584, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295,  3144,   755,  2618,  1651,  2618,  3151,
   -4295, 13775,  1767, -4295,  2224, 13112,  2224,  1868, -4295,  3147,
    3147,  3147, -4295,  3148, -4295, -4295,  3147,  3560,  3147,  3561,
    3154,  3155,  1884,  1003, -4295,  1894,  2264,  1771,  3159,  3160,
    1706, -4295, 13112, 13112,  1819,   365,  1831,   630,  1220,  1222,
     372, -4295,  1835,  3212, -4295, -4295,  1858,  1862,  1890,  1901,
    1234,  1903,  1896, 13775,  1909,  1296,   382, -4295,  1911,  1249,
    1261,  1913, 13112,  1925, 13112,  1964, 13112,  1980,  1982,  2003,
    3164,  3164,   180, -4295,  3163, -4295, -4295, -4295,  3166, -4295,
   -4295, -4295, -4295,  2618,  2348,  1279, -4295,  3171,  1175, -4295,
   -4295,  3168,  2224,  3176, -4295, -4295, 13112, -4295,   214, -4295,
   -4295, 18416,   398,  3177, -4295,  2224, -4295, -4295,  3179,  1706,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  3189, -4295,
    3394, -4295, -4295,  3695, 33295, -4295, 58749,   642,   661, -4295,
   -4295, 49845,  3459, -4295,  3193, 36484, 42213, 42213, 42213,  3190,
   -4295, 60021,  3475, 26861, -4295,  3616, -4295, -4295, -4295, -4295,
   58749, 66381, 66381, 66381, 66381,  3194,  3195, -4295, -4295, -4295,
    3421,  3576,  3456, -4295, -4295,  3009, 58749, 46665,  3510, -4295,
   -4295,  3407,  1806, 28149, -4295,  3209, -4295,  3209,  1131,  3214,
    1920, -4295, -4295, -4295,  3204,  2381,  1935, -4295, 20405,  3671,
    2756, -4295, 42213, 42213, 42213, -4295,  2404, -4295, 31366, 13112,
   -4295, -4295, -4295, -4295, -4295, 44757, -4295, -4295,  -179,  1175,
   -4295,  1991, -4295, -4295, -4295,  3614,  3327,  3327,   798,  3618,
    2731, -4295,  3496, -4295,  1806,  2224, 13112, -4295,  3490, -4295,
   55569, -4295, -4295, -4295, -4295,  1048, -4295, -4295,  3220,  3221,
     219,  3450, -4295, -4295, -4295, -4295, 10460, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  2713, -4295,
   -4295, -4295, -4295, -4295,    44, -4295,  3238, -4295,  3223,  3225,
   -4295,  -127,  3257, -4295, -4295, 42213,  3422, -4295,   878,  3242,
   58749, -4295,  3782, -4295, -4295, -4295, -4295, -4295, 26861, -4295,
   -4295, 26861, 21051, -4295, -4295,  3505, -4295,  4217, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295,  1221, -4295, -4295, -4295,  1112, -4295, -4295, 28793,  1871,
   -4295,   264, -4295,  1871,   199,   199,  3667, 56205, 28793,  1127,
    1034,  3210,  1598,  3210, 56841,  1127,  1191,  1191,  2404,  -127,
    3210, -4295, -4295,  3639,  1590,  3640,  1598,  1598, -4295, 49845,
   58749, -4295,  -127,  1483,  3210, 57477,  1034,  1034,  1598,  1127,
   28149,  2461,  2539, -4295,  1191,  1127, -4295, -4295, -4295, -4295,
   26861,  1127,  1127,  2528,  3170,  3184,  3237, -4295, -4295, -4295,
    3210,  2539, 56841, -4295, -4295,  8083, -4295, -4295, -4295, 21695,
   58749,   362,   212, -4295,  3250, 40305,  3251,  1709,  1093,  3337,
    1580, -4295,   151, -4295, -4295, -4295,  3703,  3262,  1803, -4295,
    3263, -4295, 56841, -4295,  3267, -4295,  3265, -4295, 60657,  2224,
    3210,  3210,  3210, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, 58749,  2917,  2717, -4295, 35212,  2618,  3490, -4295, -4295,
    2669, -4295,  2224, 13112,  1259, -4295, -4295, -4295, -4295,  1407,
   -4295, -4295, -4295,  3275, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295,  3607, -4295, -4295,  3074, -4295, -4295, -4295,  3278,  2669,
    2669, -4295, -4295, 13112, -4295,  3887,  3451, 13112, 13112, -4295,
   13112, -4295,   260,  3280,  3311, -4295, -4295, -4295, -4295, 13112,
   -4295, -4295,  2669, -4295, 13112, -4295, -4295, 13112, -4295, 13112,
   13112, -4295,  2030, -4295,  2036, -4295,  2051, -4295, -4295, -4295,
    3009,  3283,  3676, -4295, -4295, -4295,  3009,  3478, -4295, -4295,
    3009,  3210,  3255,  2596, -4295, -4295, -4295,  2799,   666, 58749,
   -4295, -4295,  1942, -4295, -4295, 13112, -4295, 50481, -4295, -4295,
    1034,  3763,  3662, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  3740,
   -4295,  3389, -4295,   188, -4295, -4295, -4295,  -119,  -119,  -119,
   17090,  2480,  3802, -4295, -4295, -4295,  3616,  3687, -4295,    92,
    3298, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, 58749,
    3300,  1548, -4295,  1984, -4295, -4295,  3302, -4295, -4295, -4295,
    2348,  3307, -4295,  -127, 17090,  3032,  3479, -4295, -4295,  1131,
   28149, 35848, -4295, -4295, 58749, -4295, 42213,  2800,  2800,  2800,
   45393, -4295, -4295,   354, -4295,  1614,  2781, -4295,   755, -4295,
     798,  3702,  3711, -4295,   798, -4295, -4295, -4295,  2348,  -204,
     354, 13112,  2713, -4295, -4295, 37120, -4295, -4295, -4295, -4295,
   -4295, -4295, 32009, 53025, -4295,  2713, -4295,  1191,  2409, 28149,
    2618, 17090, -4295, -4295, 58749, -4295, -4295, -4295, -4295,  3463,
   -4295,   436,  3597,  3342, -4295,  3319,  3324, -4295, 26861,  3328,
    3331,  3323, -4295, -4295, -4295,   287, -4295,  4030, -4295, -4295,
   -4295, -4295, -4295,  1127,  3333,  3723,  3732,   199, -4295,  1871,
   28793, -4295,  1871,  1871,  1709, -4295, -4295, -4295,   161, 56841,
   -4295, -4295, 28793, -4295, -4295, -4295,  3343, -4295, -4295,  3009,
   -4295, -4295, 45393,  1191, -4295,  1598, 58749, -4295, 28793, 28793,
   -4295,  3367,  1191, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, 28793, 56841,  3344, -4295,   354, -4295, -4295, -4295,
   -4295, -4295,  1946, -4295, 56841, -4295, -4295, 56841, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295,  3347,  2241,  1945, -4295,  3349,
   -4295, 58749, -4295, -4295, 26861, -4295, -4295, -4295,  6951, 58749,
   -4295, -4295, -4295, -4295, 58749,  3991, -4295,  3598, 13112, 13112,
    3637, 58749,  3638, -4295,  3929, -4295, -4295,  3781,  3826, 58749,
    6951,  3831,  3832, -4295,  3376, -4295, 54933,  3464,  1996, -4295,
   -4295,  2018, -4295, -4295,  2052, -4295, -4295, -4295, -4295, -4295,
    2944, -4295,  3755,  1365,  2224,  3382,  3383,  3391,  3392,   197,
    2073,  3664, -4295, -4295, -4295,  3147, -4295,  3148, -4295, -4295,
   -4295,  3976, -4295, -4295,  3147,  3788, -4295, -4295, -4295,  3397,
   -4295,  3399,  3401,  2083, -4295,   198,  3402,  2099,  1263,  2085,
    3706,  3778, -4295,  3622, -4295,  2146,  1426,  2148,  2150,  2178,
    2189, -4295, -4295, -4295, -4295, -4295,  3403, -4295, -4295,   223,
   -4295,  3404,  3502, -4295, -4295, -4295, -4295,  2116, -4295, -4295,
    2118, -4295, -4295,  4037,  3680, -4295, -4295, -4295,  1191,   960,
    3435,  3435,  3435,  1824,  2224,  2120, -4295, 65109, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295,  3816, 58749, -4295, -4295,  3409,
    3441, 58749, -4295,  3456, -4295,  2596, 28149, 17090,  3410,  3418,
   -4295,    17, -4295, -4295,  3413, -4295, -4295,  2800, -4295,  3994,
   -4295, -4295, -4295,  2808,  3439,  3472,   798,   798,  3556,  3473,
   13112,  3424, -4295,    70,  2596, -4295, -4295, 13112, -4295, -4295,
    2224,  3665, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  3490,
   -4295,  3425,  3426, -4295, -4295,  1191,  1109, -4295, -4295,   110,
    3609, 49845,  3429, 58749, 58749,  3432, -4295, -4295, 21695, -4295,
    4074, -4295, -4295, 13112,  1871, -4295, -4295, 28793,  3487,  -178,
   28793, 28793,  3918,  3967,  3968, -4295, 28793,  2628, 58749, -4295,
    3201, -4295, 28793,  3343, -4295,   495,  3542, -4295,   362, -4295,
   28149, -4295, -4295, -4295, 58749, -4295, 26861, -4295, -4295,  3443,
   -4295,  3147,  3147,  3147, -4295, -4295,  3147, -4295,  3148,  3690,
    3447,  3148,  3148, -4295, -4295, -4295, -4295, -4295,   197,   670,
   -4295, -4295,   197, -4295, -4295, -4295,   175,  1524,  3148, -4295,
   -4295, -4295, -4295, -4295,  3458, -4295,  3147,  3147,  3147, -4295,
   -4295,   197,  3147, -4295,  3147, -4295,  3148,   330,   178,  3147,
    3147,  3147,  3275,  3445, -4295,  2138, -4295, -4295,  2224,  2669,
    4031, -4295, -4295,  3615,  1191,  3969, 58749,   170, -4295, -4295,
    3201,  3990,  1713, -4295, -4295, -4295, 65109, -4295,  3210, -4295,
    3210, -4295,  3210, 46029, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295,   191, -4295, -4295, 49209,  4087, -4295,  3757,  3465, -4295,
   -4295, -4295, -4295, -4295,   197, -4295, -4295, -4295, -4295, 13112,
   -4295, -4295, -4295, 13112, -4295, -4295,  3790,  3951, -4295, -4295,
   -4295, -4295, -4295, -4295,  3476, -4295,  3210,  3490, -4295, -4295,
    1034,  3989, -4295, -4295, -4295,  3570,  3572, -4295, -4295,  3574,
   -4295, -4295,   163,  3012, -4295, -4295, -4295, -4295, 17090, 64473,
   -4295,  3876,  3582, -4295, -4295, -4295,  3483,  3533, -4295, -4295,
    2799, -4295, -4295, -4295, -4295,  1276,  3869,   666, -4295,  3541,
   -4295, -4295, -4295,  3543,  2224, 58749, -4295,  1038,  2799,   354,
   58749,  3900,  3755, -4295, 58749,  6951, -4295, -4295, -4295, -4295,
    3493,  3494, -4295, 58749, -4295, -4295, -4295,  3786,  1093,  3775,
   58749,  2162,   354,  3507,  2197, -4295,    17,  6367, -4295, -4295,
     982,   -85,  2205, 28793,  3487,  1188,   218, -4295,   218, -4295,
   -4295, -4295, -4295,  3599,   362, -4295, -4295, -4295, -4295, -4295,
   26861, -4295,  1127, -4295, -4295,  3343,   827,  3509, 58749,  3855,
   -4295, -4295, -4295, -4295,  -100, -4295,   198,  -100,  -100, -4295,
    2515, -4295,  3554,   197, -4295, -4295,  3555, -4295, -4295, -4295,
    -100,   198,   197, -4295, -4295, -4295, -4295,  -100,  3354,  3648,
   -4295,   197, -4295, -4295,  4087, -4295,   197,  4087,  -100,  -100,
   58749, -4295, 58749, -4295,  1041, -4295, -4295, -4295, -4295, -4295,
    2200, -4295, -4295, -4295, -4295, 39669, -4295, 13112, -4295, -4295,
   -4295, -4295, -4295,   724, 61293, -4295, -4295, -4295,  4001,  3705,
    3716, -4295, -4295, -4295,  3525, -4295,  3528,   354,  2212, -4295,
   -4295, -4295,  3526,  2713, -4295,  4127, -4295, -4295, -4295, -4295,
     183,  3809,  3210,  3210,  3210,  1352,   -52,  3012, -4295, -4295,
    3592, 26861, 18416,  3647, 58749,  1663,  3052, -4295,  4148,  4150,
    4040,  4152,  1276, -4295,  -118, -4295, -4295, 13112,  3544, 13112,
    3545,  2202, -4295, -4295,   199,   199, -4295,  1038, -4295, -4295,
   -4295,  1690, -4295, -4295,  3739, -4295, -4295, -4295,  1747, -4295,
   -4295,  3637,  3547,  2206,   259, 58749, -4295,  3836,  1594, -4295,
    3505,  3479, -4295,  3009,  3456, -4295, -4295, -4295, -4295,   218,
   -4295,  3550, -4295,  3558,  3562,  2854,  2859,  2860,  1352,  1352,
   -4295, -4295, -4295, -4295, -4295,  3959, -4295, -4295,  2210, -4295,
     185,  3838, -4295, -4295, -4295, -4295,  -100, -4295,  2232, -4295,
   -4295, -4295, -4295, -4295, -4295,  2246, -4295, -4295, -4295, 49845,
    1191,  3462,  4205, -4295,  3619, -4295,  4091,  3960, -4295,  4207,
   -4295,  3188, -4295,  3961,  3858,  -127,  3583, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295,   473,  3600,  3698,
   -4295, 65109, -4295, 58749, 58113, -4295, -4295, 33938, -4295, -4295,
   -4295,  4032, -4295,  2224, -4295, -4295,  4056,  2348, -4295, -4295,
   13112, -4295, -4295, -4295,  3665, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295,   995, -4295, -4295, 28149,  2835, -4295,  3009,
   -4295,  2252, -4295, -4295, -4295,  3668,  -127,  -127,  4094,  4095,
    -127,  -127,  -127,  -127,  3581,  3052, -4295,  4076,   198,   198,
    4193,   198, -4295,  4194,  4196,  -118, -4295,  2224, 58749,  2224,
   58749, -4295,  4052,  4052, -4295,  3595, -4295, -4295, -4295, -4295,
   -4295,  1580, -4295,  1221,  1027,  1191,  -127,  3857,   297,   259,
   -4295, -4295,  -127,   354,  3601,   297,  1594, -4295, -4295,   287,
    3603,  2381, -4295,  2266,  3606,  3608, -4295, 58749,  3610, 58749,
   58749, -4295, -4295, -4295,  3611, -4295, 58749, -4295, -4295, -4295,
     288, -4295, -4295,   197,   198,   197, -4295, -4295,  3613, -4295,
   -4295, -4295,  3891,  3644, -4295,  3617, -4295, -4295, -4295, 40941,
    3888, -4295,  3623,   375, -4295, 13112,  4097, -4295, -4295, -4295,
    2268, -4295, -4295, 39669, -4295, -4295, -4295,  2596,   354,  1690,
   -4295, -4295,  3605, -4295,  -127, -4295,  3624, -4295, -4295, 58749,
    3628, -4295,  1191,  1191,  -127,  -127,  3246,  3246,  3009, 49845,
    3720, -4295, -4295,  -127, -4295, -4295,   198, -4295,   198,   198,
   -4295,  2270,  2302,  1518, -4295, -4295,  3629,  6951,  4047, 26861,
    3929,  2308,   218,   218,   297,  1027, -4295, -4295, -4295, -4295,
    3210,  1723, -4295,  3986,  4263, -4295, 41577, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, 58749, 58749,  3643,  2311, 58749,
    2313,  2322,  3456, -4295,   934,   934, -4295, -4295, -4295,  2087,
   -4295,  3613, -4295, -4295, -4295, -4295, -4295, -4295, -4295,    17,
    4215,  3907,  4228,  2224, 13112, -4295, -4295, 58113, -4295, -4295,
   -4295, 28149, 17090,  2404, -4295,  3647, -4295,  3645, -4295, -4295,
     -41, -4295, -4295,  1191,  1191, -4295, -4295, -4295, -4295, -4295,
    2325, -4295, 49845, -4295, -4295, -4295, -4295, -4295,  4247, -4295,
    4249,  3646,  3650, 13112,  3651,  3642, -4295, -4295, -4295, -4295,
    4166, 65109,  4112,  4161, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295,    17,  2329,  2333,
   58749,  1027,  2338,   259,  1594,  2356, -4295,  4310, -4295,   874,
    3939,  3940, -4295,  3659, -4295,  3666, -4295,  3941, -4295,  3943,
    2224, -4295, -4295, -4295, -4295, -4295, -4295,  2363, -4295, 17753,
   -4295, -4295, -4295, -4295, -4295, 49845, -4295,  3720, -4295, -4295,
   -4295, 54933, 54933,  2224, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295,  3890,  1027,  2370, -4295,  1027, -4295, -4295, -4295,
   -4295, -4295, -4295,  3728,  4192, -4295,   -73, -4295, -4295,  3861,
   -4295,  3645, -4295,  3682, -4295,  3421,  3052, -4295, -4295,  3677,
    2380, -4295, -4295,  4047, -4295, -4295, -4295, -4295,  1027, -4295,
     934,   934, -4295, -4295,   169,  4111,  3994, -4295, 17753,  3685,
   -4295, -4295, -4295, 65109,  4189, -4295, -4295, -4295,  1191,  4084,
   -4295,   169, -4295,  4304,  3869, -4295, -4295, -4295,  3878, -4295,
   -4295, -4295,   198,  4119, -4295, -4295,  3987,  3707, 65109,    79,
   22983,  3863, -4295, -4295, -4295, -4295, -4295, 49845,  2387, -4295,
   -4295, 28149, -4295, -4295, -4295, 26215,  3701, -4295,  -127, -4295,
   28149, -4295, -4295, 17090, -4295, -4295
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   933,  1943,  2724,     0,     0,     0,   343,     0,     0,
    1129,  2729,   590,    68,  1812,  1937,  1938,  1721,  1751,     2,
       0,  1145,   272,   176,     0,    80,   319,  1753,     0,  2004,
       0,     0,   384,  1145,     0,   495,     0,  1999,     0,     0,
    1145,   388,  1756,  1986,   249,   176,  2729,     0,  1196,  2505,
    1853,  2015,     0,     0,     0,  1836,     0,  2589,  1801,     0,
     386,     0,  2861,  1185,     0,     3,     8,    21,     0,    43,
      26,    31,    16,    20,    15,    56,    50,    28,  2726,   315,
     316,   317,   318,    41,   137,    40,    11,    59,    60,    18,
      47,    12,    14,    17,    39,    46,    35,    42,    54,  1182,
      24,    25,    32,    48,    64,    22,    61,    57,    23,  1943,
      13,    27,    49,    44,    36,    58,    65,    37,    55,    38,
      63,    30,    51,    29,     9,    10,    19,    52,    53,    45,
      66,    33,    62,    34,     0,   963,     0,     0,     0,     0,
       0,     0,  1038,   945,  2793,  2794,  2795,     0,  1147,  1146,
       0,     0,  1286,  1285,     0,  2729,  2119,     0,  1124,  1156,
    2196,  2198,  2197,  2199,  2200,  2201,  2202,  2203,  2204,  2136,
    2205,  2206,  2207,  2209,  2208,  2210,  2211,  2212,  2137,  2138,
    2213,  2214,  2215,  2217,  2216,  2218,  2139,  2140,  2219,  2220,
    2221,  2222,  2141,  2143,  2142,  2223,  2225,  2224,  2144,  2226,
    2227,  2228,  2230,  2145,  2146,  2147,  2148,  2149,  2229,  2150,
    2231,  2151,  2232,  2233,  2234,  2235,  2236,  2237,  2238,  2240,
    2239,  2152,  2241,  2242,  2244,  2245,  2246,  2243,  2247,  2249,
    2248,  2250,  2251,  2252,  2153,  2253,  2254,  2255,  2256,  2257,
    2258,  2259,  2260,  2154,  2261,  2262,  2263,  2282,  2155,  2264,
    2267,  2266,  2265,  2268,  2269,  2270,  2272,  2271,  2273,  2274,
    2156,  2157,  2275,  2276,  2277,  2278,  2280,  2279,  2284,  2285,
    2286,  2158,  2159,  2281,  2283,  2483,  2287,  2288,  2290,  2289,
    2291,  2160,  2293,  2292,  2161,  2295,  2294,  2162,  2163,  2296,
    2297,  2298,  2117,  2299,  2118,  2300,  2302,  2303,  2304,  2309,
    2164,  2301,  2305,  2306,  2307,  2308,  2310,  2165,  2312,  2311,
    2313,  2314,  2315,  2316,  2317,  2318,  2319,  2320,  2321,  2334,
    2325,  2326,  2328,  2329,  2332,  2327,  2333,  2337,  2336,  2338,
    2339,  2340,  2341,  2342,  2335,  2323,  2330,  2331,  2324,  2343,
    2344,  2322,  2345,  2347,  2346,  2348,  2349,  2350,  2351,  2352,
    2353,  2354,  2355,  2356,  2358,  2357,  2359,  2360,  2361,  2362,
    2363,  2364,  2365,  2367,  2366,  2368,  2369,  2371,  2370,  2373,
    2374,  2166,  2372,  2375,  2376,  2377,  2378,  2379,  2381,  2380,
    2167,  2169,  2168,  2170,  2382,  2383,  2171,  2384,  2386,  2385,
    2387,  2388,  2389,  2391,  2390,  2392,  2393,  2172,  2173,  2394,
    2395,  2396,  2397,  2398,  2399,  2400,  2401,  2402,  2403,  2404,
    2405,  2406,  2407,  2409,  2408,  2410,  2411,  2412,  2413,  2414,
    2415,  2416,  2174,  2417,  2175,  2418,  2419,  2176,  2420,  2177,
    2421,  2422,  2423,  2424,  2425,  2178,  2426,  2427,  2428,  2430,
    2431,  2429,  2432,  2179,  2433,  2434,  2435,  2180,  2437,  2436,
    2438,  2181,  2440,  2182,  2183,  2439,  2185,  2186,  2441,  2442,
    2443,  2184,  2444,  2187,  2445,  2446,  2448,  2447,  2449,  2450,
    2451,  2188,  2452,  2453,  2189,  2454,  2455,  2456,  2457,  2458,
    2460,  2459,  2461,  2462,  2463,  2464,  2466,  2468,  2467,  2465,
    2469,  2470,  2471,  2472,  2476,  2477,  2478,  2479,  2473,  2474,
    2475,  2190,  2480,  2481,  2482,  2484,  2485,  2487,  2486,  2191,
    2192,  2488,  2489,  2195,  2490,  2491,  2495,  2492,  2504,  2493,
    2494,  2497,  2496,  2498,  2499,  2500,  2193,  2501,  2194,  2502,
    2503,   194,  2122,   178,  2123,  2135,   345,   124,  2580,  2579,
    1082,     0,  2730,  2731,     0,     0,     0,  1829,     0,  1749,
    1749,  1749,  1747,     0,  1749,  1749,  1749,     0,  1752,  1749,
    1749,  1749,     0,    73,  1948,   273,     0,     0,     0,     0,
       0,  2116,     0,   336,  1759,     0,     0,  2006,  2022,     0,
    2023,  2017,  2577,   321,     0,  1220,     0,     0,     0,     0,
     176,  1148,  1090,   321,  1810,     0,   239,   248,   250,   251,
     247,     0,  2731,  2742,  1183,  1191,  1640,  1204,  2507,     0,
    1917,   251,     0,   124,  1063,     0,   124,  1837,  1834,     0,
       0,     0,  1810,  2016,     0,  2845,     0,     0,     0,  2841,
       0,  2846,     0,  1185,     0,     0,     1,     5,     0,     0,
     588,   888,   588,   889,   887,   588,  2795,     0,     0,     0,
       0,     0,  2277,  2159,  2386,  1930,  1942,  1928,  2111,     0,
     936,   964,     0,   941,     0,   939,  2128,  2127,  2126,   953,
     952,   951,   949,     0,   456,     0,  1040,  2800,     0,   943,
       0,  1101,  1932,  1933,  1934,  1935,  1936,  1939,   367,  2725,
       0,     0,   196,     0,   356,   359,     0,   348,   351,     0,
     125,   126,     0,  1127,  1130,     0,     0,  2734,     0,   591,
     142,     0,  1833,  1832,  1831,     0,  1829,  2197,  2136,  2212,
       0,  2085,     0,     0,     0,  1508,     0,  2141,     0,  2226,
    2228,  2145,  2146,  2147,  2148,  2149,  2152,     0,     0,  1233,
    1233,  1233,  1230,     0,     0,     0,  2251,  2252,  2090,     0,
       0,     0,  2081,  2091,  2159,  2290,  2291,     0,  2083,  2084,
    2297,     0,     0,     0,  2311,     0,  2316,  2088,     0,     0,
    2353,  2355,     0,     0,  2359,  2360,  2361,  2362,  2065,  1288,
       0,  1230,  2080,  2087,  2378,  2073,  2387,  2392,  2393,     0,
    2402,     0,     0,  2424,     0,  2431,  2429,  2435,     0,     0,
    2457,     0,     0,  1230,  2064,  2476,  2477,  2478,  2479,     0,
    2082,  2190,  2089,     0,  2490,  1233,  1230,  1230,     0,     0,
       0,  2498,  2499,  2503,     0,     0,     0,  2765,  1287,     0,
    1469,     0,  1502,  1245,  1251,  1265,     0,  1280,  1315,  1316,
    1318,  1424,  1317,  1323,  1322,  1722,  2077,  1321,  1320,  2078,
    2079,  1314,  2101,  2122,  2100,     0,     0,     0,     0,     0,
       0,     0,     0,   176,     0,  1913,     0,   176,  1733,  1749,
      75,     0,     0,  2638,  2653,  2654,  1233,  2650,  2655,  2271,
    2157,  2284,     0,  2652,  2644,     0,  2397,  2401,  2648,  2416,
    2419,  2642,     0,  2182,  2461,  2674,  2646,  2651,  2632,  2619,
    2633,     0,     0,  2636,  2640,  2113,  1614,  2592,  2593,     0,
      81,     0,     0,  1761,  1762,  1760,  1036,     0,  2858,  2007,
    2008,  2009,     0,  2026,     0,   365,     0,   331,     0,     0,
       0,   323,   321,     0,   314,   304,     0,   305,   309,   310,
     311,   312,   313,   306,   307,   377,   308,  2124,     0,  2125,
    1143,     0,     0,   505,   496,     0,  1912,  1911,     0,  2000,
    2743,     0,     0,     0,   321,   377,  1764,  1811,     0,  1763,
    1992,     0,  1990,  1987,  1989,   240,     0,     0,   270,  2198,
    2638,  2401,  2610,     0,  2618,     0,  2737,  2734,  2744,  1714,
       0,  1649,  1641,     0,  1211,  2778,  2773,  2772,  2775,  2776,
    1210,  2777,  1209,  2774,  2771,  1220,  1205,  1207,  1208,     0,
     810,     0,     0,  2530,  2531,  2367,  2387,  2425,  2532,  2473,
       0,     0,  2552,  2506,  2516,  2512,     0,     0,  1875,     0,
     810,  1925,  1876,     0,     0,  1925,     0,  1649,  1915,  1918,
       0,  2534,  1889,   885,   884,   883,  2535,  1911,     0,  1861,
    1877,     0,  1838,  1882,   124,  2536,     0,  1914,     0,  1649,
    1925,     0,  1854,     0,     0,     0,     0,  1219,     0,   246,
    1070,  1070,     0,     0,  1062,  1064,  1065,  1070,  1070,     0,
    2859,  2860,  2590,  1036,   377,     0,  2072,  2070,  2071,  2120,
    2842,  2069,  2068,  2850,  2852,  2838,  2840,  2847,     0,  2750,
    1196,     6,    67,     0,     0,   176,   176,   138,  1220,  1220,
    2795,   588,   144,   588,   588,   588,   588,     0,  1945,  2798,
    2799,  2797,   826,     0,  1233,  2129,  2132,  2796,  2133,   179,
     950,     0,   457,   179,     0,     0,     0,     0,     0,   458,
     459,   395,     0,  1044,  1045,  1039,  1041,  1043,     0,     0,
     946,     0,  2800,  1944,     0,   369,     0,     0,  1158,  1160,
    1159,  1176,   198,   195,   177,     0,   321,     0,   346,   352,
      82,  1084,  1740,  1742,     0,  1131,  2733,     0,     0,  2735,
    2739,   141,     0,     0,     0,  1813,  1817,  1823,  1827,  1830,
       0,     0,  1619,  1336,  1619,  1619,  1619,  1509,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1619,     0,  1374,  1346,  1347,     0,  1375,     0,     0,
       0,  2092,     0,     0,     0,  2765,     0,     0,     0,     0,
    1474,     0,     0,     0,  2765,     0,     0,     0,     0,     0,
       0,  1504,  1506,  2100,  1619,     0,     0,  1619,     0,     0,
       0,     0,     0,  1238,  1380,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1619,  1619,
       0,     0,  1619,  1388,  2094,     0,     0,     0,  2093,     0,
       0,     0,  2066,  2086,     0,  1391,  1393,  1392,     0,  1619,
    1619,     0,     0,     0,  1326,  1325,  1327,     0,     0,     0,
       0,     0,     0,  1284,  1283,  1282,  1281,     0,     0,     0,
       0,  1290,     0,  1292,  1294,  1289,  1291,  1293,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1328,     0,     0,
       0,  2067,  1433,     0,  1750,  1727,  1735,  1729,  1748,     0,
    1913,  1730,     0,  1739,   470,     0,  1736,     0,     0,  1723,
       0,    74,     0,  1973,     0,     0,     0,  1967,  1969,  1972,
    1968,     0,     0,  1974,   124,     0,  1970,  1949,  1952,  1959,
    1219,  1950,     0,     0,   271,   274,   276,     0,   279,  2639,
    2637,  2671,  2670,  2675,     0,  2672,  2668,  2631,  2661,  2702,
    2665,     0,  2702,  2667,  2666,  2702,  2662,  2669,  2702,     0,
    2634,     0,  1615,  1616,     0,  2591,     0,  2112,     0,     0,
    1037,     0,     0,  2010,  2011,     0,  1166,  2027,  2028,  2024,
    1614,  2578,  2581,   369,   330,   333,     0,     0,   326,   325,
     327,     0,     0,     0,   219,   322,   385,     0,     0,   699,
    1221,   506,     0,     0,   517,     0,     0,    70,    71,     0,
    1150,  2134,     0,  1149,  1153,     0,  1088,  1091,     0,   374,
     389,     0,  1767,  1757,  1766,  1542,  1997,  1994,   124,     0,
     238,   263,   258,   266,   260,   262,   261,   267,   268,   269,
     264,   259,   265,   252,     0,     0,  2637,     0,     0,  2634,
    2738,     0,  2740,  2756,  1192,  2745,  1705,  1642,  1651,  1211,
       0,  1650,  1545,  1621,     0,     0,  1194,  1216,  1197,  1215,
       0,  1206,     0,  2508,  2510,     0,   809,     0,     0,   812,
     814,  1787,  1786,   813,   822,     0,   811,     0,  2567,     0,
    2550,     0,  2537,     0,   818,   820,   819,  2545,   817,     0,
       0,  2521,     0,     0,  1921,  1219,  1219,  1888,     0,   588,
       0,     0,     0,     0,     0,     0,  1855,     0,     0,   639,
    1881,  1919,  1920,  1925,     0,     0,  1925,     0,  1894,  1915,
    1925,     0,  1925,  1850,     0,     0,  1842,  1847,  1843,     0,
    1849,  1848,  1851,  1839,  1840,     0,  1868,  1896,     0,  1915,
    1880,  1887,     0,  1867,  1874,     0,  1885,  1915,  1915,     0,
    1925,  1925,  1925,  1058,  1074,  1056,  1068,  1069,     0,     0,
    1061,  1060,  1835,  1545,   387,   372,     0,     0,  2839,  2853,
    2837,  2848,  2849,  2836,  1187,  2749,  1184,  2748,  2751,     0,
    1186,     7,     4,     0,   135,     0,     0,     0,   588,   588,
    1220,  2792,     0,  2780,  2787,  2788,  2791,  2823,  2790,  2789,
     588,  2786,  2779,  2782,  2783,  2785,  2784,  2800,     0,     0,
       0,     0,     0,  1931,  1929,  1946,  1947,   827,   826,   582,
     585,   584,     0,     0,  2131,     0,   942,     0,  1913,   940,
       0,     0,  1913,   406,  1913,   460,   934,  1042,     0,   588,
     947,   944,  1102,  1103,  1106,   368,   221,     0,     0,     0,
     494,  1176,  1162,  1178,     0,   199,   201,   357,   321,     0,
       0,     0,  1086,  1085,     0,  1083,  1141,  1139,  1138,  1136,
       0,  1137,  1135,  1126,  1132,  1133,  2732,  2736,  1913,   398,
    1819,  1744,  1542,  1746,  2111,     0,     0,     0,  1825,     0,
       0,  1620,  1619,     0,  1483,     0,     0,     0,     0,  1510,
       0,     0,     0,     0,     0,     0,     0,     0,  1312,     0,
       0,     0,     0,     0,  1454,     0,  1483,  1234,  1693,  1694,
    1678,  1679,  1677,  1680,  1231,     0,  1681,  1692,  1403,     0,
       0,     0,     0,     0,     0,  1590,  1591,  1592,  1593,  1601,
    1594,  1595,  1596,  1603,  1608,  1597,  1598,  1604,  1605,  1606,
    1599,  1607,  1602,  1600,  1609,     0,  1589,     0,     0,  1612,
    1610,  1613,  1611,     0,  1475,  1467,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1619,     0,
       0,     0,  1619,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1416,     0,     0,     0,     0,     0,  1619,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1370,     0,  2103,
    2102,     0,     0,     0,   854,     0,  1330,     0,  1329,  1553,
    1188,  2761,  2766,     0,  2537,  1470,  1472,     0,  1236,  1235,
    1237,  1248,  1241,  1246,  1239,  1243,     0,  1295,  2204,  1249,
       0,     0,  1277,  2765,  1628,  1278,  1263,  1268,  1269,     0,
    1266,  1267,     0,  1271,     0,  1270,  1274,  1275,  1276,  1279,
       0,     0,     0,     0,  1319,  1324,  1503,  1220,  2104,     0,
       0,   470,  1732,  2629,   473,   472,  1737,   471,  1788,  2687,
    1731,  1046,     0,     0,    76,    78,  1978,  1961,  1960,  1962,
    1966,   124,  1971,  1963,     0,  1975,  1976,  2251,  2476,  2479,
     283,     0,   256,   255,   257,   280,     0,     0,  2664,     0,
    2645,     0,  2649,  2643,  2647,  2132,  2701,     0,  2627,  2689,
       0,     0,  2635,     0,  2673,  2656,  2660,  2659,  2657,     0,
    2658,  2663,  2641,  1618,  2285,  2370,     0,  1621,  2595,   320,
     337,  1754,  2857,  2012,  2490,  2013,  2005,     0,  2025,     0,
       0,     0,   366,   332,     0,   324,   371,   220,   363,   378,
     382,   380,  1144,   700,     0,  1220,   504,   503,   502,   501,
       0,   519,   499,   507,    72,     0,     0,  2001,     0,     0,
       0,     0,     0,  1092,     0,  1765,     0,     0,  1743,  1543,
       0,  1993,  1995,  1988,     0,     0,     0,     0,     0,  2691,
    2616,     0,     0,     0,  2741,  2758,  2757,  2746,     0,     0,
    1720,     0,  1715,     0,  1193,  1661,  1662,  2428,  1660,  1652,
    1655,  1659,  1658,  1203,  1561,  1560,     0,  1199,  1517,  1202,
    1519,  1516,  1515,  1514,     0,  1560,  1622,  1629,  1212,     0,
    1220,  1221,  1221,  2100,     0,     0,     0,  2548,  2554,     0,
    2547,  2546,     0,     0,     0,  2569,  2551,     0,     0,  2515,
    2555,  2556,  2559,     0,     0,     0,     0,     0,  2553,  2473,
    2517,  2518,  2523,  2513,  2575,  2576,  2573,  2574,  2572,  2542,
    1895,     0,  1923,     0,     0,     0,     0,  1905,  1899,  1898,
    1892,  1900,  1893,  1910,  1909,  1908,  1865,  1864,  1858,  1916,
    1904,  1902,   176,  1925,  1863,  1862,  1903,  1901,  1844,  1845,
    1846,     0,  1649,     0,  1921,  1897,  1925,  1915,     0,  1925,
    1925,  1906,  1907,  1884,  1886,  1059,  1076,  1075,  1071,  1072,
    1077,  1067,  1066,     0,   321,  2843,  2851,  2855,  1649,  2755,
    2753,   589,   826,  2625,   139,   588,  2822,     0,     0,   588,
     588,     0,  2781,   145,   904,     0,     0,   127,   583,  1788,
    1788,     0,  2130,     0,     0,     0,     0,     0,     0,     0,
     180,   189,     0,     0,   404,   405,  1788,   403,   446,   447,
     450,   451,   452,     0,   453,  1788,  1788,   400,   426,   427,
     430,   431,   432,   433,   434,   396,     0,   401,   826,  2801,
    2802,     0,   955,     0,     0,  1105,   217,  1125,  1165,  1157,
    1164,  1161,  1176,  1174,  1163,   880,   879,     0,  1177,   197,
       0,     0,   344,   353,   347,   349,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    83,
      84,   104,  1741,     0,  1128,  1140,  1134,  1788,  1788,  1788,
    1788,   402,   435,   436,   439,   440,   441,   442,   445,   443,
     444,     0,  1913,     0,     0,  1814,     0,  2114,  1824,  1545,
    1828,  1827,     0,  1399,     0,  1447,     0,  1449,  1450,  1451,
       0,     0,     0,     0,     0,  1400,     0,  1344,  1401,  1402,
       0,  1396,     0,  1397,     0,     0,     0,     0,     0,     0,
       0,  1453,     0,  1232,     0,     0,  1348,  1349,  1341,  1333,
       0,     0,  1426,     0,     0,  1350,     0,     0,     0,     0,
    1407,     0,  1427,  1505,     0,  1507,  2104,     0,  1459,  1408,
    1355,     0,  1457,     0,  1356,  1428,  1429,  1430,  1410,  1411,
       0,  1432,     0,  1412,     0,     0,  1415,     0,     0,  1358,
    1463,  1461,     0,     0,     0,     0,  1465,  1360,     0,     0,
       0,  1359,     0,     0,     0,     0,     0,     0,     0,  1362,
       0,  1342,  1462,  1464,  1418,     0,     0,     0,     0,     0,
    1371,     0,  1200,  1552,  2767,  1188,     0,     0,  2756,  2764,
    1334,     0,     0,  2105,  1242,  1247,  1240,  1244,  2765,     0,
       0,     0,     0,  1261,  1260,     0,     0,     0,  2765,  1628,
    1264,     0,     0,  1443,  1444,  1500,     0,  1728,  1725,  1738,
       0,  1789,     0,     0,  1048,  1047,  1734,  1046,    79,     0,
       0,  1964,  1965,  1958,  1977,  1953,     0,   275,   284,   277,
     281,   282,   278,  2706,     0,  2705,     0,     0,     0,     0,
    2624,  2683,  2686,  2111,     0,     0,     0,  2599,  2606,  2602,
    2607,  2600,  2601,  2605,  2608,  2609,  2596,  2603,  1649,   321,
       0,  2014,  1167,  1169,  1170,  1168,  1176,     0,     0,  2584,
    2585,  2583,  2582,   328,   369,   321,   321,     0,   509,     0,
     518,     0,   530,     0,     0,     0,  2003,  2002,     0,  1151,
    1154,  1155,  1099,  1097,  1096,  1098,  1087,  1093,  1094,     0,
     575,  1771,     0,     0,     0,  1777,  1758,  1768,     0,  1675,
    1676,  1672,  1673,  1671,  1674,  1998,  1996,  1991,     0,   253,
    2617,     0,     0,     0,     0,     0,     0,     0,  2121,  1719,
    1716,     0,  1706,  1708,  1709,  1711,  2099,  1643,  1646,     0,
       0,     0,     0,  1560,  1545,     0,     0,  1537,  1562,     0,
    1562,  1539,  1540,  1545,  1545,  1542,  1557,     0,     0,  1624,
       0,  1214,  1222,  1217,     0,  2511,     0,  2541,     0,   825,
     824,   823,   821,  2568,     0,     0,     0,  2561,  2562,     0,
       0,  2538,  2539,  2540,     0,  2543,  2520,  2521,  2522,     0,
    1922,     0,  1869,  1926,  1927,     0,  1891,  1890,  1860,     0,
    1883,  1841,  1923,  1859,  1621,  1915,  1856,  1857,  1074,     0,
    1057,     0,   321,     0,     0,  2854,  2754,   136,   826,     0,
     140,     0,     0,   178,  2831,  2817,     0,     0,     0,     0,
       0,     0,     0,   592,     0,     0,   938,   183,   186,   184,
       0,   185,     0,     0,   455,   454,     0,  1913,   448,     0,
       0,     0,     0,     0,     0,     0,     0,   147,     0,     0,
    1913,   428,   407,   408,   411,   412,   413,  1034,  1788,  1034,
       0,  1788,  1788,  1034,  1788,     0,     0,  1788,  1788,     0,
       0,  1788,     0,     0,  1034,     0,  1788,     0,  1021,     0,
       0,  1788,  1788,  1788,  1788,  1788,  1034,     0,     0,  1788,
    1788,   494,  1788,     0,     0,  1052,     0,     0,  1788,  1788,
    1788,  1788,     0,     0,  1788,  1788,     0,  1788,   971,  1020,
     594,   621,   622,   935,   970,   972,   984,   490,     0,  1002,
    1023,  1024,  1022,     0,  2803,     0,   957,   959,  1104,     0,
       0,   321,     0,     0,  1581,   200,   321,     0,   350,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1142,     0,     0,     0,     0,  1913,   437,
       0,  1788,   397,   414,   415,   418,   419,   420,   421,   422,
     425,   423,   424,  1745,  1827,  1545,  1621,  2112,  1621,     0,
    1826,     0,     0,  1448,  1484,     0,  1511,     0,  1338,   783,
     783,   783,  1494,   768,  1498,  1489,   783,  1490,   783,  1492,
       0,     0,     0,  1297,  1313,     0,     0,     0,     0,     0,
    1455,  1452,     0,     0,     0,     0,     0,  1478,     0,     0,
       0,  1343,     0,  1438,  1460,  1458,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1466,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   843,   849,   852,   853,   855,   847,     0,  1420,
    1331,  2759,  1201,  1621,  1220,  2768,  2770,     0,  2750,  1553,
    2762,   929,  1471,     0,  1258,  1254,     0,  1252,  1627,  1273,
    1272,     0,     0,     0,  1262,  1221,  1434,  1220,     0,  1501,
    2106,  1726,  2630,   469,   638,  2688,  1724,    77,     0,  1956,
       0,  1951,  1954,     0,     0,  2703,     0,  2714,     0,  2693,
    2694,     0,     0,  2690,     0,     0,     0,     0,     0,     0,
    2594,   321,  1798,     0,  1176,  1180,  2018,  2587,  2588,  2586,
       0,   361,   361,   361,   361,     0,   510,   511,   513,  1221,
     527,   505,     0,   497,   500,     0,   509,     0,     0,  1089,
    1095,     0,  1204,     0,  1790,  1775,  1782,  1776,     0,     0,
       0,  1774,  2096,  2095,  2102,  2744,     0,  1587,     0,     0,
    2615,  2692,     0,     0,     0,  2747,   815,  1710,     0,     0,
    1647,  1648,  1645,  1663,  1654,     0,  1657,  1656,     0,  2750,
    1555,     0,  1541,  1538,  1563,     0,  1562,  1562,  1545,     0,
    1521,  1520,  1614,  1547,  1204,  1623,     0,  1625,  1640,  1213,
       0,  1218,  1226,  1225,  2097,  2104,  2509,  2549,     0,     0,
       0,     0,  2566,  2560,  2557,  2558,     0,  2519,  2525,  2524,
    2527,  2529,  1685,  1686,  1684,  1682,  1683,  1924,  1649,  1879,
    1878,  1852,  1871,  1873,  1925,  1073,     0,  1080,  1078,  1802,
    1805,     0,     0,  2844,  2856,     0,     0,  2825,     0,     0,
       0,   156,     0,   920,   922,   921,   906,   905,     0,   131,
     133,     0,   679,   128,   481,   490,   593,   596,   637,   636,
     188,   187,   192,   193,  1689,  1690,  1687,  1688,   461,   474,
    1691,   475,   449,   151,   150,   152,   153,   155,   154,   149,
     954,     0,   462,   463,   429,     0,   409,  1035,   927,   588,
    1006,     0,   680,   588,   881,   881,   586,     0,     0,  1145,
       0,     0,  1747,     0,     0,  1145,     0,     0,     0,  1788,
       0,  1014,   966,     0,  1749,     0,  1747,  1747,  1015,     0,
       0,   967,  1788,     0,     0,     0,     0,     0,  1747,  1145,
       0,     0,     0,   492,     0,  1145,   986,  1055,  1053,  1054,
       0,  1145,  1145,     0,     0,     0,     0,   627,   628,   626,
       0,     0,     0,   619,   595,   826,   968,   491,   969,   679,
       0,  1049,   676,   682,  2107,     0,  2805,  2727,     0,     0,
     161,  1108,     0,  1107,   232,   231,     0,   223,   300,   370,
       0,   222,     0,  1584,     0,  1585,  1582,  1583,   321,   354,
     109,   113,   105,    90,    86,   117,   118,    88,    89,    93,
      92,    94,    95,    98,    99,    96,    91,    97,    87,   121,
     123,   122,   100,   119,   120,    85,   468,   467,   466,   465,
     438,     0,     0,  1913,   416,     0,  1621,  1640,  2115,  1818,
       0,  1372,  1512,     0,     0,   784,  1485,  1486,  1496,     0,
    1497,   770,   769,   785,  1488,  1491,  1495,  1493,  1337,  1345,
    1394,     0,  1311,  1395,     0,  1425,  1340,  1339,     0,     0,
       0,  1378,  1405,     0,  1379,     0,  1476,     0,     0,  1352,
       0,  1354,     0,     0,  1440,  1409,  1431,  1381,  1413,     0,
    1357,  1332,     0,  1382,     0,  1387,  1385,     0,  1361,     0,
       0,  1368,     0,  1366,     0,  1367,     0,  1369,  1417,  1419,
       0,     0,   854,   840,   841,   842,     0,   844,   846,   848,
       0,     0,  1629,  1554,  2769,  1190,  2760,  1200,     0,     0,
    1473,  1250,     0,  1259,  1256,     0,  1253,  1222,  1445,  1435,
    1980,     0,     0,   292,   287,   295,   289,   291,   290,   296,
     297,   298,   299,   293,   288,   294,   286,   285,  2704,     0,
    2623,     0,  2697,  2699,  2628,  2685,  2684,  2707,  2707,  2707,
       0,   340,     0,  1755,  1171,  1176,  1180,     0,  1172,  2029,
     329,   334,   364,   362,   376,   379,   383,   381,   514,     0,
       0,     0,   534,     0,   532,   508,     0,  1152,  1100,   375,
    1220,  1772,  1784,     0,  1792,     0,     0,  1769,  1779,     0,
       0,     0,  1778,   494,     0,   254,     0,  2612,  2613,  2611,
       0,  1717,  1707,  1646,  1653,  2756,  1614,  1549,  1545,  1518,
    1545,     0,     0,  1526,  1545,  1522,  1524,  1579,  1220,  1633,
    1646,     0,  1649,  1224,  1223,     0,  2571,  2570,  2564,  2563,
    2565,  2544,     0,     0,  1870,  1649,  1866,     0,     0,     0,
    1621,     0,   373,  2626,   202,   652,   653,   651,   650,     0,
    2832,     0,     0,     0,   129,     0,     0,   482,     0,     0,
       0,   654,   655,   657,   658,  2029,   489,   826,   597,   148,
     410,   681,   928,  1145,     0,     0,     0,   881,   675,   588,
     927,   882,   588,   588,     0,  1004,  1030,  1031,     0,     0,
     605,   602,     0,   614,   987,   978,   988,   999,  1001,     0,
     604,   629,     0,     0,   617,  1747,     0,  1012,     0,     0,
     599,     0,     0,   648,   649,   647,   623,   630,  1032,  1033,
     600,   601,     0,     0,  1636,  1638,  1646,   607,   606,  1696,
    1695,   616,     0,   603,     0,  1018,   994,     0,   645,   643,
     640,   642,   641,   646,   644,   618,   609,   608,   611,   610,
     613,   612,   615,   631,   983,     0,  1034,  1034,  1003,     0,
    2110,     0,  1051,  1005,     0,   659,   677,   660,     0,     0,
     635,   634,   632,   633,     0,     0,  2728,     0,     0,     0,
     956,     0,   164,   162,   172,  1110,  1111,     0,     0,     0,
       0,     0,     0,   218,     0,  1179,     0,     0,     0,   110,
     112,     0,   114,   116,     0,   106,   108,   399,   464,   417,
    1827,  1820,  1664,     0,  1513,     0,     0,     0,     0,   831,
       0,     0,   786,  1499,   748,   783,  1308,   768,  1301,  1303,
    1299,     0,   749,  1302,   783,     0,  1305,  1307,  1298,     0,
    1456,     0,     0,     0,  1479,     0,     0,     0,     0,     0,
       0,     0,  1335,     0,  1436,     0,     0,     0,     0,     0,
       0,  1365,  1363,  1364,   838,  1422,     0,   851,   845,   843,
     850,     0,  1624,  1189,  2763,   930,  1255,     0,  1446,  1983,
       0,  1981,  1957,  1984,     0,  2698,  2696,  2695,     0,     0,
    2712,  2712,  2712,  1797,  1796,     0,  1795,   321,   336,   339,
    1799,  1173,  1181,  2031,  2030,     0,     0,   512,   515,     0,
     507,     0,   531,     0,   498,   576,     0,     0,     0,  1793,
    1781,  2750,  1770,  1773,  2104,  1544,  1588,  2614,   816,  2032,
    1644,  1550,  1548,  1556,     0,  1514,  1545,  1545,     0,  1514,
       0,     0,  1546,  1576,  1558,  1634,  1635,     0,  1630,  1632,
    1626,  1697,  2098,  2526,  2528,  1872,  1079,  1081,  1804,  1640,
    1806,     0,   203,   205,   206,     0,   213,   391,   390,     0,
       0,     0,     0,     0,     0,     0,   479,   476,   679,   478,
     578,   598,   989,     0,   588,   877,   878,   927,   902,  2107,
     927,   927,     0,     0,     0,   977,     0,  1131,     0,   982,
     822,   624,     0,   973,  1013,  1046,     0,   625,  1049,   975,
       0,  1639,   493,   974,   996,   980,  1976,  1007,  1050,   859,
     762,   713,   704,   783,   707,   706,   783,   718,   768,   764,
       0,   768,   768,   741,   740,   758,   744,   726,   831,   831,
     725,   761,   831,   745,   743,   747,     0,   749,   768,   754,
     742,   746,   763,   739,     0,   760,   783,   783,   783,   722,
     759,   831,     0,   752,   783,   683,   768,   831,   836,     0,
       0,   783,   785,  2109,  2807,     0,  2809,   171,   160,     0,
       0,   958,   960,     0,     0,   961,  1116,     0,   226,   301,
     822,   302,     0,   229,  1175,  1586,   321,   102,     0,   103,
       0,   101,     0,     0,  1815,  1373,   781,   779,   782,   780,
     829,   834,   832,   830,     0,   836,  1487,     0,     0,  1310,
    1304,   750,  1309,  1300,   831,  1398,  1376,  1377,  1406,     0,
    1477,  1468,  1404,     0,  1353,  1437,     0,     0,  1414,  1383,
    1386,  1384,  1389,  1390,     0,  1421,     0,  1640,  1257,  1979,
       0,     0,  1955,  2715,  2700,     0,     0,  2711,  2709,     0,
    2710,  2708,  2676,     0,  2621,  2622,  2620,  2604,     0,   321,
     341,     0,     0,   335,  1220,   520,     0,   537,   536,   533,
    1200,  1783,  1785,  1791,  1780,     0,  2040,     0,  1527,     0,
    1531,  1536,  1532,     0,  1523,     0,  1580,     0,  1200,  1646,
       0,  1712,  1664,  2826,     0,     0,  2824,   216,   214,   215,
       0,   209,   211,     0,   394,   392,   393,     0,     0,     0,
       0,     0,  1646,   925,     0,   483,  2750,   592,   656,   579,
       0,   991,     0,   927,   902,  2107,     0,   661,     0,   665,
     667,   587,  1017,     0,  1049,   979,  1000,  1019,  1011,  1010,
       0,  1009,  1145,  1637,   995,   997,  1092,     0,     0,   863,
     712,   705,   723,   721,   772,   765,     0,   772,   772,   732,
     748,   727,     0,   831,   738,   731,   750,   753,   755,   757,
     772,     0,   831,   720,   719,   729,   716,   772,   787,   766,
     751,   831,   709,   837,   836,   711,   831,   836,   772,   772,
       0,  2806,     0,  2804,     0,   158,   163,   173,   174,   948,
       0,  1117,  1113,  1114,  1109,     0,   806,     0,   224,   225,
     237,   236,   228,     0,   321,   111,   115,   107,  2428,  1665,
    1821,   835,   828,   833,     0,  1306,  1480,  1646,     0,  1439,
    1441,   839,     0,  1649,  1982,     0,  2682,  2681,  2680,  2677,
       0,     0,     0,     0,     0,     0,     0,  2713,  2717,  1794,
       0,     0,     0,   528,     0,     0,   562,   577,     0,     0,
       0,     0,  2033,  2035,     0,  1718,  1551,     0,     0,     0,
       0,     0,  1568,  1569,     0,     0,  1574,  1578,  1559,  1631,
    1698,  1211,  1713,  1803,     0,   204,   207,  2833,   213,   212,
    1220,   169,     0,     0,   892,     0,   924,     0,   894,   480,
     490,     0,   485,     0,     0,   990,   678,   673,   669,     0,
     903,     0,   663,     0,     0,     0,     0,     0,     0,     0,
    1016,  2074,  1008,   494,   976,     0,   981,   620,     0,   862,
       0,   867,   776,   777,   778,   733,   773,   775,     0,   931,
     735,   703,   728,   756,   734,     0,   730,   717,   795,     0,
       0,     0,     0,   791,     0,   857,     0,   798,   684,     0,
     685,   788,   790,     0,     0,     0,     0,   724,   708,   710,
     714,   715,   701,   702,  2108,  2808,  1196,  1185,  2813,   165,
     962,   321,  1112,     0,  1119,   245,   243,   321,   233,   241,
     235,     0,   242,   303,   230,  1666,     0,  1220,  1816,   771,
       0,  1482,  1351,  1423,  1697,  1985,  2678,  2718,  2721,  2719,
    2720,  2723,  1668,     0,  2722,  2716,     0,  1542,  1221,     0,
     521,     0,   524,   526,   540,     0,  1788,  1788,     0,     0,
    1788,  1788,  1788,  1788,   555,   563,   565,     0,     0,     0,
       0,     0,  2034,     0,     0,  2041,  2043,  1528,     0,  1533,
       0,  1525,  1564,  1564,  1575,     0,  1195,  2827,   181,   210,
    2818,   161,   170,     0,   890,     0,  1788,     0,  1025,   893,
     918,   900,     0,  1646,     0,  1025,   895,   917,   898,  2029,
       0,  2744,   993,     0,     0,     0,   671,     0,     0,     0,
       0,  2076,  2075,   985,     0,   860,     0,   864,   865,   866,
       0,   858,   774,   831,     0,   831,   801,   800,  1227,   793,
     808,   688,     0,     0,   799,     0,   789,   797,   792,     0,
       0,  2811,     0,     0,  2810,     0,   167,   175,  1118,  1123,
       0,  1120,  1122,     0,   227,   244,  1667,  1822,  1646,  1211,
    1670,  1669,  1800,  1808,     0,  2019,     0,   529,   522,     0,
       0,   538,     0,     0,  1788,  1788,     0,     0,     0,     0,
       0,   535,   564,  1788,  2038,  2039,     0,  2036,     0,     0,
    2042,     0,     0,     0,  1572,  1570,  1220,     0,  2834,     0,
     172,     0,     0,     0,  1025,   891,   916,   915,   896,   910,
       0,     0,   132,  1027,  1026,   901,     0,   923,   926,   134,
     899,   477,   487,   486,   992,     0,     0,     0,     0,     0,
       0,     0,     0,   861,     0,     0,   736,   932,   737,     0,
     807,  1227,   796,  1220,   805,   804,   802,   803,   767,  2750,
       0,     0,     0,   166,     0,   159,  1115,     0,   234,  1481,
    1198,     0,     0,   815,   516,   528,   525,   548,   541,   544,
       0,   574,   568,     0,     0,   570,   571,   569,   566,   559,
       0,   557,     0,  2037,  2045,  2044,  1530,  1535,     0,  1565,
       0,     0,     0,     0,     0,  1701,  1703,  2828,   190,   182,
       0,   321,     0,     0,   146,   908,   907,   130,   897,   909,
     919,  1029,  1028,   914,   913,   911,   912,  2750,     0,     0,
       0,   890,     0,   892,   894,     0,   873,     0,   872,     0,
     869,   868,  1228,     0,   794,     0,  2812,     0,  2814,     0,
     168,  1121,  1807,  1809,  2020,   523,   548,     0,   546,     0,
     542,   539,   543,   572,   573,     0,   556,     0,   567,  1567,
    1566,  1581,     0,  1221,  1699,  1220,   181,   191,  2835,  1220,
     174,   488,     0,   890,     0,   662,   890,   666,   668,   998,
     875,   876,   874,     0,     0,  1229,   689,  2815,  2816,  2046,
     545,     0,   553,   549,   551,   554,   562,   561,   558,     0,
       0,  1704,  1702,  2829,  2819,   157,   674,   670,   890,   664,
       0,     0,   691,   690,   692,     0,  2032,   547,     0,     0,
     560,  1573,  1571,   321,     0,   672,   871,   870,     0,   696,
     686,   693,   695,     0,  2040,   552,   550,  2830,     0,   698,
     697,   694,     0,  2048,  2820,  2047,     0,  2052,   321,     0,
       0,  2059,  2821,  2050,  2051,  2049,  2054,     0,     0,  2056,
    2057,     0,  2021,  2058,  2053,     0,  2060,  2062,     0,  2055,
       0,  1220,  2061,     0,  1221,  2063
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4295, -4295, -4295, -4295,  1714,  3428, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295,  1856, -4295, -4295, -4295, -4295, -4295,
    1505, -4295,   329, -4295,   334, -4295,   333, -2539,  -477,  3320,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
    -138,  1166,  3270, -4295,   222, -4295,  -130, -4295, -4295, -4295,
   -3497,  -246,  -415, -4295,     0,    20,  3253,  -409, -4294, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -2137, -4295,
   -4295, -4295,    50, -4295, -4295,  -578, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295,  -193,   359,  1320, -4295, -4295, -4295,
    4340, -4295,  3783, -4295, -1937,  2331, -4295, -4295, -4295, -4295,
   -4295,  2420, -1834, -4295, -4295, -4295,  1385, -4295, -4295, -4295,
    -922,    29, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295,   560, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  2106, -4295,
   -4295,  3704, -4295, -4295, -4295,  1361, -4295, -4295, -4295, -4295,
   -4295, -4295, -1308, -4295,  1838,  1837, -4295,  1839, -4295,     9,
    -577, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  3224, -4295,
   -4295, -4295, -2255, -4295, -4295, -2647,  2722, -4295, -2015, -4295,
   -4295, -2087, -4295, -4295, -2009,  1043, -4295, -4295,  1423,   337,
   -4295, -1562, -2136, -2118, -4295, -4295, -4295, -2202, -2179,  -769,
    2466, -1266, -2521, -4295, -4295, -4295, -4295,  -116, -4295, -4295,
      58,  1600,  2147, -4295, -2718, -4295, -4295,   746, -4295, -4295,
    1368,   570,  1366, -4295,   914,  2976, -1330, -4295, -4295, -4295,
   -4295, -4295, -4295,  -174,   131,  -264, -4295, -4053,   579, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -3024, -4295, -4295,
   -4295,  -413, -4295, -4295,  -351, -4295, -4295,  -389, -4295,   -47,
   -2542, -4295, -4295, -4295, -4295,  2228, -1536, -4295,  -586, -4295,
     274,  1632, -2635, -2130, -4295, -1039, -1024,  -269, -4295, -4295,
   -4295, -4295,  1157, -4295,   527,  1630, -2608, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295,  1155, -4295, -4295, -2612, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295,  -411, -4295,  -221,   747,
   -4295, -3126,  1072,   477, -4295, -4295, -4295, -4295, -1630, -3177,
   -1060, -4295,    73, -2760, -2734,   449, -4295, -4295,    51, -3929,
   -4295,  -602, -2297, -2575,  -229, -4295, -4295,    67, -2370,  1745,
   -4295,   420, -1132, -2941,  1511, -4295, -4295,  1036, -4295, -2984,
    1035, -4295, -4295, -4295,  1042, -4295,  -326, -4295, -4295, -4295,
   -4295, -3482, -4295, -1659, -2955, -4295, -4295,  4395,  4397, -2654,
    -271,  -270, -4295, -4295, -4295,   312, -4295, -4295, -1940,  -148,
     -37,   -29, -2639, -3721,   146, -3413, -4295,   272, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295,  1678,  -937, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -3322, -3068, -4295, -4295,  1211,
   -3055, -2221, -2217, -2601,  3414, -4295, -4295, -4295, -4295,  3352,
   -2417, -3620, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  2888,
     861, -4295, -4295,  1805, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295,   304,  1921, -4295, -4295, -4295, -4295, -4295,
    2226, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  -186,
   -4295, -4295, -4295, -4295, -4295,   573,  2773, -4295, -4295, -4295,
   -4295,    -9, -4295, -4295, -4295, -4295,  2463, -4295, -4295, -4295,
   -4295,  2802, -4295, -4295, -4295, -4295, -4295, -4295,  1482, -4295,
    1956, -4295, -1634, -4295, -4295,  1018,  -147,  1900,  -628, -4295,
    2054, -4295,    90, -4295,  3420, -4295, -4295, -3279,  3529, -4295,
   -4295, -2643, -4295,  3512, -1498, -2875,  2413,   342,  -141, -2063,
    1067,  -146,  1629,   745,  5109, -4295, -1225, -1219, -4295, -4295,
      -2, -4295, -4295, -4295, -4295, -4295, -4295,  2153,  2158,  -638,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295,  1533, -4295, -4295, -4295, -4295, -1318, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295,  -964, -4295, -2235, -4295, -4295, -4295,
    -512, -4295,  3290, -4295, -4295, -4295, -2459, -1515,  1892,   991,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295,  1902, -4295, -1719,
   -4295, -2931, -4295, -4295, -4295, -4295,  1563, -4295, -4295, -4295,
   -4295, -4295, -4295, -1880, -4295, -2013,    40, -4295,   220, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295,  -247,   810,  -244, -3863,
   -1214,  1648, -4295, -4295, -1375,  3340, -1949, -4295,   737, -4295,
    2063,  1113, -4295, -4295, -4295, -4295,   603, -2971,  2918, -4295,
   -4295, -3389, -1015, -4295,  2919, -4295, -1467,  1459,   417, -4295,
   -1527, -1197, -2350, -3208, -2657, -4295,  1280,   106, -4295, -4295,
   -4295,  -233, -4295, -4295, -4295,  1484, -4295,   426,   428, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,  -583,
    -952, -4295, -4295,  2227, -1916,  -489,  4490,     1, -4295, -4295,
       2, -4295, -4295, -4295, -4295,  3157,  3104,  2026, -4295, -4295,
   -2810, -4295, -4295,  1986, -4295,   730,  -999,  1218,  1063, -4295,
   -4295,  1056, -3479, -4295, -4295,     4, -4295, -4295, -4295,  1010,
   -4295,   -99,  3973,     5, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295,  2846, -1151,  3880, -4295, -4295, -4295, -4295, -4295,
   -4295,  2414, -4295, -4295, -4295, -4295, -4295, -4295,  3033,  3992,
    -607, -1438, -4295,  -828,  2416,  1912,  -846, -4295, -4295, -4295,
    3489,  3997, -4295, -4295,  4508, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295,  2656,   662, -4295, -4295,   529, -4295,
   -4295, -4295, -4295,  3145, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295,  1123,  -218, -4295,
     318,  -228, -4295,   140, -4295, -4295, -4295, -4295, -4295,  -257,
   -4295, -4295,  -261, -4295, -1105,  3818, -1471,   240, -1362, -2770,
   -4295,  1114,  3122, -2992,  -705, -1228, -1256, -3038,   -15, -4295,
   -4295,  3758,    30,  -486, -1641,    -6,  -853,  -107,  -627,  -634,
    -844, -4295,  -515, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295,  1966, -4295, -4295, -4295,  1074, -4295,
    4038, -4295,  2758, -1493,  4039,  -584,  2512,  1985,  1987, -4295,
   -4295, -4295, -4295, -1970, -4295, -4295,   190, -4295,  2636, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295, -4295, -4295, -4295, -4295,  3014,  -483,  -481,  3161,
    4060,  3683, -4295,  3254, -4295, -4295, -4295, -4295, -4295,   376,
   -4295,   129,  2050, -1551, -2546, -4295, -4295,  2139,   743, -4295,
    1653,  -428,  -765, -4295, -4295,   374, -4295, -4295, -4295,  1375,
    1557,  4071,  3688, -4295, -4295, -4295, -4295, -4295, -3001,  -982,
   -4295, -3696, -1443, -4295, -4295, -4295, -2336, -3270, -4295, -4295,
   -1104, -4295, -4295, -4295, -4295, -2199, -4295, -4295, -4295,    -1,
    4034,  4036,  4042, -4295,  -868, -4295, -4295, -4295, -4295, -4295,
   -4295, -4295,  3568, -4295, -4295, -4295, -4295, -4295,  3036,  3575,
   -4295, -4295, -4295, -4295, -4295,  3580, -4295, -4295, -4295, -4295,
   -4295,  1750, -4295, -4295, -4295, -4295, -4295, -4295, -4295, -4295,
   -4295
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    64,   638,  1642,    65,    66,    67,    68,    69,  1457,
      70,   870,  1361,  1954,  1955,    71,   572,    72,  1721,  2319,
    2320,  3744,  3745,  3738,  3739,  3741,  3742,  2321,   699,   700,
      73,  2723,  3912,  3595,  3596,  2212,   646,   647,  1112,  2717,
    2746,  2747,  1651,  3592,  3720,  4429,  3724,  4576,  4685,  4511,
    2826,  4025,  4430,  4431,   567,  2712,  1686,  4628,  2240,  4729,
    2241,    74,   692,  1163,  1714,  1715,  3901,  3902,  3903,  4145,
    4150,  4151,  4152,  4153,  2831,   932,  2276,  2832,  3730,  4255,
    4262,  4263,  3306,  4437,  4438,  4439,  4260,   976,  4440,    75,
     598,   599,   978,  1493,  1970,  1494,    76,    77,   566,  1384,
    1385,  1386,  1387,  2522,  1971,  2517,  2518,  3476,  3307,  4258,
     933,   934,    79,   573,   935,   936,   937,  1441,   938,   939,
     940,   941,  3040,   942,  1437,  3500,   911,   912,  2549,  3491,
    3839,    80,   536,   695,   696,  1720,  2294,   697,  2295,  2837,
    3737,   698,  1165,  2291,  1167,  3504,   943,  2564,   944,  1433,
      81,  1155,  1705,  1706,   945,  1084,  2204,   965,  2054,  3505,
    1446,   946,  2565,  2567,  2566,    82,   583,   624,   593,  3909,
    4157,   670,   671,   710,  2342,   672,  1181,  1130,  1688,  2265,
    2266,  2752,  2753,  2872,  2873,  2874,  2257,  2258,  2259,  2331,
    2332,  2333,  2247,  2248,  2249,  1692,  2244,  2245,   673,  1131,
    1141,  2260,  2261,  2262,  2878,  2335,  2336,  2337,  2338,  2263,
    1946,  2264,  3198,  3183,  4167,  4166,  3184,  3919,  4531,  4747,
    3605,  3606,  3287,  3672,  2283,    83,   586,   954,  1454,  2573,
    1455,  2575,  3045,  3046,  3047,  2036,  2037,  4115,  2041,  2572,
    4303,  4695,  4471,  4472,  3049,  4470,  3053,  3513,  3514,  3851,
    4117,  4306,  4700,  4600,  4781,  4698,  4777,  4699,  4779,  4849,
    4823,  4824,  4611,  4710,  4711,  4785,  4826,  4484,  4485,  4486,
    2595,  3062,  4120,  4170,  2707,  1678,  1679,  3625,  1104,    84,
    3185,  2809,  3186,  3187,  3695,  2811,  2812,  3003,  1568,  3685,
    3656,  3589,  3600,  3601,  3602,  3603,  3604,  4361,  4538,  4363,
    4364,  4535,  4657,  4534,  3705,  3618,  3221,  3222,  3292,  3708,
    4228,  4408,  4409,  4844,  4860,  4861,  4862,    85,   951,  4030,
    4006,  4007,  4008,  4009,  4010,  4011,  4012,  4417,  3370,  3371,
    4385,  4386,  4387,  3365,  3366,  3763,  4410,  4411,  4412,  4031,
    4559,  4054,  1533,  1534,  3541,  1546,  1547,  2660,  2120,  2661,
    1682,  4055,  4056,  4235,  3431,  4084,  3437,  3438,  3439,  2962,
    2963,  2964,  2965,  2966,  2459,  4413,  3707,  4199,  4378,  4381,
    4551,  4760,  3619,  3223,  3622,  1061,   648,  3224,  3225,  4634,
    4518,  4525,  4635,  4526,  4519,  4177,  2720,  4636,  4637,  4638,
    4528,  4521,  3176,  4161,  4162,  3611,  3450,  4388,    86,   142,
    2268,  1122,  1133,  1129,  1152,   677,  2272,  1134,  2827,  3300,
    4249,   660,  2813,  4192,  3937,  4196,  2814,  3635,  2815,  4171,
    4355,  2816,  3954,  4194,  4375,  3636,  3637,  2817,  2818,  2819,
    4642,  4643,  4644,  3226,  1421,   675,   676,  1145,  1146,  1147,
    2506,  3703,  3270,    87,  2200,  2195,    88,  1074,  1075,  1076,
    1613,  1614,  2198,  2199,  2700,  3158,    89,   702,  1725,  1467,
    2052,    90,   963,  2586,  2587,  2588,  3059,    91,  1154,  1702,
    1703,  2275,  3303,  3727,  4026,  4254,  4434,  4250,  4580,  4581,
      92,   704,  1174,    93,   541,  1733,  1734,  1735,  2324,    94,
    1448,   150,    95,   962,  1460,  1463,  1464,    96,   691,  1157,
    1158,  1159,  1160,  2279,    97,  2017,  2552,  2553,  2554,  2555,
    1711,  2833,  1712,  1713,  2288,  3498,    98,    99,   634,   635,
    2466,  2467,   604,   988,   605,   606,   607,  2971,  2972,  2973,
    2097,  1005,  1006,  1007,  1516,  1518,  1519,  1610,  1520,  2033,
    3121,  4670,  1217,  1213,   832,   833,   834,   835,  1308,  1309,
    3716,   836,  1318,  1910,  3382,  3778,  4064,  1768,  1769,   837,
     838,   839,   840,   841,   842,  1937,  3403,  3404,  3794,  2492,
    2493,  2494,   843,  2380,  3388,  2394,   844,  1301,  1895,  1825,
    3786,  3396,  4069,  4276,  1753,  2356,  2910,  3759,  3373,  2998,
    2461,  1240,  1241,  1198,  2363,  1759,  2098,  2099,  2100,  2101,
    2102,  3880,  3881,  4317,  4129,  4319,  4133,  2642,  2643,  2058,
    2059,  2103,  2104,  3098,  4127,  2462,  2463,  2464,  3099,  3548,
    3113,  3114,  4138,  2633,  2105,  3105,  4624,  4325,  4326,  4722,
    4721,  4327,  4136,  4137,  3882,  3883,  3314,  3315,  3316,  3076,
    1815,  1816,  1823,  1414,  1415,  1754,  2107,  2647,  3118,  3561,
    2483,  2649,  3559,  3888,  2822,  3664,  3665,   991,   992,  2083,
    2627,  3092,  1509,  1510,  1511,  2089,  3093,  3094,  4044,  4464,
    4261,  2967,  3819,  3199,  1786,  1787,  3671,  4141,  4505,  4724,
    4725,  4726,  2080,  2081,  2622,  2623,  2624,   993,   994,  1506,
    2082,  3086,  3869,   100,   548,   101,  1952,  3001,  1358,  2514,
    1172,  1472,  1740,  1741,   860,   856,   562,   102,   574,  2550,
     103,   594,  2056,   916,   968,  1473,  1474,  2596,  3063,  3070,
    2597,  3075,  3861,  3065,  3521,  3522,  2501,  2502,  3066,  3524,
    3858,  3835,  3836,  3493,  4111,   104,   622,  3580,  3159,  3160,
    4592,  4593,   969,   105,   547,  1185,  2886,  4270,  1746,  2344,
    4448,  1186,  1187,  2347,   715,   716,   106,  1079,   618,  1592,
    1593,  1594,  2182,   107,   610,  1062,  3148,  3575,  2166,   958,
    1355,  1573,  1065,  1574,  2152,  2682,  1557,   108,  1118,  1117,
     687,   109,   110,   655,   151,  1674,   111,   871,  1377,  1966,
    3011,  3012,  3461,  1378,  1379,  2515,  2511,  3820,  3821,  4092,
     112,   595,   973,   974,  1478,  1476,  2607,  2061,   113,   588,
     959,  2047,   114,   577,   921,  1425,  2016,   115,   116,   117,
     923,  3499,  4693,  4819,   581,  2019,  1429,  3920,  4126,  4312,
    4313,  4315,  4495,  4496,  4846,  4877,  4885,  4881,  4888,  4889,
    4892,  4896,  4897,   846,  1090,  1091,   847,  4370,   848,   849,
     850,  3071,  3072,  2628,   851,  3073,   852,  3293,  1173,  1743,
     570,   532,   667,  1092,  2619,   854,   948,  1125,  1461,  1986,
    1987,   534,   535,   118,   609,  1009,  2115,  1523,  1023,  1551,
    1541,  1550,  2140,  2677,  2143,  2678,  2679,  3572,  3139,  3573,
    3140,  1068,  2136,  1524,  3141,  1525,  2129,  2130,  2131,  2132,
    3133,  1539,  2126,  2149,   119,   924,   540,  1431,  1432,  2561,
     120,   621,   121,  1416,  2007,  2008,  2546,  3029,  2547,   122,
     982,   983,   123,   899,  2710,  2530,  1942,  1128,  1943,  1993,
     902,  1390,   903,   904,  1405,  1399,  1408,  1402,  4290,  4101,
    4102,  2534,  1950,  1988,  2070,  3021,  3828,  1989,  1980,  2524,
    2525,  3830,  4104,  3480,  4297,  4298,   124,   155,   125,  4730,
     543,   707,  1180,  1501,   126,   127,   128,   129,  1504,  1635,
    2617,  1636,  1637,  1638,  1639,  2210,  2077,  1891,  1892,  3448,
    1298,  1299,  2469,  2974,  2975,  1008,  1107,  1662,  1653,   143,
     144,   145,   146,  1149,  1150,  3296,  3715,  4015,  4243,  4244,
    4428,  4574,  1655,  3170,  4629,  4854,  4878,  1656,  1657,  1658,
    3584,  4334,  4627,  4796,  4853,  1659,  3169,  3906,  4508,  4731,
     130,  1093,   632,  1633,  1628,  1630,  2207,  2705,   131,   132,
     133
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     533,   154,   678,  1064,   682,  1098,  1505,  1021,  1060,   569,
    1443,  2084,   564,  1675,   563,   964,  1535,  1538,   571,  1785,
    1973,  1830,  1570,  2345,   584,  1026,   531,  1552,  1127,    78,
     587,   592,  1879,   669,   158,  1126,   845,  1748,   600,  2091,
    1853,   603,  1443,  2090,  1600,   601,   600,  2820,  2652,  2653,
     690,  2821,  3069,   623,  2287,  2020,  1105,  2141,  2548,  1106,
    1878,   857,   858,  1242,  1972,   862,   863,   864,   949,  2911,
     866,   867,   868,  3263,  3532,  1438,  1439,  2284,   949,  3200,
    3177,  2918,  1193,  1680,   900,  1901,   901,  3711,  1947,  3342,
    3006,  3200,  3200,  1909,   657,  2214,  1354,  3543,  1681,  3443,
    1911,  1912,  3900,   658,  1915,  1916,  1917,  1918,  2203,  1920,
    1921,  1923,  1925,  1926,  1927,  1928,  1929,  1462,   900,  1171,
     984,  1794,  1175,  2039,  3560,  2022,  2250,  1622,  2609,   661,
    2755,   533,  2980,   533,   668,   674,  1071,  2516,  2810,  1078,
    2879,  2173,  2228,  3372,  2919,   679,  2657,  3562,  2756,  3220,
    3189,   668,   683,   684,  3870,   685,   686,   663,  3228,   665,
    3157,  2186,  3232,  2880,  3725,  4124,  3367,  3368,  3813,  2189,
    2190,  3889,  3374,  3247,  3376,  3101,  2334,  3553,  3814,  1412,
    3612,  4289,  3651,  4252,  3110,  3258,  1294,  1295,  1296,  1566,
    3628,  1303,  1304,  4164,  1303,  1304,  3762,  2504,  1337,  1303,
    1304,  3433,  1704,  1303,  1304,  2034,  2876,  3928,  3826,  3200,
    3200,   706,  3018,  4050,  1601,  4233,  4336,  1303,  1304,  4050,
    2456,   582,  3267,  4021,  2877,  2646,  3354,  3212,  3213,   591,
    1755,  1756,  1757,  1602,  4051,   578,  2045,  1086,  4216,  2738,
    1654,  1663,  1406,  2751,  3433,  2869,  4154,  1775,  4052,  2028,
    4095,  1423,  4858,  1030,  1011,  3776,  1303,  1304,  3527,  1030,
    1011,  1537,  2255,  3058,  1086,  2976, -1577,  3173,  1677,  1990,
    3623,  2255,  4321,  2361,  3297,  1303,  1304,  3951,  3614,   907,
    1839,  2071,  2246,  1843,  1701,  4780,  1338,  1338,  1303,  1304,
    1555,  2364,  1303,  1304,   956, -2752,  1176,  2133,  1303,  1304,
    -937,  4533,  1616,  3568,  1862,  1863,  3790, -1577,  1867,  2758,
    1303,  1304, -2111,  3933,   919, -2673,   612,  4353,  3434,  4462,
   -1712,  1555,  2631, -1617,  3943,  1881,  1882, -2679,  4191,  3843,
    3614,  3147,  4842,  1631,  4728,  1427,  1303,  1304,  3829,  2667,
     681,   970,  4515,  1303,  1304,  3348,  3349,  1412,  1303,  1304,
    1527,  1727,  4050,  1303,  1304,  2242,  2123,  4155,   579,  4883,
    1341,  3434,  1143,  3277,  1751, -2656,  1677,  4051,  1531,  2134,
     989,  3701,  1303,  1304,  1751,  3090,   575,  1751,  4122,  1677,
    1359,  4052,  1303,  1304,  2124,  2482,  3752,  4547,  1470,  1303,
    1304,  1508,  1030,  1011,  1178,   619,  2520,  1751,  -580,  1303,
    1304,  2196,  4382,   615, -2752, -2514,  1611,  1944,  4178,  1625,
   -1913,  -581,  4493,   949,   949,  1303,  1304,   949,  3545,  3520,
    1087,  1088,  2252,  2528,  4664,   159,  1303,  1304,  3885,  3886,
    4680,  1303,  1304,  1303,  1304,   537,  2709,  3174,  2620,  4343,
    2285,  4681,  4096,  3009,   952,  3907,  4494,  1087,  1088,   949,
     542,  -484,  3807,  2529,  2495,   971,  3809,  3887,  1303,  1304,
     898,  3615,  2496,  2286,  2323,   910,  2500,  1303,  1304,  3908,
    4349,  3558,  2340,  1728,  1179,  2457,  2433,  1729,  2246,  1575,
     576,  3546,  2197,  1581,  1991,  3149,  1612,  2246,  1730,  3709,
    1480,   292,  3091,   294,   898,  3326,  2072,  3216,  1752,   620,
     990,  4383,  2521,  1303,  1304,  1144,   990,  1624,  1774,  2029,
    2243,  1838, -2597,  1949,  4174,  1303,  1304,  4179,  4180,  1793,
    1532,  2205,  4516,  1403,  3843,  1668,  2116,  1669,  1670,  1671,
    1672,  1842,   972,  2605,  1242,  1632,  3537,  3538,  3539,  4728,
     674,  1428,  2529,  4384,  2137,  2125,  1528,  3844,  3278,  2504,
    4843,   674,  3608,  3702,  4884,  1605,  2256,  1981,  1531,  1617,
    1305,   668,   905,  1306,  4372,  2256,   668,   701,  1305,   917,
     957,  1306,  1305,  1153,  4354,  1306,  2135,  1595,   156, -2514,
    1057,  1941,  3612,   960,  2783,  4548,  1305,  1424,  1718,  1306,
     961,  1726,  1303,  1304,  3936,   668,  2668,  2093,   909, -2673,
    4463,  1339,  1339,  1022,  1177,  2505,   918,   920,  2632,  4755,
    3944,  3945,  1944,  1080,  1503,  3791,  2755,  2952,  4776,  3875,
    1731,  2655, -1617,  3879,  1992,  1305, -2597,  3109,  1306,  4299,
    1303,  1304,  4195,  1102,  2756,  4621,  1992,  4622,  3200,  1680,
    3599,   908,  1556,   701,  1305,  3855,   701,  1306,  3435, -2656,
    1081,   949,  3704,  2068,  1681,  3934,   668,  1305,  1132,  4682,
    1306,  1305,  3926,  1945,  1306,  1303,  1304,  1305,  3298,  2030,
    1306,  2879,  1722,  1556,   668,  1947,  1161,  1974, -1577,  1305,
    2810,  3616,  1306,  3884,  1914,   658,  2250,  1164,  4549,  1762,
    1763,  3435,  4050,  2122,  2880,  3200,   658,  3175,  4727,   658,
    2484,  1935,  1132,  1973,  2754,  1305,  3749,  4051,  1306,  1188,
    1532,  2487,  1305,  4156,  2490,  1306,  1818,  1305,  1732,  3862,
    1306,  4052,  1305,  1724,  1831,  1306,  1833,  2168,  3202,  4099,
    2171,   705,  1030,  4210,  2174,  3214,  2177,  2876,  1846,  1847,
    1848,  1305,  3844,  2362,  1306,  3153,  1852,  1972,  1407,  2694,
    4329,  1305,   869,  3100,  1306,  2877,   580,  1353,  1305, -1617,
    4357,  1306,  1243,  1089,  2192,  2193,  2194,  4859,  1305,   986,
    2334,  1306,  2322,  4346,   950,  1951,  3444,  2188,  3268,  2046,
    2875,  3350,  1985,  3019,  1305,  1057,  4053,  1306,  2354,  2035,
    1282,  4217,  4053,  3020, -2679,  1305,  1443,  3827,  1306,  2222,
    1305,  -937,  1305,  1306,  1724,  1306,  1413,   613,  3569,  2481,
    3726,  1082,  1303,  1304,  1307,  3865,  4658,  1307,  4660,  4661,
    1303,  1304,  1307,  1300, -1617,  1302,  1307,  1305, -2679,  4253,
    1306,  3748,  3436,  1336,  2888,  3762,  1305,  3364,  2470,  1306,
    1307,  4307,  2353,  2570,  4512,  2031,  1886,  1887,  2378,  3269,
    1345,   533,  1347,  4212,  1349,  1132,   533,  4316,   668,  4328,
     533,  2458,  3617,  1352,  2069,  2032,  1388,  1357,  1945,   900,
    4186,  1126,  1305,  1320,  2407,  1306,  3010,  1346,  2411,  1307,
    3630,   614,  1351,  2255,  1305,  2053,  1356,  1306,  4451,  3612,
    4517,  4665,  3612,  3612,   616,  4139,  3215,  1962,  1307,  -580,
    2379,  1606,  2435,  1417,  4188,  2750,  3660,  3661,  1536,  1430,
    1540,  1307,  -581,  1543,  1548,  1307,  3036,  1723,   658,  2251,
    1434,  1307,  3035,   154,  1440,  4053,  3112,  1724,  4142,  1569,
    2094,  2968,  3457,  1307,  4748,  4749,  2434,  3357,  4752,  3359,
    3150,  1886,  2398,  2172,  1576,  4130,  4131,  1465,  1582,  4230,
    1126,  1724,  -484,  1475,  2352,   668,   658,  2505,  1404,  1307,
    3610,  1305,   658, -1617,  1306,  3868,  1307,  1652,  1652,  2339,
     682,  1307,  3921,  2156,  1413,  3017,  1307, -2597,  1596,  2437,
    2438,  3168,  2252,  4766,  3069,  1458,  3510,  2370,  4756,  3364,
    3867,  2454,  2455,  1303,  1304,  1307,  2985,  2986,  1135,  1305,
    2558,  2062,  1306,  1022,  1647,  1307,  4811,  3372,  3585,   668,
    2583,   668,  1307, -2597,   668,   668,  2372,  3395,   966,  1985,
    1303,  1304,  1307,  3381,  3442,  3392,  3393,  4095, -2598,  4804,
     668,  4059,  3399,  3400,  1305,   134,  1607,  1306,  1307,  3897,
    4062,  3339,  3416,  3417,   900,  1182,  2117,  1303,  1304,  1307,
    3948,  4801,  1136,   544,  1307, -2660,  1307,   565,  3454,  3455,
    1608,  1381,  2217,  2218,  2820,  3481,  2340,  3940,  2821,  1323,
    2375,  2078, -2659,   658,  2221,  2376,  2882,  4277,   585,  2755,
    2230,  1307,  1303,  1304,   701,  2791,   701, -2657,  3220, -2658,
    1307,  3874,   589,  3551,  3552,  3878,  3247,  2756,  1644,  2246,
    1072,  1643,  2377,  2095,   608,  1645,  1646,  2096,  2583,  1667,
    4515,  2384,  1676,  2271,  4273,  3246,  4283,  3718,   683,   684,
     617,   685,   686,  2663,  2127, -2663,  1307,  1696,  1303,  1304,
    3586,  2405,   633,  2794,  4647,  3612,   658,  2559,  1307,  2255,
    1819,  3535, -2598,  1820,  1137,   533,  2163,  2385,   658,  3779,
    1724,  2879,  1889,  1468,   545,  2810,   136,  1944,  2091,  2391,
    2091,  2091,   900,  3142,  3096,  3097,  3571,  2690,   658,  1742,
    2551,  1700,  2228,  1680,  2880,  2250,  3163,  2256,  1744,   967,
    2516,  1305,   693,  4761,  1306,  2933,  1119,  2327,  1681,  1305,
    2754,    14,  1306,  2706,  1896,  1303,  1304,  1648,  1350,  4689,
    2890,  4200,  4201,   949,  2578,  2579,  2164,  3301,  3372,  3871,
      48,  3372,  3372,  4773,   913,  1307,  3207,  2876,  1243,  4096,
    1303,  1304,  1303,  1304,  1944,  1435,  3482,  3143,  3372,  4202,
   -1913,  1934,  4203,  1243,  4322,  2877,  2396,  1303,  1304,  1303,
    1304,  2094,  4226,  3054,  4812,   898,  3372,  4231,  4234,  4236,
    4237,  1303,  1304,  1307,  2984,  2584,  3041,  3154,  2269,   292,
     636,   294,  4222,  4223,  4224,  4053,  1303,  1304,  3719,  3302,
    4227,  2989,  2990,  3479,  2397,  4323,  1975,  4238,  1303,  1304,
    1303,  1304,  1880,  2474,  2094,  4211,  4003,  4590,  1307,  1597,
    4516,  1340,   995,  4419,  2489,   668,  4421,  3340,  2128,  1073,
     637,  4757,    27,  2529,   914,  1930,  2334,  2246,  2079,  2401,
    1906,  2875,  3587,  1303,  1304,  3323,  3632,   156,  1303,  1304,
    3328,  1704,   546,  4097,  4184,  1890,  3144,  2688,  3336,  3337,
    3648,  3649,   668,  1902,  3344,   712,  2739,  1938,  1879, -2660,
    2693,  2560,  3662,  2696,  2697,  3285,   668,  2246, -1940,  2044,
    3050,   668,   658,  2584,  4147,  2246, -2659,  1138,  4856,  4857,
    1974,  4675,  1305,  4148,   597,  1306,  4591, -1941, -2141,  2507,
    3356, -2657,   597, -2658,  2983,   915,  1243,   668,  2270,  1332,
    1333,  1334,  1335,    63,  2993,  1436,  1303,  1304,  3755,  1305,
    1303,  1304,  1306,   713,  2165,   668,  4758,  1057,  4705,  4706,
    3496,  1303,  1304,   668,   701,  3145,  1475,  3751,  2003, -2663,
    2006,   148,  1649,  1945,  2095,   658,  1305,  1120,  2096,  1306,
     898,  3588,   639,  1139,  4904,  1140,   996,   659,  4759,  1303,
    1304,  2024,  1944,  2256,  2585,  1307,  3341,  4308,  4744,  1303,
    1304,  1778,   658,  1307,  1121,  1879,  2740,  4309,  1303,  1304,
     668,  1305,  2012, -2752,  1306,  2365,  1475,  2095,  4588, -1940,
    1303,  1304,   658,   662,  2413,   658,  2328,  2475,  2590,  2582,
    4649,  2252,  1944,  3161, -1220,  3487,  3488,  3489, -1941,  2251,
    1945,   748,  1303,  1304,  2512,  1214,  1215,  1303,  1304,  4098,
    2718,   668,   668, -2598,  3414,  2074,   149,  1305,  1303,  1304,
    1306,  4149,  2448,   997,  2092,  1779,  4099,  1193,   701,  2219,
      42,   152,   153,  2719,  2113,  1303,  1304,  1903,   664,  1148,
   -2141,   668,  2118,  2960,  1931,  4461,   714,  4426,  4189, -2598,
    4653,   668,  2585,  3030,  1780,  3446,  3755,  4360,   898,  4362,
   -2141,    48,  2329,  2138,  1022,   753,   136,  1932,  2160,  2961,
    2162,  3756,  2674,   156,   533,   533,   533,   658,   533,   658,
    1285,  2223, -2752,  2339,  1305,  3621,  3621,  1306,  2169,   533,
    4187,   668,  4587,  2881,  1650,   533,  1303,  1304,  2232,  4737,
    2157,  2158,  2159,   900,  2161,  2610,  1724,  2187,   680,  1305,
    1821,  1305,  1306,  1822,  1306,  2170,   658,  4100,  4541,  4542,
    2277,  2176,  2340,   602,  1781,  1057,  1305,  2882,  1305,  1306,
    2175,  1306,  3192,  4632,  2741, -2800,  1307,  2590,  1751,  1559,
    1305,  1397,  3146,  1306,  2091,  2742,  2702,  2075,  4352,  2711,
    3757,  3899,  2743,  2715,  2716,  1305,  4633,  2420,  1306,   668,
     668,  4351,  1571,  1307,   767,  1057,  4324,  1305,   688,  1305,
    1306, -2293,  1306,  2754,   157,  4543,  3547,  2227,    58,  3005,
    4256,  4310,   668,  2224,  2225,  2226,   658, -1940,  3347,  1680,
    1307,  2954,   693,  4778,  3653,  3136,  4782,  4515,  1560,   668,
    2476,   156,  1305,  1782,  1681,  1306, -1941,  1305,  1945,   949,
    1306,  2424,  1303,  1304,  2282,  1572,  2477,  2330, -1940,  3756,
    4427,   668,  2280,   658,  3631,  1307,  3633,  2495,  1561,  1303,
    1304,  1933,   689,  3644,    63,  3565,  1973, -1941,   658,   694,
    4536,  2254,  1965,   783,  3722,  2737,  2425,  3657,  1945,  3942,
    1904,  2744,  3193,  4718,  3668,  3670,  3358,  3557,  2042,  1188,
    3723,  2351,  1303,  1304,  2592,  2593,  1905,  3687,  3689,  3691,
    3654,  1307,  1866,  3692,  3670,  1305,   156,  4272,  1306,  1305,
    1972,  2076,  1306,  1303,  1304,  3130,  3453,  3849,  1949,  -208,
    1305,  1221,  2427,  1306,  4359,  1303,  1304,   706,  3760,  4719,
    1443,   708,  1456,  2043,  1303,  1304,  3131,   709,  1303,  1304,
    3526,  2875, -2318,  3740,  3743,  3746,  2491,  4847,  1305,   998,
     999,  1306,  1001, -2293,  1003,  1303,  1304,  1879,  1305,  4530,
    1274,  1306,  3850,  1451,  3127, -1940,  1452,  1305,  1307,   995,
    1306,  1004,  3132, -2293,  3295,   855,   292,  2745,   294,  1305,
    1243,  2406,  1306,   859, -1941,  3523,  1303,  1304, -2438,  2428,
    4311,   861,  2599,  1307,  2988,  1307,  2508,  3758,  1303,  1304,
    3655,  1305,  1303,  1304,  1306,  3709,  1305,  4516,  3515,  1306,
    1307,  3035,  1307,  2915,  2432,  1222,  2450,  1305,  2920,  1684,
    1306, -1940,  1278,   872,  1307,  1303,  1304,  1303,  1304,  1303,
    1304,  3397,  2927,  3398,  1305,  1303,  1304,  1306,  1514,  1307,
   -1941,  2473,  1660,  3731,  2569,  3409,   906,  2153,  2154,  1985,
    1783,  1307,  1985,  1307,  1275,  4720,  2600,  1303,  1304,  3310,
    3419,   625,  3200,   922,  3811,  3732,  2942,  4474,  1303,  1304,
    1303,  1304,  3420,  1562,  4073,  2498,  1303,  1304,  1303,  1304,
    1303,  1304,  1615,  2497,   658,  2601,  1307,  4475,  1620,  1621,
     812,  1307,  1303,  1304, -2318,  1305,   658,   668,  1306,  3200,
    3200,  1514,  2010,   996, -1713,   292,  3415,   294,  3621,   898,
     658,  2449,   626,  1453, -2318,  1388,  1279,   134,  2251,   711,
    1388,  3031,  1784,  2523,  2625,  2532,  2532,  1515,  2532,  3081,
     865,  1303,  1304,  2999,  2533,  2533,  1126,  2533,   964,  3200,
   -2438,   701,  4147,  4735,  4736,  3758,   953,  1303,  1304,  1303,
    1304,  4148,  2556,   955,  1879,  2602,  1430,  4335,   668,  1307,
   -2438,   658,  2662,  1307,   975,   658,  4339,   900,  2399,  3002,
    1303,  1304,  3061,   977,  1307,  4045,  3217,   147,   538,  2369,
     997,   539,  3666,  2371,   949,  1465,  2581,  1070,  3246,   627,
    1515,  1077,   668,   668,   658,   658,   658,  1303,  1304,  1099,
     949,   949,  1307,  1303,  1304,   967,  2532,  2532,  2532,  1243,
     668,  1305,  1307,  1563,  1306,  2533,  2533,  2533,  1303,  1304,
     135,  1307,  2386,   152,   153,   668,  2577,  1021,  1305,  2399,
    3894,  1306,  2387,  1307,  2603,  1564,  4079,  2882,   136,  2645,
    2634,  2395,  1100,  1505,   703,  1026,  2635,  4805,   658,  2339,
    1303,  1304,  1101,  2409,  2881,  1307,  1103,  1649,  1022,  1443,
    1307,  1305,   148,   668,  1306,  1113,  1303,  1304,  2366,  1111,
    2535,  1307,  2536,  1114,   538,  2410,  1565,   539,   538, -2795,
    1022,   539,  1305,  3574,  3217,  1306,  1799,  4060,  1307,  4149,
    4218,  2414,  3243,  4219,  1305,  1982,  3753,  1306,  1983,  4837,
    2686,  1984,  4839,  1305,  2368,  1340,  1306,  1305,  2418,   137,
    1306,  1116,  3581,  1303,  1304,  1303,  1304,  1303,  1304,  2367,
    1340,  3872,  2687,  2695,  1305,  3781,  3782,  1306,   590,  1693,
    1694,  2680,   658,  2683,  4855,  1115,  2285,   949,  3503,  3503,
    3503,  3503,  1030,  1011,  1320,  1303,  1304,   149,  3796,  1307,
    2614,  2615,  2616,  2229,   909,  1305,  1303,  1304,  1306,  2286,
   -1827,  2713,   533,  3517,  1148,   533,  1778,  1305,  1151,  2419,
    1306,  1305,  1303,  1304,  1306,  1123,  1739,  2373,  2374,  1303,
    1304,   596,  1142,  3804,  1148,  2636,  1303,  1304,  2714,  1803,
    1156,  1303,  1304,   138,  1305,  1162,  1305,  1306,  1305,  1306,
    3243,  1306,  2637,  1166,  1305,  1170,  2824,  1306,  3318,  1536,
   -1827,  1183, -1827,  2727,  2638,   658,  1190,   658,  2346,  1650,
    1191,  1536,  2734,  2735,  1879,  1192,  1305,  2392,  1340,  1306,
    1779,  1303,  1304,  2479,  3384,  2400,  1340,  1305,  1344,  1305,
    1306,   628,  1306,   538,  2285,  1305,   539,  1305,  1306,  1305,
    1306,  2604,  1306,  2991,  2402,  1340,  1194,  -679,  3576,  1780,
   -2800,  1305, -1827,   629,  1306,  1307,   949,  2286,  2889,  2403,
    1836,   949,  3217,  1879,  2415,  1340,   998,   999,  1000,  1001,
    1002,  1003,  1307,  1195,  3218,  2423,  2590,  2884,  4204,  1196,
    2887,  4207,  4208,  1804,  2591,  3694,  2639,  1807,  1004,   630,
    1305,  3161,  2426,  1306,  1808,  1199,  2895,  1200,  4220,  1466,
     668,  1201,  3245,  1202,  2981,  1307,  1305,  1340,  1305,  1306,
    1203,  1306,   668,  1974,   139,  3734,  4229,  1094,  1095,  1781,
    1096,  1204,  1097,  1205, -1145,  2429,  1307, -1145,  1206,  1305,
    1323,  1207,  1306,   898,  1208,  3004,  1443,  1209,  1307,  1985,
    1985,  1985,  2416,  1340,  4520,  4596,  2441,  1307,  4527,   631,
    1254,  1307,  1089,  1320,  2417,  1340,  1305,  1348,  2460,  1306,
    2956,  1210,  1305,  4742,  1211,  1306,  4741,  3361,  1307,  2421,
    1340,  3385,  1273,  1320,  1212,  1809,  3363,  1305,  -679,  1216,
    1306,  1218,  3939,  1219,   641,  1286,  1287,   140,  2069,  2069,
    2069,  2636,  1303,  1304,  3244,  1126,  1126,  1126,  1782,  1307,
    1220,  2640,  1343,  2592,  2593,   668,  1030,  1011,  2637,  1305,
    3245,  1307,  1306,  1223,  3452,  1307,  2970,  1340,  1057,  3391,
    3106, -2795,  2285,  1224,  3540,  1305,  3015,  3016,  1306,  1225,
    3000,  3394,  2537,  1811,   668,  3401,   668,   668,  1307,  1392,
    1307,  1226,  1307,  3210,  3211,  2286,  2538,  1227,  1307,  2594,
    1228,  3740,   141,  3743,  3087,  3746,   949,  1360,  3405,  1398,
     668,  1389,  3406,   668,  3857,  1229,   949,   949,   949,   949,
    1307,  3583,  1305,  2641,  1305,  1306,  1305,  1306,  1126,  1306,
    1230,  1307,  1231,  1307,  3380,  2374,  1232,  3891,  1233,  1307,
    3407,  1307,  1236,  1307,  3383,  1340,  3411,  1340,  1237,  4282,
    3895,  3408,  3048,  3410,  1305,  1307,  1238,  1306,  2539,  3413,
    2540,  3418,  2091,  3421,  1244,  1305,  4269, -2795,  1306,  4520,
    3529,  3530,  1393,  1245,  2881,  3423,  4527,  1394,  3074,  1246,
    2599,  1305,  3077,  3667,  1306,  3533,  3534,  1247,  1305,  3358,
    1879,  1306,  3816,  1340,  1307,  1305,   668,   668,  1306,  1323,
    1305,  2255,  1248,  1306,  3678,   668,  3679,  2662,  1536,  1249,
    1307,  1250,  1307,  2092,  3425,  2092,  2092,  1251,  3523,  1323,
    1252,  1395,  1255,  3613,  1256,  1812,  3642,  3620,  3837,  3838,
    3427,  1391,  3428,  1307,  3852,  3853,  3123,  1396,  3125,  1257,
    1305,  1814,   668,  1306,  2600,  3549,  4037,  4038,  -679,  1258,
    3680,  1259,  2541,  3429,  1260,  4502,  4503,  2327,  2599,  1261,
    1307,  3669,  1262,  1022,  2327,  1783,  1307,  3107,  4039,  4040,
    4070,  1263,  3122,  2601,  3681,    78,  1303,  1304,  1264,  1727,
    3801,  1307,  3935,  1265,  1879,  1880,  3802,  1266,  1330,  1331,
    1332,  1333,  1334,  1335,  1267,  3166,  3179,  3180,  2301,  2302,
     533,  3803,  4041,  4042,  1268,   658,   658,  2542,   668,   668,
    3682,  1269,  3666,  1307,  2315,  1270,  3949,  1271,  2233,  1272,
    4831,  1276,  2600,  4048,  4057,  1319,  3171,  3953,  1277,  1307,
    3955,  1280,  2234,  4068,  2255,  4074,  1340,  4762,  4595,  2641,
   -1913,  1281,  1583,  2602,  1310,  3646,   643, -1913,  -679,  4072,
    1284,  2601,  1325,  1326,  1288,  4458,  4459,  4460,  2871,  3203,
    3204,  3205,  3206,  3217,  3208,  3209,  4088,  1340,  4089,  4090,
    4107,  4108,  1325,  1326,  1584,  3218,  1307,  1289,  1307,  1400,
    1307,  1311,  1795,  1796,  1797,  1798,  1799,  3279,  4241,  4242,
    2327,  1412,  1290,   949,  1291,  4245,  4078,  1401,  4080,  1410,
    4081,  1728,  3294,  4520,  4527,  1729,  1292,  3156,  1307,  2301,
    2302,  4371,  4344,  4345,  3308,  1293,  1730,  2246,  3317,  1307,
    1342,  2602,  2603,  4506,  2246,  2315,  2635,  1585,  4082,  -679,
    1411,  4905,  1586,  1312,  1418,  1307,  4209,  4214,  1320,  4083,
    4215,  1409,  1307,  2317,  2318,  1313,  2491,  4348,  4345,  1307,
    4432,  4433,  4501,  3534,  1307,  4356,  4514,  4345,  1420,  4225,
    4545,  4546,  4452,  3324,  3325,  4232,  3327,  1422,  3329,  3330,
    3331,  3332,  3333,  3334,  3335,  1426, -1617,  3338,  3789,  -679,
    3343,  1320,  4553,  4554,  3346,   641,  1800,  1801,  1802,  1803,
    1444,  2871,  2069,  1449,  1307,  2256,  4555,  4554,  1447,  1126,
    2603,  2235,  4598,  4599,  3483,  1328,  1329,  1330,  1331,  1332,
    1333,  1334,  1335,  3683,  1869,  1870,  4654,  3853,  4686,  4687,
    4716,  3534,  4275,  2285,  1477,  1328,  1329,  1330,  1331,  1332,
    1333,  1334,  1335,  3817,  1314, -1617,  2328,  1459,  2543,  2544,
    2545,  1479,  1944,  2328,  1321,  1495,  2286,  1497,  1731,  1944,
    2246,  1498,  4717,  3534,  2317,  2318,  1499,  3684,  4734,  3211,
    1021,  4751,  4345,  4753,  4345,  2636,  1500,  1322,  1503, -1617,
    1507,  2625,  4754,  4345,  1320,  4786,  4787,  2236,  1026,  4802,
    4345,  1508,  2637,  4803,  4345,  1587, -1617,  2422,  4806,  4345,
    1512, -1617,  1517,  1804,  2638,  1805,  1806,  1807,  1388,  1526,
    2523,  1549,  2237,  1553,  1808,   668,  4809,  3853,  3495,  1417,
     668,   668,   668,  4820,  4821, -1617,  1554,   658,  1558,  2329,
    4838,  4345, -1617,  3927,  3501,  1577,  3930,  3931,  2256,  4371,
    4852,  3736, -1617,  1578,  1323,  1579,  1778,  4894,  4895,  2604,
    3048,   668,  3506,  3507, -1617,  1305,  1732,  1880,  1306, -1617,
    3831,  3832,  1580,  1599,   152,   153,  4105,  4106, -1617,  1603,
    1588,  1604,  1243,  1609,  1618,  2238,   668,   668,   668,  2328,
    1619,  4392,   668,  3050,  1626,  1944,  2639,  1323,  1627,  2092,
    4396,  4690,  1629,  3219,  1634,  1809,  1641,  1677,  1683,  4418,
    1687,  4389,  1685,  1690,  4420,  1691,  1695,  1698,  3555,  -679,
    1779,  2899,  1699,  4739,  3564,  1707,  4389,  1708,  1709,  1710,
    1719,  1736,  1737,  1745,  1338,  1057,  1747,  2604,  1751,  1758,
    1777,  1788,  1057,  1824,  1589,  4476, -1617,  2900,  1778,  3194,
    1835,  1324,  3650,  4477,  1836,  1837,  1860,  4390,  4391,   292,
    3563,   294,  1810,  1811,  1877,  1888,  4532,  1919, -1617,   668,
    4394,  1913,  1940,  3594,   533,  1897,  3597,  4397, -1617,  1948,
    4478,  2239,   658,  1956,  1939,   658,  3294,  1953,  4422,  4423,
    1323,  1957,  1958,  1959,  2330,  1960,  1961,  1443,  1963,  1977,
    3591,  1964,  1976,  2901,  1978,  1979,  2902,  1325,  1326,  2009,
   -1617,  2640,  1779,  2013,  2903,  2018,  2021,   643,  1945,  3195,
    1879,  2023,  3294,  1327,  2026,  1945,  4398,  2027, -1913,  2040,
    3629,  3627,  3294,  2904,  2048,  4291,  3639,  2049,  3638,  2050,
    2051,  1780, -2489,  1315,  1316,  1317,  2057,  2060,  4594,  2064,
    1325,  1326,  2065,   668,  3638,  3353,  2066,  2106,  2067,  3659,
    3663, -1617,  2868,  1590,  1880,  3675,  3674,  2110,  1057,  4109,
    2108,  4399,  3676,  3677,   658,  2109,  3640,  3641,  4454,  1528,
    2114,  4400,  4597,  2641,  2119, -1617,  3638,  2142,  2150,  2151,
    2155,  2178,  2179,  3294,  3700,  2180,  2181,  2184,  3196,  3713,
    -679,  2183,  1591,  4479,  3673,  1812,  2185,  2201,  2211,  2599,
    2215,  1781,  3686,  2220,  2206,  2231,  3638,  2253,  2273,  1307,
    1813,  1814,  2274,  2599,  2290,  2289,  3688,  2292,  2293,  2325,
    4401,  2343,   949, -1617,  2341,  3712,  2905,  2349,  2355,  2390,
    4292,  4293,  2357,  1325,  1326,  4294,  4295,  4296,  4173,  2599,
    3556,  1945,  1443,  2358,  2359,  3747,  2381,  2382,  2383,  3750,
    1328,  1329,  1330,  1331,  1332,  1333,  1334,  1335,  2388,  2389,
    1320,  2399,  2393,  2600,  2404,  2439,  2599,  2408,  2468,  3690,
    2440,  2412,  4480,  2465,  -687,  1778,  2472,  2600, -1617,  2430,
    1782,  2431,  4398,  4614,  4615,  2436,  4617,  2451, -1296,  1320,
   -1617,  4481,  2601,  1328,  1329,  1330,  1331,  1332,  1333,  1334,
    1335,  1335,  2452,  2600,   874,  2453,  2601,  2478,  2488,  2510,
   -1617,  4707, -1617, -1442,  4482,  2500,  4569,  2503,  2509,  1221,
     292,  4666,   294,  4668,  1274,  1278,  2526,  4399,  1413, -2134,
    2600,  2906,  2601,  1536,  2557,  1879,  2527,  4400,  2563,  1779,
    1724, -1617, -1617,  3815,  2571, -1617, -1617,  2724,  2725,  4667,
    2568,  3123,  -856,  2574,  2598,  2606,  2611,  2612,  4264,  2601,
    2618,  2613,  2602,  4594,  2736,  2629,  3402,  2630,  3194,  2644,
    2648,  2650,  4763,  2748,  2749,  2656,  2602,  2635,  2654,  2658,
    2664,  2665,  2666,  2671,  2669,  2670,  4401,  3122,  1330,  1331,
    1332,  1333,  1334,  1335,   875,  2672,  2673,  2681,  2685,  2689,
    2698,   721,  2602,  3048,  2699,  3197,  2703,  2701,  2704,  4577,
    2529,  4713,  2721,  4714,  4715,  4584,  1412,  2722,  2726,  2728,
    2729,   949,  2730,  4646,  3074,  3864,   877,  2731,  3866,  2602,
     668,  2732,  2733,  2825,   668,  1536,  2829,  2830,  3195,  2836,
    2862,  2603,   878,  2863,  2635,  2864,  2865,  2866,  2867,  1505,
    2834,  2839,   152,   153,  2870,  2603,  1323,  2840,  4403,  3000,
    4825,  4402,  2841,  2842,  1994,  4404,  1022,  1022,  1995,  1320,
    2843,  2844,  2845,  1880,  2846,  2847,  2907,  2898,  3904,  2885,
    1996,  2603,  2848,  3915,  4365,  1323,   292,  2849,   294,  2850,
    2851,   748,   658,  1057,   949,  4692,  2852,  1783,  2853,  2854,
    2855, -1617,  2856,   882,  3922,  4405,  2857,  3896,  2603,  4483,
    2858,  2889,  2922,  2859,  3929,  2860,  2636,  3196,  -856,  2923,
    2861,  2893,  3932,  3638,  1879,  2979,  3294,  2921,  3008,  4825,
    2997,   883,  3013,  2637,  3022,  1879,   668,   884,   721,  1879,
    3638,  2496,  3294,  3294,  1879,  2638,  2908,  2934,   752,  2935,
    2947,  2969,  4890,  3026,  3027,   753,  3294,  3638,  2978,  2987,
   -1617,  2635,  2996,  4898,  3024,  3014,  3028,  4890,  3638,  3033,
    3764,  3638,  4898,  3941,  3025,  2909,  3037,   885,  4406,  3038,
    3039,  3051,  3947,  2636,   758,   759,  3052,  2035,  3055,  3959,
    3056,  3064, -1617,  3057, -1617,  3958,  3078,  3079,   658,  4487,
    2637,  3082,  3083,  4013,  3084,  3088,  3089,  3095,  4014,  1325,
    1326, -1617,  2638,  3102,  3103,   533, -1617,  3104,   152,   153,
    3116,  4365,  3117,  4029,  4403,  3119,  3765,  2639,   748,  3766,
    3317,  4404,  3128, -1617,  3129,  2127,  2128,  3767,  1325,  1326,
   -1617,  4022,  3138,  3164,  3151,  3165,  3167, -1617,  3172,   949,
    3190,  3178,  3191,  3463,   767,  3217,  3768, -1617,  2604,  3229,
    3234,  3235,  3238,  3464,  3239,  1323,  3241,  4875,  3242, -1617,
    3248,  4405,  2604,  3251, -1617,  3260,  3250,  3465,  3252,  3259,
    3265,  3271,  3299, -1617,  3266,   752,  4407,  3272,  3282,  3466,
    3467,  3468,   753,  3312,  2639,  3320,  3311,  3321,  2604,  4572,
    2636,  3769,  3322,  3351,  4159,  2350,  3364,  3369,  3469,  4798,
    1997,  3355,  3375,  3377,  3378,  3379,  4128,  2637,   778,  3386,
    3387,   758,   759,  3430,  3440,  2604,  3462,  3441,  4558,  2638,
     888,  3445,   782,   783,  3197,  3449,  3451,  3456,  1998,  3459,
    4113,   640,  2640,  3484,  4406,  4118,  1999,  3485,  3460,  3490,
    1880, -1617,  3492,  3497,  3508,  1451,  3509,  3512,  4094,  3770,
    3518,  3519,  1328,  1329,  1330,  1331,  1332,  1333,  1334,  1335,
    3525,  3531,  3536, -1617,  3528,  3550,   891,   990,  4487,  3554,
    3566,  3567,  3570, -1617,  3578,  3577,  3579,  3582,  3168,   892,
    2000,   767,  1329,  1330,  1331,  1332,  1333,  1334,  1335,  4901,
    3593,  3590,  3624,  3645,  3647,   668,  2791,  4163,  4163,  2640,
    3714,  2639,  3294,  3721,  2641, -1617,   949,  3709,  1325,  1326,
    3728,  4175,   949,  3729,  3294,  3294,  3736,  3735,  3733,   641,
    3294,  4867,  3638,  4132,  3761,  4146,  3294,  3784,  3780,  3785,
    3792,  2001,  3793,  3805,  1880,  3822,  3435,  1536,  3638,  3823,
     658,  2457,  4407,  3824,  3825,   778,  4882,  3840,  3842,  3846,
    3848,  3771,  3854,  3876,  3772,  2590, -1617,  -886,  3856,   782,
     783,   895,  3877,  4302,  3910,  3905,  3227,  3911,  3913,  3230,
    3231,  2641,  3233,  3914,  3918,  3236,  3237,  3924,  3916,  3240,
   -1617,  3917,  3923,   896,  3249,   897,  3925,   549,  3946,  3253,
    3254,  3255,  3256,  3257,  3938,  3950,  3956,  3261,  3262,  3957,
    3264,  4016,  4024,  4017,  4020,  4023,  3273,  3274,  3275,  3276,
    4251,  4027,  3280,  3281,  4028,  3283,  2640,   804,  3470,  4032,
    4033,  4366,  4036,  4043,  4367,  4058,  4034,  2092, -1617,  4061,
    4063,  3773,  4046,  4047,  4076,   810,  3471,  4075,   668,  4077,
     812,  4048,  4049,   813,  4247,  4091,   550,  4065,  2761,  4066,
    2762,  4067,  4071,  4085,  4093,  4086,  4103,  4112,  4114,  4125,
    4123,  1328,  1329,  1330,  1331,  1332,  1333,  1334,  1335,  4108,
    3565, -1529, -1534,  4135,  4140,  4143,   551,  4144,  4160,  3352,
    4158,  3540,  4165, -1617,  4169,  2764,  4176,  4181,  2641,  4182,
    4183,  4190,  4198,  4205, -1617, -1617,  4206,  1795,  1796,  1797,
    1798,  1799,  4240,  2767,  4368,  4369,  4444,  4221,  3297,  4246,
    4248,  2768,  4257,   552,  4233, -1617,  4057, -1617,  4274,  3077,
    2233,  4279,  4280,  4285,  4330,  4286,  4281,  4287,  3904,  4288,
    4300,  4301,  4304,  1413,  2234,  1362,  4305,  3904,  2770,  4314,
    4318,   989,  4320,  4337,  4163,  4338, -1617, -1617,  4342,  3472,
   -1617, -1617,  1677,  4340,   804,  2771,  4347,  3294,  4366,  4377,
     553,  4367,  4380,  4230,  4393,  4373,  4416,  3473,  4445,  3774,
    4446,  4447,   810,  4374,   658,  4449,  4453,   812, -2727,  4450,
     813,  4455,  4379,  4457,  4469,  4466,  2776,   642,  4488,  4510,
    4489,  4490,  4491,  4498,  4500,  4507,  4513,  4524,  3775,  4537,
    4544,  1800,  1801,  1802,  1803,  4550,   949,  4539,  -143,  4487,
    4561,  4540,  4562,  4563,  4564,  4567,  4414,  4565,  4568,  4575,
    4570,  4573,  4585,  4586,  4424,  4601,  4425,  4604,  4605,  3474,
    4610,   643,  4613,  4616,  4618,  2761,  4619,  2762,  1363,  4442,
    4623,  4368,  4369,  4441,  4626,  4641,  3475,  4671,  4672,  4678,
    4684,  4648,   292,  4652,   294,  4655,  4691,  4656,  4709,  4659,
    4662,  2780,  4669,  2783,  1364,  2758,  4673,  1365,  2781,  -826,
    -826,  4767,  2764,  4679,  4694, -1751,  4467,  4697,   558, -1700,
    -826,  4768,  2662,  2782,  4769,   658,   -69,  4789,  4473,  4790,
    2767,   554,  4750,  4795,  4776,  4791,   853,  4797,  2768,  4792,
    4799,  4794,  4800,  2235,  1366,  4810,  4813,  4814,  1804,  4815,
    1805,  1806,  1807,  1481,   644,  4817,  4816,  4818,  4841,  1808,
    3704,  4840,   645,  1482,  1367,  2770,  4845,  4851,   949,  4163,
     292,   947,   294,  4848,  4863,  4866,  4868,  1483,  4870,  1677,
    2784,   947,  2771,   555,  4872,  4874,  4876,  4891,  4879,  1484,
    1485,  1486,  4900,   949,  1445,  3007,  4880,  3345,  1067,  2785,
    3126,  4267,  4265,  4266,   556,  4631,  1598,  3609,  1487,  1661,
    4341,  4630,   853,  2776,  4733,  4835,  1689,  4833,  4509,  2236,
    4688,  4259,   611,   668,  1069,  2608,  2519,  1368,  4110,  3477,
    2838,  1169,  3502,  3042,  3044,  3043,  1738,  2499,  4529,  4414,
    1809,   152,   153,  4651,  2237,  2808,  2267,  3286,  3952,  3511,
    4116,  1369,  3516,  3847,  2789,  4696,  2790,  4578,  4582,  2038,
    4557,  4775,  4119,  4468,  2792,  4865,  4828,  4850,  4612,   557,
    2708,  4350,  3284,  4788,   558,  4168,  3699,  3706,  3291,   292,
    4871,   294,  4765,  3777,   853,  4005,  4213,  3643,  2780,  4552,
    1880,  4239,  4566,   559,  4774,  2781,  4556,  1810,  1811,  3188,
    3652,  4271,  3432,  3808,  3806,  3810,  4836,  2238,   853,   649,
    2782,   650,  4807,   853,  4808,  4723,  4358,  4738,   560,  4650,
    4645,  4523,  3077,  4395,  3077,  3288,  3698,  1623,  1697,  2828,
    4376,  4771,  4708,  3155,   561,  1362,  2798,  2202,  2326,  3060,
    4185,  2281,  3034,  2580,  3841,  3494,  4571,  3085,  1521,  2977,
    1640,   853,  1513,  2651,  3818,  4764,  1370,  2914,  2912,  1834,
    3458,  4163,   952,  4163,  4163,  1371,  3111,  2784,   853,  3873,
    4663,  3108,  3447,  4625,  4829,  4639,  4035,  4504,  4830,  4087,
    1372,  1776,  2994,  4193,  3544,  3812,  2785,  2208,  2209,  4333,
    4589,  3693,  4832,  4677,  2799,  2800,  2801,  4331,  1373,  4332,
    2883,  2802,  3542,  2239,   651,  2055,  3032,  4442,  2011,  3067,
    3859,  4441,   853,   853,   853,   853,  4121,  2803,  3860,  3898,
    2804,  2348,  4772,  4473,   853,  1083,  1189,  2691,  1488,  4676,
    2692,  2167,  1063,   668,  3152,  3004,  1673,  1066,  1363,  2805,
    1812,  2789,  1374,  2790,  4732,  1375,  1489,   656,  4197,  4284,
    2513,  2792,  3845,   658,  2063,  1813,  1814,  2807,  4864,  1380,
    4492,  1283,  4701,  4702,  1364,  4620,  4873,  1365,  4899,  4902,
    4746,  4560,  2112,  3137,  3863,  1376,  3893,  1024,  1025,  4163,
    4163,  2676,  2471,  4163,  4723,  3135,  3134,  2562,  4834,  2213,
    2073,   985,  3080,  1496,   538,  2002,  4456,   539,  3023,  3478,
     853,  4465,  3717,   987,  1366,  1502,  4745,  1664,  4827,  2296,
    1108,  4582,  1109,  2216,  1665,  1880,   947,   947,  1110,  1666,
     947,     0,     0,  2798,  1367,     0,     0,     0,     0,     0,
     292,     0,   294,     0,     0,     0,   668,     0,     0,     0,
     853,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   947,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4783,  4784,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4163,     0,     0,  1490,     0,     0,
       0,  2799,  2800,  2801,     0,     0,     0,  1368,  2802,     0,
    4903,     0,     0,     0,     0,  2297,     0,  2298,     0,     0,
       0,     0,     0,     0,  2803,     0,     0,  2804,     0,   668,
    4893,  1369,     0,     0,     0,  3317,  3317,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2805,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1491,
       0,     0,     0,     0,  2807,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2299,  1492,  2300,  2301,  2302,
    2303,  2304,     0,  2305,  2306,  2307,  2308,  2309,  2310,  2311,
    2312,  2313,     0,  2314,  2315,  2316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1880,     0,     0,     0,  3607,     0,
       0,   668,     0,     0,     0,  1880,  1370,     0,  4869,  1880,
       0,     0,     0,     0,  1880,  1371,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1372,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     853,     0,     0,   853,   947,     0,     0,     0,  1373,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   853,   853,
       0,     0,     0,     0,     0,     0,     0,   853,   853,   853,
     853,   853,   853,   853,   853,   853,   853,   853,   853,     0,
       0,     0,  1374,  2317,  2318,  1375,     0,   853,   853,     0,
     853,   853,     0,     0,     0,   853,   853,     0,     0,   853,
     853,   853,   853,     0,   853,   853,   853,     0,     0,     0,
       0,     0,     0,   853,   853,  1376,   853,   853,   853,   853,
     853,     0,     0,   853,   853,   853,   853,   853,   853,   853,
     853,   853,   853,   853,     0,   853,     0,     0,   853,   853,
       0,     0,     0,   853,     0,     0,     0,   853,   853,   853,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   853,
     853,   853,     0,     0,     0,     0,     0,     0,   853,     0,
       0,     0,     0,     0,     0,   853,   853,   853,   853,     0,
       0,     0,     0,     0,     0,     0,   853,   853,   853,     0,
     853,   853,   853,   853,   853,     0,   853,   853,   853,   853,
     853,   853,   853,   853,     0,     0,     0,   853,   853,     0,
       0,     0,     0,     0,     0,  2757,     0,     0,     0,     0,
       0,  2758,     0,  2759,     0,  2760,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2761,     0,  2762,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2763,
    2761,     0,  2762,     0,  2764,  2765,     0,     0,     0,     0,
    2766,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2767,   853,     0,     0,     0,     0,     0,     0,
    2768,     0,     0,     0,  -826,  -826,     0,  2764,     0,   853,
    2769,     0,     0,     0,     0,  -826,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2767,     0,  2770,     0,     0,
       0,     0,     0,  2768,     0,     0,     0,     0,     0,     0,
       0,  1677,     0,     0,  2771,     0,     0,     0,     0,     0,
       0,     0,     0,  2772,  2773,     0,     0,     0,     0,     0,
    2770,  2774,     0,     0,     0,     0,     0,     0,     0,  2775,
       0,     0,     0,  -965,  1677,  2776,     0,  2771,     0,     0,
       0,     0,     0,     0,     0,  2777,     0,     0,   853,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   853,     0,  2778,     0,     0,  2776,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     853,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   292,     0,   294,     0,     0,     0,     0,  2779,     0,
    2780,     0,     0,     0,     0,     0,     0,  2781,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2782,     0,   292,     0,   294,   853,     0,     0,
       0,     0,  1027,  2780,     0,     0,     0,     0,     0,     0,
    2781,     0,     0,     0,     0,  1028,  2783,     0,     0,     0,
       0,     0,     0,     0,     0,  2782,   956,  1029,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3181,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2784,
       0,  1030,  1011,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1031,     0,     0,     0,     0,  2785,     0,
       0,     0,  2786,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2784,     0,     0,     0,     0,     0,     0,  1032,
       0,  1033,     0,  1034,     0,     0,     0,     0,     0,     0,
       0,  2785,     0,     0,     0,  1035,   947,     0,     0,     0,
       0,  2787,     0,     0,     0,     0,  2788,     0,     0,     0,
       0,     0,     0,  2789,     0,  2790,     0,    15,    16,     0,
    2791,     0,     0,  2792,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   853,     0,     0,     0,
       0,     0,     0,     0, -1913,  1036,  2789,     0,  2790,  1037,
       0,     0,  1038,     0,  2793,     0,  2792,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2794,  2795,
    2796,  2797,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1039,     0,  1040,     0,     0,     0,     0,     0,     0,
       0,  1041,     0,  1042,     0,  2798,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   292,     0,   294,     0,     0,     0,     0,     0,  1043,
    1044,     0,     0,     0,     0,     0,     0,     0,  2798,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1045,     0,     0,     0,     0,     0,     0,     0,     0,
     853,   853,   853,  2799,  2800,  2801,     0,     0,     0,     0,
    2802,     0,     0,  1046,     0,   853,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2803,     0,     0,  2804,
       0,     0,     0,     0,     0,     0,  2799,  2800,  2801,     0,
       0,   853,  1047,  2802,     0,     0,     0,   853,  2805,     0,
     853,     0,   853,  2806,     0,     0,     0,     0,   853,  2803,
     853,   853,  2804,     0,  4602,  4603,  2807,     0,  4606,  4607,
    4608,  4609,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2805,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1380,     0,     0,     0,     0,     0,     0,  2807,
       0,     0,     0,  1085,  4640,     0,     0,     0,     0,     0,
    1048,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -965,     0,  1049,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1050,  1051,     0,
       0,  1052,  1053,     0,     0,     0,     0,     0,     0,     0,
       0,  3182,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1054,   853,     0,  1168,     0,     0,     0,     0,
       0,     0,   853,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4703,  4704,     0,     0,     0,     0,     0,     0,
       0,  4712,     0,     0,  1197,     0,     0,     0,     0,     0,
       0,   853,     0,     0,     0,     0,     0,     0,     0,     0,
    1055,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1056,     0,     0,     0,     0,     0,     0,
       0,     0,  1235,     0,   853,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1253,
       0,     0,     0,     0,     0,   853, -2533,     0,     0,     0,
    1057,     0,     0,   853,     0,     0,     0,     0,     0,     0,
       0,     0,   853,     0,     0,     0,     0,     0,  1058,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1297,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   947,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2533,     0,     0,     0,
       0,     0,     0,     0,  1059,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1419,     0,     0,     0,     0,  2823,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   853,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1450,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     853,     0,     0,     0,   853,     0,     0,     0,     0,   853,
     853,     0,     0,     0,     0,     0,     0,     0,   853,     0,
     853,     0,   853,   853,   853,   853,     0,     0,   853,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   853,   853,
       0,   853,   853,     0,   853,   853,   853,   853,     0,   853,
       0,     0,   853,     0,     0,     0,     0,     0,     0,     0,
       0,   853,     0,     0,     0,     0,     0,     0,   853,     0,
     853,     0,   853,   853,     0,   853,   853,     0,     0,     0,
     853,   853,   853,     0,     0,     0,   853,   853,   853,     0,
     853,     0,   853,     0,   853,     0,   853,     0,   853,     0,
       0,     0,     0,   853,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     853,     0,     0,     0,     0,     0,     0,   853,     0,     0,
     853,     0,     0,     0,     0,     0,   853,     0,     0,   853,
       0,     0,     0,   853,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1716,     0,     0,  1717,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1749,
    1750,     0,     0,     0,     0,     0,     0,   947,  1760,  1761,
       0,     0,  1764,  1765,  1766,  1767,  1770,  1771,  1772,  1773,
       0,     0,     0,   947,   947,   853,     0,   853,  1789,  1790,
       0,  1791,  1792,     0,     0,     0,  1817,     0,     0,     0,
    1826,  1827,  1828,  1829,     0,     0,  1832,     0,     0,     0,
       0,     0,     0,     0,  1840,  1841,     0,  1844,  1845,     0,
       0,     0,     0,     0,  1849,  1850,  1851,     0,     0,  1854,
    1855,  1856,  1857,  1858,  1859,     0,  1861,     0,     0,  1864,
    1865,     0,     0,     0,  1868,     0,     0,     0,  1871,  1875,
    1876,     0,     0,     0,     0,  2761,     0,  2762,     0,     0,
    1883,  1884,  1885,     0,     0,   853,     0,     0,     0,  1893,
       0,     0,     0,     0,     0,     0,  1898,  1899,  1900,     0,
       0,     0,     0,     0,     1,     0,     2,     0,     0,  -826,
    -826,     0,  2764,     0,     0,     0,     0,     0,     0,     0,
    -826,     0,     0,     0,     3,     0,     0,     0,     4,  1936,
    2767,     0,     0,     0,     0,     0,     0,     0,  2768,     0,
     947,     0,     5,     6,     0,     0,     7,     0,     0,     0,
       8,     0,     0,     0,     0,     9,    10,     0,     0,     0,
       0,  2823,     0,     0,     0,  2770,     0,     0,     0,     0,
       0,     0,     0,     0,  3201,    11,     0,     0,     0,  1677,
       0,     0,  2771,     0,     0,     0,  3201,  3201,     0,     0,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2776,  2015,     0,     0,     0,    13,     0,
       0,     0,     0,     0,     0,     0,    14,     0,    15,    16,
    2025,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    17,    18,     0,     0,     0,     0,     0,  2823,     0,
       0,     0,     0,     0,    19,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    20,   947,
       0,     0,     0,     0,   947,   853,     0,     0,     0,   292,
       0,   294,     0,     0,     0,    21,     0,     0,  2780,     0,
       0,     0,     0,     0,     0,  2781,     0,     0,     0,     0,
       0,    22,     0,    23,  3201,  3201,     0,    24,     0,  2111,
    2782,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2121,    26,     0,     0,     0,   853,
       0,     0,     0,   853,     0,     0,     0,    27,     0,    28,
       0,  2148,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,     0,     0,     0,     0,
     853,   853,     0,     0,     0,     0,     0,  2784,     0,     0,
       0,     0,     0,    30,     0,     0,     0,    31,     0,     0,
       0,   853,     0,     0,    32,     0,  2785,     0,     0,     0,
     853,     0,   853,     0,   853,     0,     0,     0,  2191,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   853,     0,     0,     0,     0,   853,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2789,     0,  2790,     0,     0,     0,     0,     0,     0,
       0,  2792,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   947,
       0,     0,    33,     0,     0,     0,     0,     0,     0,   947,
     947,   947,   947,     0,     0,     0,     0,     0,     0,    34,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,  2798,     0,     0,     0,   853,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,    40,     0,    41,    42,     0,  2360,    43,    44,
       0,     0,     0,     0,   853,     0,     0,     0,     0,    45,
       0,     0,    46,     0,     0,     0,     0,     0,     0,     0,
      47,     0,     0,     0,   853,     0,    48,     0,     0,     0,
       0,  2799,  2800,  2801,    49,     0,     0,     0,  2802,    50,
      51,    52,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2803,     0,     0,  2804,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    53,     0,     0,  2823,  2805,     0,     0,     0,
      54,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2807,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2443,  2445,  2447,     0,     0,     0,  3960,  3961,     0,
       0,     0,     0,  3962,    55,  3963,     0,  3964,  3965,     0,
       0,     0,     0,     0,     0,     0,    56,     0,     0,     0,
      57,     0,     0,    58,  3764,     0,     0,     0,    59,     0,
       0,     0,  2480,     0,     0,     0,     0,     0,     0,     0,
       0,  2485,     0,  2486,     0,     0,     0,     0,     0,     0,
      60,     0,     0,  2823,     0,     0,     0,     0,    61,     0,
       0,     0,     0,     0,    62,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    63,
    3966,     0,     0,  3967,     0,     0,   947,     0,     0,     0,
       0,  3968,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3969,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3201,     0,     0,     0,     0,     0,     0,     0,  3970,     0,
       0,   853,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3971,     0,  3972,     0,     0,     0,     0,
       0,   853,     0,     0,  2576,   853,   853,     0,   853,  3973,
    3974,     0,     0,  2589,     0,     0,     0,   853,     0,     1,
       0,     2,   853,     0,     0,   853,     0,   853,   853,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     3,
       0,     0,  2626,     4,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3975,     0,     0,     0,     5,     6,     0,
       0,     7,     0,   853,     0,     8,     0,     0,     0,     0,
       9,    10,     0,     0,     0,  2148,     0,     0,     0,     0,
       0,     0,  3976,     0,     0,     0,     0,     0,     0,     0,
      11,  3977,  3978,     0,  3979,     0,  2675,     0,   853,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    12,
       0,     0,     0,  2684,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3980,  3981,
    3982,     0,   853,    13,     0,     0,     0,     0,     0,     0,
       0,    14,     0,    15,    16,     0,     0,  3983,  3984,  3985,
       0,     0,     0,     0,     0,  3986,    17,    18,  3987,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   853,
       0,     0,     0,     0,  3988,  3989,     0,     0,     0,     0,
       0,     0,     0,    20,     0,     0,     0,     0,     0,   853,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3990,  3991,     0,     0,     0,  2823,    22,     0,    23,     0,
       0,     0,    24,     0,     0,     0,    25,     0,     0,     0,
       0,     0,     0,     0,     0,  3992,     0,     0,     0,     0,
      26,     0,     0,     0,     0,     0,     0,     0,     0,  2835,
       0,     0,    27,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,  3993,    31,     0,     0,  3994,     0,     0,     0,    32,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3995,
       0,  2892,     0,     0,     0,  2894,     0,     0,     0,     0,
    2896,  2897,     0,     0,     0,     0,   853,   853,     0,  1767,
       0,  2913,     0,  1767,     0,  2916,  2917,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2924,
    2925,     0,  2926,     0,     0,  2928,  2929,  2930,  2931,     0,
    2932,     0,     0,     0,     0,     0,     0,  3996,     0,     0,
    3997,     0,  2936,  3998,  3999,  4000,  4001,     0,     0,  2937,
       0,  2938,     0,  2939,  2940,     0,  2941,    33,     0,     0,
       0,  2944,  2945,  2946,     0,     0,     0,  2948,  2949,  2950,
       0,  2951,     0,  2953,    34,  2955,    35,  2957,     0,  2958,
       0,     0,     0,     0,  2959,     0,  4002,  4003,     0,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,  2982,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4004,     0,   947,     0,  2992,     0,     0,
    2995,     0,    38,     0,     0,    39,     0,    40,     0,    41,
      42,     0,     0,    43,    44,   853,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,     0,    46,     0,     0,
       0,     0,     0,     0,     0,    47,     0,     0,   853,     0,
       0,    48,     0,     0,     0,   853,     0,     0,     0,    49,
       0,     0,     0,     0,    50,    51,    52,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1085,     0,     0,     0,
       0,   853,     0,     0,     0,     0,     0,    53,     0,     0,
       0,     0,     0,     0,     0,    54,     1,     0,     2,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     5,     6,     0,     0,     0,    55,
       0,     0,     8,     0,     0,     0,     0,     9,    10,     0,
       0,    56,     0,     0,     0,    57,  3115,     0,    58,     0,
       0,     0,     0,    59,     0,     0,     0,    11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    60,    12,     0,     0,     0,
       0,     0,     0,    61,   947,     0,     0,     0,     0,    62,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,     0,     0,     0,    63,     0,     0,     0,    14,     0,
      15,    16,     0,     0,     0,     0,     0,   853,     0,     0,
       0,   853,     0,    17,    18,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      20,     0,     0,     0,     0,     0,   853,   947,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    21,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    22,     0,    23,     0,     0,     0,    24,
       0,     0,     0,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2823,     0,     0,     0,    27,
       0,    28,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3319,    29,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4415,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3360,     0,     0,     0,  3362,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   853,     0,     0,     0,     0,
       0,     0,   947,     0,     0,     0,     0,     0,     0,     0,
       0,  3389,  3390,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3412,     0,     0,     0,     0,     0,     0,     0,
     853,  3422,     0,  3424,    33,  3426,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   853,     0,   853,     0,     0,
       0,    34,     0,    35,     0,     0,     0,     0,     0,  3696,
       0,     0,     0,     0,     0,  2758,    36,  2759,     0,     0,
       0,     0,  4522,     0,     0,     0,  4522,    37,     0,     0,
       0,  2761,     0,  2762,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
       0,     0,    39,     0,    40,     0,     0,    42,     0,     0,
      43,    44,     0,  2763,     0,     0,     0,     0,  2764,     0,
       0,    45,     0,     0,    46,     0,     0,     0,     0,     0,
       0,     0,    47,     0,     0,     0,  2767,     0,    48,  4415,
       0,     0,     0,     0,  2768,     0,    49,     0,     0,     0,
       0,    50,    51,    52,  2769,     0,     0,     0,     0,   947,
       0,     0,     0,     0,     0,   947,     0,     0,  2626,     0,
       0,  2770,     0,     0,     0,     0,     0,     0,   853,     0,
       0,     0,     0,     0,    53,  1677,     0,     0,  2771,     0,
       0,     0,    54,     0,     0,  2626,     0,  2772,     0,     0,
       0,     0,     0,     0,     0,  3697,     0,     0,     0,     0,
       0,     0,     0,  2775,     0,  2148,     0,     0,     0,  2776,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    55,     0,     0,     0,
       0,     0,  4522,     0,     0,     0,     0,  4522,    56,  2778,
       0,     0,    57,     0,  4522,    58,     0,     0,     0,     0,
      59,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   292,     0,   294,     0,     0,
      61,     0,     0,     0,  2780,     0,    62,     0,     0,     0,
       0,  2781,     0,   853,     0,     0,     0,     0,     0,     0,
       0,    63,     0,     0,     0,     0,  2782,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2783,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4522,     0,     0,     0,     0,     0,  4740,
       0,     0,     0,  2784,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2785,     0,     0,     0,  2786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   853,     0,     0,     0,     0,     0,     0,     0,
     853,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2788,     0,  3754,     0,     0,     0,     0,  2789,     0,  2790,
       0,   853,     0,     0,     0,     0,     0,  2792,     0,   947,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3783,     0,     0,     0,  3787,  3788,     0,  4522,
       0,  4522,  4522,     0,     0,     0,     0,     0,  3795,     0,
       0,     0,     0,  3797,     0,     0,  3798,     0,  3799,  3800,
       0,     0,     0,  2795,     0,     0,     0,   853,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2798,
       0,  4522,     0,     0,  4522,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4522,     0,     0,  3834,
       0,     0,     0,     0,     0,     0,   853,     0,     0,     0,
       0,   947,     0,     0,     0,     0,     0,  2799,  2800,  2801,
       0,     0,     0,     0,  2802,     0,     0,     0,     0,     0,
       0,     0,     0,  3834,     0,     0,   947,     0,     0,     0,
    2803,     0,     0,  2804,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   853,  2805,     0,     0,     0,     0,     0,     0,     0,
    3890,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2807,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3834,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4018,  4019,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3834,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4134,
       0,     0,     0,     0,     0,     0,  2626,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4172,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2626,     0,
       0,     0,  4278,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3834,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4443,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4497,     0,  4499,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2626,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4683,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4770,     0,     0,     0,     0,     0,     0,
       0,  3834,   160,     0,   161,   717,   163,   164,   165,   166,
       0,     0,   167,     0,     0,     0,   168,     0,     0,   718,
       0,   170,   171,   172,   173,   174,   175,   176,   719,   178,
       0,   179,  4793,     0,   720,   180,   721,   722,   723,   181,
     724,     0,   182,   183,   184,  1872,   185,     0,   186,   187,
       0,     0,   188,   725,   726,   189,   190,     0,   191,   727,
     728,   193,   194,     0,   195,   196,   197,   198,   729,   200,
       0,   730,   202,   731,   732,   733,   734,   735,     0,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,   736,   222,     0,   223,   737,   738,
     224,     0,     0,   225,   739,   226,   740,   741,   227,     0,
     228,   742,   743,     0,   229,   230,   231,   744,   745,   746,
       0,     0,     0,     0,   747,   234,   748,     0,     0,   749,
     235,     0,   236,     0,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,   243,     0,
       0,   244,   245,   246,     0,     0,     0,   247,     0,   248,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   750,     0,   262,   263,
     264,   265,   751,   752,   266,   267,     0,   268,   269,   270,
     753,     0,   271,     0,     0,     0,   754,   273,     0,   274,
       0,   275,     0,   276,   277,   755,   279,   756,   281,   282,
       0,   283,  3834,   757,   284,   285,   286,     0,   287,   758,
     759,     0,   288,   289,     0,     0,     0,   760,   291,   292,
     293,   294,   761,     0,     0,   295,   296,   297,     0,     0,
     298,     0,     0,     0,   762,   299,   300,   763,     0,     0,
     301,     0,   302,   303,     0,   304,   305,     0,     0,     0,
     306,     0,     0,   307,   308,   764,     0,  1873,   310,     0,
     765,   311,   312,     0,     0,     0,     0,     0,   766,   314,
       0,   315,     0,   316,     0,   317,   318,     0,     0,   767,
       0,     0,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,   768,   339,   340,   341,   342,   769,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   770,   351,     0,     0,   771,   353,   772,   354,     0,
     355,   773,   774,   775,   776,   777,   360,   361,   362,   363,
     364,   365,     0,   778,   366,     0,     0,   367,   368,   369,
     370,   779,   780,   781,   371,   372,     0,   782,   783,   373,
       0,   374,   375,   784,     0,   377,   378,   379,   380,     0,
     381,   382,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,   385,     0,   785,   386,     0,   387,     0,   388,
     389,   786,   391,   392,   393,   394,   787,   788,   397,   789,
       0,   398,   399,   400,     0,   401,     0,   402,   403,   404,
     405,   406,     0,   790,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,     0,   421,   422,     0,   423,   424,
     425,   791,   792,   426,     0,   427,     0,   428,   429,     0,
     430,   431,     0,   432,     0,   793,     0,   794,   434,   435,
     436,   437,   438,   439,   795,   796,   442,   443,   444,   445,
       0,   797,   447,     0,     0,     0,   448,   449,   450,   451,
       0,     0,     0,   452,     0,     0,     0,   453,     0,   454,
     455,   456,   457,   458,   459,     0,   460,   461,   462,   463,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,   471,
     472,     0,     0,     0,   473,   798,   799,   474,   475,     0,
     476,   477,   800,   479,   480,   481,   801,   802,   482,   483,
     484,   485,   803,   486,   487,     0,     0,   488,   489,   490,
     491,     0,   804,   492,   493,     0,   805,   806,   807,   808,
       0,     0,     0,     0,  1874,   498,   499,   500,     0,   809,
     810,   811,   502,   503,   504,   812,   505,   506,   813,   507,
     508,     0,   509,   510,     0,     0,   511,     0,     0,   512,
       0,   513,     0,   814,   515,     0,     0,   815,   816,   817,
     818,   516,     0,     0,   517,   819,     0,   820,   518,   519,
     520,   521,   522,   821,   822,     0,     0,     0,     0,     0,
       0,   525,   526,     0,   527,   528,   529,     0,     0,   823,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   824,
     825,     0,     0,     0,     0,   826,   827,     0,     0,   828,
     829,     0,     0,   830,   831,   160,     0,   161,   717,   163,
     164,   165,   166,  2144,     0,   167,     0,     0,     0,   168,
       0,     0,   718,     0,   170,   171,   172,   173,   174,   175,
     176,   719,   178,     0,   179,     0,     0,  2145,   180,   721,
     722,   723,   181,   724,     0,   182,   183,   184,     0,   185,
       0,   186,   187,     0,     0,   188,   725,   726,   189,   190,
       0,   191,   727,   728,   193,   194,     0,   195,   196,   197,
     198,   729,   200,     0,   730,   202,   731,   732,   733,   734,
     735,     0,   208,   209,   210,   211,   212,   213,   214,   215,
       0,   216,   217,     0,   218,   219,   220,   736,   222,     0,
     223,   737,   738,   224,     0,     0,   225,   739,   226,   740,
     741,   227,     0,   228,   742,   743,     0,   229,   230,   231,
     744,   745,   746,     0,     0,     0,     0,   747,   234,   748,
       0,     0,  2146,   235,     0,   236,     0,     0,     0,     0,
     237,     0,   238,   239,   240,   241,   242,     0,     0,     0,
       0,   243,     0,     0,   244,   245,   246,     0,     0,     0,
     247,     0,   248,   249,     0,   250,   251,   252,     0,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   750,
       0,   262,   263,   264,   265,   751,   752,   266,   267,     0,
     268,   269,   270,   753,     0,   271,     0,     0,     0,   754,
     273,     0,   274,     0,   275,     0,   276,   277,   755,   279,
     756,   281,   282,     0,   283,     0,   757,   284,   285,   286,
       0,   287,   758,   759,     0,   288,   289,     0,     0,     0,
     760,   291,   292,   293,   294,   761,     0,     0,   295,   296,
     297,     0,     0,   298,     0,     0,     0,   762,   299,   300,
     763,     0,     0,   301,     0,   302,   303,     0,   304,   305,
       0,     0,     0,   306,     0,     0,   307,   308,   764,     0,
       0,   310,     0,   765,   311,   312,     0,     0,     0,     0,
       0,   766,   314,     0,   315,     0,   316,     0,   317,   318,
       0,     0,   767,     0,     0,     0,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,   335,   336,   337,   338,   768,   339,   340,
     341,   342,   769,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   348,   349,   770,   351,     0,     0,   771,   353,
     772,   354,     0,   355,   773,   774,   775,   776,   777,   360,
     361,   362,   363,   364,   365,     0,   778,   366,     0,     0,
     367,   368,   369,   370,   779,   780,   781,   371,   372,     0,
     782,   783,   373,     0,   374,   375,   784,  2147,   377,   378,
     379,   380,     0,   381,   382,     0,     0,     0,     0,     0,
       0,     0,     0,   383,   384,   385,     0,   785,   386,     0,
     387,     0,   388,   389,   786,   391,   392,   393,   394,   787,
     788,   397,   789,     0,   398,   399,   400,     0,   401,     0,
     402,   403,   404,   405,   406,     0,   790,   408,   409,     0,
       0,   410,     0,     0,     0,   411,   412,   413,   414,   415,
       0,     0,   416,   417,   418,   419,   420,     0,   421,   422,
       0,   423,   424,   425,   791,   792,   426,     0,   427,     0,
     428,   429,     0,   430,   431,     0,   432,     0,   793,     0,
     794,   434,   435,   436,   437,   438,   439,   795,   796,   442,
     443,   444,   445,     0,   797,   447,     0,     0,     0,   448,
     449,   450,   451,     0,     0,     0,   452,     0,     0,     0,
     453,     0,   454,   455,   456,   457,   458,   459,     0,   460,
     461,   462,   463,   464,   465,     0,     0,     0,     0,     0,
       0,   466,   467,     0,   468,     0,     0,   469,     0,     0,
       0,   470,   471,   472,     0,     0,     0,   473,   798,   799,
     474,   475,     0,   476,   477,   800,   479,   480,   481,   801,
     802,   482,   483,   484,   485,   803,   486,   487,     0,     0,
     488,   489,   490,   491,     0,   804,   492,   493,     0,   805,
     806,   807,   808,     0,     0,     0,     0,     0,   498,   499,
     500,     0,   809,   810,   811,   502,   503,   504,   812,   505,
     506,   813,   507,   508,     0,   509,   510,     0,     0,   511,
       0,     0,   512,     0,   513,     0,   814,   515,     0,     0,
     815,   816,   817,   818,   516,     0,     0,   517,   819,     0,
     820,   518,   519,   520,   521,   522,   821,   822,     0,     0,
       0,     0,     0,     0,   525,   526,     0,   527,   528,   529,
       0,     0,   823,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   824,   825,     0,     0,     0,     0,   826,   827,
       0,     0,   828,   829,     0,     0,   830,   831,   160,     0,
     161,   717,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,   718,     0,   170,   171,   172,
     173,   174,   175,   176,   719,   178,     0,   179,     0,     0,
     720,   180,   721,   722,   723,   181,   724,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,   725,
     726,   189,   190,     0,   191,   727,   728,   193,   194,     0,
     195,   196,   197,   198,   729,   200,     0,   730,   202,   731,
     732,   733,   734,   735,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     736,   222,     0,   223,   737,   738,   224,     0,     0,   225,
     739,   226,   740,   741,   227,     0,   228,   742,   743,     0,
     229,   230,   231,   744,   745,   746,     0,     0,     0,     0,
     747,   234,   748,     0,     0,   749,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   750,     0,   262,   263,   264,   265,   751,   752,
     266,   267,     0,   268,   269,   270,   753,     0,   271,     0,
       0,     0,   754,   273,  2442,   274,     0,   275,     0,   276,
     277,   755,   279,   756,   281,   282,     0,   283,     0,   757,
     284,   285,   286,     0,   287,   758,   759,     0,   288,   289,
       0,     0,     0,   760,   291,   292,   293,   294,   761,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
     762,   299,   300,   763,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   764,     0,     0,   310,     0,   765,   311,   312,     0,
       0,     0,     0,     0,   766,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,   767,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
     768,   339,   340,   341,   342,   769,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   770,   351,     0,
       0,   771,   353,   772,   354,     0,   355,   773,   774,   775,
     776,   777,   360,   361,   362,   363,   364,   365,     0,   778,
     366,     0,     0,   367,   368,   369,   370,   779,   780,   781,
     371,   372,     0,   782,   783,   373,     0,   374,   375,   784,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
     785,   386,     0,   387,     0,   388,   389,   786,   391,   392,
     393,   394,   787,   788,   397,   789,     0,   398,   399,   400,
       0,   401,     0,   402,   403,   404,   405,   406,     0,   790,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,   422,     0,   423,   424,   425,   791,   792,   426,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   793,     0,   794,   434,   435,   436,   437,   438,   439,
     795,   796,   442,   443,   444,   445,     0,   797,   447,     0,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,     0,   453,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,   798,   799,   474,   475,     0,   476,   477,   800,   479,
     480,   481,   801,   802,   482,   483,   484,   485,   803,   486,
     487,     0,     0,   488,   489,   490,   491,     0,   804,   492,
     493,     0,   805,   806,   807,   808,     0,     0,     0,     0,
       0,   498,   499,   500,     0,   809,   810,   811,   502,   503,
     504,   812,   505,   506,   813,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,     0,   513,     0,   814,
     515,     0,     0,   815,   816,   817,   818,   516,     0,     0,
     517,   819,     0,   820,   518,   519,   520,   521,   522,   821,
     822,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,     0,   823,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   824,   825,     0,     0,     0,
       0,   826,   827,     0,     0,   828,   829,     0,     0,   830,
     831,   160,     0,   161,   717,   163,   164,   165,   166,     0,
       0,   167,     0,     0,     0,   168,     0,     0,   718,     0,
     170,   171,   172,   173,   174,   175,   176,   719,   178,     0,
     179,     0,     0,   720,   180,   721,   722,   723,   181,   724,
       0,   182,   183,   184,     0,   185,     0,   186,   187,     0,
       0,   188,   725,   726,   189,   190,     0,   191,   727,   728,
     193,   194,     0,   195,   196,   197,   198,   729,   200,     0,
     730,   202,   731,   732,   733,   734,   735,     0,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,   217,     0,
     218,   219,   220,   736,   222,     0,   223,   737,   738,   224,
       0,     0,   225,   739,   226,   740,   741,   227,     0,   228,
     742,   743,     0,   229,   230,   231,   744,   745,   746,     0,
       0,     0,     0,   747,   234,   748,     0,     0,   749,   235,
       0,   236,     0,     0,     0,     0,   237,     0,   238,   239,
     240,   241,   242,     0,     0,     0,     0,   243,     0,     0,
     244,   245,   246,     0,     0,     0,   247,     0,   248,   249,
       0,   250,   251,   252,     0,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   750,     0,   262,   263,   264,
     265,   751,   752,   266,   267,     0,   268,   269,   270,   753,
       0,   271,     0,     0,     0,   754,   273,  2444,   274,     0,
     275,     0,   276,   277,   755,   279,   756,   281,   282,     0,
     283,     0,   757,   284,   285,   286,     0,   287,   758,   759,
       0,   288,   289,     0,     0,     0,   760,   291,   292,   293,
     294,   761,     0,     0,   295,   296,   297,     0,     0,   298,
       0,     0,     0,   762,   299,   300,   763,     0,     0,   301,
       0,   302,   303,     0,   304,   305,     0,     0,     0,   306,
       0,     0,   307,   308,   764,     0,     0,   310,     0,   765,
     311,   312,     0,     0,     0,     0,     0,   766,   314,     0,
     315,     0,   316,     0,   317,   318,     0,     0,   767,     0,
       0,     0,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,   335,
     336,   337,   338,   768,   339,   340,   341,   342,   769,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   348,   349,
     770,   351,     0,     0,   771,   353,   772,   354,     0,   355,
     773,   774,   775,   776,   777,   360,   361,   362,   363,   364,
     365,     0,   778,   366,     0,     0,   367,   368,   369,   370,
     779,   780,   781,   371,   372,     0,   782,   783,   373,     0,
     374,   375,   784,     0,   377,   378,   379,   380,     0,   381,
     382,     0,     0,     0,     0,     0,     0,     0,     0,   383,
     384,   385,     0,   785,   386,     0,   387,     0,   388,   389,
     786,   391,   392,   393,   394,   787,   788,   397,   789,     0,
     398,   399,   400,     0,   401,     0,   402,   403,   404,   405,
     406,     0,   790,   408,   409,     0,     0,   410,     0,     0,
       0,   411,   412,   413,   414,   415,     0,     0,   416,   417,
     418,   419,   420,     0,   421,   422,     0,   423,   424,   425,
     791,   792,   426,     0,   427,     0,   428,   429,     0,   430,
     431,     0,   432,     0,   793,     0,   794,   434,   435,   436,
     437,   438,   439,   795,   796,   442,   443,   444,   445,     0,
     797,   447,     0,     0,     0,   448,   449,   450,   451,     0,
       0,     0,   452,     0,     0,     0,   453,     0,   454,   455,
     456,   457,   458,   459,     0,   460,   461,   462,   463,   464,
     465,     0,     0,     0,     0,     0,     0,   466,   467,     0,
     468,     0,     0,   469,     0,     0,     0,   470,   471,   472,
       0,     0,     0,   473,   798,   799,   474,   475,     0,   476,
     477,   800,   479,   480,   481,   801,   802,   482,   483,   484,
     485,   803,   486,   487,     0,     0,   488,   489,   490,   491,
       0,   804,   492,   493,     0,   805,   806,   807,   808,     0,
       0,     0,     0,     0,   498,   499,   500,     0,   809,   810,
     811,   502,   503,   504,   812,   505,   506,   813,   507,   508,
       0,   509,   510,     0,     0,   511,     0,     0,   512,     0,
     513,     0,   814,   515,     0,     0,   815,   816,   817,   818,
     516,     0,     0,   517,   819,     0,   820,   518,   519,   520,
     521,   522,   821,   822,     0,     0,     0,     0,     0,     0,
     525,   526,     0,   527,   528,   529,     0,     0,   823,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   824,   825,
       0,     0,     0,     0,   826,   827,     0,     0,   828,   829,
       0,     0,   830,   831,   160,     0,   161,   717,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   718,     0,   170,   171,   172,   173,   174,   175,   176,
     719,   178,     0,   179,     0,     0,   720,   180,   721,   722,
     723,   181,   724,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,   725,   726,   189,   190,     0,
     191,   727,   728,   193,   194,     0,   195,   196,   197,   198,
     729,   200,     0,   730,   202,   731,   732,   733,   734,   735,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   736,   222,     0,   223,
     737,   738,   224,     0,     0,   225,   739,   226,   740,   741,
     227,     0,   228,   742,   743,     0,   229,   230,   231,   744,
     745,   746,     0,     0,     0,     0,   747,   234,   748,     0,
       0,   749,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   750,     0,
     262,   263,   264,   265,   751,   752,   266,   267,     0,   268,
     269,   270,   753,     0,   271,     0,     0,     0,   754,   273,
    2446,   274,     0,   275,     0,   276,   277,   755,   279,   756,
     281,   282,     0,   283,     0,   757,   284,   285,   286,     0,
     287,   758,   759,     0,   288,   289,     0,     0,     0,   760,
     291,   292,   293,   294,   761,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,   762,   299,   300,   763,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   764,     0,     0,
     310,     0,   765,   311,   312,     0,     0,     0,     0,     0,
     766,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,   767,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,   768,   339,   340,   341,
     342,   769,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   770,   351,     0,     0,   771,   353,   772,
     354,     0,   355,   773,   774,   775,   776,   777,   360,   361,
     362,   363,   364,   365,     0,   778,   366,     0,     0,   367,
     368,   369,   370,   779,   780,   781,   371,   372,     0,   782,
     783,   373,     0,   374,   375,   784,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,   785,   386,     0,   387,
       0,   388,   389,   786,   391,   392,   393,   394,   787,   788,
     397,   789,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   790,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,   791,   792,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   793,     0,   794,
     434,   435,   436,   437,   438,   439,   795,   796,   442,   443,
     444,   445,     0,   797,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,   798,   799,   474,
     475,     0,   476,   477,   800,   479,   480,   481,   801,   802,
     482,   483,   484,   485,   803,   486,   487,     0,     0,   488,
     489,   490,   491,     0,   804,   492,   493,     0,   805,   806,
     807,   808,     0,     0,     0,     0,     0,   498,   499,   500,
       0,   809,   810,   811,   502,   503,   504,   812,   505,   506,
     813,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   814,   515,     0,     0,   815,
     816,   817,   818,   516,     0,     0,   517,   819,     0,   820,
     518,   519,   520,   521,   522,   821,   822,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
       0,   823,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   824,   825,     0,     0,     0,     0,   826,   827,     0,
       0,   828,   829,     0,     0,   830,   831,   160,     0,   161,
     717,   163,   164,   165,   166,     0,     0,   167,     0,     0,
       0,   168,     0,     0,   718,     0,   170,   171,   172,   173,
     174,   175,   176,   719,   178,     0,   179,     0,     0,   720,
     180,   721,   722,   723,   181,   724,     0,   182,   183,   184,
       0,   185,     0,   186,   187,     0,     0,   188,   725,   726,
     189,   190,     0,   191,   727,   728,   193,   194,     0,   195,
     196,   197,   198,   729,   200,     0,   730,   202,   731,   732,
     733,   734,   735,     0,   208,   209,   210,   211,   212,   213,
     214,   215,     0,   216,   217,     0,   218,   219,   220,   736,
     222,     0,   223,   737,   738,   224,     0,     0,   225,   739,
     226,   740,   741,   227,     0,   228,   742,   743,     0,   229,
     230,   231,   744,   745,   746,     0,     0,     0,     0,   747,
     234,   748,     0,     0,   749,   235,     0,   236,     0,     0,
       0,     0,   237,     0,   238,   239,   240,   241,   242,     0,
       0,     0,     0,   243,     0,     0,   244,   245,   246,     0,
       0,     0,   247,     0,   248,   249,     0,   250,   251,   252,
       0,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   750,     0,   262,   263,   264,   265,   751,   752,   266,
     267,     0,   268,   269,   270,   753,     0,   271,     0,     0,
       0,   754,   273,     0,   274,     0,   275,     0,   276,   277,
     755,   279,   756,   281,   282,     0,   283,     0,   757,   284,
     285,   286,     0,   287,   758,   759,     0,   288,   289,     0,
       0,     0,   760,   291,   292,   293,   294,   761,     0,     0,
     295,   296,   297,     0,     0,   298,     0,     0,     0,   762,
     299,   300,   763,     0,     0,   301,     0,   302,   303,     0,
     304,   305,     0,     0,     0,   306,     0,     0,   307,   308,
     764,     0,     0,   310,     0,   765,   311,   312,     0,     0,
       0,     0,     0,   766,   314,     0,   315,     0,   316,     0,
     317,   318,     0,     0,   767,     0,     0,     0,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,     0,   335,   336,   337,   338,   768,
     339,   340,   341,   342,   769,   343,   344,   345,     0,     0,
       0,     0,   346,   347,   348,   349,   770,   351,     0,     0,
     771,   353,   772,   354,     0,   355,   773,   774,   775,   776,
     777,   360,   361,   362,   363,   364,   365,     0,   778,   366,
       0,     0,   367,   368,   369,   370,   779,   780,   781,   371,
     372,     0,   782,   783,   373,     0,   374,   375,   784,     0,
     377,   378,   379,   380,     0,   381,   382,     0,     0,     0,
       0,     0,     0,     0,     0,   383,   384,   385,     0,   785,
     386,     0,   387,     0,   388,   389,   786,   391,   392,   393,
     394,   787,   788,   397,   789,     0,   398,   399,   400,     0,
     401,     0,   402,   403,   404,   405,   406,     0,   790,   408,
     409,     0,     0,   410,     0,     0,     0,   411,   412,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,     0,
     421,   422,     0,   423,   424,   425,   791,   792,   426,     0,
     427,     0,   428,   429,     0,   430,   431,     0,   432,     0,
     793,     0,   794,   434,   435,   436,   437,   438,   439,   795,
     796,   442,   443,   444,   445,     0,   797,   447,     0,     0,
       0,   448,   449,   450,   451,     0,     0,     0,   452,     0,
       0,     0,   453,     0,   454,   455,   456,   457,   458,   459,
       0,   460,   461,   462,   463,   464,   465,     0,     0,     0,
       0,     0,     0,   466,   467,     0,   468,     0,     0,   469,
       0,     0,     0,   470,   471,   472,     0,     0,     0,   473,
     798,   799,   474,   475,     0,   476,   477,   800,   479,   480,
     481,   801,   802,   482,   483,   484,   485,   803,   486,   487,
       0,     0,   488,   489,   490,   491,     0,   804,   492,   493,
       0,   805,   806,   807,   808,     0,     0,     0,     0,     0,
     498,   499,   500,     0,   809,   810,   811,   502,   503,   504,
     812,   505,   506,   813,   507,   508,     0,   509,   510,     0,
       0,   511,     0,     0,   512,     0,   513,     0,   814,   515,
       0,     0,   815,   816,   817,   818,   516,     0,     0,   517,
     819,     0,   820,   518,   519,   520,   521,   522,   821,   822,
       0,     0,     0,     0,     0,     0,   525,   526,     0,   527,
     528,   529,     0,     0,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   824,   825,     0,     0,     0,     0,
     826,   827,     0,     0,   828,   829,     0,     0,   830,   831,
     160,     0,   161,   717,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   718,     0,   170,
     171,   172,   173,   174,   175,   176,   719,   178,     0,   179,
       0,     0,   720,   180,   721,   722,   723,   181,   724,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,   725,   726,   189,   190,     0,   191,   727,   728,   193,
     194,     0,   195,   196,   197,   198,   729,   200,     0,   730,
     202,   731,   732,   733,   734,   735,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   736,   222,     0,   223,   737,   738,   224,     0,
       0,   225,   739,   226,   740,   741,   227,     0,   228,   742,
     743,     0,   229,   230,   231,   744,   745,   746,     0,     0,
       0,     0,   747,   234,   748,     0,     0,   749,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   750,     0,   262,   263,   264,   265,
     751,   752,   266,   267,     0,   268,   269,   270,   753,     0,
     271,     0,     0,     0,   754,   273,     0,   274,     0,   275,
       0,   276,   277,   755,   279,   756,   281,   282,     0,   283,
       0,   757,   284,   285,   286,     0,   287,   758,   759,     0,
     288,   289,     0,     0,     0,   760,   291,   292,   293,   294,
     761,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,   762,   299,   300,   763,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   764,     0,     0,   310,     0,   765,   311,
     312,     0,     0,     0,     0,     0,   766,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,   767,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,   768,   339,   340,   341,   342,   769,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   770,
     351,     0,     0,   771,   353,   772,   354,     0,   355,   773,
     774,   775,   776,   777,   360,   361,   362,   363,   364,   365,
       0,   778,   366,     0,     0,   367,   368,   369,   370,   779,
     780,   781,   371,   372,     0,   782,   783,   373,     0,   374,
     375,   784,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,   785,   386,     0,   387,     0,   388,   389,   786,
     391,   392,   393,   394,   787,   788,   397,   789,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   790,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,   791,
     792,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   793,     0,   794,   434,   435,   436,   437,
     438,   439,   795,   796,   442,   443,   444,   445,     0,   797,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,   798,   799,   474,   475,     0,   476,   477,
     800,   479,   480,   481,   801,   802,   482,   483,   484,   485,
     803,   486,   487,     0,     0,   488,   489,   490,   491,     0,
     804,   492,   493,     0,   805,   806,   807,   808,     0,     0,
       0,     0,     0,   498,   499,   500,     0,   809,   810,   811,
     502,   503,   504,   812,   505,   506,   813,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   814,   515,     0,     0,   815,   816,   817,   818,   516,
       0,     0,   517,   819,     0,   820,   518,   519,   520,   521,
     522,   821,   822,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,     0,   823,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   824,   825,     0,
       0,     0,     0,   826,  1234,     0,     0,   828,   829,     0,
       0,   830,   831,   160,     0,   161,   717,   163,   164,   165,
     166,  1907,     0,   167,     0,     0,     0,  1908,     0,     0,
     718,     0,   170,   171,   172,   173,   174,   175,   176,   719,
     178,     0,   179,     0,     0,   720,   180,   721,   722,   723,
     181,   724,     0,   182,   183,   184,     0,   185,     0,   186,
     187,     0,     0,   188,   725,   726,   189,   190,     0,   191,
     727,   728,   193,   194,     0,   195,   196,   197,   198,   729,
     200,     0,   730,   202,   731,   732,   733,   734,   735,     0,
     208,   209,   210,   211,   212,   213,   214,   215,     0,   216,
     217,     0,   218,   219,   220,   736,   222,     0,   223,   737,
     738,   224,     0,     0,   225,   739,   226,   740,   741,   227,
       0,   228,   742,   743,     0,   229,   230,   231,   744,   745,
     746,     0,     0,     0,     0,   747,   234,   748,     0,     0,
     749,   235,     0,   236,     0,     0,     0,     0,   237,     0,
     238,   239,   240,   241,   242,     0,     0,     0,     0,   243,
       0,     0,   244,   245,   246,     0,     0,     0,   247,     0,
     248,   249,     0,   250,   251,   252,     0,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   750,     0,   262,
     263,   264,   265,   751,   752,   266,   267,     0,   268,   269,
     270,   753,     0,   271,     0,     0,     0,   754,   273,     0,
     274,     0,   275,     0,   276,   277,   755,   279,   756,   281,
     282,     0,   283,     0,   757,   284,   285,   286,     0,   287,
     758,   759,     0,   288,   289,     0,     0,     0,   760,   291,
     292,   293,   294,   761,     0,     0,   295,   296,   297,     0,
       0,   298,     0,     0,     0,   762,   299,   300,   763,     0,
       0,   301,     0,   302,   303,     0,   304,   305,     0,     0,
       0,   306,     0,     0,   307,   308,   764,     0,     0,   310,
       0,   765,   311,   312,     0,     0,     0,     0,     0,   766,
     314,     0,   315,     0,   316,     0,   317,   318,     0,     0,
     767,     0,     0,     0,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
       0,   335,   336,   337,   338,   768,   339,   340,   341,   342,
     769,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     348,   349,   770,   351,     0,     0,   771,   353,   772,   354,
       0,   355,   773,   774,   775,   776,   777,   360,   361,   362,
     363,   364,   365,     0,   778,   366,     0,     0,   367,   368,
     369,   370,   779,     0,   781,   371,   372,     0,   782,   783,
     373,     0,   374,   375,   784,     0,   377,   378,   379,   380,
       0,   381,   382,     0,     0,     0,     0,     0,     0,     0,
       0,   383,   384,   385,     0,   785,   386,     0,   387,     0,
     388,   389,   786,   391,   392,   393,   394,   787,   788,   397,
     789,     0,   398,   399,   400,     0,   401,     0,   402,   403,
     404,   405,   406,     0,   790,   408,   409,     0,     0,   410,
       0,     0,     0,   411,   412,   413,   414,   415,     0,     0,
     416,   417,   418,   419,   420,     0,   421,   422,     0,   423,
     424,   425,   791,   792,   426,     0,   427,     0,   428,   429,
       0,   430,   431,     0,   432,     0,   793,     0,   794,   434,
     435,   436,   437,   438,   439,   795,   796,   442,   443,   444,
     445,     0,   797,   447,     0,     0,     0,   448,   449,   450,
     451,     0,     0,     0,   452,     0,     0,     0,   453,     0,
     454,   455,   456,   457,   458,   459,     0,   460,   461,   462,
     463,   464,   465,     0,     0,     0,     0,     0,     0,   466,
     467,     0,   468,     0,     0,   469,     0,     0,     0,   470,
     471,   472,     0,     0,     0,   473,   798,   799,   474,   475,
       0,   476,   477,   800,   479,   480,   481,   801,   802,   482,
     483,   484,   485,   803,   486,   487,     0,     0,   488,   489,
     490,   491,     0,   804,   492,   493,     0,   805,   806,   807,
     808,     0,     0,     0,     0,     0,   498,   499,   500,     0,
     809,   810,   811,   502,   503,   504,   812,   505,   506,   813,
     507,   508,     0,   509,   510,     0,     0,   511,     0,     0,
     512,     0,   513,     0,   814,   515,     0,     0,   815,   816,
     817,   818,   516,     0,     0,   517,   819,     0,   820,   518,
     519,   520,   521,   522,   821,   822,     0,     0,     0,     0,
       0,     0,   525,   526,     0,   527,   528,   529,     0,     0,
     823,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     824,   825,     0,     0,     0,     0,   826,   827,     0,     0,
     828,   829,     0,     0,   830,   831,   160,     0,   161,   717,
     163,   164,   165,   166,     0,     0,   167,     0,     0,     0,
     168,     0,     0,   718,     0,   170,   171,   172,   173,   174,
     175,   176,   719,   178,     0,   179,     0,     0,   720,   180,
     721,   722,   723,   181,   724,     0,   182,   183,   184,     0,
     185,     0,   186,   187,     0,     0,   188,   725,   726,   189,
     190,     0,   191,   727,   728,   193,   194,     0,   195,   196,
     197,   198,   729,   200,     0,   730,   202,   731,   732,   733,
     734,   735,     0,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,   217,     0,   218,   219,   220,   736,   222,
       0,   223,   737,   738,   224,     0,     0,   225,   739,   226,
     740,   741,   227,     0,   228,   742,   743,     0,   229,   230,
     231,   744,   745,   746,     0,     0,     0,     0,   747,   234,
     748,     0,     0,   749,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,   243,     0,     0,   244,   245,   246,     0,     0,
       0,   247,     0,   248,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     750,     0,   262,   263,   264,   265,   751,   752,   266,   267,
       0,   268,   269,   270,   753,     0,   271,     0,     0,     0,
     754,   273,     0,   274,     0,   275,     0,   276,   277,   755,
     279,   756,   281,   282,     0,   283,     0,   757,   284,   285,
     286,     0,   287,   758,   759,     0,   288,   289,     0,     0,
       0,   760,   291,   292,   293,   294,   761,     0,     0,   295,
     296,   297,     0,     0,   298,     0,     0,     0,   762,   299,
     300,   763,     0,     0,   301,     0,   302,   303,     0,   304,
     305,     0,     0,     0,   306,     0,     0,   307,   308,   764,
       0,     0,   310,     0,   765,   311,   312,     0,     0,     0,
       0,     0,   766,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,   767,     0,     0,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,   768,   339,
     340,   341,   342,   769,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   770,   351,     0,     0,   771,
     353,   772,   354,     0,   355,   773,   774,   775,   776,   777,
     360,   361,   362,   363,   364,   365,     0,   778,   366,     0,
       0,   367,   368,   369,   370,   779,   780,   781,   371,   372,
       0,   782,   783,   373,     0,   374,   375,   784,     0,   377,
     378,   379,   380,     0,   381,   382,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,   385,     0,   785,   386,
       0,   387,     0,   388,   389,   786,   391,   392,   393,   394,
     787,   788,   397,   789,     0,   398,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   790,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
     422,     0,   423,   424,   425,   791,   792,   426,     0,   427,
       0,   428,   429,     0,   430,   431,     0,   432,     0,   793,
       0,   794,   434,   435,   436,   437,   438,   439,   795,   796,
     442,   443,   444,   445,     0,   797,   447,     0,     0,     0,
     448,   449,   450,   451,     0,     0,     0,   452,     0,     0,
       0,   453,     0,   454,   455,   456,   457,   458,   459,     0,
     460,   461,   462,   463,   464,   465,     0,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,   471,   472,     0,     0,     0,   473,   798,
     799,   474,   475,     0,   476,   477,   800,   479,   480,   481,
     801,   802,   482,   483,   484,   485,   803,   486,   487,     0,
       0,   488,   489,   490,   491,     0,   804,   492,   493,     0,
     805,   806,   807,   808,     0,     0,     0,     0,     0,   498,
     499,   500,     0,   809,   810,   811,   502,   503,   504,   812,
     505,   506,   813,   507,   508,     0,   509,   510,     0,     0,
     511,     0,     0,   512,     0,   513,     0,  2014,   515,     0,
       0,   815,   816,   817,   818,   516,     0,     0,   517,   819,
       0,   820,   518,   519,   520,   521,   522,   821,   822,     0,
       0,     0,     0,     0,     0,   525,   526,     0,   527,   528,
     529,     0,     0,   823,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   824,   825,     0,     0,     0,     0,   826,
     827,     0,     0,   828,   829,     0,     0,   830,   831,   160,
       0,   161,   717,   163,   164,   165,   166,     0,     0,   167,
       0,     0,     0,   168,     0,     0,   718,     0,   170,   171,
     172,   173,   174,   175,   176,   719,   178,     0,   179,     0,
       0,   720,   180,   721,   722,   723,   181,   724,     0,   182,
     183,   184,     0,   185,     0,   186,   187,     0,     0,   188,
     725,   726,   189,   190,     0,   191,   727,   728,   193,   194,
       0,   195,   196,   197,   198,   729,   200,     0,   730,   202,
     731,   732,   733,   734,   735,     0,   208,   209,   210,   211,
     212,   213,   214,   215,     0,   216,   217,     0,   218,   219,
     220,   736,   222,     0,   223,   737,   738,   224,     0,     0,
     225,   739,   226,   740,   741,   227,     0,   228,   742,   743,
       0,   229,   230,   231,   744,   745,   746,     0,     0,     0,
       0,   747,   234,   748,     0,     0,   749,   235,     0,   236,
       0,     0,     0,     0,   237,     0,   238,   239,   240,   241,
     242,     0,     0,     0,     0,   243,     0,     0,   244,   245,
     246,     0,     0,     0,   247,     0,   248,   249,     0,   250,
     251,   252,     0,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   750,     0,   262,   263,   264,   265,   751,
     752,   266,   267,     0,   268,   269,   270,   753,     0,   271,
       0,     0,     0,   754,   273,     0,   274,     0,   275,     0,
     276,   277,   755,   279,   756,   281,   282,     0,   283,     0,
     757,   284,   285,   286,     0,   287,   758,   759,     0,   288,
     289,     0,     0,     0,   760,   291,   292,   293,   294,   761,
       0,     0,   295,   296,   297,     0,     0,   298,     0,     0,
       0,   762,   299,   300,  2891,     0,     0,   301,     0,   302,
     303,     0,   304,   305,     0,     0,     0,   306,     0,     0,
     307,   308,   764,     0,     0,   310,     0,   765,   311,   312,
       0,     0,     0,     0,     0,   766,   314,     0,   315,     0,
     316,     0,   317,   318,     0,     0,   767,     0,     0,     0,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,     0,   335,   336,   337,
     338,   768,   339,   340,   341,   342,   769,   343,   344,   345,
       0,     0,     0,     0,   346,   347,   348,   349,   770,   351,
       0,     0,   771,   353,   772,   354,     0,   355,   773,   774,
     775,   776,   777,   360,   361,   362,   363,   364,   365,     0,
     778,   366,     0,     0,   367,   368,   369,   370,   779,   780,
     781,   371,   372,     0,   782,   783,   373,     0,   374,   375,
     784,     0,   377,   378,   379,   380,     0,   381,   382,     0,
       0,     0,     0,     0,     0,     0,     0,   383,   384,   385,
       0,   785,   386,     0,   387,     0,   388,   389,   786,   391,
     392,   393,   394,   787,   788,   397,   789,     0,   398,   399,
     400,     0,   401,     0,   402,   403,   404,   405,   406,     0,
     790,   408,   409,     0,     0,   410,     0,     0,     0,   411,
     412,   413,   414,   415,     0,     0,   416,   417,   418,   419,
     420,     0,   421,   422,     0,   423,   424,   425,   791,   792,
     426,     0,   427,     0,   428,   429,     0,   430,   431,     0,
     432,     0,   793,     0,   794,   434,   435,   436,   437,   438,
     439,   795,   796,   442,   443,   444,   445,     0,   797,   447,
       0,     0,     0,   448,   449,   450,   451,     0,     0,     0,
     452,     0,     0,     0,   453,     0,   454,   455,   456,   457,
     458,   459,     0,   460,   461,   462,   463,   464,   465,     0,
       0,     0,     0,     0,     0,   466,   467,     0,   468,     0,
       0,   469,     0,     0,     0,   470,   471,   472,     0,     0,
       0,   473,   798,   799,   474,   475,     0,   476,   477,   800,
     479,   480,   481,   801,   802,   482,   483,   484,   485,   803,
     486,   487,     0,     0,   488,   489,   490,   491,     0,   804,
     492,   493,     0,   805,   806,   807,   808,     0,     0,     0,
       0,     0,   498,   499,   500,     0,   809,   810,   811,   502,
     503,   504,   812,   505,   506,   813,   507,   508,     0,   509,
     510,     0,     0,   511,     0,     0,   512,     0,   513,     0,
     814,   515,     0,     0,   815,   816,   817,   818,   516,     0,
       0,   517,   819,     0,   820,   518,   519,   520,   521,   522,
     821,   822,     0,     0,     0,     0,     0,     0,   525,   526,
       0,   527,   528,   529,     0,     0,   823,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   824,   825,     0,     0,
       0,     0,   826,   827,     0,     0,   828,   829,     0,     0,
     830,   831,   160,     0,   161,   717,   163,   164,   165,   166,
       0,     0,   167,     0,     0,     0,   168,     0,     0,   718,
       0,   170,   171,   172,   173,   174,   175,   176,   719,   178,
       0,   179,     0,     0,   720,   180,   721,   722,   723,   181,
     724,     0,   182,   183,   184,     0,   185,     0,   186,   187,
       0,     0,   188,   725,   726,   189,   190,     0,   191,   727,
     728,   193,   194,     0,   195,   196,   197,   198,   729,   200,
       0,   730,   202,   731,   732,   733,   734,   735,     0,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,   736,   222,     0,   223,   737,   738,
     224,     0,     0,   225,   739,   226,   740,   741,   227,     0,
     228,   742,   743,     0,   229,   230,   231,   744,   745,   746,
       0,     0,     0,     0,   747,   234,   748,     0,     0,   749,
     235,     0,   236,     0,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,   243,     0,
       0,   244,   245,   246,     0,     0,     0,   247,     0,   248,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   750,     0,   262,   263,
     264,   265,   751,   752,   266,   267,     0,   268,   269,   270,
     753,     0,   271,     0,     0,     0,   754,   273,     0,   274,
       0,   275,     0,   276,   277,   755,   279,   756,   281,   282,
       0,   283,     0,   757,   284,   285,   286,     0,   287,   758,
     759,     0,   288,   289,     0,     0,     0,   760,   291,   292,
     293,   294,   761,     0,     0,   295,   296,   297,     0,     0,
     298,     0,     0,     0,   762,   299,   300,  2943,     0,     0,
     301,     0,   302,   303,     0,   304,   305,     0,     0,     0,
     306,     0,     0,   307,   308,   764,     0,     0,   310,     0,
     765,   311,   312,     0,     0,     0,     0,     0,   766,   314,
       0,   315,     0,   316,     0,   317,   318,     0,     0,   767,
       0,     0,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,   768,   339,   340,   341,   342,   769,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   770,   351,     0,     0,   771,   353,   772,   354,     0,
     355,   773,   774,   775,   776,   777,   360,   361,   362,   363,
     364,   365,     0,   778,   366,     0,     0,   367,   368,   369,
     370,   779,   780,   781,   371,   372,     0,   782,   783,   373,
       0,   374,   375,   784,     0,   377,   378,   379,   380,     0,
     381,   382,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,   385,     0,   785,   386,     0,   387,     0,   388,
     389,   786,   391,   392,   393,   394,   787,   788,   397,   789,
       0,   398,   399,   400,     0,   401,     0,   402,   403,   404,
     405,   406,     0,   790,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,     0,   421,   422,     0,   423,   424,
     425,   791,   792,   426,     0,   427,     0,   428,   429,     0,
     430,   431,     0,   432,     0,   793,     0,   794,   434,   435,
     436,   437,   438,   439,   795,   796,   442,   443,   444,   445,
       0,   797,   447,     0,     0,     0,   448,   449,   450,   451,
       0,     0,     0,   452,     0,     0,     0,   453,     0,   454,
     455,   456,   457,   458,   459,     0,   460,   461,   462,   463,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,   471,
     472,     0,     0,     0,   473,   798,   799,   474,   475,     0,
     476,   477,   800,   479,   480,   481,   801,   802,   482,   483,
     484,   485,   803,   486,   487,     0,     0,   488,   489,   490,
     491,     0,   804,   492,   493,     0,   805,   806,   807,   808,
       0,     0,     0,     0,     0,   498,   499,   500,     0,   809,
     810,   811,   502,   503,   504,   812,   505,   506,   813,   507,
     508,     0,   509,   510,     0,     0,   511,     0,     0,   512,
       0,   513,     0,   814,   515,     0,     0,   815,   816,   817,
     818,   516,     0,     0,   517,   819,     0,   820,   518,   519,
     520,   521,   522,   821,   822,     0,     0,     0,     0,     0,
       0,   525,   526,     0,   527,   528,   529,     0,     0,   823,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   824,
     825,     0,     0,     0,     0,   826,   827,     0,     0,   828,
     829,     0,     0,   830,   831,   160,     0,   161,   717,   163,
     164,   165,   166,     0,     0,   167,     0,     0,     0,   168,
       0,     0,   718,     0,   170,   171,   172,   173,   174,   175,
     176,   719,   178,     0,   179,     0,     0,   720,   180,   721,
     722,   723,   181,   724,     0,   182,   183,   184,     0,   185,
       0,   186,   187,     0,     0,   188,   725,   726,   189,   190,
       0,   191,   727,   728,   193,   194,     0,   195,   196,   197,
     198,   729,   200,     0,   730,   202,   731,   732,   733,   734,
     735,     0,   208,   209,   210,   211,   212,   213,   214,   215,
       0,   216,   217,     0,   218,   219,   220,   736,   222,     0,
     223,   737,   738,   224,     0,     0,   225,   739,   226,   740,
     741,   227,     0,   228,   742,   743,     0,   229,   230,   231,
     744,   745,   746,     0,     0,     0,     0,   747,   234,   748,
       0,     0,  3833,   235,     0,   236,     0,     0,     0,     0,
     237,     0,   238,   239,   240,   241,   242,     0,     0,     0,
       0,   243,     0,     0,   244,   245,   246,     0,     0,     0,
     247,     0,   248,   249,     0,   250,   251,   252,     0,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   750,
       0,   262,   263,   264,   265,   751,   752,   266,   267,     0,
     268,   269,   270,   753,     0,   271,     0,     0,     0,   754,
     273,     0,   274,     0,   275,     0,   276,   277,   755,   279,
     756,   281,   282,     0,   283,     0,   757,   284,   285,   286,
       0,   287,   758,   759,     0,   288,   289,     0,     0,     0,
     760,   291,   292,   293,   294,   761,     0,     0,   295,   296,
     297,     0,     0,   298,     0,     0,     0,   762,   299,   300,
     763,     0,     0,   301,     0,   302,   303,     0,   304,   305,
       0,     0,     0,   306,     0,     0,   307,   308,   764,     0,
       0,   310,     0,   765,   311,   312,     0,     0,     0,     0,
       0,   766,   314,     0,   315,     0,   316,     0,   317,   318,
       0,     0,   767,     0,     0,     0,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,   335,   336,   337,   338,   768,   339,   340,
     341,   342,   769,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   348,   349,   770,   351,     0,     0,   771,   353,
     772,   354,     0,   355,   773,   774,   775,   776,   777,   360,
     361,   362,   363,   364,   365,     0,   778,   366,     0,     0,
     367,   368,   369,   370,   779,   780,   781,   371,   372,     0,
     782,   783,   373,     0,   374,   375,   784,     0,   377,   378,
     379,   380,     0,   381,   382,     0,     0,     0,     0,     0,
       0,     0,     0,   383,   384,   385,     0,   785,   386,     0,
     387,     0,   388,   389,   786,   391,   392,   393,   394,   787,
     788,   397,   789,     0,   398,   399,   400,     0,   401,     0,
     402,   403,   404,   405,   406,     0,   790,   408,   409,     0,
       0,   410,     0,     0,     0,   411,   412,   413,   414,   415,
       0,     0,   416,   417,   418,   419,   420,     0,   421,   422,
       0,   423,   424,   425,   791,   792,   426,     0,   427,     0,
     428,   429,     0,   430,   431,     0,   432,     0,   793,     0,
     794,   434,   435,   436,   437,   438,   439,   795,   796,   442,
     443,   444,   445,     0,   797,   447,     0,     0,     0,   448,
     449,   450,   451,     0,     0,     0,   452,     0,     0,     0,
     453,     0,   454,   455,   456,   457,   458,   459,     0,   460,
     461,   462,   463,   464,   465,     0,     0,     0,     0,     0,
       0,   466,   467,     0,   468,     0,     0,   469,     0,     0,
       0,   470,   471,   472,     0,     0,     0,   473,   798,   799,
     474,   475,     0,   476,   477,   800,   479,   480,   481,   801,
     802,   482,   483,   484,   485,   803,   486,   487,     0,     0,
     488,   489,   490,   491,     0,   804,   492,   493,     0,   805,
     806,   807,   808,     0,     0,     0,     0,     0,   498,   499,
     500,     0,   809,   810,   811,   502,   503,   504,   812,   505,
     506,   813,   507,   508,     0,   509,   510,     0,     0,   511,
       0,     0,   512,     0,   513,     0,   814,   515,     0,     0,
     815,   816,   817,   818,   516,     0,     0,   517,   819,     0,
     820,   518,   519,   520,   521,   522,   821,   822,     0,     0,
       0,     0,     0,     0,   525,   526,     0,   527,   528,   529,
       0,     0,   823,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   824,   825,     0,     0,     0,     0,   826,   827,
       0,     0,   828,   829,     0,     0,   830,   831,   160,     0,
     161,   717,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,   718,     0,   170,   171,   172,
     173,   174,   175,   176,   719,   178,     0,   179,     0,     0,
     720,   180,   721,   722,   723,   181,   724,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,   725,
     726,   189,   190,     0,   191,   727,   728,   193,   194,     0,
     195,   196,   197,   198,   729,   200,     0,   730,   202,   731,
     732,   733,   734,   735,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     736,   222,     0,   223,   737,   738,   224,     0,     0,   225,
     739,   226,   740,   741,   227,     0,   228,   742,   743,     0,
     229,   230,   231,   744,   745,   746,     0,     0,     0,     0,
     747,   234,   748,     0,     0,   749,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   750,     0,   262,   263,   264,   265,   751,   752,
     266,   267,     0,   268,   269,   270,   753,     0,   271,     0,
       0,     0,   754,   273,     0,   274,     0,   275,     0,   276,
     277,   755,   279,   756,   281,   282,     0,   283,     0,   757,
     284,   285,   286,     0,   287,   758,   759,     0,   288,   289,
       0,     0,     0,   760,   291,   292,   293,   294,   761,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
     762,   299,   300,   763,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   764,     0,     0,   310,     0,   765,   311,   312,     0,
       0,     0,     0,     0,   766,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,   767,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
     768,   339,   340,   341,   342,   769,   343,   344,   345,  4822,
       0,     0,     0,   346,   347,   348,   349,   770,   351,     0,
       0,   771,   353,   772,   354,     0,   355,   773,   774,   775,
     776,   777,   360,   361,   362,   363,   364,   365,     0,   778,
     366,     0,     0,   367,   368,   369,   370,   779,     0,   781,
     371,   372,     0,   782,   783,   373,     0,   374,   375,   784,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
     785,   386,     0,   387,     0,   388,   389,   786,   391,   392,
     393,   394,   787,   788,   397,   789,     0,   398,   399,   400,
       0,   401,     0,   402,   403,   404,   405,   406,     0,   790,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,   422,     0,   423,   424,   425,   791,   792,   426,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   793,     0,   794,   434,   435,   436,   437,   438,   439,
     795,   796,   442,   443,   444,   445,     0,   797,   447,     0,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,     0,   453,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,   798,   799,   474,   475,     0,   476,   477,   800,   479,
     480,   481,   801,   802,   482,   483,   484,   485,   803,   486,
     487,     0,     0,   488,   489,   490,   491,     0,   804,   492,
     493,     0,   805,   806,   807,   808,     0,     0,     0,     0,
       0,   498,   499,   500,     0,   809,   810,   811,   502,   503,
     504,   812,   505,   506,   813,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,     0,   513,     0,   814,
     515,     0,     0,   815,   816,   817,   818,   516,     0,     0,
     517,   819,     0,   820,   518,   519,   520,   521,   522,   821,
     822,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,     0,   823,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   824,   825,     0,     0,     0,
       0,   826,   827,     0,     0,   828,   829,     0,     0,   830,
     831,   160,     0,   161,   717,   163,   164,   165,   166,     0,
       0,   167,     0,     0,     0,   168,     0,     0,   718,     0,
     170,   171,   172,   173,   174,   175,   176,   719,   178,     0,
     179,     0,     0,   720,   180,   721,   722,   723,   181,   724,
       0,   182,   183,   184,     0,   185,     0,   186,   187,     0,
       0,   188,   725,   726,   189,   190,     0,   191,   727,   728,
     193,   194,     0,   195,   196,   197,   198,   729,   200,     0,
     730,   202,   731,   732,   733,   734,   735,     0,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,   217,     0,
     218,   219,   220,   736,   222,     0,   223,   737,   738,   224,
       0,     0,   225,   739,   226,   740,   741,   227,     0,   228,
     742,   743,     0,   229,   230,   231,   744,   745,   746,     0,
       0,     0,     0,   747,   234,   748,     0,     0,   749,   235,
       0,   236,     0,     0,     0,     0,   237,     0,   238,   239,
     240,   241,   242,     0,     0,     0,     0,   243,     0,     0,
     244,   245,   246,     0,     0,     0,   247,     0,   248,   249,
       0,   250,   251,   252,     0,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   750,     0,   262,   263,   264,
     265,   751,   752,   266,   267,     0,   268,   269,   270,   753,
       0,   271,     0,     0,     0,   754,   273,     0,   274,     0,
     275,     0,   276,   277,   755,   279,   756,   281,   282,     0,
     283,     0,   757,   284,   285,   286,     0,   287,   758,   759,
       0,   288,   289,     0,     0,     0,   760,   291,   292,   293,
     294,   761,     0,     0,   295,   296,   297,     0,     0,   298,
       0,     0,     0,   762,   299,   300,   763,     0,     0,   301,
       0,   302,   303,     0,   304,   305,     0,     0,     0,   306,
       0,     0,   307,   308,   764,     0,     0,   310,     0,   765,
     311,   312,     0,     0,     0,     0,     0,   766,   314,     0,
     315,     0,   316,     0,   317,   318,     0,     0,   767,     0,
       0,     0,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,   335,
     336,   337,   338,   768,   339,   340,   341,   342,   769,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   348,   349,
     770,   351,     0,     0,   771,   353,   772,   354,     0,   355,
     773,   774,   775,   776,   777,   360,   361,   362,   363,   364,
     365,     0,   778,   366,     0,     0,   367,   368,   369,   370,
     779,     0,   781,   371,   372,     0,   782,   783,   373,     0,
     374,   375,   784,     0,   377,   378,   379,   380,     0,   381,
     382,     0,     0,     0,     0,     0,     0,     0,     0,   383,
     384,   385,     0,   785,   386,     0,   387,     0,   388,   389,
     786,   391,   392,   393,   394,   787,   788,   397,   789,     0,
     398,   399,   400,     0,   401,     0,   402,   403,   404,   405,
     406,     0,   790,   408,   409,     0,     0,   410,     0,     0,
       0,   411,   412,   413,   414,   415,     0,     0,   416,   417,
     418,   419,   420,     0,   421,   422,     0,   423,   424,   425,
     791,   792,   426,     0,   427,     0,   428,   429,     0,   430,
     431,     0,   432,     0,   793,     0,   794,   434,   435,   436,
     437,   438,   439,   795,   796,   442,   443,   444,   445,     0,
     797,   447,     0,     0,     0,   448,   449,   450,   451,     0,
       0,     0,   452,     0,     0,     0,   453,     0,   454,   455,
     456,   457,   458,   459,     0,   460,   461,   462,   463,   464,
     465,     0,     0,     0,     0,     0,     0,   466,   467,     0,
     468,     0,     0,   469,     0,     0,     0,   470,   471,   472,
       0,     0,     0,   473,   798,   799,   474,   475,     0,   476,
     477,   800,   479,   480,   481,   801,   802,   482,   483,   484,
     485,   803,   486,   487,     0,     0,   488,   489,   490,   491,
       0,   804,   492,   493,     0,   805,   806,   807,   808,     0,
       0,     0,     0,     0,   498,   499,   500,     0,   809,   810,
     811,   502,   503,   504,   812,   505,   506,   813,   507,   508,
       0,   509,   510,     0,     0,   511,     0,     0,   512,     0,
     513,     0,   814,   515,     0,     0,   815,   816,   817,   818,
     516,     0,     0,   517,   819,     0,   820,   518,   519,   520,
     521,   522,   821,   822,     0,     0,     0,     0,     0,     0,
     525,   526,     0,   527,   528,   529,     0,     0,   823,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   824,   825,
       0,     0,     0,     0,   826,   827,     0,     0,   828,   829,
       0,     0,   830,   831,   160,     0,   161,   717,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   718,     0,   170,   171,   172,   173,   174,   175,   176,
     719,   178,     0,   179,     0,     0,   720,   180,   721,   722,
     723,   181,   724,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,   725,   726,   189,   190,     0,
     191,   727,   728,   193,   194,     0,   195,   196,   197,   198,
     729,   200,     0,   730,   202,   731,   732,   733,   734,   735,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   736,   222,     0,   223,
     737,   738,   224,     0,     0,   225,   739,   226,   740,   741,
     227,     0,   228,   742,   743,     0,   229,   230,   231,   744,
     745,   746,     0,     0,     0,     0,   747,   234,   748,     0,
       0,   749,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   750,     0,
     262,   263,   264,   265,   751,   752,   266,   267,     0,   268,
     269,   270,   753,     0,   271,     0,     0,     0,   754,   273,
       0,   274,     0,   275,     0,   276,   277,   755,   279,   756,
     281,   282,     0,   283,     0,   757,   284,   285,   286,     0,
     287,   758,   759,     0,   288,   289,     0,     0,     0,   760,
     291,   292,   293,   294,   761,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,   762,   299,   300,  1922,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   764,     0,     0,
     310,     0,   765,   311,   312,     0,     0,     0,     0,     0,
     766,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,   767,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,   768,   339,   340,   341,
     342,   769,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   770,   351,     0,     0,   771,   353,   772,
     354,     0,   355,   773,   774,   775,   776,   777,   360,   361,
     362,   363,   364,   365,     0,   778,   366,     0,     0,   367,
     368,   369,   370,   779,     0,   781,   371,   372,     0,   782,
     783,   373,     0,   374,   375,   784,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,   785,   386,     0,   387,
       0,   388,   389,   786,   391,   392,   393,   394,   787,   788,
     397,   789,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   790,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,   791,   792,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   793,     0,   794,
     434,   435,   436,   437,   438,   439,   795,   796,   442,   443,
     444,   445,     0,   797,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,   798,   799,   474,
     475,     0,   476,   477,   800,   479,   480,   481,   801,   802,
     482,   483,   484,   485,   803,   486,   487,     0,     0,   488,
     489,   490,   491,     0,   804,   492,   493,     0,   805,   806,
     807,   808,     0,     0,     0,     0,     0,   498,   499,   500,
       0,   809,   810,   811,   502,   503,   504,   812,   505,   506,
     813,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   814,   515,     0,     0,   815,
     816,   817,   818,   516,     0,     0,   517,   819,     0,   820,
     518,   519,   520,   521,   522,   821,   822,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
       0,   823,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   824,   825,     0,     0,     0,     0,   826,   827,     0,
       0,   828,   829,     0,     0,   830,   831,   160,     0,   161,
     717,   163,   164,   165,   166,     0,     0,   167,     0,     0,
       0,   168,     0,     0,   718,     0,   170,   171,   172,   173,
     174,   175,   176,   719,   178,     0,   179,     0,     0,   720,
     180,   721,   722,   723,   181,   724,     0,   182,   183,   184,
       0,   185,     0,   186,   187,     0,     0,   188,   725,   726,
     189,   190,     0,   191,   727,   728,   193,   194,     0,   195,
     196,   197,   198,   729,   200,     0,   730,   202,   731,   732,
     733,   734,   735,     0,   208,   209,   210,   211,   212,   213,
     214,   215,     0,   216,   217,     0,   218,   219,   220,   736,
     222,     0,   223,   737,   738,   224,     0,     0,   225,   739,
     226,   740,   741,   227,     0,   228,   742,   743,     0,   229,
     230,   231,   744,   745,   746,     0,     0,     0,     0,   747,
     234,   748,     0,     0,   749,   235,     0,   236,     0,     0,
       0,     0,   237,     0,   238,   239,   240,   241,   242,     0,
       0,     0,     0,   243,     0,     0,   244,   245,   246,     0,
       0,     0,   247,     0,   248,   249,     0,   250,   251,   252,
       0,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   750,     0,   262,   263,   264,   265,   751,   752,   266,
     267,     0,   268,   269,   270,   753,     0,   271,     0,     0,
       0,   754,   273,     0,   274,     0,   275,     0,   276,   277,
     755,   279,   756,   281,   282,     0,   283,     0,   757,   284,
     285,   286,     0,   287,   758,   759,     0,   288,   289,     0,
       0,     0,   760,   291,   292,   293,   294,   761,     0,     0,
     295,   296,   297,     0,     0,   298,     0,     0,     0,   762,
     299,   300,  1924,     0,     0,   301,     0,   302,   303,     0,
     304,   305,     0,     0,     0,   306,     0,     0,   307,   308,
     764,     0,     0,   310,     0,   765,   311,   312,     0,     0,
       0,     0,     0,   766,   314,     0,   315,     0,   316,     0,
     317,   318,     0,     0,   767,     0,     0,     0,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,     0,   335,   336,   337,   338,   768,
     339,   340,   341,   342,   769,   343,   344,   345,     0,     0,
       0,     0,   346,   347,   348,   349,   770,   351,     0,     0,
     771,   353,   772,   354,     0,   355,   773,   774,   775,   776,
     777,   360,   361,   362,   363,   364,   365,     0,   778,   366,
       0,     0,   367,   368,   369,   370,   779,     0,   781,   371,
     372,     0,   782,   783,   373,     0,   374,   375,   784,     0,
     377,   378,   379,   380,     0,   381,   382,     0,     0,     0,
       0,     0,     0,     0,     0,   383,   384,   385,     0,   785,
     386,     0,   387,     0,   388,   389,   786,   391,   392,   393,
     394,   787,   788,   397,   789,     0,   398,   399,   400,     0,
     401,     0,   402,   403,   404,   405,   406,     0,   790,   408,
     409,     0,     0,   410,     0,     0,     0,   411,   412,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,     0,
     421,   422,     0,   423,   424,   425,   791,   792,   426,     0,
     427,     0,   428,   429,     0,   430,   431,     0,   432,     0,
     793,     0,   794,   434,   435,   436,   437,   438,   439,   795,
     796,   442,   443,   444,   445,     0,   797,   447,     0,     0,
       0,   448,   449,   450,   451,     0,     0,     0,   452,     0,
       0,     0,   453,     0,   454,   455,   456,   457,   458,   459,
       0,   460,   461,   462,   463,   464,   465,     0,     0,     0,
       0,     0,     0,   466,   467,     0,   468,     0,     0,   469,
       0,     0,     0,   470,   471,   472,     0,     0,     0,   473,
     798,   799,   474,   475,     0,   476,   477,   800,   479,   480,
     481,   801,   802,   482,   483,   484,   485,   803,   486,   487,
       0,     0,   488,   489,   490,   491,     0,   804,   492,   493,
       0,   805,   806,   807,   808,     0,     0,     0,     0,     0,
     498,   499,   500,     0,   809,   810,   811,   502,   503,   504,
     812,   505,   506,   813,   507,   508,     0,   509,   510,     0,
       0,   511,     0,     0,   512,     0,   513,     0,   814,   515,
       0,     0,   815,   816,   817,   818,   516,     0,     0,   517,
     819,     0,   820,   518,   519,   520,   521,   522,   821,   822,
       0,     0,     0,     0,     0,     0,   525,   526,     0,   527,
     528,   529,     0,     0,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   824,   825,     0,     0,     0,     0,
     826,   827,     0,     0,   828,   829,     0,     0,   830,   831,
     160,     0,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,   721,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,  1967,     0,     0,
       0,     0,   233,   234,   748,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,   752,   266,   267,     0,   268,   269,   270,   753,     0,
     271,     0,     0,     0,   272,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,   758,   759,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,   767,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,   778,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,   782,   783,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
     804,   492,   493,     0,  1968,   495,   496,  1969,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,   810,   501,
     502,   503,   504,   812,   505,   506,   813,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,     0,   530,     0,     0,
       0,     0,     0,     0,     0,     0,   160,     0,   161,   162,
     163,   164,   165,   166,     0,     0,   167,     0,     0,     0,
     168,   830,   831,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,     0,   179,     0,     0,     0,   180,
       0,     0,     0,   181,     0,     0,   182,   183,   184,     0,
     185,     0,   186,   187,     0,     0,   188,     0,     0,   189,
     190,     0,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,   217,  3218,   218,   219,   220,   221,   222,
       0,   223,     0,     0,   224,     0,     0,   225,     0,   226,
       0,     0,   227,     0,   228,     0,     0,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,     0,   233,   234,
       0,     0,     0,     0,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,   243,     0,     0,   244,   245,   246,     0,     0,
       0,   247,     0,   248,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
       0,   268,   269,   270,     0,     0,   271,     0,     0,     0,
     272,   273,     0,   274,   641,   275,     0,   276,   277,   278,
     279,   280,   281,   282,     0,   283,     0,     0,   284,   285,
     286,     0,   287,     0,     0,     0,   288,   289,     0,     0,
       0,   290,   291,   292,   293,   294,     0,     0,     0,   295,
     296,   297,  2285,     0,   298,     0,     0,     0,     0,   299,
     300,     0,     0,     0,   301,     0,   302,   303,     0,   304,
     305,     0,     0,     0,   306,  2286,     0,   307,   308,   309,
       0,     0,   310,     0,     0,   311,   312,     0,  3598,     0,
       0,     0,   313,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,     0,     0,     0,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   339,
     340,   341,   342,     0,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,     0,   354,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,     0,
       0,   367,   368,   369,   370,     0,     0,     0,   371,   372,
       0,     0,     0,   373,     0,   374,   375,   376,     0,   377,
     378,   379,   380,     0,   381,   382,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   407,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,     0,   427,
       0,   428,   429,     0,   430,   431,     0,   432,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,     0,   446,   447,  2590,     0,     0,
     448,   449,   450,   451,     0,     0,     0,   452,     0,     0,
       0,   453,     0,   454,   455,   456,   457,   458,   459,     0,
     460,   461,   462,   463,   464,   465,   643,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,   471,   472,     0,     0,     0,   473,     0,
       0,   474,   475,     0,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
       0,   488,   489,   490,   491,     0,     0,   492,   493,     0,
     494,   495,   496,   497,     0,     0,     0,     0,     0,   498,
     499,   500,     0,     0,     0,   501,   502,   503,   504,     0,
     505,   506,     0,   507,   508,     0,   509,   510,     0,     0,
     511,     0,     0,   512,     0,   513,     0,   514,   515,     0,
       0,     0,     0,     0,     0,   516,     0,     0,   517,     0,
       0,     0,   518,   519,   520,   521,   522,   523,   524,     0,
       0,     0,     0,     0,     0,   525,   526,     0,   527,   528,
     529,     0,     0,   530,     0,     0,     0,     0,     0,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   169,  3290,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,  3218,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,     0,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,     0,   268,   269,   270,     0,     0,
     271,     0,     0,     0,   272,   273,     0,   274,   641,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,     0,     0,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,  2285,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,  2286,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
     643,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
       0,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,     0,   530,     0,     0,
       0,     0,     0,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   169,  3290,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,  2590,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
       0,   530,     0,     0,     0,     0,     0,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,     0,   167,  3068,
       0,     0,   168,     0,     0,   169,   831,   170,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,     0,     0,
       0,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,     0,
       0,   189,   190,     0,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,   223,     0,     0,   224,     0,     0,   225,
       0,   226,     0,     0,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,     0,   268,   269,   270,     0,     0,   271,     0,
       0,     0,   272,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,     0,   283,     0,     0,
     284,   285,   286,     0,   287,     0,     0,     0,   288,   289,
       0,     0,     0,   290,   291,   292,   293,   294,     0,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
       0,   299,   300,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   309,     0,     0,   310,     0,     0,   311,   312,     0,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,     0,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
     371,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
       0,   401,     0,   402,   403,   404,   405,   406,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,     0,   446,   447,     0,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,     0,   453,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,     0,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,     0,     0,     0,   501,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,     0,   513,     0,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,     0,   530,     0,     0,     0,     0,
       0,     0,     0,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,  4886,   167,     0,     0,     0,   168,  4887,
     831,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
       0,   530,     0,     0,     0,     0,     0,     0,     0,     0,
     160,     0,   161,   162,   163,   164,   165,   166,  1239,     0,
     167,     0,     0,     0,   168,     0,   831,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,     0,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,     0,   268,   269,   270,     0,     0,
     271,     0,     0,     0,   272,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,     0,     0,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,  1471,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
       0,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,     0,   530,     0,     0,
       0,     0,     0,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   169,   568,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
       0,   530,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2531,   160,     0,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,   568,     0,   168,     0,
       0,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
       0,   530,     0,     0,     0,     0,     0,     0,     0,     0,
     160,     0,   161,   162,   163,   164,   165,   166,  3289,     0,
     167,     0,     0,     0,   168,     0,  3290,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,     0,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,     0,   268,   269,   270,     0,     0,
     271,     0,     0,     0,   272,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,     0,     0,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
       0,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,     0,   530,     0,     0,
       0,     0,     0,     0,     0,     0,   160,     0,   161,   162,
     163,   164,   165,   166,     0,     0,   167,     0,     0,     0,
     168,  4887,   831,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,     0,   179,     0,     0,     0,   180,
       0,     0,     0,   181,     0,     0,   182,   183,   184,     0,
     185,     0,   186,   187,     0,     0,   188,     0,     0,   189,
     190,     0,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,   223,     0,     0,   224,     0,     0,   225,     0,   226,
       0,     0,   227,     0,   228,     0,     0,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,     0,   233,   234,
       0,     0,     0,     0,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,   243,     0,     0,   244,   245,   246,     0,     0,
       0,   247,     0,   248,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
       0,   268,   269,   270,     0,     0,   271,     0,     0,     0,
     272,   273,     0,   274,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,     0,   283,     0,     0,   284,   285,
     286,     0,   287,     0,     0,     0,   288,   289,     0,     0,
       0,   290,   291,   292,   293,   294,     0,     0,     0,   295,
     296,   297,     0,     0,   298,     0,     0,     0,     0,   299,
     300,     0,     0,     0,   301,     0,   302,   303,     0,   304,
     305,     0,     0,     0,   306,     0,     0,   307,   308,   309,
       0,     0,   310,     0,     0,   311,   312,     0,     0,     0,
       0,     0,   313,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,     0,     0,     0,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   339,
     340,   341,   342,     0,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,     0,   354,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,     0,
       0,   367,   368,   369,   370,     0,     0,     0,   371,   372,
       0,     0,     0,   373,     0,   374,   375,   376,     0,   377,
     378,   379,   380,     0,   381,   382,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   407,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,     0,   427,
       0,   428,   429,     0,   430,   431,     0,   432,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,     0,   446,   447,     0,     0,     0,
     448,   449,   450,   451,     0,     0,     0,   452,     0,     0,
       0,   453,     0,   454,   455,   456,   457,   458,   459,     0,
     460,   461,   462,   463,   464,   465,     0,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,   471,   472,     0,     0,     0,   473,     0,
       0,   474,   475,     0,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
       0,   488,   489,   490,   491,     0,     0,   492,   493,     0,
     494,   495,   496,   497,     0,     0,     0,     0,     0,   498,
     499,   500,     0,     0,     0,   501,   502,   503,   504,     0,
     505,   506,     0,   507,   508,     0,   509,   510,     0,     0,
     511,     0,     0,   512,     0,   513,     0,   514,   515,     0,
       0,     0,     0,     0,     0,   516,     0,     0,   517,     0,
       0,     0,   518,   519,   520,   521,   522,   523,   524,     0,
       0,     0,     0,     0,     0,   525,   526,     0,   527,   528,
     529,     0,     0,   530,     0,     0,     0,     0,     0,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   169,   568,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,     0,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   652,   265,
       0,     0,   266,   267,     0,   268,   269,   270,     0,     0,
     271,     0,     0,     0,   653,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,     0,     0,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   654,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
       0,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,     0,   530,     0,     0,
       0,     0,     0,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   169,   568,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
       0,   530,     0,     0,     0,     0,     0,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,   169,   831,   170,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,     0,     0,
       0,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,     0,
       0,   189,   190,     0,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,   223,     0,     0,   224,     0,     0,   225,
       0,   226,     0,     0,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,     0,   268,   269,   270,     0,     0,   271,     0,
       0,     0,   272,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,     0,   283,     0,     0,
     284,   285,   286,     0,   287,     0,     0,     0,   288,   289,
       0,     0,     0,   290,   291,   292,   293,   294,     0,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
       0,   299,   300,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   309,     0,     0,   310,     0,     0,   311,   312,     0,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,     0,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
     371,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
       0,   401,     0,   402,   403,   404,   405,   406,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,     0,   446,   447,     0,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,     0,   453,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,     0,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,     0,     0,     0,   501,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,     0,   513,     0,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,     0,   530,     0,     0,     0,     0,
       0,     0,   160,     0,   161,   162,   163,   164,   165,   166,
       0,     0,   167,     0,     0,     0,   168,     0,     0,   169,
    3290,   170,   171,   172,   173,   174,   175,   176,   177,   178,
       0,   179,     0,     0,     0,   180,     0,     0,     0,   181,
       0,     0,   182,   183,   184,     0,   185,     0,   186,   187,
       0,     0,   188,     0,     0,   189,   190,     0,   191,  1010,
    1011,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,   223,     0,     0,
     224,     0,     0,   225,     0,   226,     0,     0,   227,     0,
     228,     0,     0,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,     0,   233,   234,     0,     0,     0,  1012,
     235,     0,   236,     0,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,   243,     0,
       0,   244,   245,   246,     0,     0,     0,   247,     0,   248,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,     0,   268,   269,   270,
       0,     0,   271,     0,     0,     0,   272,   273,     0,   274,
       0,   275,     0,   276,   277,   278,   279,   280,   281,  1013,
       0,   283,     0,     0,   284,   285,   286,     0,   287,     0,
       0,     0,   288,   289,     0,     0,     0,   290,   291,   292,
     293,   294,     0,     0,     0,   295,   296,   297,     0,     0,
     298,     0,     0,     0,     0,   299,   300,     0,     0,     0,
     301,     0,   302,   303,     0,   304,   305,     0,     0,     0,
     306,     0,     0,   307,   308,   309,     0,     0,   310,     0,
       0,   311,   312,     0,     0,     0,     0,     0,   313,   314,
       0,  1014,     0,   316,     0,   317,   318,     0,     0,     0,
       0,     0,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,     0,   339,   340,   341,   342,     0,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,     0,   354,     0,
     355,     0,   356,   357,   358,   359,   360,   361,   362,  1015,
     364,   365,     0,     0,   366,     0,     0,   367,   368,   369,
     370,     0,     0,     0,   371,   372,     0,     0,     0,   373,
       0,   374,   375,   376,     0,   377,   378,   379,   380,     0,
     381,   382,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,  1016,   391,   392,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,     0,   401,     0,   402,   403,   404,
     405,   406,     0,   407,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,     0,   427,     0,   428,   429,     0,
     430,   431,     0,   432,     0,   433,     0,     0,  1017,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
       0,   446,   447,     0,     0,     0,   448,   449,  1018,   451,
       0,     0,     0,   452,     0,     0,     0,   453,     0,   454,
     455,   456,   457,   458,   459,     0,   460,   461,   462,   463,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,   471,
     472,     0,     0,     0,   473,     0,     0,   474,   475,     0,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,     0,   488,   489,   490,
     491,     0,     0,   492,   493,     0,   494,   495,   496,   497,
       0,     0,     0,     0,     0,  1019,   499,   500,     0,     0,
       0,   501,   502,   503,   504,     0,   505,   506,     0,   507,
     508,     0,   509,   510,     0,     0,   511,     0,     0,   512,
       0,   513,     0,   514,   515,     0,     0,     0,     0,     0,
       0,   516,     0,     0,   517,     0,     0,     0,   518,   519,
     520,   521,   522,   523,   524,     0,     0,     0,     0,     0,
       0,   525,   526,     0,   527,   528,   529,     0,     0,   530,
       0,     0,     0,     0,     0,   160,     0,   161,   162,   163,
     164,   165,   166,     0,     0,   167,     0,     0,     0,   168,
       0,     0,   169,  1020,   170,   171,   172,   173,   174,   175,
     176,   177,   178,     0,   179,     0,     0,     0,   180,     0,
       0,     0,   181,     0,     0,   182,   183,   184,     0,   185,
       0,   186,   187,     0,     0,   188,     0,     0,   189,   190,
       0,   191,   192,     0,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
       0,   216,   217,     0,   218,   219,   220,   221,   222,     0,
     223,     0,     0,   224,     0,     0,   225,     0,   226,     0,
       0,   227,     0,   228,     0,     0,     0,   229,   230,   231,
       0,     0,   232,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,   235,     0,   236,     0,     0,     0,     0,
     237,     0,   238,   239,   240,   241,   242,     0,     0,     0,
       0,   243,     0,     0,   244,   245,   246,     0,     0,     0,
     247,     0,   248,   249,     0,   250,   251,   252,     0,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
       0,   262,   263,   264,   265,     0,     0,   266,   267,     0,
     268,   269,   270,     0,     0,   271,     0,     0,     0,   272,
     273,     0,   274,     0,   275,     0,   276,   277,   278,   279,
     280,   281,   282,     0,   283,     0,     0,   284,   285,   286,
       0,   287,     0,     0,     0,   288,   289,     0,     0,     0,
     290,   291,   292,   293,   294,     0,     0,     0,   295,   296,
     297,     0,     0,   298,     0,     0,     0,     0,   299,   300,
       0,     0,     0,   301,     0,   302,   303,     0,   304,   305,
       0,     0,     0,   306,     0,     0,   307,   308,   309,     0,
       0,   310,     0,     0,   311,   312,   666,     0,     0,     0,
       0,   313,   314,     0,   315,     0,   316,     0,   317,   318,
       0,     0,     0,     0,     0,     0,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,   335,   336,   337,   338,     0,   339,   340,
     341,   342,     0,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   348,   349,   350,   351,     0,     0,   352,   353,
       0,   354,     0,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,     0,     0,   366,     0,     0,
     367,   368,   369,   370,     0,     0,     0,   371,   372,     0,
       0,     0,   373,     0,   374,   375,   376,     0,   377,   378,
     379,   380,     0,   381,   382,     0,     0,     0,     0,     0,
       0,     0,     0,   383,   384,   385,     0,     0,   386,     0,
     387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,     0,     0,   398,   399,   400,     0,   401,     0,
     402,   403,   404,   405,   406,     0,   407,   408,   409,     0,
       0,   410,     0,     0,     0,   411,   412,   413,   414,   415,
       0,     0,   416,   417,   418,   419,   420,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,     0,   427,     0,
     428,   429,     0,   430,   431,     0,   432,     0,   433,     0,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,     0,   446,   447,     0,     0,     0,   448,
     449,   450,   451,     0,     0,     0,   452,     0,     0,     0,
     453,     0,   454,   455,   456,   457,   458,   459,     0,   460,
     461,   462,   463,   464,   465,     0,     0,     0,     0,     0,
       0,   466,   467,     0,   468,     0,     0,   469,     0,     0,
       0,   470,   471,   472,     0,     0,     0,   473,     0,     0,
     474,   475,     0,   476,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,   485,     0,   486,   487,     0,     0,
     488,   489,   490,   491,     0,   156,   492,   493,     0,   494,
     495,   496,   497,     0,     0,     0,     0,     0,   498,   499,
     500,     0,     0,     0,   501,   502,   503,   504,     0,   505,
     506,     0,   507,   508,     0,   509,   510,     0,     0,   511,
       0,     0,   512,     0,   513,     0,   514,   515,     0,     0,
       0,     0,     0,     0,   516,     0,     0,   517,     0,     0,
       0,   518,   519,   520,   521,   522,   523,   524,     0,     0,
       0,     0,     0,     0,   525,   526,     0,   527,   528,   529,
       0,     0,   530,     0,     0,     0,     0,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,   169,  1542,   170,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,     0,     0,
       0,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,     0,
       0,   189,   190,     0,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,   223,     0,     0,   224,     0,     0,   225,
       0,   226,     0,     0,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,     0,   268,   269,   270,     0,     0,   271,     0,
       0,     0,   272,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,     0,   283,     0,     0,
     284,   285,   286,     0,   287,     0,     0,     0,   288,   289,
       0,     0,     0,   290,   291,   292,   293,   294,     0,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
       0,   299,   300,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   309,     0,     0,   310,     0,     0,   311,   312,   666,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,     0,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
     371,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
       0,   401,     0,   402,   403,   404,   405,   406,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,     0,   446,   447,     0,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,     0,   453,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,   156,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,     0,     0,     0,   501,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,     0,   513,     0,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,     0,   530,     0,     0,     0,     0,
       0,   160,     0,   161,   162,   163,   164,   165,   166,     0,
       0,   167,     0,     0,     0,   168,     0,     0,   169,  1894,
     170,   171,   172,   173,   174,   175,   176,   177,   178,     0,
     179,     0,     0,     0,   180,     0,     0,     0,   181,     0,
       0,   182,   183,   184,     0,   185,     0,   186,   187,     0,
       0,   188,     0,     0,   189,   190,     0,   191,   192,     0,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,   217,     0,
     218,   219,   220,   221,   222,     0,   223,     0,     0,   224,
       0,     0,   225,     0,   226,     0,     0,   227,     0,   228,
       0,     0,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,   235,
       0,   236,     0,     0,     0,     0,   237,     0,   238,   239,
     240,   241,   242,     0,     0,     0,     0,   243,     0,     0,
     244,   245,   246,     0,     0,     0,   247,     0,   248,   249,
       0,   250,   251,   252,     0,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,     0,   262,   263,   264,
     265,     0,     0,   266,   267,     0,   268,   269,   270,     0,
       0,   271,     0,     0,     0,   272,   273,     0,   274,     0,
     275,     0,   276,   277,   278,   279,   280,   281,   282,     0,
     283,     0,     0,   284,   285,   286,     0,   287,     0,     0,
       0,   288,   289,     0,     0,     0,   290,   291,   292,   293,
     294,     0,     0,     0,   295,   296,   297,     0,     0,   298,
       0,     0,     0,     0,   299,   300,     0,     0,     0,   301,
       0,   302,   303,     0,   304,   305,     0,     0,     0,   306,
       0,     0,   307,   308,   309,     0,     0,   310,     0,     0,
     311,   312,   666,     0,     0,     0,     0,   313,   314,     0,
     315,     0,   316,     0,   317,   318,     0,     0,     0,     0,
       0,     0,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,   335,
     336,   337,   338,     0,   339,   340,   341,   342,     0,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   348,   349,
     350,   351,     0,     0,   352,   353,     0,   354,     0,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,     0,     0,   367,   368,   369,   370,
       0,     0,     0,   371,   372,     0,     0,     0,   373,     0,
     374,   375,   376,     0,   377,   378,   379,   380,     0,   381,
     382,     0,     0,     0,     0,     0,     0,     0,     0,   383,
     384,   385,     0,     0,   386,     0,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,     0,
     398,   399,   400,     0,   401,     0,   402,   403,   404,   405,
     406,     0,   407,   408,   409,     0,     0,   410,     0,     0,
       0,   411,   412,   413,   414,   415,     0,     0,   416,   417,
     418,   419,   420,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,     0,   427,     0,   428,   429,     0,   430,
     431,     0,   432,     0,   433,     0,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,     0,
     446,   447,     0,     0,     0,   448,   449,   450,   451,     0,
       0,     0,   452,     0,     0,     0,   453,     0,   454,   455,
     456,   457,   458,   459,     0,   460,   461,   462,   463,   464,
     465,     0,     0,     0,     0,     0,     0,   466,   467,     0,
     468,     0,     0,   469,     0,     0,     0,   470,   471,   472,
       0,     0,     0,   473,     0,     0,   474,   475,     0,   476,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,     0,   488,   489,   490,   491,
       0,   156,   492,   493,     0,   494,   495,   496,   497,     0,
       0,     0,     0,     0,   498,   499,   500,     0,     0,     0,
     501,   502,   503,   504,     0,   505,   506,     0,   507,   508,
       0,   509,   510,     0,     0,   511,     0,     0,   512,     0,
     513,     0,   514,   515,     0,     0,     0,     0,     0,     0,
     516,     0,     0,   517,     0,     0,     0,   518,   519,   520,
     521,   522,   523,   524,     0,     0,     0,     0,     0,     0,
     525,   526,     0,   527,   528,   529,     0,     0,   530,     0,
       0,     0,     0,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   169,  2621,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,  1010,  1011,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,  1012,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,  1013,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,  1014,     0,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,  1015,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,  1016,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
    1017,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
    1018,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
       0,   530,     0,     0,     0,     0,     0,   160,     0,   161,
     162,   163,   164,   165,   166,     0,     0,   167,     0,     0,
       0,   168,     0,     0,   169,  1020,   170,   171,   172,   173,
     174,   175,   176,   177,   178,     0,   179,     0,     0,     0,
     180,     0,     0,     0,   181,     0,     0,   182,   183,   184,
       0,   185,     0,   186,   187,     0,     0,   188,     0,     0,
     189,   190,     0,   191,   192,     0,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,  1382,   216,   217,     0,   218,   219,   220,   221,
     222,     0,   223,     0,     0,   224,     0,     0,   225,     0,
     226,     0,     0,   227,     0,   228,     0,     0,     0,   229,
     230,   231,     0,     0,   232,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,   235,     0,   236,     0,     0,
       0,     0,   237,     0,   238,   239,   240,   241,   242,     0,
       0,     0,     0,   243,     0,     0,   244,   245,   246,     0,
       0,     0,   247,     0,   248,   249,     0,   250,   251,   252,
       0,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,     0,     0,   262,   263,   264,   265,     0,     0,   266,
     267,     0,   268,   269,   270,     0,     0,   271,     0,     0,
       0,   272,   273,     0,   274,     0,   275,     0,   276,   277,
     278,   279,   280,   281,   282,     0,   283,     0,     0,   284,
     285,   286,     0,   287,     0,     0,     0,   288,   289,     0,
       0,     0,   290,   291,   292,   293,   294,     0,     0,     0,
     295,   296,   297,     0,     0,   298,     0,     0,     0,     0,
     299,   300,     0,     0,     0,   301,     0,   302,   303,     0,
     304,   305,     0,     0,     0,   306,     0,     0,   307,   308,
     309,     0,     0,   310,     0,     0,   311,   312,     0,     0,
       0,     0,     0,   313,   314,     0,   315,     0,   316,     0,
     317,   318,     0,     0,     0,     0,     0,     0,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,     0,   335,   336,   337,   338,     0,
     339,   340,   341,   342,     0,   343,   344,   345,     0,     0,
       0,     0,   346,   347,   348,   349,   350,   351,     0,     0,
     352,   353,     0,   354,     0,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,     0,     0,   366,
       0,     0,   367,   368,   369,   370,     0,     0,     0,   371,
     372,     0,     0,     0,   373,     0,   374,   375,   376,     0,
     377,   378,   379,   380,     0,   381,   382,     0,     0,     0,
       0,     0,     0,     0,     0,   383,   384,   385,     0,     0,
     386,     0,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,     0,     0,   398,   399,   400,     0,
     401,     0,   402,   403,   404,   405,   406,     0,   407,   408,
     409,     0,     0,   410,     0,     0,     0,   411,   412,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,     0,
     427,     0,   428,   429,     0,   430,   431,     0,   432,     0,
     433,     0,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,     0,   446,   447,     0,     0,
       0,   448,   449,   450,   451,     0,     0,     0,   452,     0,
       0,     0,   453,     0,   454,   455,   456,   457,   458,   459,
       0,   460,   461,   462,   463,   464,   465,     0,     0,     0,
       0,     0,     0,   466,   467,     0,   468,     0,     0,   469,
       0,     0,     0,   470,   471,   472,     0,     0,     0,   473,
       0,     0,   474,   475,     0,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,   485,     0,   486,   487,
       0,     0,   488,   489,   490,   491,     0,     0,   492,   493,
       0,   494,   495,   496,   497,     0,     0,     0,     0,     0,
     498,   499,   500,     0,     0,     0,   501,   502,   503,   504,
       0,   505,   506,     0,   507,   508,     0,   509,   510,     0,
       0,   511,     0,     0,   512,     0,   513,     0,   514,   515,
       0,     0,     0,     0,     0,     0,   516,     0,     0,   517,
       0,     0,     0,   518,   519,   520,   521,   522,   523,   524,
       0,     0,     0,     0,     0,     0,   525,   526,     0,   527,
     528,   529,     0,     0,   530,     0,     0,     0,     0,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   169,  1383,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,     0,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,     0,   268,   269,   270,     0,     0,
     271,     0,     0,     0,   272,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,     0,     0,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
       0,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,     0,   530,     0,     0,
       0,     0,     0,   160,     0,   161,   162,   163,   164,   165,
     166,     0,     0,   167,     0,     0,     0,   168,     0,     0,
       0,  1383,   170,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   925,     0,     0,     0,   180,     0,     0,     0,
     181,     0,     0,   182,   183,   184,     0,   185,     0,     0,
       0,     0,     0,   188,     7,     0,   189,   190,     0,   191,
       0,     0,     0,     0,     0,   195,   196,   197,   926,   199,
     200,     0,   201,   202,     0,     0,     0,     0,     0,     0,
     208,     0,   210,     0,   212,   213,   214,   215,     0,   216,
     217,     0,   218,   219,   220,     0,   222,     0,   223,     0,
       0,   224,     0,     0,   225,     0,   226,     0,     0,   227,
       0,   228,     0,     0,     0,   229,   230,   231,     0,     0,
     232,     0,     0,     0,     0,   233,     0,     0,     0,     0,
       0,   235,     0,   236,     0,     0,     0,     0,   237,     0,
     238,   239,   240,   241,   242,     0,     0,     0,     0,     0,
       0,     0,   244,   245,   246,     0,     0,     0,   247,     0,
       0,   249,     0,   250,   251,   252,     0,   253,   254,     0,
     255,   256,   257,   258,   259,     0,     0,     0,     0,   262,
     263,   264,   265,     0,     0,   266,   267,   927,   268,   269,
     270,     0,     0,     0,     0,     0,     0,     0,   273,     0,
     274,     0,   275,     0,   276,   277,   278,   279,   280,     0,
     282,     0,   283,     0,     0,     0,   285,   286,     0,     0,
       0,     0,     0,     0,   289,     0,     0,     0,   290,   291,
     292,   293,   294,    26,     0,     0,   295,   296,   297,     0,
       0,   298,     0,     0,     0,     0,   299,     0,     0,     0,
       0,   301,     0,   302,   303,     0,   304,   305,   928,     0,
       0,   306,     0,     0,     0,   308,   309,     0,     0,   310,
     929,     0,   311,   312,     0,     0,     0,     0,     0,   313,
     314,     0,   315,     0,   316,     0,   317,   318,     0,     0,
       0,     0,    32,     0,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
       0,   335,   336,   337,   338,     0,   339,   340,   341,   342,
       0,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     348,   349,   350,   351,     0,     0,   352,   353,     0,   354,
       0,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,     0,     0,   366,     0,     0,   367,   368,
     369,   370,     0,     0,     0,     0,   372,     0,     0,     0,
     373,     0,   374,   375,   376,     0,   377,   378,   379,   930,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   384,   385,     0,     0,     0,     0,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
       0,     0,     0,   399,   400,     0,   401,     0,   402,   403,
     404,   405,   406,     0,   407,   408,   409,     0,     0,   410,
       0,     0,     0,   411,   412,   413,   414,   415,     0,     0,
     416,   417,   418,   419,   420,     0,   421,     0,     0,   423,
       0,   425,    41,     0,   426,     0,     0,     0,   428,     0,
       0,   430,   431,     0,   432,   931,   433,     0,     0,   434,
       0,   436,   437,   438,   439,   440,   441,   442,     0,   444,
     445,     0,   446,     0,     0,     0,     0,   448,   449,   450,
       0,     0,     0,     0,   452,     0,     0,     0,     0,     0,
       0,   455,     0,     0,   458,   459,     0,   460,     0,   462,
       0,   464,   465,     0,     0,     0,     0,     0,     0,   466,
     467,     0,   468,     0,     0,   469,     0,     0,     0,   470,
       0,   472,     0,     0,     0,   473,     0,     0,     0,   475,
       0,   476,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,   485,     0,   486,   487,     0,     0,   488,   489,
     490,   491,     0,     0,   492,   493,     0,   494,   495,   496,
     497,     0,     0,     0,     0,     0,   498,   499,   500,     0,
       0,     0,     0,   502,   503,   504,     0,   505,   506,     0,
     507,   508,     0,     0,     0,     0,     0,   511,     0,     0,
     512,     0,     0,     0,   514,   515,     0,     0,     0,     0,
       0,     0,   516,     0,     0,   517,     0,     0,     0,   518,
     519,   520,   521,   522,   523,   524,     0,     0,    60,     0,
       0,     0,   525,     0,     0,   527,     0,   529,     0,     0,
     530,   160,     0,   161,   162,   163,   164,   165,   166,     0,
       0,   167,     0,     0,     0,   168,     0,     0,   169,  4583,
     170,   171,   172,   173,   174,   175,   176,   177,   178,     0,
     179,     0,     0,     0,   180,     0,     0,     0,   181,     0,
       0,   182,   183,   184,     0,   185,     0,   186,   187,     0,
       0,   188,     0,     0,   189,   190,     0,   191,   192,     0,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,   217,     0,
     218,   219,   220,   221,   222,     0,   223,     0,     0,   224,
       0,     0,   225,     0,   226,  1124,     0,   227,     0,   228,
       0,     0,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,   235,
       0,   236,     0,     0,     0,     0,   237,     0,   238,   239,
     240,   241,   242,     0,     0,     0,     0,   243,     0,     0,
     244,   245,   246,     0,     0,     0,   247,     0,   248,   249,
       0,   250,   251,   252,     0,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,     0,   262,   263,   264,
     265,     0,     0,   266,   267,     0,   268,   269,   270,     0,
       0,   271,     0,     0,     0,   272,   273,     0,   274,     0,
     275,     0,   276,   277,   278,   279,   280,   281,   282,     0,
     283,     0,     0,   284,   285,   286,     0,   287,     0,     0,
       0,   288,   289,     0,     0,     0,   290,   291,   292,   293,
     294,     0,     0,     0,   295,   296,   297,     0,     0,   298,
       0,     0,     0,     0,   299,   300,     0,     0,     0,   301,
       0,   302,   303,     0,   304,   305,     0,     0,     0,   306,
       0,     0,   307,   308,   309,     0,     0,   310,     0,     0,
     311,   312,   666,     0,     0,     0,     0,   313,   314,     0,
     315,     0,   316,     0,   317,   318,     0,     0,     0,     0,
       0,     0,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,   335,
     336,   337,   338,     0,   339,   340,   341,   342,     0,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   348,   349,
     350,   351,     0,     0,   352,   353,     0,   354,     0,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,     0,     0,   367,   368,   369,   370,
       0,     0,     0,   371,   372,     0,     0,     0,   373,     0,
     374,   375,   376,     0,   377,   378,   379,   380,     0,   381,
     382,     0,     0,     0,     0,     0,     0,     0,     0,   383,
     384,   385,     0,     0,   386,     0,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,     0,
     398,   399,   400,     0,   401,     0,   402,   403,   404,   405,
     406,     0,   407,   408,   409,     0,     0,   410,     0,     0,
       0,   411,   412,   413,   414,   415,     0,     0,   416,   417,
     418,   419,   420,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,     0,   427,     0,   428,   429,     0,   430,
     431,     0,   432,     0,   433,     0,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,     0,
     446,   447,     0,     0,     0,   448,   449,   450,   451,     0,
       0,     0,   452,     0,     0,     0,   453,     0,   454,   455,
     456,   457,   458,   459,     0,   460,   461,   462,   463,   464,
     465,     0,     0,     0,     0,     0,     0,   466,   467,     0,
     468,     0,     0,   469,     0,     0,     0,   470,   471,   472,
       0,     0,     0,   473,     0,     0,   474,   475,     0,   476,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,     0,   488,   489,   490,   491,
       0,   156,   492,   493,     0,   494,   495,   496,   497,     0,
       0,     0,     0,     0,   498,   499,   500,     0,     0,     0,
     501,   502,   503,   504,     0,   505,   506,     0,   507,   508,
       0,   509,   510,     0,     0,   511,     0,     0,   512,     0,
     513,     0,   514,   515,     0,     0,     0,     0,     0,     0,
     516,     0,     0,   517,     0,     0,     0,   518,   519,   520,
     521,   522,   523,   524,     0,     0,     0,     0,     0,     0,
     525,   526,     0,   527,   528,   529,     0,   160,   530,   161,
     162,   163,   164,   165,   166,     0,     0,   167,     0,     0,
       0,   168,     0,     0,   169,  1284,   170,   171,   172,   173,
     174,   175,   176,   177,   178,     0,   179,     0,     0,     0,
     180,     0,     0,     0,   181,     0,     0,   182,   183,   184,
       0,   185,     0,   186,   187,     0,     0,   188,     0,     0,
     189,   190,     0,   191,   192,     0,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,     0,   216,   217,     0,   218,   219,   220,   221,
     222,     0,   223,     0,     0,   224,     0,     0,   225,     0,
     226,     0,     0,   227,     0,   228,     0,     0,     0,   229,
     230,   231,     0,     0,   232,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,   235,     0,   236,     0,     0,
       0,     0,   237,     0,   238,   239,   240,   241,   242,     0,
       0,     0,     0,   243,     0,     0,   244,   245,   246,     0,
       0,     0,   247,     0,   248,   249,     0,   250,   251,   252,
       0,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,     0,     0,   262,   263,   264,   265,     0,     0,   266,
     267,     0,   268,   269,   270,     0,     0,   271,     0,     0,
       0,   272,   273,     0,   274,     0,   275,     0,   276,   277,
     278,   279,   280,   281,   282,     0,   283,     0,     0,   284,
     285,   286,     0,   287,     0,     0,     0,   288,   289,     0,
       0,     0,   290,   291,   292,   293,   294,     0,     0,     0,
     295,   296,   297,     0,     0,   298,     0,     0,     0,     0,
     299,   300,     0,     0,     0,   301,     0,   302,   303,     0,
     304,   305,     0,     0,     0,   306,     0,     0,   307,   308,
     309,     0,     0,   310,     0,     0,   311,   312,     0,     0,
       0,     0,     0,   313,   314,     0,   315,     0,   316,     0,
     317,   318,     0,     0,     0,     0,     0,     0,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,     0,   335,   336,   337,   338,     0,
     339,   340,   341,   342,     0,   343,   344,   345,     0,     0,
       0,     0,   346,   347,   348,   349,   350,   351,     0,     0,
     352,   353,     0,   354,     0,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,     0,     0,   366,
       0,     0,   367,   368,   369,   370,     0,     0,     0,   371,
     372,     0,     0,     0,   373,     0,   374,   375,   376,     0,
     377,   378,   379,   380,     0,   381,   382,     0,     0,     0,
       0,     0,     0,     0,     0,   383,   384,   385,     0,     0,
     386,     0,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,     0,     0,   398,   399,   400,     0,
     401,     0,   402,   403,   404,   405,   406,     0,   407,   408,
     409,     0,     0,   410,     0,     0,     0,   411,   412,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,     0,
     427,     0,   428,   429,     0,   430,   431,     0,   432,     0,
     433,     0,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,     0,   446,   447,     0,     0,
       0,   448,   449,   450,   451,     0,     0,     0,   452,     0,
       0,     0,   453,     0,   454,   455,   456,   457,   458,   459,
       0,   460,   461,   462,   463,   464,   465,     0,     0,     0,
       0,     0,     0,   466,   467,     0,   468,     0,     0,   469,
       0,     0,     0,   470,   471,   472,     0,     0,     0,   473,
       0,     0,   474,   475,     0,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,   485,     0,   486,   487,
       0,     0,   488,   489,   490,   491,     0,     0,   492,   493,
       0,   494,   495,   496,   497,     0,     0,     0,     0,     0,
     498,   499,   500,     0,     0,     0,   501,   502,   503,   504,
       0,   505,   506,     0,   507,   508,     0,   509,   510,     0,
       0,   511,     0,     0,   512,     0,   513,     0,   514,   515,
       0,     0,     0,     0,     0,     0,   516,     0,     0,   517,
       0,     0,     0,   518,   519,   520,   521,   522,   523,   524,
       0,     0,     0,     0,     0,     0,   525,   526,     0,   527,
     528,   529,     0,   160,   530,   161,   162,   163,   164,   165,
     166,     0,     0,   167,     0,     0,  2350,   168,     0,     0,
     169,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,     0,     0,     0,   180,     0,     0,     0,
     181,     0,     0,   182,   183,   184,     0,   185,     0,   186,
     187,     0,     0,   188,     0,     0,   189,   190,     0,   191,
     192,     0,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,     0,   216,
     217,     0,   218,   219,   220,   221,   222,     0,   223,     0,
       0,   224,     0,     0,   225,     0,   226,     0,     0,   227,
       0,   228,     0,     0,     0,   229,   230,   231,     0,     0,
     232,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,   235,     0,   236,     0,     0,     0,     0,   237,     0,
     238,   239,   240,   241,   242,     0,     0,     0,     0,   243,
       0,     0,   244,   245,   246,     0,     0,     0,   247,     0,
     248,   249,     0,   250,   251,   252,     0,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,     0,     0,   262,
     263,   264,   265,     0,     0,   266,   267,     0,   268,   269,
     270,     0,     0,   271,     0,     0,     0,   272,   273,     0,
     274,     0,   275,     0,   276,   277,   278,   279,   280,   281,
     282,     0,   283,     0,     0,   284,   285,   286,     0,   287,
       0,     0,     0,   288,   289,     0,     0,     0,   290,   291,
     292,   293,   294,     0,     0,     0,   295,   296,   297,     0,
       0,   298,     0,     0,     0,     0,   299,   300,     0,     0,
       0,   301,     0,   302,   303,     0,   304,   305,     0,     0,
       0,   306,     0,     0,   307,   308,   309,     0,     0,   310,
       0,     0,   311,   312,     0,     0,     0,     0,     0,   313,
     314,     0,   315,     0,   316,     0,   317,   318,     0,     0,
       0,     0,     0,     0,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
       0,   335,   336,   337,   338,     0,   339,   340,   341,   342,
       0,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     348,   349,   350,   351,     0,     0,   352,   353,     0,   354,
       0,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,     0,     0,   366,     0,     0,   367,   368,
     369,   370,     0,     0,     0,   371,   372,     0,     0,     0,
     373,     0,   374,   375,   376,     0,   377,   378,   379,   380,
       0,   381,   382,     0,     0,     0,     0,     0,     0,     0,
       0,   383,   384,   385,     0,     0,   386,     0,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
       0,     0,   398,   399,   400,     0,   401,     0,   402,   403,
     404,   405,   406,     0,   407,   408,   409,     0,     0,   410,
       0,     0,     0,   411,   412,   413,   414,   415,     0,     0,
     416,   417,   418,   419,   420,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,     0,   427,     0,   428,   429,
       0,   430,   431,     0,   432,     0,   433,     0,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,     0,   446,   447,     0,     0,     0,   448,   449,   450,
     451,     0,     0,     0,   452,     0,     0,     0,   453,     0,
     454,   455,   456,   457,   458,   459,     0,   460,   461,   462,
     463,   464,   465,     0,     0,     0,     0,     0,     0,   466,
     467,     0,   468,     0,     0,   469,     0,     0,     0,   470,
     471,   472,     0,     0,     0,   473,     0,     0,   474,   475,
       0,   476,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,   485,     0,   486,   487,     0,     0,   488,   489,
     490,   491,     0,     0,   492,   493,     0,   494,   495,   496,
     497,     0,     0,     0,     0,     0,   498,   499,   500,     0,
       0,     0,   501,   502,   503,   504,     0,   505,   506,     0,
     507,   508,     0,   509,   510,     0,     0,   511,     0,     0,
     512,     0,   513,     0,   514,   515,     0,     0,     0,     0,
       0,     0,   516,     0,     0,   517,     0,     0,     0,   518,
     519,   520,   521,   522,   523,   524,     0,     0,     0,     0,
       0,     0,   525,   526,     0,   527,   528,   529,     0,   160,
     530,   161,   162,   163,   164,   165,   166,     0,     0,   167,
       0,     0,  3124,   168,     0,     0,   169,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,     0,   179,     0,
       0,     0,   180,     0,     0,     0,   181,     0,     0,   182,
     183,   184,     0,   185,     0,   186,   187,     0,     0,   188,
       0,     0,   189,   190,     0,   191,   192,     0,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,     0,   216,   217,     0,   218,   219,
     220,   221,   222,     0,   223,     0,     0,   224,     0,     0,
     225,     0,   226,     0,     0,   227,     0,   228,     0,     0,
       0,   229,   230,   231,     0,     0,   232,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,   235,     0,   236,
       0,     0,     0,     0,   237,     0,   238,   239,   240,   241,
     242,     0,     0,     0,     0,   243,     0,     0,   244,   245,
     246,     0,     0,     0,   247,     0,   248,   249,     0,   250,
     251,   252,     0,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,     0,     0,   262,   263,   264,   265,     0,
       0,   266,   267,     0,   268,   269,   270,     0,     0,   271,
       0,     0,     0,   272,   273,     0,   274,     0,   275,     0,
     276,   277,   278,   279,   280,   281,   282,     0,   283,     0,
       0,   284,   285,   286,     0,   287,     0,     0,     0,   288,
     289,     0,     0,     0,   290,   291,   292,   293,   294,     0,
       0,     0,   295,   296,   297,     0,     0,   298,     0,     0,
       0,     0,   299,   300,     0,     0,     0,   301,     0,   302,
     303,     0,   304,   305,     0,     0,     0,   306,     0,     0,
     307,   308,   309,     0,     0,   310,     0,     0,   311,   312,
       0,     0,     0,     0,     0,   313,   314,     0,   315,     0,
     316,     0,   317,   318,     0,     0,     0,     0,     0,     0,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,     0,   335,   336,   337,
     338,     0,   339,   340,   341,   342,     0,   343,   344,   345,
       0,     0,     0,     0,   346,   347,   348,   349,   350,   351,
       0,     0,   352,   353,     0,   354,     0,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,     0,
       0,   366,     0,     0,   367,   368,   369,   370,     0,     0,
       0,   371,   372,     0,     0,     0,   373,     0,   374,   375,
     376,     0,   377,   378,   379,   380,     0,   381,   382,     0,
       0,     0,     0,     0,     0,     0,     0,   383,   384,   385,
       0,     0,   386,     0,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,     0,     0,   398,   399,
     400,     0,   401,     0,   402,   403,   404,   405,   406,     0,
     407,   408,   409,     0,     0,   410,     0,     0,     0,   411,
     412,   413,   414,   415,     0,     0,   416,   417,   418,   419,
     420,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,     0,   427,     0,   428,   429,     0,   430,   431,     0,
     432,     0,   433,     0,     0,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,     0,   446,   447,
       0,     0,     0,   448,   449,   450,   451,     0,     0,     0,
     452,     0,     0,     0,   453,     0,   454,   455,   456,   457,
     458,   459,     0,   460,   461,   462,   463,   464,   465,     0,
       0,     0,     0,     0,     0,   466,   467,     0,   468,     0,
       0,   469,     0,     0,     0,   470,   471,   472,     0,     0,
       0,   473,     0,     0,   474,   475,     0,   476,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,   485,     0,
     486,   487,     0,     0,   488,   489,   490,   491,     0,     0,
     492,   493,     0,   494,   495,   496,   497,     0,     0,     0,
       0,     0,   498,   499,   500,     0,     0,     0,   501,   502,
     503,   504,     0,   505,   506,     0,   507,   508,     0,   509,
     510,     0,     0,   511,     0,     0,   512,     0,   513,     0,
     514,   515,     0,     0,     0,     0,     0,     0,   516,     0,
       0,   517,     0,     0,     0,   518,   519,   520,   521,   522,
     523,   524,     0,     0,     0,     0,     0,     0,   525,   526,
       0,   527,   528,   529,     0,   160,   530,   161,   162,   163,
     164,   165,   166,     0,     0,   167,     0,     0,  3486,   168,
       0,     0,   169,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,     0,   179,     0,     0,     0,   180,     0,
       0,     0,   181,     0,     0,   182,   183,   184,     0,   185,
       0,   186,   187,     0,     0,   188,     0,     0,   189,   190,
       0,   191,   192,     0,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
       0,   216,   217,     0,   218,   219,   220,   221,   222,     0,
     223,     0,     0,   224,     0,     0,   225,     0,   226,     0,
       0,   227,     0,   228,     0,     0,     0,   229,   230,   231,
       0,     0,   232,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,   235,     0,   236,     0,     0,     0,     0,
     237,     0,   238,   239,   240,   241,   242,     0,     0,     0,
       0,   243,     0,     0,   244,   245,   246,     0,     0,     0,
     247,     0,   248,   249,     0,   250,   251,   252,     0,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
       0,   262,   263,   264,   265,     0,     0,   266,   267,     0,
     268,   269,   270,     0,     0,   271,     0,     0,     0,   272,
     273,     0,   274,     0,   275,     0,   276,   277,   278,   279,
     280,   281,   282,     0,   283,     0,     0,   284,   285,   286,
       0,   287,     0,     0,     0,   288,   289,     0,     0,     0,
     290,   291,   292,   293,   294,     0,     0,     0,   295,   296,
     297,     0,     0,   298,     0,     0,     0,     0,   299,   300,
       0,     0,     0,   301,     0,   302,   303,     0,   304,   305,
       0,     0,     0,   306,     0,     0,   307,   308,   309,     0,
       0,   310,     0,     0,   311,   312,     0,     0,     0,     0,
       0,   313,   314,     0,   315,     0,   316,     0,   317,   318,
       0,     0,     0,     0,     0,     0,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,   335,   336,   337,   338,     0,   339,   340,
     341,   342,     0,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   348,   349,   350,   351,     0,     0,   352,   353,
       0,   354,     0,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,     0,     0,   366,     0,     0,
     367,   368,   369,   370,     0,     0,     0,   371,   372,     0,
       0,     0,   373,     0,   374,   375,   376,     0,   377,   378,
     379,   380,     0,   381,   382,     0,     0,     0,     0,     0,
       0,     0,     0,   383,   384,   385,     0,     0,   386,     0,
     387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,     0,     0,   398,   399,   400,     0,   401,     0,
     402,   403,   404,   405,   406,     0,   407,   408,   409,     0,
       0,   410,     0,     0,     0,   411,   412,   413,   414,   415,
       0,     0,   416,   417,   418,   419,   420,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,     0,   427,     0,
     428,   429,     0,   430,   431,     0,   432,     0,   433,     0,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,     0,   446,   447,     0,     0,     0,   448,
     449,   450,   451,     0,     0,     0,   452,     0,     0,     0,
     453,     0,   454,   455,   456,   457,   458,   459,     0,   460,
     461,   462,   463,   464,   465,     0,     0,     0,     0,     0,
       0,   466,   467,     0,   468,     0,     0,   469,     0,     0,
       0,   470,   471,   472,     0,     0,     0,   473,     0,     0,
     474,   475,     0,   476,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,   485,     0,   486,   487,     0,     0,
     488,   489,   490,   491,     0,     0,   492,   493,     0,   494,
     495,   496,   497,     0,     0,     0,     0,     0,   498,   499,
     500,     0,     0,     0,   501,   502,   503,   504,     0,   505,
     506,     0,   507,   508,     0,   509,   510,     0,     0,   511,
       0,     0,   512,     0,   513,     0,   514,   515,     0,     0,
       0,     0,     0,     0,   516,     0,     0,   517,     0,     0,
       0,   518,   519,   520,   521,   522,   523,   524,     0,     0,
       0,     0,     0,     0,   525,   526,     0,   527,   528,   529,
       0,   160,   530,   161,   162,   163,   164,   165,   166,     0,
       0,   167,     0,     0,  3892,   168,     0,     0,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,     0,
     179,     0,     0,  1529,   180,     0,     0,     0,   181,     0,
       0,   182,   183,   184,     0,   185,     0,   186,   187,     0,
       0,   188,     0,     0,   189,   190,     0,   191,   192,     0,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,   217,     0,
     218,   219,   220,   221,   222,     0,   223,     0,     0,   224,
       0,     0,   225,     0,   226,     0,     0,   227,     0,   228,
       0,     0,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,     0,   233,   234,     0,     0,     0,  1530,   235,
       0,   236,     0,     0,     0,     0,   237,     0,   238,   239,
     240,   241,   242,     0,     0,     0,     0,   243,     0,     0,
     244,   245,   246,     0,     0,     0,   247,     0,   248,   249,
       0,   250,   251,   252,     0,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,     0,   262,   263,   264,
     265,     0,     0,   266,   267,     0,   268,   269,   270,     0,
       0,   271,     0,     0,     0,   272,   273,     0,   274,     0,
     275,     0,   276,   277,   278,   279,   280,   281,   282,     0,
     283,     0,     0,   284,   285,   286,     0,   287,     0,     0,
       0,   288,   289,     0,     0,     0,   290,   291,   292,   293,
     294,     0,     0,     0,   295,   296,   297,     0,     0,   298,
       0,     0,     0,     0,   299,   300,     0,     0,     0,   301,
       0,   302,   303,     0,   304,   305,     0,     0,     0,   306,
       0,     0,   307,   308,   309,     0,     0,   310,     0,     0,
     311,   312,   666,     0,     0,     0,     0,   313,   314,     0,
     315,     0,   316,     0,   317,   318,     0,     0,     0,     0,
       0,     0,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,   335,
     336,   337,   338,     0,   339,   340,   341,   342,     0,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   348,   349,
     350,   351,     0,     0,   352,   353,     0,   354,     0,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,     0,     0,   367,   368,   369,   370,
       0,     0,     0,   371,   372,     0,     0,     0,   373,     0,
     374,   375,   376,     0,   377,   378,   379,   380,     0,   381,
     382,     0,     0,     0,     0,     0,     0,     0,     0,   383,
     384,   385,     0,     0,   386,     0,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,     0,
     398,   399,   400,     0,   401,     0,   402,   403,   404,   405,
     406,     0,   407,   408,   409,     0,     0,   410,     0,     0,
       0,   411,   412,   413,   414,   415,     0,     0,   416,   417,
     418,   419,   420,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,     0,   427,     0,   428,   429,     0,   430,
     431,     0,   432,     0,   433,     0,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,     0,
     446,   447,     0,     0,     0,   448,   449,   450,   451,     0,
       0,  1531,   452,     0,     0,     0,   453,     0,   454,   455,
     456,   457,   458,   459,     0,   460,   461,   462,   463,   464,
     465,     0,     0,     0,     0,     0,     0,   466,   467,     0,
     468,     0,     0,   469,     0,     0,     0,   470,   471,   472,
       0,     0,     0,   473,     0,     0,   474,   475,     0,   476,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,     0,   488,   489,   490,   491,
       0,   156,   492,   493,     0,   494,   495,   496,   497,     0,
       0,     0,     0,     0,   498,   499,   500,     0,     0,     0,
     501,   502,   503,   504,     0,   505,   506,     0,   507,   508,
       0,   509,   510,     0,     0,   511,     0,     0,   512,     0,
     513,     0,   514,   515,     0,     0,     0,     0,     0,     0,
     516,     0,     0,   517,     0,     0,     0,   518,   519,   520,
     521,   522,   523,   524,     0,     0,     0,     0,     0,     0,
     525,   526,     0,   527,   528,   529,     0,     0,   530,     0,
       0,     0,   160,  1532,   161,   162,   163,   164,   165,   166,
     873,   874,   167,     0,     0,     0,   168,     0,     0,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
       0,   179,     0,     0,     0,   180,     0,     0,     0,   181,
       0,     0,   182,   183,   184,     0,   185,     0,   186,   187,
       0,     0,   188,     0,     0,   189,   190,     0,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,   223,     0,     0,
     224,   875,     0,   225,     0,   226,     0,   876,   227,     0,
     228,     0,     0,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,     0,   233,   234,     0,     0,     0,     0,
     235,     0,   236,   877,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,   243,   878,
       0,   244,   245,   246,     0,     0,     0,   247,     0,   248,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   879,   258,   259,   260,   880,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,     0,   881,   269,   270,
       0,     0,   271,     0,     0,     0,   272,   273,     0,   274,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     882,   283,     0,     0,   284,   285,   286,     0,   287,     0,
       0,     0,   288,   289,     0,     0,     0,   290,   291,   292,
     293,   294,     0,     0,     0,   295,   296,   297,   883,     0,
     298,     0,     0,     0,   884,   299,   300,     0,     0,     0,
     301,     0,   302,   303,     0,   304,   305,     0,     0,     0,
     306,     0,     0,   307,   308,   309,     0,     0,   310,     0,
       0,   311,   312,   666,     0,     0,     0,     0,   313,   314,
       0,   315,     0,   316,   885,   317,   318,     0,     0,     0,
       0,     0,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,     0,   339,   340,   341,   342,     0,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,     0,   354,     0,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,     0,     0,   367,   368,   369,
     370,     0,     0,     0,   371,   372,     0,     0,     0,   373,
       0,   374,   375,   376,     0,   377,   378,   379,   380,     0,
     381,   382,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,     0,   401,     0,   886,   403,   404,
     405,   887,     0,   407,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,   888,     0,   416,
     417,   418,   419,   420,     0,   889,   422,     0,   423,   424,
     425,     0,     0,   890,     0,   427,     0,   428,   429,     0,
     430,   431,     0,   432,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
       0,   446,   447,   891,     0,     0,   448,   449,   450,   451,
       0,     0,     0,   452,     0,     0,   892,   893,     0,   454,
     455,   456,   457,   458,   459,     0,   460,   461,   462,   463,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,   471,
     472,     0,     0,     0,   473,     0,     0,   474,   475,     0,
     476,   477,   478,   479,   480,   481,     0,     0,   894,   483,
     484,   485,     0,   486,   487,     0,     0,   488,   489,   490,
     491,     0,   156,   492,   493,     0,   494,   495,   496,   497,
       0,     0,     0,     0,     0,   498,   499,   500,   895,     0,
       0,   501,   502,   503,   504,     0,   505,   506,     0,   507,
     508,     0,   509,   510,     0,     0,   511,     0,     0,   512,
     896,   513,   897,   514,   515,     0,     0,     0,     0,     0,
       0,   516,     0,     0,   517,     0,     0,     0,   518,   519,
     520,   521,   522,   523,   524,     0,     0,     0,     0,     0,
       0,   525,   526,     0,   527,   528,   529,     0,   160,   530,
     979,   162,   163,   164,   165,   166,   980,   874,   167,     0,
       0,     0,   168,     0,     0,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,     0,     0,
       0,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,     0,
       0,   189,   190,     0,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,   223,     0,     0,   224,   875,     0,   225,
       0,   226,     0,   876,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,   235,     0,   236,   877,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,   878,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   879,   258,   259,
     260,   880,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,     0,   881,   269,   270,     0,     0,   271,     0,
       0,     0,   272,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   882,   283,     0,     0,
     284,   285,   286,     0,   287,     0,     0,     0,   288,   289,
       0,     0,     0,   290,   291,   292,   293,   294,     0,     0,
       0,   295,   296,   297,   883,     0,   298,     0,     0,     0,
     884,   299,   300,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   309,     0,     0,   310,     0,     0,   311,   312,   666,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
     885,   317,   318,     0,     0,     0,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
     371,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
       0,   401,     0,   886,   403,   404,   405,   981,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,   888,     0,   416,   417,   418,   419,   420,
       0,   889,   422,     0,   423,   424,   425,     0,     0,   890,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,     0,   446,   447,   891,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,   892,   893,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   894,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,   156,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,   895,     0,     0,   501,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,   896,   513,   897,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,   160,   530,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,  2599,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,  2600,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,  2601,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,  2602,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,   152,   153,     0,   371,   372,     0,     0,
    2603,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,  4435,   596,  4436,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,  2604,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
     160,   530,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,  1778,     0,     0,  3710,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,     0,   268,   269,   270,  1779,     0,
     271,     0,     0,     0,   272,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,  3194,     0,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,  3195,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,     0,  3196,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
     156,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,  3197,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,   160,   530,   161,   162,
     163,   164,   165,   166,     0,     0,   167,     0,     0,     0,
     168,     0,     0,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,     0,   179,     0,     0,     0,   180,
       0,     0,     0,   181,     0,     0,   182,   183,   184,     0,
     185,     0,   186,   187,     0,     0,   188,     0,     0,   189,
     190,     0,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,   223,     0,     0,   224,     0,     0,   225,     0,   226,
       0,     0,   227,     0,   228,     0,     0,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,     0,   233,   234,
    1778,     0,     0,  4674,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,   243,     0,     0,   244,   245,   246,     0,     0,
       0,   247,     0,   248,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
       0,   268,   269,   270,  1779,     0,   271,     0,     0,     0,
     272,   273,     0,   274,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,     0,   283,     0,     0,   284,   285,
     286,     0,   287,  3194,     0,     0,   288,   289,     0,     0,
       0,   290,   291,   292,   293,   294,     0,     0,     0,   295,
     296,   297,     0,     0,   298,     0,     0,     0,     0,   299,
     300,     0,     0,     0,   301,     0,   302,   303,     0,   304,
     305,     0,     0,     0,   306,     0,     0,   307,   308,   309,
       0,     0,   310,     0,     0,   311,   312,     0,     0,     0,
       0,     0,   313,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,  3195,     0,     0,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   339,
     340,   341,   342,     0,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,     0,   354,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,     0,
       0,   367,   368,   369,   370,     0,     0,     0,   371,   372,
       0,     0,  3196,   373,     0,   374,   375,   376,     0,   377,
     378,   379,   380,     0,   381,   382,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   407,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,     0,   427,
       0,   428,   429,     0,   430,   431,     0,   432,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,     0,   446,   447,     0,     0,     0,
     448,   449,   450,   451,     0,     0,     0,   452,     0,     0,
       0,   453,     0,   454,   455,   456,   457,   458,   459,     0,
     460,   461,   462,   463,   464,   465,     0,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,   471,   472,     0,     0,     0,   473,     0,
       0,   474,   475,     0,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
       0,   488,   489,   490,   491,     0,   156,   492,   493,     0,
     494,   495,   496,   497,     0,     0,     0,     0,     0,   498,
     499,   500,     0,     0,     0,   501,   502,   503,   504,  3197,
     505,   506,     0,   507,   508,     0,   509,   510,     0,     0,
     511,     0,     0,   512,     0,   513,     0,   514,   515,     0,
       0,     0,     0,     0,     0,   516,     0,     0,   517,     0,
       0,     0,   518,   519,   520,   521,   522,   523,   524,     0,
       0,     0,     0,     0,     0,   525,   526,     0,   527,   528,
     529,     0,   160,   530,   161,   162,   163,   164,   165,   166,
       0,     0,   167,     0,     0,     0,   168,     0,     0,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
       0,   179,     0,     0,     0,   180,     0,     0,     0,   181,
       0,     0,   182,   183,   184,     0,   185,     0,   186,   187,
       0,     0,   188,     0,     0,   189,   190,     0,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,   223,     0,     0,
     224,     0,     0,   225,     0,   226,     0,     0,   227,     0,
     228,     0,     0,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,     0,   233,   234,  1778,     0,     0,  4743,
     235,     0,   236,     0,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,   243,     0,
       0,   244,   245,   246,     0,     0,     0,   247,     0,   248,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,     0,   268,   269,   270,
    1779,     0,   271,     0,     0,     0,   272,   273,     0,   274,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
       0,   283,     0,     0,   284,   285,   286,     0,   287,  3194,
       0,     0,   288,   289,     0,     0,     0,   290,   291,   292,
     293,   294,     0,     0,     0,   295,   296,   297,     0,     0,
     298,     0,     0,     0,     0,   299,   300,     0,     0,     0,
     301,     0,   302,   303,     0,   304,   305,     0,     0,     0,
     306,     0,     0,   307,   308,   309,     0,     0,   310,     0,
       0,   311,   312,     0,     0,     0,     0,     0,   313,   314,
       0,   315,     0,   316,     0,   317,   318,     0,     0,  3195,
       0,     0,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,     0,   339,   340,   341,   342,     0,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,     0,   354,     0,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,     0,     0,   367,   368,   369,
     370,     0,     0,     0,   371,   372,     0,     0,  3196,   373,
       0,   374,   375,   376,     0,   377,   378,   379,   380,     0,
     381,   382,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,     0,   401,     0,   402,   403,   404,
     405,   406,     0,   407,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,     0,   427,     0,   428,   429,     0,
     430,   431,     0,   432,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
       0,   446,   447,     0,     0,     0,   448,   449,   450,   451,
       0,     0,     0,   452,     0,     0,     0,   453,     0,   454,
     455,   456,   457,   458,   459,     0,   460,   461,   462,   463,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,   471,
     472,     0,     0,     0,   473,     0,     0,   474,   475,     0,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,     0,   488,   489,   490,
     491,     0,   156,   492,   493,     0,   494,   495,   496,   497,
       0,     0,     0,     0,     0,   498,   499,   500,     0,     0,
       0,   501,   502,   503,   504,  3197,   505,   506,     0,   507,
     508,     0,   509,   510,     0,     0,   511,     0,     0,   512,
       0,   513,     0,   514,   515,     0,     0,     0,     0,     0,
       0,   516,     0,     0,   517,     0,     0,     0,   518,   519,
     520,   521,   522,   523,   524,     0,     0,     0,     0,     0,
       0,   525,   526,     0,   527,   528,   529,     0,   160,   530,
     161,   162,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,     0,     0,
       0,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,     0,
       0,   189,   190,     0,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,   223,     0,     0,   224,     0,     0,   225,
       0,   226,  1124,   876,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,     0,   268,   269,   270,     0,     0,   271,     0,
       0,     0,   272,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,     0,   283,     0,     0,
     284,   285,   286,     0,   287,     0,     0,     0,   288,   289,
       0,     0,     0,   290,   291,   292,   293,   294,     0,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
       0,   299,   300,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   309,     0,     0,   310,     0,     0,   311,   312,   666,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,     0,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
     371,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
       0,   401,     0,   402,   403,   404,   405,   406,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,     0,   446,   447,     0,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,     0,   453,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,   156,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,     0,     0,     0,   501,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,     0,   513,     0,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,   160,   530,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,  1544,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,  1545,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,   666,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,   156,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
     160,   530,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,  1086,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,     0,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,     0,   268,   269,   270,     0,     0,
     271,     0,     0,     0,   272,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,  1087,  1088,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
    1089,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,   160,   530,   161,   162,
     163,   164,   165,   166,     0,     0,   167,     0,     0,     0,
     168,     0,     0,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,     0,   179,     0,     0,     0,   180,
       0,     0,     0,   181,     0,     0,   182,   183,   184,     0,
     185,     0,   186,   187,     0,     0,   188,     0,     0,   189,
     190,     0,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,   223,     0,     0,   224,     0,     0,   225,     0,   226,
       0,     0,   227,     0,   228,     0,     0,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,     0,   233,   234,
       0,     0,     0,     0,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,   243,     0,     0,   244,   245,   246,     0,     0,
       0,   247,     0,   248,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
       0,   268,   269,   270,     0,     0,   271,     0,     0,     0,
     272,   273,     0,   274,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,     0,   283,     0,     0,   284,   285,
     286,     0,   287,     0,     0,     0,   288,   289,     0,     0,
       0,   290,   291,   292,   293,   294,     0,     0,     0,   295,
     296,   297,     0,     0,   298,     0,     0,     0,     0,   299,
     300,     0,     0,     0,   301,     0,   302,   303,     0,   304,
     305,     0,     0,     0,   306,     0,     0,   307,   308,   309,
       0,     0,   310,     0,     0,   311,   312,     0,     0,     0,
       0,     0,   313,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,  2085,     0,     0,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   339,
     340,   341,   342,     0,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,     0,   354,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,     0,
       0,   367,   368,   369,   370,     0,     0,     0,   371,   372,
       0,     0,  2086,   373,     0,   374,   375,   376,     0,   377,
     378,   379,   380,     0,   381,   382,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,   385,     0,   785,   386,
       0,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   407,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,     0,   427,
       0,   428,   429,     0,   430,   431,     0,   432,     0,   433,
       0,     0,   434,   435,   436,   437,  2087,   439,   440,   441,
     442,   443,   444,   445,     0,   446,   447,     0,     0,     0,
     448,   449,   450,   451,     0,     0,     0,   452,     0,     0,
       0,   453,     0,   454,   455,   456,   457,   458,   459,     0,
     460,   461,   462,   463,   464,   465,     0,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,   471,   472,     0,     0,     0,   473,     0,
       0,   474,   475,     0,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
       0,   488,   489,   490,   491,     0,     0,   492,   493,     0,
     494,   495,   496,   497,     0,     0,     0,     0,     0,   498,
     499,   500,     0,     0,     0,   501,   502,   503,   504,  2088,
     505,   506,     0,   507,   508,     0,   509,   510,     0,     0,
     511,     0,     0,   512,     0,   513,     0,   514,   515,     0,
       0,     0,     0,     0,     0,   516,     0,     0,   517,     0,
       0,     0,   518,   519,   520,   521,   522,   523,   524,     0,
       0,     0,     0,     0,     0,   525,   526,     0,   527,   528,
     529,     0,   160,   530,   161,   162,   163,   164,   165,   166,
       0,     0,   167,     0,     0,     0,   168,     0,     0,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
       0,   179,     0,     0,     0,   180,     0,     0,     0,   181,
       0,     0,   182,   183,   184,     0,   185,     0,   186,   187,
       0,     0,   188,     0,     0,   189,   190,     0,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,   223,     0,     0,
     224,     0,     0,   225,     0,   226,     0,     0,   227,     0,
     228,     0,     0,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,     0,   233,   234,     0,     0,     0,     0,
     235,     0,   236,     0,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,   243,     0,
       0,   244,   245,   246,     0,     0,     0,   247,     0,   248,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,     0,   268,   269,   270,
       0,     0,   271,     0,     0,     0,   272,   273,     0,   274,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
       0,   283,     0,     0,   284,   285,   286,     0,   287,     0,
       0,     0,   288,   289,     0,     0,     0,   290,   291,   292,
     293,   294,     0,     0,     0,   295,   296,   297,     0,     0,
     298,     0,     0,     0,     0,   299,   300,     0,     0,     0,
     301,     0,   302,   303,     0,   304,   305,     0,     0,     0,
     306,     0,     0,   307,   308,   309,     0,     0,   310,     0,
       0,   311,   312,     0,     0,     0,     0,     0,   313,   314,
       0,   315,     0,   316,     0,   317,   318,     0,     0,  2085,
       0,     0,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,     0,   339,   340,   341,   342,     0,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,     0,   354,     0,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,     0,     0,   367,   368,   369,
     370,     0,     0,     0,   371,   372,     0,     0,  2086,   373,
       0,   374,   375,   376,     0,   377,   378,   379,   380,     0,
     381,   382,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,   385,     0,   785,   386,     0,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,     0,   401,     0,   402,   403,   404,
     405,   406,     0,   407,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,     0,   427,     0,   428,   429,     0,
     430,   431,     0,   432,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
       0,   446,   447,     0,     0,     0,   448,   449,   450,   451,
       0,     0,     0,   452,     0,     0,     0,   453,     0,   454,
     455,   456,   457,   458,   459,     0,   460,   461,   462,   463,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,   471,
     472,     0,     0,     0,   473,     0,     0,   474,   475,     0,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,     0,   488,   489,   490,
     491,     0,     0,   492,   493,     0,   494,   495,   496,   497,
       0,     0,     0,     0,     0,   498,   499,   500,     0,     0,
       0,   501,   502,   503,   504,  2088,   505,   506,     0,   507,
     508,     0,   509,   510,     0,     0,   511,     0,     0,   512,
       0,   513,     0,   514,   515,     0,     0,     0,     0,     0,
       0,   516,     0,     0,   517,     0,     0,     0,   518,   519,
     520,   521,   522,   523,   524,     0,     0,     0,     0,     0,
       0,   525,   526,     0,   527,   528,   529,     0,   160,   530,
     161,   162,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,     0,     0,
    1529,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,     0,
       0,   189,   190,     0,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,   223,     0,     0,   224,     0,     0,   225,
       0,   226,     0,     0,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,   234,     0,     0,     0,  1530,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,     0,   268,   269,   270,     0,     0,   271,     0,
       0,     0,   272,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,     0,   283,     0,     0,
     284,   285,   286,     0,   287,     0,     0,     0,   288,   289,
       0,     0,     0,   290,   291,   292,   293,   294,     0,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
       0,   299,   300,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   309,     0,     0,   310,     0,     0,   311,   312,   666,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,     0,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
     371,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
       0,   401,     0,   402,   403,   404,   405,   406,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,     0,   446,   447,     0,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,     0,   453,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,   156,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,     0,     0,     0,   501,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,     0,   513,     0,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,   160,   530,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,  2085,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
    2086,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,   785,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,  4268,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,  2088,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
     160,   530,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,  1124,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,     0,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,     0,   268,   269,   270,     0,     0,
     271,     0,     0,     0,   272,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,     0,     0,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,   666,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
     156,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,   160,   530,   161,   162,
     163,   164,   165,   166,  1567,     0,   167,     0,     0,     0,
     168,     0,     0,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,     0,   179,     0,     0,     0,   180,
       0,     0,     0,   181,     0,     0,   182,   183,   184,     0,
     185,     0,   186,   187,     0,     0,   188,     0,     0,   189,
     190,     0,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,   223,     0,     0,   224,     0,     0,   225,     0,   226,
       0,     0,   227,     0,   228,     0,     0,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,     0,   233,   234,
       0,     0,     0,     0,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,   243,     0,     0,   244,   245,   246,     0,     0,
       0,   247,     0,   248,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
       0,   268,   269,   270,     0,     0,   271,     0,     0,     0,
     272,   273,     0,   274,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,     0,   283,     0,     0,   284,   285,
     286,     0,   287,     0,     0,     0,   288,   289,     0,     0,
       0,   290,   291,   292,   293,   294,     0,     0,     0,   295,
     296,   297,     0,     0,   298,     0,     0,     0,     0,   299,
     300,     0,     0,     0,   301,     0,   302,   303,     0,   304,
     305,     0,     0,     0,   306,     0,     0,   307,   308,   309,
       0,     0,   310,     0,     0,   311,   312,   666,     0,     0,
       0,     0,   313,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,     0,     0,     0,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   339,
     340,   341,   342,     0,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,     0,   354,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,     0,
       0,   367,   368,   369,   370,     0,     0,     0,   371,   372,
       0,     0,     0,   373,     0,   374,   375,   376,     0,   377,
     378,   379,   380,     0,   381,   382,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   407,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,     0,   427,
       0,   428,   429,     0,   430,   431,     0,   432,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,     0,   446,   447,     0,     0,     0,
     448,   449,   450,   451,     0,     0,     0,   452,     0,     0,
       0,   453,     0,   454,   455,   456,   457,   458,   459,     0,
     460,   461,   462,   463,   464,   465,     0,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,   471,   472,     0,     0,     0,   473,     0,
       0,   474,   475,     0,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
       0,   488,   489,   490,   491,     0,   156,   492,   493,     0,
     494,   495,   496,   497,     0,     0,     0,     0,     0,   498,
     499,   500,     0,     0,     0,   501,   502,   503,   504,     0,
     505,   506,     0,   507,   508,     0,   509,   510,     0,     0,
     511,     0,     0,   512,     0,   513,     0,   514,   515,     0,
       0,     0,     0,     0,     0,   516,     0,     0,   517,     0,
       0,     0,   518,   519,   520,   521,   522,   523,   524,     0,
       0,     0,     0,     0,     0,   525,   526,     0,   527,   528,
     529,     0,   160,   530,   161,   162,   163,   164,   165,   166,
       0,     0,   167,     0,     0,     0,   168,     0,     0,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
       0,   179,     0,     0,     0,   180,     0,     0,     0,   181,
       0,     0,   182,   183,   184,     0,   185,     0,   186,   187,
       0,     0,   188,     0,     0,   189,   190,     0,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,   223,     0,     0,
     224,     0,     0,   225,     0,   226,     0,   876,   227,     0,
     228,     0,     0,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,     0,   233,   234,     0,     0,     0,     0,
     235,     0,   236,     0,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,   243,     0,
       0,   244,   245,   246,     0,     0,     0,   247,     0,   248,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,     0,   268,   269,   270,
       0,     0,   271,     0,     0,     0,   272,   273,     0,   274,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
       0,   283,     0,     0,   284,   285,   286,     0,   287,     0,
       0,     0,   288,   289,     0,     0,     0,   290,   291,   292,
     293,   294,     0,     0,     0,   295,   296,   297,     0,     0,
     298,     0,     0,     0,     0,   299,   300,     0,     0,     0,
     301,     0,   302,   303,     0,   304,   305,     0,     0,     0,
     306,     0,     0,   307,   308,   309,     0,     0,   310,     0,
       0,   311,   312,   666,     0,     0,     0,     0,   313,   314,
       0,   315,     0,   316,     0,   317,   318,     0,     0,     0,
       0,     0,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,     0,   339,   340,   341,   342,     0,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,     0,   354,     0,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,     0,     0,   367,   368,   369,
     370,     0,     0,     0,   371,   372,     0,     0,     0,   373,
       0,   374,   375,   376,     0,   377,   378,   379,   380,     0,
     381,   382,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,     0,   401,     0,   402,   403,   404,
     405,   406,     0,   407,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,     0,   427,     0,   428,   429,     0,
     430,   431,     0,   432,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
       0,   446,   447,     0,     0,     0,   448,   449,   450,   451,
       0,     0,     0,   452,     0,     0,     0,   453,     0,   454,
     455,   456,   457,   458,   459,     0,   460,   461,   462,   463,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,   471,
     472,     0,     0,     0,   473,     0,     0,   474,   475,     0,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,     0,   488,   489,   490,
     491,     0,   156,   492,   493,     0,   494,   495,   496,   497,
       0,     0,     0,     0,     0,   498,   499,   500,     0,     0,
       0,   501,   502,   503,   504,     0,   505,   506,     0,   507,
     508,     0,   509,   510,     0,     0,   511,     0,     0,   512,
       0,   513,     0,   514,   515,     0,     0,     0,     0,     0,
       0,   516,     0,     0,   517,     0,     0,     0,   518,   519,
     520,   521,   522,   523,   524,     0,     0,     0,     0,     0,
       0,   525,   526,     0,   527,   528,   529,     0,   160,   530,
     161,   162,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,     0,     0,
       0,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,     0,
       0,   189,   190,     0,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,   223,     0,     0,   224,     0,     0,   225,
       0,   226,     0,     0,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,   234,     0,     0,     0,  2659,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,     0,   268,   269,   270,     0,     0,   271,     0,
       0,     0,   272,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,     0,   283,     0,     0,
     284,   285,   286,     0,   287,     0,     0,     0,   288,   289,
       0,     0,     0,   290,   291,   292,   293,   294,     0,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
       0,   299,   300,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   309,     0,     0,   310,     0,     0,   311,   312,   666,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,     0,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
     371,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
       0,   401,     0,   402,   403,   404,   405,   406,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,     0,   446,   447,     0,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,     0,   453,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,   156,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,     0,     0,     0,   501,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,     0,   513,     0,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,   160,   530,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,  1529,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,   666,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,   156,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
     160,   530,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,     0,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,     0,   268,   269,   270,     0,     0,
     271,     0,     0,     0,   272,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,     0,     0,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,   666,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
     156,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,   160,   530,   161,   162,
     163,   164,   165,   166,     0,     0,   167,     0,     0,     0,
     168,  3120,     0,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,     0,   179,     0,     0,     0,   180,
       0,     0,     0,   181,     0,     0,   182,   183,   184,     0,
     185,     0,   186,   187,     0,     0,   188,     0,     0,   189,
     190,     0,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,   223,     0,     0,   224,     0,     0,   225,     0,   226,
       0,     0,   227,     0,   228,     0,     0,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,     0,   233,   234,
       0,     0,     0,     0,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,   243,     0,     0,   244,   245,   246,     0,     0,
       0,   247,     0,   248,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
       0,   268,   269,   270,     0,     0,   271,     0,     0,     0,
     272,   273,     0,   274,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,     0,   283,     0,     0,   284,   285,
     286,     0,   287,     0,     0,     0,   288,   289,     0,     0,
       0,   290,   291,   292,   293,   294,     0,     0,     0,   295,
     296,   297,     0,     0,   298,     0,     0,     0,     0,   299,
     300,     0,     0,     0,   301,     0,   302,   303,     0,   304,
     305,     0,     0,     0,   306,     0,     0,   307,   308,   309,
       0,     0,   310,     0,     0,   311,   312,     0,     0,     0,
       0,     0,   313,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,     0,     0,     0,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   339,
     340,   341,   342,     0,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,     0,   354,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,     0,
       0,   367,   368,   369,   370,     0,     0,     0,   371,   372,
       0,     0,     0,   373,     0,   374,   375,   376,     0,   377,
     378,   379,   380,     0,   381,   382,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   407,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,     0,   427,
       0,   428,   429,     0,   430,   431,     0,   432,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,     0,   446,   447,     0,     0,     0,
     448,   449,   450,   451,     0,     0,     0,   452,     0,     0,
       0,   453,     0,   454,   455,   456,   457,   458,   459,     0,
     460,   461,   462,   463,   464,   465,     0,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,   471,   472,     0,     0,     0,   473,     0,
       0,   474,   475,     0,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
       0,   488,   489,   490,   491,     0,   156,   492,   493,     0,
     494,   495,   496,   497,     0,     0,     0,     0,     0,   498,
     499,   500,     0,     0,     0,   501,   502,   503,   504,     0,
     505,   506,     0,   507,   508,     0,   509,   510,     0,     0,
     511,     0,     0,   512,     0,   513,     0,   514,   515,     0,
       0,     0,     0,     0,     0,   516,     0,     0,   517,     0,
       0,     0,   518,   519,   520,   521,   522,   523,   524,     0,
       0,     0,     0,     0,     0,   525,   526,     0,   527,   528,
     529,     0,   160,   530,   161,   162,   163,   164,   165,   166,
       0,     0,   167,     0,     0,     0,   168,     0,     0,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
       0,   179,     0,     0,     0,   180,     0,     0,     0,   181,
       0,     0,   182,   183,   184,     0,   185,     0,   186,   187,
       0,     0,   188,     0,     0,   189,   190,     0,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,   221,   222,  3304,   223,     0,     0,
     224,     0,     0,   225,     0,   226,     0,     0,   227,     0,
     228,     0,     0,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,     0,   233,   234,     0,     0,     0,     0,
     235,     0,   236,     0,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,   243,     0,
       0,   244,   245,   246,     0,     0,     0,   247,     0,   248,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,  3305,   262,   263,
     264,   265,     0,     0,   266,   267,     0,   268,   269,   270,
       0,     0,   271,     0,     0,     0,   272,   273,     0,   274,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
       0,   283,     0,     0,   284,   285,   286,     0,   287,     0,
       0,     0,   288,   289,     0,     0,     0,   290,   291,   292,
     293,   294,     0,     0,     0,   295,   296,   297,     0,     0,
     298,     0,     0,     0,     0,   299,   300,     0,     0,     0,
     301,     0,   302,   303,     0,   304,   305,     0,     0,     0,
     306,     0,     0,   307,   308,   309,     0,     0,   310,     0,
       0,   311,   312,     0,     0,     0,     0,     0,   313,   314,
       0,   315,     0,   316,     0,   317,   318,     0,     0,     0,
       0,     0,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,     0,   339,   340,   341,   342,     0,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,     0,   354,     0,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,     0,     0,   367,   368,   369,
     370,     0,     0,     0,   371,   372,     0,     0,     0,   373,
       0,   374,   375,   376,     0,   377,   378,   379,   380,     0,
     381,   382,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,     0,   401,     0,   402,   403,   404,
     405,   406,     0,   407,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,     0,   427,     0,   428,   429,     0,
     430,   431,     0,   432,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
       0,   446,   447,     0,     0,     0,   448,   449,   450,   451,
       0,     0,     0,   452,     0,     0,     0,   453,     0,   454,
     455,   456,   457,   458,   459,     0,   460,   461,   462,   463,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,   471,
     472,     0,     0,     0,   473,     0,     0,   474,   475,     0,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,     0,   488,   489,   490,
     491,     0,     0,   492,   493,     0,   494,   495,   496,   497,
       0,     0,     0,     0,     0,   498,   499,   500,     0,     0,
       0,   501,   502,   503,   504,     0,   505,   506,     0,   507,
     508,     0,   509,   510,     0,     0,   511,     0,     0,   512,
       0,   513,     0,   514,   515,     0,     0,     0,     0,     0,
       0,   516,     0,     0,   517,     0,     0,     0,   518,   519,
     520,   521,   522,   523,   524,     0,     0,     0,     0,     0,
       0,   525,   526,     0,   527,   528,   529,     0,   160,   530,
     161,   162,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,     0,     0,
       0,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,     0,
       0,   189,   190,     0,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,   223,     0,     0,   224,     0,     0,   225,
       0,   226,     0,     0,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,     0,   268,   269,   270,     0,     0,   271,     0,
       0,     0,   272,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,     0,   283,     0,     0,
     284,   285,   286,     0,   287,     0,     0,     0,   288,   289,
       0,     0,     0,   290,   291,   292,   293,   294,     0,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
       0,   299,   300,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   309,     0,     0,   310,     0,     0,   311,   312,     0,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,     0,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
     371,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
       0,   401,     0,   402,   403,   404,   405,   406,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,     0,   446,   447,     0,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,     0,   453,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,   596,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,     0,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,     0,     0,     0,   501,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,     0,   513,     0,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,   160,   530,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
    1184,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
     160,   530,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,     0,     0,     0,  1522,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,     0,   268,   269,   270,     0,     0,
     271,     0,     0,     0,   272,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,     0,     0,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
       0,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,   160,   530,   161,   162,
     163,   164,   165,   166,     0,     0,   167,     0,     0,     0,
     168,     0,     0,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,     0,   179,     0,     0,     0,   180,
       0,     0,     0,   181,     0,     0,   182,   183,   184,     0,
     185,     0,   186,   187,     0,     0,   188,     0,     0,   189,
     190,     0,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,   223,     0,     0,   224,     0,     0,   225,     0,   226,
       0,     0,   227,     0,   228,     0,     0,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,     0,   233,   234,
       0,     0,     0,  1522,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,   243,     0,     0,   244,   245,   246,     0,     0,
       0,   247,     0,   248,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
       0,   268,   269,   270,     0,     0,   271,     0,     0,     0,
     272,   273,     0,   274,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,     0,   283,     0,     0,   284,   285,
     286,     0,   287,     0,     0,     0,   288,   289,     0,     0,
       0,   290,   291,   292,   293,   294,     0,     0,     0,   295,
     296,   297,     0,     0,   298,     0,     0,     0,     0,   299,
     300,     0,     0,     0,   301,     0,   302,   303,     0,   304,
     305,     0,     0,     0,   306,     0,     0,   307,   308,   309,
       0,     0,   310,     0,     0,   311,   312,     0,     0,     0,
       0,     0,   313,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,     0,     0,     0,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   339,
     340,   341,   342,     0,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,     0,   354,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,     0,
       0,   367,   368,   369,   370,     0,     0,     0,   371,   372,
       0,     0,     0,   373,     0,   374,   375,   376,     0,   377,
     378,   379,   380,     0,   381,   382,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   407,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,     0,   427,
       0,   428,   429,     0,   430,   431,     0,   432,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,     0,   446,   447,     0,     0,     0,
     448,   449,   450,   451,     0,     0,     0,   452,     0,     0,
       0,   453,     0,   454,   455,   456,   457,   458,   459,     0,
     460,   461,   462,   463,   464,   465,     0,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,   471,   472,     0,     0,     0,   473,     0,
       0,   474,   475,     0,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
       0,   488,   489,   490,   491,     0,     0,   492,   493,     0,
     494,   495,   496,   497,     0,     0,     0,     0,     0,  2139,
     499,   500,     0,     0,     0,   501,   502,   503,   504,     0,
     505,   506,     0,   507,   508,     0,   509,   510,     0,     0,
     511,     0,     0,   512,     0,   513,     0,   514,   515,     0,
       0,     0,     0,     0,     0,   516,     0,     0,   517,     0,
       0,     0,   518,   519,   520,   521,   522,   523,   524,     0,
       0,     0,     0,     0,     0,   525,   526,     0,   527,   528,
     529,     0,   160,   530,   161,   162,   163,   164,   165,   166,
       0,     0,   167,     0,     0,     0,   168,     0,     0,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
       0,   179,     0,     0,     0,   180,     0,     0,     0,   181,
       0,     0,   182,   183,   184,     0,   185,     0,   186,   187,
       0,     0,   188,     0,     0,   189,   190,     0,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,   223,     0,     0,
     224,     0,     0,   225,     0,   226,     0,     0,   227,     0,
     228,     0,     0,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,     0,   233,   234,     0,     0,     0,  2278,
     235,     0,   236,     0,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,   243,     0,
       0,   244,   245,   246,     0,     0,     0,   247,     0,   248,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,     0,   268,   269,   270,
       0,     0,   271,     0,     0,     0,   272,   273,     0,   274,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
       0,   283,     0,     0,   284,   285,   286,     0,   287,     0,
       0,     0,   288,   289,     0,     0,     0,   290,   291,   292,
     293,   294,     0,     0,     0,   295,   296,   297,     0,     0,
     298,     0,     0,     0,     0,   299,   300,     0,     0,     0,
     301,     0,   302,   303,     0,   304,   305,     0,     0,     0,
     306,     0,     0,   307,   308,   309,     0,     0,   310,     0,
       0,   311,   312,     0,     0,     0,     0,     0,   313,   314,
       0,   315,     0,   316,     0,   317,   318,     0,     0,     0,
       0,     0,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,     0,   339,   340,   341,   342,     0,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,     0,   354,     0,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,     0,     0,   367,   368,   369,
     370,     0,     0,     0,   371,   372,     0,     0,     0,   373,
       0,   374,   375,   376,     0,   377,   378,   379,   380,     0,
     381,   382,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,     0,   401,     0,   402,   403,   404,
     405,   406,     0,   407,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,     0,   427,     0,   428,   429,     0,
     430,   431,     0,   432,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
       0,   446,   447,     0,     0,     0,   448,   449,   450,   451,
       0,     0,     0,   452,     0,     0,     0,   453,     0,   454,
     455,   456,   457,   458,   459,     0,   460,   461,   462,   463,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,   471,
     472,     0,     0,     0,   473,     0,     0,   474,   475,     0,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,     0,   488,   489,   490,
     491,     0,     0,   492,   493,     0,   494,   495,   496,   497,
       0,     0,     0,     0,     0,   498,   499,   500,     0,     0,
       0,   501,   502,   503,   504,     0,   505,   506,     0,   507,
     508,     0,   509,   510,     0,     0,   511,     0,     0,   512,
       0,   513,     0,   514,   515,     0,     0,     0,     0,     0,
       0,   516,     0,     0,   517,     0,     0,     0,   518,   519,
     520,   521,   522,   523,   524,     0,     0,     0,     0,     0,
       0,   525,   526,     0,   527,   528,   529,     0,   160,   530,
     161,   162,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,     0,     0,
       0,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,     0,
       0,   189,   190,     0,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,   223,     0,     0,   224,     0,     0,   225,
       0,   226,     0,     0,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,     0,   268,   269,   270,     0,     0,   271,     0,
       0,     0,   272,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,     0,   283,     0,     0,
     284,   285,   286,     0,   287,     0,     0,     0,   288,   289,
       0,     0,     0,   290,   291,   292,   293,   294,     0,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
       0,   299,   300,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   309,     0,     0,   310,     0,     0,   311,   312,     0,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,     0,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
     371,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
    3313,   401,     0,   402,   403,   404,   405,   406,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,     0,   446,   447,     0,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,     0,   453,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,     0,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,     0,     0,     0,   501,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,     0,   513,     0,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,   160,   530,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,   156,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
     160,   530,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,     0,     0,     0,  3626,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,     0,   268,   269,   270,     0,     0,
     271,     0,     0,     0,   272,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,     0,     0,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,   371,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
       0,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,   160,   530,   161,   162,
     163,   164,   165,   166,  3634,     0,   167,     0,     0,     0,
     168,     0,     0,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,     0,   179,     0,     0,     0,   180,
       0,     0,     0,   181,     0,     0,   182,   183,   184,     0,
     185,     0,   186,   187,     0,     0,   188,     0,     0,   189,
     190,     0,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,   223,     0,     0,   224,     0,     0,   225,     0,   226,
       0,     0,   227,     0,   228,     0,     0,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,     0,   233,   234,
       0,     0,     0,     0,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,   243,     0,     0,   244,   245,   246,     0,     0,
       0,   247,     0,   248,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
       0,   268,   269,   270,     0,     0,   271,     0,     0,     0,
     272,   273,     0,   274,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,     0,   283,     0,     0,   284,   285,
     286,     0,   287,     0,     0,     0,   288,   289,     0,     0,
       0,   290,   291,   292,   293,   294,     0,     0,     0,   295,
     296,   297,     0,     0,   298,     0,     0,     0,     0,   299,
     300,     0,     0,     0,   301,     0,   302,   303,     0,   304,
     305,     0,     0,     0,   306,     0,     0,   307,   308,   309,
       0,     0,   310,     0,     0,   311,   312,     0,     0,     0,
       0,     0,   313,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,     0,     0,     0,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   339,
     340,   341,   342,     0,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,     0,   354,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,     0,
       0,   367,   368,   369,   370,     0,     0,     0,   371,   372,
       0,     0,     0,   373,     0,   374,   375,   376,     0,   377,
     378,   379,   380,     0,   381,   382,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   407,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,     0,   427,
       0,   428,   429,     0,   430,   431,     0,   432,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,     0,   446,   447,     0,     0,     0,
     448,   449,   450,   451,     0,     0,     0,   452,     0,     0,
       0,   453,     0,   454,   455,   456,   457,   458,   459,     0,
     460,   461,   462,   463,   464,   465,     0,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,   471,   472,     0,     0,     0,   473,     0,
       0,   474,   475,     0,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
       0,   488,   489,   490,   491,     0,     0,   492,   493,     0,
     494,   495,   496,   497,     0,     0,     0,     0,     0,   498,
     499,   500,     0,     0,     0,   501,   502,   503,   504,     0,
     505,   506,     0,   507,   508,     0,   509,   510,     0,     0,
     511,     0,     0,   512,     0,   513,     0,   514,   515,     0,
       0,     0,     0,     0,     0,   516,     0,     0,   517,     0,
       0,     0,   518,   519,   520,   521,   522,   523,   524,     0,
       0,     0,     0,     0,     0,   525,   526,     0,   527,   528,
     529,     0,   160,   530,   161,   162,   163,   164,   165,   166,
       0,     0,   167,     0,     0,     0,   168,     0,     0,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
       0,   179,     0,     0,     0,   180,     0,     0,     0,   181,
       0,     0,   182,   183,   184,     0,   185,     0,   186,   187,
       0,     0,   188,     0,     0,   189,   190,     0,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,   223,     0,     0,
     224,     0,     0,   225,     0,   226,     0,     0,   227,     0,
     228,     0,     0,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,     0,   233,   234,     0,     0,     0,  3658,
     235,     0,   236,     0,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,   243,     0,
       0,   244,   245,   246,     0,     0,     0,   247,     0,   248,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,     0,   268,   269,   270,
       0,     0,   271,     0,     0,     0,   272,   273,     0,   274,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
       0,   283,     0,     0,   284,   285,   286,     0,   287,     0,
       0,     0,   288,   289,     0,     0,     0,   290,   291,   292,
     293,   294,     0,     0,     0,   295,   296,   297,     0,     0,
     298,     0,     0,     0,     0,   299,   300,     0,     0,     0,
     301,     0,   302,   303,     0,   304,   305,     0,     0,     0,
     306,     0,     0,   307,   308,   309,     0,     0,   310,     0,
       0,   311,   312,     0,     0,     0,     0,     0,   313,   314,
       0,   315,     0,   316,     0,   317,   318,     0,     0,     0,
       0,     0,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,     0,   339,   340,   341,   342,     0,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,     0,   354,     0,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,     0,     0,   367,   368,   369,
     370,     0,     0,     0,   371,   372,     0,     0,     0,   373,
       0,   374,   375,   376,     0,   377,   378,   379,   380,     0,
     381,   382,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,     0,   401,     0,   402,   403,   404,
     405,   406,     0,   407,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,     0,   427,     0,   428,   429,     0,
     430,   431,     0,   432,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
       0,   446,   447,     0,     0,     0,   448,   449,   450,   451,
       0,     0,     0,   452,     0,     0,     0,   453,     0,   454,
     455,   456,   457,   458,   459,     0,   460,   461,   462,   463,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,   471,
     472,     0,     0,     0,   473,     0,     0,   474,   475,     0,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,     0,   488,   489,   490,
     491,     0,     0,   492,   493,     0,   494,   495,   496,   497,
       0,     0,     0,     0,     0,   498,   499,   500,     0,     0,
       0,   501,   502,   503,   504,     0,   505,   506,     0,   507,
     508,     0,   509,   510,     0,     0,   511,     0,     0,   512,
       0,   513,     0,   514,   515,     0,     0,     0,     0,     0,
       0,   516,     0,     0,   517,     0,     0,     0,   518,   519,
     520,   521,   522,   523,   524,     0,     0,     0,     0,     0,
       0,   525,   526,     0,   527,   528,   529,     0,   160,   530,
     161,   162,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,     0,     0,
       0,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,   186,   187,     0,     0,   188,     0,
       0,   189,   190,     0,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,   223,     0,     0,   224,     0,     0,   225,
       0,   226,     0,     0,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,   243,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,   248,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,     0,   268,   269,   270,     0,     0,   271,     0,
       0,     0,   272,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,     0,   283,     0,     0,
     284,   285,   286,     0,   287,     0,     0,     0,   288,   289,
       0,     0,     0,   290,   291,   292,   293,   294,     0,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
       0,   299,   300,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,     0,     0,     0,   306,     0,     0,   307,
     308,   309,     0,     0,   310,     0,     0,   311,   312,     0,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,     0,     0,     0,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
     371,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   380,     0,   381,   382,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
    4579,   401,     0,   402,   403,   404,   405,   406,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
       0,   427,     0,   428,   429,     0,   430,   431,     0,   432,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,     0,   446,   447,     0,
       0,     0,   448,   449,   450,   451,     0,     0,     0,   452,
       0,     0,     0,   453,     0,   454,   455,   456,   457,   458,
     459,     0,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,   471,   472,     0,     0,     0,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,     0,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,     0,     0,     0,   501,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,   509,   510,
       0,     0,   511,     0,     0,   512,     0,   513,     0,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,   525,   526,     0,
     527,   528,   529,     0,   160,   530,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
     186,   187,     0,     0,   188,     0,     0,   189,   190,     0,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     243,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,   248,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,     0,   268,
     269,   270,     0,     0,   271,     0,     0,     0,   272,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,     0,   283,     0,     0,   284,   285,   286,     0,
     287,     0,     0,     0,   288,   289,     0,     0,     0,   290,
     291,   292,   293,   294,     0,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,   300,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,     0,
       0,     0,   306,     0,     0,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,   371,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     380,     0,   381,   382,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,     0,   427,     0,   428,
     429,     0,   430,   431,     0,   432,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,     0,     0,     0,   448,   449,
     450,   451,     0,     0,     0,   452,     0,     0,     0,   453,
       0,   454,   455,   456,   457,   458,   459,     0,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,   471,   472,     0,     0,     0,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,   501,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,   509,   510,     0,     0,   511,     0,
       0,   512,     0,   513,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,   525,   526,     0,   527,   528,   529,     0,
     160,   530,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,   186,   187,     0,     0,
     188,     0,     0,   189,   190,     0,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,   234,     0,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,   243,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,   248,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,     0,   268,  2004,   270,     0,     0,
     271,     0,     0,     0,   272,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,     0,   283,
       0,     0,   284,   285,   286,     0,   287,     0,     0,     0,
     288,   289,     0,     0,     0,   290,   291,   292,   293,   294,
       0,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,   300,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,     0,     0,     0,   306,     0,
       0,   307,   308,   309,     0,     0,   310,     0,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,     0,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,  2005,   369,   370,     0,
       0,     0,   371,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   380,     0,   381,   382,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,     0,   427,     0,   428,   429,     0,   430,   431,
       0,   432,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,     0,     0,     0,   448,   449,   450,   451,     0,     0,
       0,   452,     0,     0,     0,   453,     0,   454,   455,   456,
     457,   458,   459,     0,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,   471,   472,     0,
       0,     0,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
       0,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,   501,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
     509,   510,     0,     0,   511,     0,     0,   512,     0,   513,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,   525,
     526,     0,   527,   528,   529,     0,   160,   530,   161,   162,
     163,   164,   165,   166,     0,     0,   167,     0,     0,     0,
     168,     0,     0,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,     0,     0,   925,     0,     0,     0,   180,
       0,     0,     0,   181,     0,     0,   182,   183,   184,     0,
     185,     0,     0,     0,     0,     0,   188,     7,     0,   189,
     190,     0,   191,     0,     0,     0,     0,     0,   195,   196,
     197,   926,   199,   200,     0,   201,   202,     0,     0,     0,
       0,     0,     0,   208,     0,   210,     0,   212,   213,   214,
     215,     0,   216,   217,     0,   218,   219,   220,     0,   222,
       0,   223,     0,     0,   224,     0,     0,   225,     0,   226,
       0,     0,   227,     0,   228,     0,     0,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,     0,   233,     0,
       0,     0,     0,     0,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,     0,     0,     0,   244,   245,   246,     0,  -338,
    -338,   247,     0,  -338,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,     0,     0,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
     927,   268,   269,   270,     0,     0,     0,     0,     0,     0,
       0,   273,     0,   274,     0,   275,     0,   276,   277,   278,
     279,   280,     0,   282,     0,   283,     0,     0,     0,   285,
     286,     0,     0,     0,     0,     0,     0,   289,     0,     0,
       0,   290,   291,   292,   293,   294,    26,     0,     0,   295,
     296,   297,     0,     0,   298,     0,     0,     0,     0,   299,
       0,     0,     0,     0,   301,     0,   302,   303,     0,   304,
     305,   928,     0,     0,   306,     0,     0,     0,   308,   309,
       0,     0,   310,   929,     0,   311,   312,     0,     0,     0,
       0,     0,   313,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,     0,     0,    32,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   339,
     340,   341,   342,     0,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,     0,   354,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,     0,
       0,   367,   368,   369,   370,     0,     0,     0,     0,   372,
       0,     0,     0,   373,     0,   374,   375,   376,     0,   377,
     378,   379,   930,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   384,   385,     0,     0,     0,
       0,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,     0,     0,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   407,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
       0,     0,   423,     0,   425,    41,     0,   426,     0,     0,
       0,   428,     0,     0,   430,   431,     0,   432,   931,   433,
       0,     0,   434,     0,   436,   437,   438,   439,   440,   441,
     442,     0,   444,   445,     0,   446,     0,     0,     0,     0,
     448,   449,   450,     0,     0,     0,     0,   452,     0,     0,
       0,     0,     0,     0,   455,     0,     0,   458,   459,     0,
     460,     0,   462,     0,   464,   465,     0,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,     0,   472,     0,     0,     0,   473,     0,
       0,     0,   475,     0,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
       0,   488,   489,   490,   491,     0,     0,   492,   493,     0,
     494,   495,   496,   497,     0,     0,     0,     0,     0,   498,
     499,   500,     0,     0,     0,     0,   502,   503,   504,     0,
     505,   506,     0,   507,   508,     0,     0,     0,     0,     0,
     511,     0,     0,   512,     0,     0,     0,   514,   515,     0,
       0,     0,     0,     0,     0,   516,     0,     0,   517,     0,
       0,     0,   518,   519,   520,   521,   522,   523,   524,     0,
       0,    60,     0,     0,     0,   525,     0,     0,   527,     0,
     529,     0,   160,   530,   161,   162,   163,   164,   165,   166,
       0,     0,   167,     0,     0,     0,   168,     0,     0,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,     0,
       0,   925,     0,     0,     0,   180,     0,     0,     0,   181,
       0,     0,   182,   183,   184,     0,   185,     0,     0,     0,
       0,     0,   188,     7,     0,   189,   190,     0,   191,     0,
       0,     0,     0,     0,   195,   196,   197,   926,   199,   200,
       0,   201,   202,     0,     0,     0,     0,     0,     0,   208,
       0,   210,     0,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,     0,   222,     0,   223,     0,     0,
     224,     0,     0,   225,     0,   226,     0,     0,   227,     0,
     228,     0,     0,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,     0,   233,     0,     0,     0,     0,     0,
     235,     0,   236,     0,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,     0,     0,
       0,   244,   245,   246,     0,  -358,     0,   247,     0,  -358,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   257,   258,   259,     0,     0,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,   927,   268,   269,   270,
       0,     0,     0,     0,     0,     0,     0,   273,     0,   274,
       0,   275,     0,   276,   277,   278,   279,   280,     0,   282,
       0,   283,     0,     0,     0,   285,   286,     0,     0,     0,
       0,     0,     0,   289,     0,     0,     0,   290,   291,   292,
     293,   294,    26,     0,     0,   295,   296,   297,     0,     0,
     298,     0,     0,     0,     0,   299,     0,     0,     0,     0,
     301,     0,   302,   303,     0,   304,   305,   928,     0,     0,
     306,     0,     0,     0,   308,   309,     0,     0,   310,   929,
       0,   311,   312,     0,     0,     0,     0,     0,   313,   314,
       0,   315,     0,   316,     0,   317,   318,     0,     0,     0,
       0,    32,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,     0,   339,   340,   341,   342,     0,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,     0,   354,     0,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,     0,     0,   367,   368,   369,
     370,     0,     0,     0,     0,   372,     0,     0,     0,   373,
       0,   374,   375,   376,     0,   377,   378,   379,   930,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   384,   385,     0,     0,     0,     0,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
       0,     0,   399,   400,     0,   401,     0,   402,   403,   404,
     405,   406,     0,   407,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,     0,   421,     0,     0,   423,     0,
     425,    41,     0,   426,     0,     0,     0,   428,     0,     0,
     430,   431,     0,   432,   931,   433,     0,     0,   434,     0,
     436,   437,   438,   439,   440,   441,   442,     0,   444,   445,
       0,   446,     0,     0,     0,     0,   448,   449,   450,     0,
       0,     0,     0,   452,     0,     0,     0,     0,     0,     0,
     455,     0,     0,   458,   459,     0,   460,     0,   462,     0,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,     0,
     472,     0,     0,     0,   473,     0,     0,     0,   475,     0,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,     0,   488,   489,   490,
     491,     0,     0,   492,   493,     0,   494,   495,   496,   497,
       0,     0,     0,     0,     0,   498,   499,   500,     0,     0,
       0,     0,   502,   503,   504,     0,   505,   506,     0,   507,
     508,     0,     0,     0,     0,     0,   511,     0,     0,   512,
       0,     0,     0,   514,   515,     0,     0,     0,     0,     0,
       0,   516,     0,     0,   517,     0,     0,     0,   518,   519,
     520,   521,   522,   523,   524,  -358,     0,    60,     0,     0,
       0,   525,     0,     0,   527,     0,   529,     0,   160,   530,
     161,   162,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,     0,     0,   925,     0,     0,
       0,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,     0,     0,     0,     0,   188,     7,
       0,   189,   190,     0,   191,     0,     0,     0,     0,     0,
     195,   196,   197,   926,   199,   200,     0,   201,   202,     0,
       0,     0,     0,     0,     0,   208,     0,   210,     0,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
       0,   222,     0,   223,     0,     0,   224,     0,     0,   225,
       0,   226,     0,     0,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,     0,     0,     0,     0,     0,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,     0,     0,     0,   244,   245,   246,
       0,  -355,     0,   247,     0,  -355,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
       0,     0,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,   927,   268,   269,   270,     0,     0,     0,     0,
       0,     0,     0,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,     0,   282,     0,   283,     0,     0,
       0,   285,   286,     0,     0,     0,     0,     0,     0,   289,
       0,     0,     0,   290,   291,   292,   293,   294,    26,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
       0,   299,     0,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,   928,     0,     0,   306,     0,     0,     0,
     308,   309,     0,     0,   310,   929,     0,   311,   312,     0,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,     0,     0,    32,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
       0,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   930,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   384,   385,     0,
       0,     0,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,     0,     0,   399,   400,
       0,   401,     0,   402,   403,   404,   405,   406,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,     0,     0,   423,     0,   425,    41,     0,   426,
       0,     0,     0,   428,     0,     0,   430,   431,     0,   432,
     931,   433,     0,     0,   434,     0,   436,   437,   438,   439,
     440,   441,   442,     0,   444,   445,     0,   446,     0,     0,
       0,     0,   448,   449,   450,     0,     0,     0,     0,   452,
       0,     0,     0,     0,     0,     0,   455,     0,     0,   458,
     459,     0,   460,     0,   462,     0,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,     0,   472,     0,     0,     0,
     473,     0,     0,     0,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,     0,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,     0,     0,     0,     0,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,     0,     0,
       0,     0,   511,     0,     0,   512,     0,     0,     0,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,  -355,     0,    60,     0,     0,     0,   525,     0,     0,
     527,     0,   529,     0,   160,   530,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,     0,     0,   925,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
       0,     0,     0,     0,   188,     7,     0,   189,   190,     0,
     191,     0,     0,     0,     0,     0,   195,   196,   197,   926,
     199,   200,     0,   201,   202,     0,     0,     0,     0,     0,
       0,   208,     0,   210,     0,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,     0,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,     0,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
       0,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,  1442,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,     0,     0,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,   927,   268,
     269,   270,     0,     0,     0,     0,     0,     0,     0,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
       0,   282,     0,   283,     0,     0,     0,   285,   286,     0,
       0,     0,     0,     0,     0,   289,     0,     0,     0,   290,
     291,   292,   293,   294,    26,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,     0,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,   928,
       0,     0,   306,     0,     0,     0,   308,   309,     0,     0,
     310,   929,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,    32,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,     0,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     930,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   384,   385,     0,     0,     0,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,     0,     0,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,     0,     0,
     423,     0,   425,    41,     0,   426,     0,     0,     0,   428,
       0,     0,   430,   431,     0,   432,   931,   433,     0,     0,
     434,     0,   436,   437,   438,   439,   440,   441,   442,     0,
     444,   445,     0,   446,     0,     0,     0,     0,   448,   449,
     450,     0,     0,     0,     0,   452,     0,     0,     0,     0,
       0,     0,   455,     0,     0,   458,   459,     0,   460,     0,
     462,     0,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,     0,   472,     0,     0,     0,   473,     0,     0,     0,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,     0,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,     0,     0,     0,     0,   511,     0,
       0,   512,     0,     0,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,    60,
       0,     0,     0,   525,     0,     0,   527,     0,   529,     0,
     160,   530,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,     0,     0,   925,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,     0,     0,     0,     0,
     188,     7,     0,   189,   190,     0,   191,     0,     0,     0,
       0,     0,   195,   196,   197,   926,   199,   200,     0,   201,
     202,     0,     0,     0,     0,     0,     0,   208,     0,   210,
       0,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,     0,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,     0,     0,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,     0,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,  -360,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,     0,     0,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,   927,   268,   269,   270,     0,     0,
       0,     0,     0,     0,     0,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,     0,   282,     0,   283,
       0,     0,     0,   285,   286,     0,     0,     0,     0,     0,
       0,   289,     0,     0,     0,   290,   291,   292,   293,   294,
      26,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,     0,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,   928,     0,     0,   306,     0,
       0,     0,   308,   309,     0,     0,   310,   929,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,    32,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,     0,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   930,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   384,
     385,     0,     0,     0,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,     0,     0,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,     0,     0,   423,     0,   425,    41,
       0,   426,     0,     0,     0,   428,     0,     0,   430,   431,
       0,   432,   931,   433,     0,     0,   434,     0,   436,   437,
     438,   439,   440,   441,   442,     0,   444,   445,     0,   446,
       0,     0,     0,     0,   448,   449,   450,     0,     0,     0,
       0,   452,     0,     0,     0,     0,     0,     0,   455,     0,
       0,   458,   459,     0,   460,     0,   462,     0,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,     0,   472,     0,
       0,     0,   473,     0,     0,     0,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
       0,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,     0,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
       0,     0,     0,     0,   511,     0,     0,   512,     0,     0,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,    60,     0,     0,     0,   525,
       0,     0,   527,     0,   529,     0,   160,   530,   161,   162,
     163,   164,   165,   166,     0,     0,   167,     0,     0,     0,
     168,     0,     0,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,     0,     0,   925,     0,     0,     0,   180,
       0,     0,     0,   181,     0,     0,   182,   183,   184,     0,
     185,     0,     0,     0,     0,     0,   188,     7,     0,   189,
     190,     0,   191,     0,     0,     0,     0,     0,   195,   196,
     197,   926,   199,   200,     0,   201,   202,     0,     0,     0,
       0,     0,     0,   208,     0,   210,     0,   212,   213,   214,
     215,     0,   216,   217,     0,   218,   219,   220,     0,   222,
       0,   223,     0,     0,   224,     0,     0,   225,     0,   226,
       0,     0,   227,     0,   228,     0,     0,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,     0,   233,     0,
       0,     0,     0,     0,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,     0,     0,     0,   244,   245,   246,     0,     0,
       0,   247,     0,  3162,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,     0,     0,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
     927,   268,   269,   270,     0,     0,     0,     0,     0,     0,
       0,   273,     0,   274,     0,   275,     0,   276,   277,   278,
     279,   280,     0,   282,     0,   283,     0,     0,     0,   285,
     286,     0,     0,     0,     0,     0,     0,   289,     0,     0,
       0,   290,   291,   292,   293,   294,    26,     0,     0,   295,
     296,   297,     0,     0,   298,     0,     0,     0,     0,   299,
       0,     0,     0,     0,   301,     0,   302,   303,     0,   304,
     305,   928,     0,     0,   306,     0,     0,     0,   308,   309,
       0,     0,   310,   929,     0,   311,   312,     0,     0,     0,
       0,     0,   313,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,     0,     0,    32,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   339,
     340,   341,   342,     0,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,     0,   354,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,     0,
       0,   367,   368,   369,   370,     0,     0,     0,     0,   372,
       0,     0,     0,   373,     0,   374,   375,   376,     0,   377,
     378,   379,   930,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   384,   385,     0,     0,     0,
       0,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,     0,     0,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   407,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
       0,     0,   423,     0,   425,    41,     0,   426,     0,     0,
       0,   428,     0,     0,   430,   431,     0,   432,   931,   433,
       0,     0,   434,     0,   436,   437,   438,   439,   440,   441,
     442,     0,   444,   445,     0,   446,     0,     0,     0,     0,
     448,   449,   450,     0,     0,     0,     0,   452,     0,     0,
       0,     0,     0,     0,   455,     0,     0,   458,   459,     0,
     460,     0,   462,     0,   464,   465,     0,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,     0,   472,     0,     0,     0,   473,     0,
       0,     0,   475,     0,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
       0,   488,   489,   490,   491,     0,     0,   492,   493,     0,
     494,   495,   496,   497,     0,     0,     0,     0,     0,   498,
     499,   500,     0,     0,     0,     0,   502,   503,   504,     0,
     505,   506,     0,   507,   508,     0,     0,     0,     0,     0,
     511,     0,     0,   512,     0,     0,     0,   514,   515,     0,
       0,     0,     0,     0,     0,   516,     0,     0,   517,     0,
       0,     0,   518,   519,   520,   521,   522,   523,   524,     0,
       0,    60,     0,     0,     0,   525,     0,     0,   527,     0,
     529,     0,   160,   530,   161,   162,   163,   164,   165,   166,
       0,     0,   167,     0,     0,     0,   168,     0,     0,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,     0,
       0,   925,     0,     0,     0,   180,     0,     0,     0,   181,
       0,     0,   182,   183,   184,     0,   185,     0,     0,     0,
       0,     0,   188,     7,     0,   189,   190,     0,   191,     0,
       0,     0,     0,     0,   195,   196,   197,   926,   199,   200,
       0,   201,   202,     0,     0,     0,     0,     0,     0,   208,
       0,   210,     0,   212,   213,   214,   215,     0,   216,   217,
       0,   218,   219,   220,     0,   222,     0,   223,     0,     0,
     224,     0,     0,   225,     0,   226,     0,     0,   227,     0,
     228,     0,     0,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,     0,   233,     0,     0,     0,     0,     0,
     235,     0,   236,     0,     0,     0,     0,   237,     0,   238,
     239,   240,   241,   242,     0,     0,     0,     0,     0,     0,
       0,   244,   245,   246,     0,     0,     0,   247,     0,  3309,
     249,     0,   250,   251,   252,     0,   253,   254,     0,   255,
     256,   257,   258,   259,     0,     0,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,   927,   268,   269,   270,
       0,     0,     0,     0,     0,     0,     0,   273,     0,   274,
       0,   275,     0,   276,   277,   278,   279,   280,     0,   282,
       0,   283,     0,     0,     0,   285,   286,     0,     0,     0,
       0,     0,     0,   289,     0,     0,     0,   290,   291,   292,
     293,   294,    26,     0,     0,   295,   296,   297,     0,     0,
     298,     0,     0,     0,     0,   299,     0,     0,     0,     0,
     301,     0,   302,   303,     0,   304,   305,   928,     0,     0,
     306,     0,     0,     0,   308,   309,     0,     0,   310,   929,
       0,   311,   312,     0,     0,     0,     0,     0,   313,   314,
       0,   315,     0,   316,     0,   317,   318,     0,     0,     0,
       0,    32,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,     0,   339,   340,   341,   342,     0,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,     0,   354,     0,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,     0,     0,   367,   368,   369,
     370,     0,     0,     0,     0,   372,     0,     0,     0,   373,
       0,   374,   375,   376,     0,   377,   378,   379,   930,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   384,   385,     0,     0,     0,     0,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
       0,     0,   399,   400,     0,   401,     0,   402,   403,   404,
     405,   406,     0,   407,   408,   409,     0,     0,   410,     0,
       0,     0,   411,   412,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,     0,   421,     0,     0,   423,     0,
     425,    41,     0,   426,     0,     0,     0,   428,     0,     0,
     430,   431,     0,   432,   931,   433,     0,     0,   434,     0,
     436,   437,   438,   439,   440,   441,   442,     0,   444,   445,
       0,   446,     0,     0,     0,     0,   448,   449,   450,     0,
       0,     0,     0,   452,     0,     0,     0,     0,     0,     0,
     455,     0,     0,   458,   459,     0,   460,     0,   462,     0,
     464,   465,     0,     0,     0,     0,     0,     0,   466,   467,
       0,   468,     0,     0,   469,     0,     0,     0,   470,     0,
     472,     0,     0,     0,   473,     0,     0,     0,   475,     0,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,     0,   488,   489,   490,
     491,     0,     0,   492,   493,     0,   494,   495,   496,   497,
       0,     0,     0,     0,     0,   498,   499,   500,     0,     0,
       0,     0,   502,   503,   504,     0,   505,   506,     0,   507,
     508,     0,     0,     0,     0,     0,   511,     0,     0,   512,
       0,     0,     0,   514,   515,     0,     0,     0,     0,     0,
       0,   516,     0,     0,   517,     0,     0,     0,   518,   519,
     520,   521,   522,   523,   524,     0,     0,    60,     0,     0,
       0,   525,     0,     0,   527,     0,   529,     0,   160,   530,
     161,   162,   163,   164,   165,   166,     0,     0,   167,     0,
       0,     0,   168,     0,     0,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,     0,     0,   925,     0,     0,
       0,   180,     0,     0,     0,   181,     0,     0,   182,   183,
     184,     0,   185,     0,     0,     0,     0,     0,   188,     7,
       0,   189,   190,     0,   191,     0,     0,     0,     0,     0,
     195,   196,   197,   926,   199,   200,     0,   201,   202,     0,
       0,     0,     0,     0,     0,   208,     0,   210,     0,   212,
     213,   214,   215,     0,   216,   217,     0,   218,   219,   220,
       0,   222,     0,   223,     0,     0,   224,     0,     0,   225,
       0,   226,     0,     0,   227,     0,   228,     0,     0,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,     0,
     233,     0,     0,     0,     0,     0,   235,     0,   236,     0,
       0,     0,     0,   237,     0,   238,   239,   240,   241,   242,
       0,     0,     0,     0,     0,     0,     0,   244,   245,   246,
       0,     0,     0,   247,     0,  -342,   249,     0,   250,   251,
     252,     0,   253,   254,     0,   255,   256,   257,   258,   259,
       0,     0,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,   927,   268,   269,   270,     0,     0,     0,     0,
       0,     0,     0,   273,     0,   274,     0,   275,     0,   276,
     277,   278,   279,   280,     0,   282,     0,   283,     0,     0,
       0,   285,   286,     0,     0,     0,     0,     0,     0,   289,
       0,     0,     0,   290,   291,   292,   293,   294,    26,     0,
       0,   295,   296,   297,     0,     0,   298,     0,     0,     0,
       0,   299,     0,     0,     0,     0,   301,     0,   302,   303,
       0,   304,   305,   928,     0,     0,   306,     0,     0,     0,
     308,   309,     0,     0,   310,   929,     0,   311,   312,     0,
       0,     0,     0,     0,   313,   314,     0,   315,     0,   316,
       0,   317,   318,     0,     0,     0,     0,    32,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   339,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,     0,   354,     0,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,     0,     0,   367,   368,   369,   370,     0,     0,     0,
       0,   372,     0,     0,     0,   373,     0,   374,   375,   376,
       0,   377,   378,   379,   930,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   384,   385,     0,
       0,     0,     0,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,     0,     0,   399,   400,
       0,   401,     0,   402,   403,   404,   405,   406,     0,   407,
     408,   409,     0,     0,   410,     0,     0,     0,   411,   412,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
       0,   421,     0,     0,   423,     0,   425,    41,     0,   426,
       0,     0,     0,   428,     0,     0,   430,   431,     0,   432,
     931,   433,     0,     0,   434,     0,   436,   437,   438,   439,
     440,   441,   442,     0,   444,   445,     0,   446,     0,     0,
       0,     0,   448,   449,   450,     0,     0,     0,     0,   452,
       0,     0,     0,     0,     0,     0,   455,     0,     0,   458,
     459,     0,   460,     0,   462,     0,   464,   465,     0,     0,
       0,     0,     0,     0,   466,   467,     0,   468,     0,     0,
     469,     0,     0,     0,   470,     0,   472,     0,     0,     0,
     473,     0,     0,     0,   475,     0,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,     0,   488,   489,   490,   491,     0,     0,   492,
     493,     0,   494,   495,   496,   497,     0,     0,     0,     0,
       0,   498,   499,   500,     0,     0,     0,     0,   502,   503,
     504,     0,   505,   506,     0,   507,   508,     0,     0,     0,
       0,     0,   511,     0,     0,   512,     0,     0,     0,   514,
     515,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     517,     0,     0,     0,   518,   519,   520,   521,   522,   523,
     524,     0,     0,    60,     0,     0,     0,   525,     0,     0,
     527,     0,   529,     0,   160,   530,   161,   162,   163,   164,
     165,   166,     0,     0,   167,     0,     0,     0,   168,     0,
       0,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,     0,     0,   925,     0,     0,     0,   180,     0,     0,
       0,   181,     0,     0,   182,   183,   184,     0,   185,     0,
       0,     0,     0,     0,   188,     7,     0,   189,   190,     0,
     191,     0,     0,     0,     0,     0,   195,   196,   197,   926,
     199,   200,     0,   201,   202,     0,     0,     0,     0,     0,
       0,   208,     0,   210,     0,   212,   213,   214,   215,     0,
     216,   217,     0,   218,   219,   220,     0,   222,     0,   223,
       0,     0,   224,     0,     0,   225,     0,   226,     0,     0,
     227,     0,   228,     0,     0,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,     0,   233,     0,     0,     0,
       0,     0,   235,     0,   236,     0,     0,     0,     0,   237,
       0,   238,   239,   240,   241,   242,     0,     0,     0,     0,
       0,     0,     0,   244,   245,   246,     0,     0,     0,   247,
       0,     0,   249,     0,   250,   251,   252,     0,   253,   254,
       0,   255,   256,   257,   258,   259,     0,     0,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,   927,   268,
     269,   270,     0,     0,     0,     0,     0,     0,     0,   273,
       0,   274,     0,   275,     0,   276,   277,   278,   279,   280,
       0,   282,     0,   283,     0,     0,     0,   285,   286,     0,
       0,     0,     0,     0,     0,   289,     0,     0,     0,   290,
     291,   292,   293,   294,    26,     0,     0,   295,   296,   297,
       0,     0,   298,     0,     0,     0,     0,   299,     0,     0,
       0,     0,   301,     0,   302,   303,     0,   304,   305,   928,
       0,     0,   306,     0,     0,     0,   308,   309,     0,     0,
     310,   929,     0,   311,   312,     0,     0,     0,     0,     0,
     313,   314,     0,   315,     0,   316,     0,   317,   318,     0,
       0,     0,     0,    32,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   339,   340,   341,
     342,     0,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,     0,
     354,     0,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,     0,     0,   367,
     368,   369,   370,     0,     0,     0,     0,   372,     0,     0,
       0,   373,     0,   374,   375,   376,     0,   377,   378,   379,
     930,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   384,   385,     0,     0,     0,     0,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,     0,     0,   399,   400,     0,   401,     0,   402,
     403,   404,   405,   406,     0,   407,   408,   409,     0,     0,
     410,     0,     0,     0,   411,   412,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,     0,   421,     0,     0,
     423,     0,   425,    41,     0,   426,     0,     0,     0,   428,
       0,     0,   430,   431,     0,   432,   931,   433,     0,     0,
     434,     0,   436,   437,   438,   439,   440,   441,   442,     0,
     444,   445,     0,   446,     0,     0,     0,     0,   448,   449,
     450,     0,     0,     0,     0,   452,     0,     0,     0,     0,
       0,     0,   455,     0,     0,   458,   459,     0,   460,     0,
     462,     0,   464,   465,     0,     0,     0,     0,     0,     0,
     466,   467,     0,   468,     0,     0,   469,     0,     0,     0,
     470,     0,   472,     0,     0,     0,   473,     0,     0,     0,
     475,     0,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,     0,   488,
     489,   490,   491,     0,     0,   492,   493,     0,   494,   495,
     496,   497,     0,     0,     0,     0,     0,   498,   499,   500,
       0,     0,     0,     0,   502,   503,   504,     0,   505,   506,
       0,   507,   508,     0,     0,     0,     0,     0,   511,     0,
       0,   512,     0,     0,     0,   514,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,   517,     0,     0,     0,
     518,   519,   520,   521,   522,   523,   524,     0,     0,    60,
       0,     0,     0,   525,     0,     0,   527,     0,   529,     0,
     160,   530,   161,   162,   163,   164,   165,   166,     0,     0,
     167,     0,     0,     0,   168,     0,     0,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,     0,     0,   925,
       0,     0,     0,   180,     0,     0,     0,   181,     0,     0,
     182,   183,   184,     0,   185,     0,     0,     0,     0,     0,
     188,     7,     0,   189,   190,     0,   191,     0,     0,     0,
       0,     0,   195,   196,   197,   926,   199,   200,     0,   201,
     202,     0,     0,     0,     0,     0,     0,   208,     0,   210,
       0,   212,   213,   214,   215,     0,   216,   217,     0,   218,
     219,   220,     0,   222,     0,   223,     0,     0,   224,     0,
       0,   225,     0,   226,     0,     0,   227,     0,   228,     0,
       0,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,     0,   233,     0,     0,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,   237,     0,   238,   239,   240,
     241,   242,     0,     0,     0,     0,     0,     0,     0,   244,
     245,   246,     0,     0,     0,   247,     0,     0,   249,     0,
     250,   251,   252,     0,   253,   254,     0,   255,   256,   257,
     258,   259,     0,     0,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,   927,   268,   269,   270,     0,     0,
       0,     0,     0,     0,     0,   273,     0,   274,     0,   275,
       0,   276,   277,   278,   279,   280,     0,   282,     0,   283,
       0,     0,     0,   285,   286,     0,     0,     0,     0,     0,
       0,   289,     0,     0,     0,   290,   291,   292,   293,   294,
      26,     0,     0,   295,   296,   297,     0,     0,   298,     0,
       0,     0,     0,   299,     0,     0,     0,     0,   301,     0,
     302,   303,     0,   304,   305,   928,     0,     0,   306,     0,
       0,     0,   308,   309,     0,     0,   310,   929,     0,   311,
     312,     0,     0,     0,     0,     0,   313,   314,     0,   315,
       0,   316,     0,   317,   318,     0,     0,     0,     0,    32,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   339,   340,   341,   342,     0,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,     0,   354,     0,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,     0,     0,   367,   368,   369,   370,     0,
       0,     0,     0,   372,     0,     0,     0,   373,     0,   374,
     375,   376,     0,   377,   378,   379,   930,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   384,
     385,     0,     0,     0,     0,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,     0,     0,
     399,   400,     0,   401,     0,   402,   403,   404,   405,   406,
       0,   407,   408,   409,     0,     0,   410,     0,     0,     0,
     411,   412,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,     0,   421,     0,     0,   423,     0,   425,    41,
       0,   426,     0,     0,     0,   428,     0,     0,   430,   431,
       0,   432,   931,   433,     0,     0,   434,     0,   436,   437,
     438,   439,   440,   441,   442,     0,   444,   445,     0,   446,
       0,     0,     0,     0,   448,   449,   450,     0,     0,     0,
       0,   452,     0,     0,     0,     0,     0,     0,   455,     0,
       0,   458,   459,     0,   460,     0,   462,     0,   464,   465,
       0,     0,     0,     0,     0,     0,   466,   467,     0,   468,
       0,     0,   469,     0,     0,     0,   470,     0,   472,     0,
       0,     0,   473,     0,     0,     0,   475,     0,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,     0,   488,   489,   490,   491,     0,
       0,   492,   493,     0,   494,   495,   496,   497,     0,     0,
       0,     0,     0,   498,   499,   500,     0,     0,     0,     0,
     502,   503,   504,     0,   505,   506,     0,   507,   508,     0,
       0,     0,     0,     0,   511,     0,     0,  1469,     0,     0,
       0,   514,   515,     0,     0,     0,     0,     0,     0,   516,
       0,     0,   517,     0,     0,     0,   518,   519,   520,   521,
     522,   523,   524,     0,     0,    60,     0,     0,     0,   525,
       0,     0,   527,     0,   529,     0,   160,   530,   161,   162,
     163,   164,   165,   166,     0,     0,   167,     0,     0,     0,
     168,     0,     0,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,     0,     0,     0,     0,     0,     0,   180,
       0,     0,     0,   181,     0,     0,   182,   183,   184,     0,
     185,     0,     0,     0,     0,     0,   188,     0,     0,   189,
     190,     0,   191,     0,     0,     0,     0,     0,   195,   196,
     197,     0,   199,   200,     0,   201,   202,     0,     0,     0,
       0,     0,     0,   208,     0,   210,     0,   212,   213,   214,
     215,     0,   216,   217,     0,   218,   219,   220,     0,   222,
       0,   223,     0,     0,   224,     0,     0,   225,     0,   226,
       0,     0,   227,     0,   228,     0,     0,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,     0,   233,     0,
       0,     0,     0,     0,   235,     0,   236,     0,     0,     0,
       0,   237,     0,   238,   239,   240,   241,   242,     0,     0,
       0,     0,     0,     0,     0,   244,   245,   246,     0,     0,
       0,   247,     0,     0,   249,     0,   250,   251,   252,     0,
     253,   254,     0,   255,   256,   257,   258,   259,     0,     0,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
       0,   268,   269,   270,     0,     0,     0,     0,     0,     0,
       0,   273,     0,   274,     0,   275,     0,   276,   277,   278,
     279,   280,     0,   282,     0,   283,     0,     0,     0,   285,
     286,     0,     0,     0,     0,     0,     0,   289,     0,     0,
       0,   290,   291,   292,   293,   294,     0,     0,     0,   295,
     296,   297,     0,     0,   298,     0,     0,     0,     0,   299,
       0,     0,     0,     0,   301,     0,   302,   303,     0,   304,
     305,     0,     0,     0,   306,     0,     0,     0,   308,   309,
       0,     0,   310,     0,     0,   311,   312,     0,     0,     0,
       0,     0,   313,   314,     0,   315,     0,   316,     0,   317,
     318,     0,     0,     0,     0,     0,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   339,
     340,   341,   342,     0,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,     0,   354,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,     0,
       0,   367,   368,   369,   370,     0,     0,     0,     0,   372,
       0,     0,     0,   373,     0,   374,   375,   376,     0,   377,
     378,   379,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   384,   385,     0,     0,     0,
       0,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,     0,     0,   399,   400,     0,   401,
       0,   402,   403,   404,   405,   406,     0,   407,   408,   409,
       0,     0,   410,     0,     0,     0,   411,   412,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,     0,   421,
       0,     0,   423,     0,   425,     0,     0,   426,     0,     0,
       0,   428,     0,     0,   430,   431,     0,   432,     0,   433,
       0,     0,   434,     0,   436,   437,   438,   439,   440,   441,
     442,     0,   444,   445,     0,   446,     0,     0,     0,     0,
     448,   449,   450,     0,     0,     0,     0,   452,     0,     0,
       0,     0,     0,     0,   455,     0,     0,   458,   459,     0,
     460,     0,   462,     0,   464,   465,     0,     0,     0,     0,
       0,     0,   466,   467,     0,   468,     0,     0,   469,     0,
       0,     0,   470,     0,   472,     0,     0,     0,   473,     0,
       0,     0,   475,     0,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
       0,   488,   489,   490,   491,     0,     0,   492,   493,     0,
     494,   495,   496,   497,     0,     0,     0,     0,     0,   498,
     499,   500,     0,     0,     0,     0,   502,   503,   504,     0,
     505,   506,     0,   507,   508,     0,     0,     0,     0,     0,
     511,     0,     0,   512,     0,     0,     0,   514,   515,     0,
       0,     0,     0,     0,     0,   516,     0,     0,   517,     0,
       0,     0,   518,   519,   520,   521,   522,   523,   524,     0,
       0,     0,     0,     0,     0,   525,     0,     0,   527,     0,
     529,     0,     0,   530
};

static const yytype_int16 yycheck[] =
{
       6,     3,   143,   610,   151,   633,   988,   609,   610,    24,
     932,  1509,    21,  1118,    20,   593,  1015,  1016,    24,  1216,
    1382,  1235,  1037,  1742,    33,   609,     6,  1026,   662,     0,
      36,    40,  1288,   140,     4,   662,   548,  1188,    44,  1510,
    1259,    47,   964,  1510,  1059,    45,    52,  2268,  2111,  2112,
     157,  2268,  2594,    59,  1713,  1430,   642,  1550,  2007,   645,
    1288,   550,   551,   768,  1382,   554,   555,   556,   583,  2366,
     559,   560,   561,  2791,  3075,   928,   929,  1711,   593,  2736,
    2719,  2378,   720,  1122,   567,  1310,   567,  3295,  1354,  2859,
    2507,  2748,  2749,  1318,   109,  1646,   865,  3089,  1122,  2974,
    1319,  1320,  3581,   109,  1323,  1324,  1325,  1326,  1623,  1328,
    1329,  1330,  1331,  1332,  1333,  1334,  1335,   961,   601,   702,
     601,  1225,   705,  1453,  3116,  1433,  1688,  1079,  2065,   135,
    2266,   137,  2468,   139,   140,   141,   613,  1971,  2268,   616,
    2342,  1579,  1678,  2903,  2379,   146,  2116,  3118,  2266,  2757,
    2725,   157,   151,   151,  3543,   151,   151,   137,  2759,   139,
    2699,  1599,  2763,  2342,    13,  3861,  2900,  2901,  3447,  1607,
    1608,  3560,  2906,  2774,  2908,  2634,  1738,  3108,  3448,    20,
    3218,    18,  3250,    13,  2643,  2786,   824,   825,   826,  1035,
    3228,    17,    18,  3914,    17,    18,  3373,    54,   836,    17,
      18,    21,  1154,    17,    18,    75,  2342,  3620,    20,  2866,
    2867,    18,    50,    22,  1060,    37,  4145,    17,    18,    22,
      20,    31,    20,  3720,  2342,  2105,  2873,  2748,  2749,    39,
    1194,  1195,  1196,  1061,    37,   118,    33,    39,    63,  2248,
    1108,  1109,   116,  2258,    21,  2332,   136,  1211,    51,    34,
      67,    91,    83,    62,    63,  3381,    17,    18,  3068,    62,
      63,   198,    27,   201,    39,  2464,   196,    49,   132,   204,
    3225,    27,  4135,   158,    87,    17,    18,  3666,    66,    70,
    1244,   204,   243,  1247,  1152,   326,    73,    73,    17,    18,
     277,    20,    17,    18,    37,   278,    59,   212,    17,    18,
     164,  4354,   379,    84,  1268,  1269,    46,   237,  1272,    12,
      17,    18,   381,   152,   218,   377,    13,   402,   138,   371,
     201,   277,   375,   164,  3646,  1289,  1290,   164,  3948,   237,
      66,  2681,   405,   261,  4628,    89,    17,    18,   457,   379,
     150,   313,    83,    17,    18,  2866,  2867,    20,    17,    18,
     471,    61,    22,    17,    18,   437,   376,   247,   241,   280,
     846,   138,   237,   146,    13,   377,   132,    37,   495,   284,
     251,     9,    17,    18,    13,    21,   408,    13,  3857,   132,
     869,    51,    17,    18,   404,   172,  3357,   202,   965,    17,
      18,   278,    62,    63,   367,   408,   372,    13,   164,    17,
      18,   446,   502,    13,   387,   258,   537,   368,   586,   151,
     166,   164,   530,   928,   929,    17,    18,   932,   597,  3062,
     222,   223,  1688,   631,   136,   241,    17,    18,   632,   633,
      55,    17,    18,    17,    18,   313,   631,   219,  2079,  4160,
     241,    66,   259,   198,   585,     9,   564,   222,   223,   964,
     634,   164,  3436,   661,   659,   427,  3440,   661,    17,    18,
     567,   197,   667,   264,   198,   572,   661,    17,    18,    33,
    4166,  3114,  1738,   183,   447,   275,   201,   187,   243,    72,
     512,   660,   527,    72,   419,   170,   617,   243,   198,   667,
     976,   232,   138,   234,   601,  2845,   419,  2752,   147,   512,
     387,   601,   478,    17,    18,   380,   387,  1084,   147,   294,
     592,   147,   164,  1357,  3927,    17,    18,  3930,  3931,  1224,
     647,  1626,   263,    69,   237,  1111,  1525,  1113,  1114,  1115,
    1116,   147,   504,  2060,  1239,   463,  3082,  3083,  3084,  4833,
     546,   295,   661,   643,  1543,   565,   667,   455,   331,    54,
     623,   557,  3187,   191,   475,    75,   321,  1401,   495,   636,
     386,   567,   568,   389,  4184,   321,   572,   537,   386,   575,
     313,   389,   386,   680,   659,   389,   491,  1054,   565,   432,
     541,  1350,  3620,   589,   287,   400,   386,   427,  1166,   389,
     590,  1174,    17,    18,  3632,   601,   636,   153,   667,   661,
     652,   388,   388,   609,   367,   462,   576,   511,   661,  4662,
    3648,  3649,   368,   619,   597,   355,  2752,   201,   659,  3550,
     330,  2114,   295,  3554,   559,   386,   278,  2640,   389,  4108,
      17,    18,  3954,   639,  2752,  4498,   559,  4500,  3295,  1678,
    3182,   432,   629,   613,   386,  3520,   616,   389,   468,   661,
     620,  1166,   440,  1497,  1678,   494,   662,   386,   664,   284,
     389,   386,  3617,   624,   389,    17,    18,   386,   481,   454,
     389,  2873,   183,   629,   680,  1941,   691,  1382,   608,   386,
    2810,   417,   389,  3558,  1322,   691,  2248,   693,   503,  1201,
    1202,   468,    22,  1537,  2873,  3352,   702,   479,  4627,   705,
    1919,  1339,   708,  2065,  2266,   386,  3353,    37,   389,   715,
     647,  1930,   386,   603,  1933,   389,  1228,   386,   428,  3529,
     389,    51,   386,   661,  1236,   389,  1238,  1573,  2737,   546,
    1576,   541,    62,    63,  1580,  2750,  1582,  2873,  1250,  1251,
    1252,   386,   455,   628,   389,  2694,  1258,  2065,   622,  2187,
    4139,   386,   562,  2633,   389,  2873,   639,   864,   386,   432,
    4173,   389,   768,   565,  1610,  1611,  1612,   598,   386,   576,
    2332,   389,  1724,  4162,   584,  1358,  2975,  1605,   576,   576,
    2342,  2868,  1409,   621,   386,   541,   595,   389,  1752,   659,
     565,   616,   595,   631,   631,   386,  1718,   609,   389,  1667,
     386,   665,   386,   389,   661,   389,   647,   504,   589,  1913,
     659,   621,    17,    18,   640,  3533,  4537,   640,  4539,  4540,
      17,    18,   640,   829,   665,   831,   640,   386,   665,   659,
     389,  3352,   652,   835,  2349,  4012,   386,   659,   664,   389,
     640,  4120,   660,  2040,  4341,   630,   660,   661,   609,   647,
     856,   857,   858,  3979,   860,   861,   862,  4127,   864,  4138,
     866,   661,   598,   863,  1498,  1448,   872,   867,   624,  1352,
    3938,  1498,   386,   148,  1838,   389,   631,   857,  1842,   640,
    3230,   578,   862,    27,   386,  1468,   866,   389,  4277,  3927,
     631,   603,  3930,  3931,   504,  3887,   661,  1374,   640,   665,
     661,   421,  1866,   909,  3942,   661,  3256,  3257,  1015,   924,
    1017,   640,   665,  1020,  1021,   640,  2557,   428,   924,  1688,
     926,   640,  2556,   925,   930,   595,  2645,   661,  3899,  1036,
     486,  2458,  2995,   640,  4655,  4656,   661,  2886,  4659,  2888,
     625,   660,   661,  1577,   537,  3876,  3877,   962,   537,   619,
    1577,   661,   665,   968,   661,   961,   962,   462,   504,   640,
    3215,   386,   968,   636,   389,  3540,   640,  1108,  1109,  1738,
    1117,   640,  3607,  1559,   647,  2526,   640,   629,   226,   660,
     661,   466,  2248,  4679,  3526,   955,  3049,   661,    54,   659,
    3536,   660,   661,    17,    18,   640,   660,   661,     6,   386,
     295,  1478,   389,  1009,    11,   640,   132,  3767,   130,  1015,
     183,  1017,   640,   665,  1020,  1021,   661,   387,   134,  1646,
      17,    18,   640,    20,  2973,   660,   661,    67,   164,  4750,
    1036,  3765,   660,   661,   386,    12,   556,   389,   640,  3578,
    3774,   111,   660,   661,  1527,   708,  1527,    17,    18,   640,
    3662,  4747,    60,   288,   640,   377,   640,   108,   660,   661,
     580,   871,  1648,  1649,  3285,   404,  2332,  3642,  3285,   344,
     661,   154,   377,  1079,  1660,   661,  2342,  4069,   659,  3215,
    1682,   640,    17,    18,  1054,   401,  1056,   377,  3696,   377,
     640,  3550,   480,  3106,  3107,  3554,  3697,  3215,  1104,   243,
     432,  1103,   661,   659,   533,  1105,  1106,   663,   183,  1110,
      83,   661,  1118,  1699,  4055,  2774,  4087,    24,  1117,  1117,
     559,  1117,  1117,  2122,   258,   377,   640,  1142,    17,    18,
     252,  1836,   659,   449,  4523,  4173,  1142,   432,   640,    27,
     119,  3078,   278,   122,   152,  1151,   289,   661,  1154,  3384,
     661,  3353,   486,   963,   389,  3285,   133,   368,  2629,   661,
    2631,  2632,  1645,   129,  2631,  2632,  3136,  2182,  1174,  1184,
    2014,  1151,  2708,  2212,  3353,  2737,  2703,   321,  1184,   295,
    3014,   386,   667,  4665,   389,  2404,   332,    83,  2212,   386,
    2752,   136,   389,  2208,  1301,    17,    18,   204,   861,  4588,
    2351,  3961,  3962,  1718,  2048,  2049,   349,    13,  3968,  3545,
     486,  3971,  3972,  4692,   134,   640,  2743,  3353,  1224,   259,
      17,    18,    17,    18,   368,   201,   565,   193,  3988,  3963,
     166,  1338,  3966,  1239,   196,  3353,   661,    17,    18,    17,
      18,   486,  4002,  2573,   370,  1352,  4006,  4007,  4008,  4009,
    4010,    17,    18,   640,  2479,   428,  2564,  2695,   133,   232,
       0,   234,  3996,  3997,  3998,   595,    17,    18,   175,    75,
    4004,  2485,  2486,   631,   661,   237,  1383,  4011,    17,    18,
      17,    18,  1288,   186,   486,   615,   616,   292,   640,   537,
     263,   661,    13,  4234,  1932,  1301,  4237,   367,   432,   631,
     164,   367,   247,   661,   224,    35,  2868,   243,   391,   661,
    1312,  2873,   434,    17,    18,  2842,  3232,   565,    17,    18,
    2847,  2273,   557,   363,  3936,   659,   292,  2173,  2855,  2856,
    3246,  3247,  1338,   186,  2861,   237,   115,  1343,  2594,   661,
    2186,   636,  3258,  2189,  2190,   661,  1352,   243,   136,  1456,
    2569,  1357,  1358,   428,   245,   243,   661,   365,  4840,  4841,
    2065,  4569,   386,   254,    44,   389,   371,   136,   495,  1952,
    2885,   661,    52,   661,  2478,   295,  1382,  1383,   253,   654,
     655,   656,   657,   659,  2488,   361,    17,    18,   129,   386,
      17,    18,   389,   295,   537,  1401,   462,   541,  4606,  4607,
    3034,    17,    18,  1409,  1374,   371,  1421,  3356,  1414,   661,
    1416,   284,   419,   624,   659,  1421,   386,   563,   663,   389,
    1527,   543,   414,   431,  4903,   433,   147,   647,   494,    17,
      18,  1437,   368,   321,   607,   640,   506,   161,  4646,    17,
      18,   129,  1448,   640,   590,  2701,   225,   171,    17,    18,
    1456,   386,  1422,   278,   389,   660,  1471,   659,  4450,   247,
      17,    18,  1468,   647,   661,  1471,   362,   370,   486,  2052,
    4525,  2737,   368,  2701,   174,  3026,  3027,  3028,   247,  2248,
     624,   129,    17,    18,  1961,   740,   741,    17,    18,   529,
     586,  1497,  1498,   629,   198,  1501,   369,   386,    17,    18,
     389,   392,   201,   224,  1510,   193,   546,  2145,  1478,  1650,
     455,   364,   365,   609,  1520,    17,    18,   370,   215,   526,
     647,  1527,  1528,    37,   254,  4295,   428,   486,  3945,   665,
    4531,  1537,   607,  2548,   222,  2978,   129,  4176,  1645,  4178,
     667,   486,   438,  1549,  1550,   193,   133,   277,  1563,    63,
    1565,   292,  2136,   565,  1560,  1561,  1562,  1563,  1564,  1565,
     815,  1668,   387,  2332,   386,  3224,  3225,   389,  1574,  1575,
    3940,  1577,  4447,  2342,   581,  1581,    17,    18,  1685,  4634,
    1560,  1561,  1562,  2066,  1564,  2066,   661,  1602,   647,   386,
     569,   386,   389,   572,   389,  1575,  1602,   637,  4368,  4369,
    1707,  1581,  2868,    46,   292,   541,   386,  2873,   386,   389,
    1580,   389,   133,   586,   393,   622,   640,   486,    13,   115,
     386,   876,   588,   389,  3095,   404,  2204,    13,  4170,  2215,
     371,  3580,   411,  2219,  2220,   386,   609,   661,   389,  1645,
    1646,   659,   201,   640,   292,   541,   608,   386,    25,   386,
     389,   495,   389,  3215,   666,  4373,  3099,  1672,   603,  2503,
    4030,   385,  1668,  1669,  1670,  1671,  1672,   455,  2865,  2708,
     640,   201,   667,  4697,   191,  2674,  4700,    83,   174,  1685,
     583,   565,   386,   371,  2708,   389,   455,   386,   624,  2204,
     389,   661,    17,    18,  1709,   254,   599,   593,   486,   292,
     659,  1707,  1708,  1709,  3231,   640,  3233,   659,   204,    17,
      18,   441,   155,  3240,   659,   667,  3078,   486,  1724,   628,
    4359,  1691,  1380,   371,   144,   661,   661,  3254,   624,  3645,
     583,   510,   253,   215,  3261,  3262,  2887,  3112,   219,  1745,
     160,  1747,    17,    18,   613,   614,   599,  3274,  3275,  3276,
     267,   640,   147,  3280,  3281,   386,   565,  4054,   389,   386,
    3078,   147,   389,    17,    18,   432,  2991,   219,  2612,   660,
     386,   565,   661,   389,   586,    17,    18,    18,   371,   261,
    2702,   215,   666,   264,    17,    18,   453,   455,    17,    18,
     659,  3353,   495,  3320,  3321,  3322,  1937,  4821,   386,   520,
     521,   389,   523,   647,   525,    17,    18,  3063,   386,  4351,
     565,   389,   264,   279,  2658,   603,   282,   386,   640,    13,
     389,   542,   489,   667,  2823,   235,   232,   606,   234,   386,
    1836,  1837,   389,   235,   603,  3063,    17,    18,   495,   661,
     564,   215,   129,   640,  2482,   640,  1953,   588,    17,    18,
     367,   386,    17,    18,   389,   667,   386,   263,  3055,   389,
     640,  3495,   640,  2375,   661,   659,   661,   386,  2380,  1124,
     389,   659,   565,   142,   640,    17,    18,    17,    18,    17,
      18,   661,  2394,   661,   386,    17,    18,   389,   198,   640,
     659,  1897,   204,    90,  2035,   661,   381,  1555,  1556,  2526,
     588,   640,  2529,   640,   659,   387,   193,    17,    18,  2831,
     661,    34,  4569,   251,  3441,   112,  2428,   254,    17,    18,
      17,    18,   661,   419,   661,  1940,    17,    18,    17,    18,
      17,    18,  1071,  1939,  1940,   222,   640,   274,  1077,  1078,
     588,   640,    17,    18,   647,   386,  1952,  1953,   389,  4606,
    4607,   198,   568,   147,   201,   232,   660,   234,  3617,  2066,
    1966,   660,    85,   429,   667,  1971,   659,    12,  2737,   546,
    1976,  2549,   660,  1979,  2081,  1990,  1991,   287,  1993,  2613,
     557,    17,    18,  2495,  1990,  1991,  2613,  1993,  2566,  4646,
     647,  1961,   245,  4632,  4633,   588,    50,    17,    18,    17,
      18,   254,  2017,   201,  3260,   292,  2021,  4144,  2014,   640,
     667,  2017,  2119,   640,   614,  2021,  4153,  2500,   653,  2500,
      17,    18,   162,   494,   640,   660,    81,   199,   556,   660,
     224,   559,  3260,   660,  2549,  2050,  2051,   505,  3697,   162,
     287,   505,  2048,  2049,  2050,  2051,  2052,    17,    18,   660,
    2565,  2566,   640,    17,    18,   295,  2071,  2072,  2073,  2065,
    2066,   386,   640,   559,   389,  2071,  2072,  2073,    17,    18,
     115,   640,   660,   364,   365,  2081,  2046,  2679,   386,   653,
    3573,   389,   660,   640,   371,   581,   660,  3353,   133,  2104,
    2096,   660,   486,  3075,   622,  2679,   105,  4751,  2104,  2868,
      17,    18,   665,   660,  2873,   640,   235,   419,  2114,  3031,
     640,   386,   284,  2119,   389,   241,    17,    18,   609,   492,
    1991,   640,  1993,   241,   556,   660,   622,   559,   556,   174,
    2136,   559,   386,  3148,    81,   389,   127,  3767,   640,   392,
     616,   660,   197,   619,   386,  1402,  3360,   389,  1405,  4803,
    2156,  1408,  4806,   386,   660,   661,   389,   386,   660,   204,
     389,   559,  3161,    17,    18,    17,    18,    17,    18,   660,
     661,  3546,  2172,  2188,   386,  3389,  3390,   389,   606,  1136,
    1137,  2151,  2188,  2153,  4838,   241,   241,  2702,  3041,  3042,
    3043,  3044,    62,    63,   148,    17,    18,   369,  3412,   640,
    2071,  2072,  2073,    73,   667,   386,    17,    18,   389,   264,
     609,  2217,  2218,  3057,   526,  2221,   129,   386,   174,   660,
     389,   386,    17,    18,   389,   604,  1183,   660,   661,    17,
      18,   518,   559,  3430,   526,   244,    17,    18,  2218,   230,
     661,    17,    18,   288,   386,   659,   386,   389,   386,   389,
     197,   389,   261,   158,   386,   576,  2271,   389,  2836,  2366,
     609,     6,   661,  2233,   273,  2271,   659,  2273,   667,   581,
     659,  2378,  2242,  2243,  3530,   659,   386,   660,   661,   389,
     193,    17,    18,    18,    20,   660,   661,   386,   179,   386,
     389,   414,   389,   556,   241,   386,   559,   386,   389,   386,
     389,   588,   389,    18,   660,   661,   659,    66,  3154,   222,
     622,   386,   661,   436,   389,   640,  2831,   264,   667,   660,
     661,  2836,    81,  3579,   660,   661,   520,   521,   522,   523,
     524,   525,   640,   659,    93,   660,   486,  2343,  3968,   659,
    2346,  3971,  3972,   334,   494,  3282,   355,   338,   542,   472,
     386,  3579,   660,   389,   345,   659,   568,   659,  3988,   622,
    2366,   659,   417,   659,  2471,   640,   386,   661,   386,   389,
     659,   389,  2378,  3078,   419,  3312,  4006,   627,   628,   292,
     630,   659,   632,   659,   556,   660,   640,   559,   659,   386,
     344,   659,   389,  2500,   659,  2502,  3318,   659,   640,  3026,
    3027,  3028,   660,   661,  4344,  4468,   660,   640,  4348,   532,
     781,   640,   565,   148,   660,   661,   386,   179,   660,   389,
     201,   659,   386,  4644,   659,   389,  4643,   660,   640,   660,
     661,   660,   803,   148,   659,   426,   568,   386,   197,   659,
     389,   659,  3639,   659,   203,   816,   817,   492,  3082,  3083,
    3084,   244,    17,    18,   401,  3082,  3083,  3084,   371,   640,
     659,   470,   667,   613,   614,  2471,    62,    63,   261,   386,
     417,   640,   389,   659,  2986,   640,   660,   661,   541,   660,
     273,   526,   241,   659,  3086,   386,   660,   661,   389,   659,
    2496,   660,   191,   484,  2500,   660,  2502,  2503,   640,   474,
     640,   659,   640,   660,   661,   264,   205,   659,   640,   659,
     659,  4038,   557,  4040,  2621,  4042,  3031,   609,   660,   384,
    2526,   418,   660,  2529,  3523,   659,  3041,  3042,  3043,  3044,
     640,  3165,   386,   542,   386,   389,   386,   389,  3165,   389,
     659,   640,   659,   640,   660,   661,   659,  3562,   659,   640,
     660,   640,   659,   640,   660,   661,   660,   661,   659,  4086,
    3575,   660,  2568,   660,   386,   640,   659,   389,   267,   660,
     269,   660,  4043,   660,   659,   386,  4043,   622,   389,  4519,
     660,   661,   557,   659,  3353,   660,  4526,   562,  2594,   659,
     129,   386,  2598,   132,   389,   660,   661,   659,   386,  3750,
    3856,   389,   660,   661,   640,   386,  2612,  2613,   389,   344,
     386,    27,   659,   389,    86,  2621,    88,  2724,  2725,   659,
     640,   659,   640,  2629,   660,  2631,  2632,   659,  3856,   344,
     659,   606,   659,  3219,   659,   626,  3238,  3223,   158,   159,
     660,   474,   660,   640,   660,   661,  2652,   622,  2654,   659,
     386,   642,  2658,   389,   193,   664,   660,   661,   417,   659,
     132,   659,   361,   660,   659,  4324,  4325,    83,   129,   659,
     640,   132,   659,  2679,    83,   588,   640,   470,   660,   661,
    3785,   659,  2652,   222,   156,  2656,    17,    18,   659,    61,
     660,   640,  3629,   659,  3950,  2701,   660,   659,   652,   653,
     654,   655,   656,   657,   659,  2711,  2721,  2722,   299,   300,
    2716,   660,   660,   661,   659,  2721,  2722,   416,  2724,  2725,
     192,   659,  3950,   640,   315,   659,  3663,   659,    83,   659,
    4793,   659,   193,   660,   661,    35,  2716,  3674,   659,   640,
    3677,   659,    97,   660,    27,   660,   661,   660,  4467,   542,
     166,   659,    13,   292,   168,  3244,   515,   166,    66,   660,
     659,   222,   497,   498,   659,  4292,  4293,  4294,   184,  2739,
    2740,  2741,  2742,    81,  2744,  2745,   660,   661,   660,   661,
     660,   661,   497,   498,    45,    93,   640,   659,   640,   556,
     640,   205,   123,   124,   125,   126,   127,  2803,   660,   661,
      83,    20,   659,  3318,   659,  4019,   660,   377,   660,   377,
     660,   183,  2818,  4753,  4754,   187,   659,   297,   640,   299,
     300,  4183,   660,   661,  2830,   659,   198,   243,  2834,   640,
     659,   292,   371,  4331,   243,   315,   105,    98,   660,   598,
     661,  4904,   103,   257,   162,   640,  3978,  3979,   148,   660,
    3982,   576,   640,   444,   445,   269,  2997,   660,   661,   640,
     660,   661,   660,   661,   640,   660,   660,   661,   237,  4001,
     660,   661,   660,  2843,  2844,  4007,  2846,   512,  2848,  2849,
    2850,  2851,  2852,  2853,  2854,    52,   105,  2857,  3400,   197,
    2860,   148,   660,   661,  2864,   203,   227,   228,   229,   230,
     665,   184,  3536,   660,   640,   321,   660,   661,   668,  3536,
     371,   266,   660,   661,  3021,   650,   651,   652,   653,   654,
     655,   656,   657,   395,  1276,  1277,   660,   661,   660,   661,
     660,   661,  4064,   241,    52,   650,   651,   652,   653,   654,
     655,   656,   657,  3455,   358,   164,   362,   289,   647,   648,
     649,   661,   368,   362,   254,   384,   264,   377,   330,   368,
     243,   201,   660,   661,   444,   445,   377,   439,   660,   661,
    3572,   660,   661,   660,   661,   244,   480,   277,   597,   198,
      50,  3088,   660,   661,   148,   660,   661,   342,  3572,   660,
     661,   278,   261,   660,   661,   256,   215,   254,   660,   661,
     201,   220,   654,   334,   273,   336,   337,   338,  3014,   494,
    3016,   667,   367,   505,   345,  3021,   660,   661,  3033,  3025,
    3026,  3027,  3028,   660,   661,   244,   173,  3033,   659,   438,
     660,   661,   251,  3619,  3040,   198,  3622,  3623,   321,  4401,
     660,   661,   261,   537,   344,   556,   129,   660,   661,   588,
    3056,  3057,  3043,  3044,   273,   386,   428,  3063,   389,   278,
    3488,  3489,   512,   537,   364,   365,  3831,  3832,   287,   289,
     331,   165,  3078,   198,    92,   430,  3082,  3083,  3084,   362,
     661,  4213,  3088,  4302,   661,   368,   355,   344,   378,  3095,
    4222,  4589,   552,   401,   660,   426,   164,   132,   118,  4231,
       6,  4206,   666,   383,  4236,   117,     4,   485,   377,   417,
     193,    37,   622,  4640,  3120,   666,  4221,   254,   661,   401,
     162,    59,   447,   661,    73,   541,   667,   588,    13,   628,
     660,   660,   541,   147,   395,    83,   355,    63,   129,   222,
      10,   441,  3249,    91,   661,   667,   660,  4207,  4208,   232,
    3120,   234,   483,   484,   660,   660,  4353,   277,   377,  3165,
    4220,   659,   377,  3178,  3170,   667,  3181,  4227,   387,   166,
     118,   526,  3178,   289,   667,  3181,  3182,   666,  4238,  4239,
     344,   289,   289,   289,   593,    52,   289,  4109,   289,   647,
    3170,   661,   661,   119,   556,   659,   122,   497,   498,   235,
     419,   470,   193,   231,   130,   284,   661,   515,   624,   292,
    4466,   201,  3218,   513,   294,   624,    28,   665,   166,   402,
    3229,  3227,  3228,   149,   661,   213,  3235,   576,  3234,   661,
     576,   222,   668,   647,   648,   649,   401,   576,  4466,   661,
     497,   498,   647,  3249,  3250,   661,   198,   629,   661,  3255,
    3259,   470,   661,   514,  3260,  3270,  3265,   661,   541,  3837,
     603,    73,  3271,  3272,  3270,   254,  3236,  3237,  4283,   667,
     661,    83,  4469,   542,    73,   494,  3282,   661,   537,   254,
     654,   255,   554,  3289,  3290,   188,   198,   173,   371,  3295,
     598,   661,   553,   241,  3264,   626,   537,   509,   179,   129,
     204,   292,   132,   174,   406,   143,  3312,   659,   661,   640,
     641,   642,   405,   129,   661,   660,   132,    56,   628,   604,
     132,   661,  3837,   542,   608,  3295,   252,   201,   660,   201,
     318,   319,   660,   497,   498,   323,   324,   325,  3924,   129,
     609,   624,  4264,   660,   660,  3351,   660,   654,   660,  3355,
     650,   651,   652,   653,   654,   655,   656,   657,   660,   660,
     148,   653,   661,   193,   659,   661,   129,   660,   597,   132,
     661,   660,   320,   659,    20,   129,   495,   193,   597,   660,
     371,   660,    28,  4488,  4489,   660,  4491,   660,   659,   148,
     609,   339,   222,   650,   651,   652,   653,   654,   655,   656,
     657,   657,   660,   193,    14,   660,   222,   659,   659,   137,
     629,  4608,   631,   660,   362,   661,  4415,   661,   661,   565,
     232,  4553,   234,  4555,   565,   565,   576,    73,   647,   233,
     193,   357,   222,  3540,   242,  4691,   233,    83,   251,   193,
     661,   660,   661,  3449,   548,   664,   665,  2229,  2230,  4554,
     659,  3457,   264,    12,   659,    13,   213,   201,  4036,   222,
     565,   661,   292,  4691,  2246,   177,   254,   475,   222,   661,
     215,   496,  4669,  2255,  2256,   198,   292,   105,   667,   198,
     659,   659,   275,   667,   661,   661,   132,  3457,   652,   653,
     654,   655,   656,   657,   104,   667,   667,   201,   660,   427,
     661,    39,   292,  3509,   602,   588,   661,   494,   198,  4431,
     661,  4616,   377,  4618,  4619,  4437,    20,   377,   353,   526,
     526,  4036,   526,  4522,  3530,  3531,   136,   526,  3534,   292,
    3536,   526,   485,   377,  3540,  3642,   198,   131,   292,   568,
     661,   371,   152,   604,   105,  2327,  2328,  2329,  2330,  4531,
     659,   647,   364,   365,   288,   371,   344,   647,   370,  3565,
    4779,   207,   647,   647,   174,   377,  3572,  3573,   178,   148,
     647,   647,   647,  3579,   647,   647,   502,   162,  3584,   609,
     190,   371,   647,  3598,   122,   344,   232,   647,   234,   647,
     647,   129,  3598,   541,  4109,  4594,   647,   588,   647,   647,
     647,   105,   647,   213,  3613,   417,   647,  3577,   371,   557,
     647,   667,   250,   647,  3620,   647,   244,   371,   264,   250,
     647,   660,  3624,  3629,  4880,   486,  3632,   660,   647,  4848,
     661,   241,   647,   261,     7,  4891,  3642,   247,    39,  4895,
    3646,   667,  3648,  3649,  4900,   273,   572,   660,   186,   660,
     660,   660,  4880,   576,   576,   193,  3662,  3663,   660,   660,
     164,   105,   660,  4891,   667,   661,   576,  4895,  3674,   661,
      63,  3677,  4900,  3643,   667,   601,   636,   287,   490,   284,
      89,    50,  3652,   244,   222,   223,   659,   659,   647,  3704,
     659,   659,   196,   576,   198,  3701,   647,   384,  3704,  4306,
     261,   201,   201,  3709,   201,   661,   661,   177,  3714,   497,
     498,   215,   273,   261,   261,  3721,   220,   390,   364,   365,
      50,   122,   220,  3729,   370,   341,   119,   355,   129,   122,
    3736,   377,   565,   237,   565,   258,   432,   130,   497,   498,
     244,  3721,   661,   335,   371,     7,   659,   251,   197,  4264,
     118,   377,   118,    58,   292,    81,   149,   261,   588,   401,
     401,   401,   576,    68,   143,   344,   262,  4872,   557,   273,
     262,   417,   588,   557,   278,    50,   401,    82,   143,   401,
     401,   401,   450,   287,   403,   186,   598,   401,   401,    94,
      95,    96,   193,   659,   355,   659,   665,   659,   588,  4427,
     244,   194,   659,   215,  3911,   654,   659,   659,   113,  4731,
     420,   667,   252,   252,   660,   660,   377,   261,   356,   660,
     660,   222,   223,   659,   661,   588,   432,   661,   366,   273,
     440,   660,   370,   371,   588,   667,   660,   660,   448,   660,
    3846,   115,   470,   384,   490,  3851,   456,   654,   659,   659,
    3856,   355,   377,   237,   660,   279,   661,   401,  3828,   252,
     350,   454,   650,   651,   652,   653,   654,   655,   656,   657,
     661,   667,   201,   377,   660,   261,   486,   387,  4485,   261,
     660,   660,   432,   387,   661,   647,   661,   630,   466,   499,
     500,   292,   651,   652,   653,   654,   655,   656,   657,  4898,
     118,   659,   235,   264,   264,  3911,   401,  3913,  3914,   470,
     659,   355,  3918,   576,   542,   419,  4431,   667,   497,   498,
     217,  3927,  4437,   661,  3930,  3931,   661,   660,   665,   203,
    3936,  4853,  3938,   377,   659,  3905,  3942,    50,   660,   488,
     660,   551,   631,   660,  3950,   182,   468,  4054,  3954,   287,
    3956,   275,   598,   213,   565,   356,  4878,   155,   271,   661,
     660,   354,   660,   261,   357,   486,   470,   241,   661,   370,
     371,   581,   261,  4114,   377,   512,  2758,   635,   659,  2761,
    2762,   542,  2764,   659,   661,  2767,  2768,   264,   660,  2771,
     494,   660,   659,   603,  2776,   605,   264,   115,   631,  2781,
    2782,  2783,  2784,  2785,   661,   661,   659,  2789,  2790,   660,
    2792,    20,    83,   415,   377,   377,  2798,  2799,  2800,  2801,
    4026,   240,  2804,  2805,   198,  2807,   470,   565,   333,   198,
     198,   569,   568,   278,   572,   371,   660,  4043,   542,    63,
     252,   434,   660,   660,   266,   583,   351,   341,  4054,   427,
     588,   660,   660,   591,  4024,    18,   174,   660,    28,   660,
      30,   660,   660,   660,   384,   661,   631,   251,   659,    75,
     660,   650,   651,   652,   653,   654,   655,   656,   657,   661,
     667,   609,   609,   659,   419,   660,   204,   661,   659,  2871,
     481,  4693,   660,   597,    20,    65,   609,   179,   542,   132,
     132,   559,   659,   413,   608,   609,   659,   123,   124,   125,
     126,   127,   667,    83,   652,   653,  4263,   659,    87,   504,
     151,    91,   132,   241,    37,   629,   661,   631,   371,  4135,
      83,   341,   181,   144,  4140,   565,   660,   565,  4144,   565,
     264,   559,   659,   647,    97,    37,   613,  4153,   118,   280,
     609,   251,   609,   660,  4160,   661,   660,   661,   383,   464,
     664,   665,   132,   377,   565,   135,   659,  4173,   569,   660,
     288,   572,   317,   619,   619,  4190,   528,   482,   177,   572,
     475,   465,   583,  4192,  4190,   660,   660,   588,   141,   661,
     591,    64,  4198,   384,   547,   603,   166,   471,    50,  4340,
      50,   161,    50,   659,   659,   466,   659,   371,   601,   659,
     251,   227,   228,   229,   230,   377,  4731,   659,   492,  4826,
      15,   659,   603,   132,   264,   264,  4228,    20,   370,   531,
     647,   631,   200,   177,  4240,   567,  4242,   143,   143,   544,
     659,   515,   166,    50,    50,    28,    50,    30,   140,  4255,
     198,   652,   653,  4255,   659,   398,   561,   366,   614,   371,
     163,   660,   232,   660,   234,   659,   661,   659,   548,   659,
     659,   241,   659,   287,   166,    12,   659,   169,   248,    62,
      63,    66,    65,   660,   660,   559,  4301,   659,   562,   660,
      73,   384,  4399,   263,    66,  4301,   414,    50,  4304,    50,
      83,   419,   659,   661,   659,   659,   548,   141,    91,   659,
     198,   660,   151,   266,   206,     5,   377,   377,   334,   660,
     336,   337,   338,    58,   598,   384,   660,   384,   136,   345,
     440,   603,   606,    68,   226,   118,   475,   660,  4853,  4345,
     232,   583,   234,   661,   233,   660,   157,    82,   264,   132,
     320,   593,   135,   471,    50,   477,   237,   494,   371,    94,
      95,    96,   661,  4878,   936,  2509,   659,  2862,   610,   339,
    2656,  4042,  4038,  4040,   492,  4513,  1056,  3211,   113,  1109,
    4158,  4511,   624,   166,  4630,  4800,  1133,  4796,  4338,   342,
    4583,  4032,    52,  4399,   611,  2064,  1976,   289,  3838,  3014,
    2294,   697,  3041,  2565,  2567,  2566,  1182,  1941,  4350,  4411,
     426,   364,   365,  4529,   367,  2268,  1694,  2817,  3672,  3051,
    3850,   313,  3056,  3509,   394,  4599,   396,  4433,  4434,  1453,
    4400,  4695,  3853,  4302,   404,  4848,  4787,  4826,  4485,   557,
    2212,  4167,  2810,  4712,   562,  3918,  3289,  3292,  2818,   232,
    4861,   234,  4673,  3381,   696,  3708,  3979,  3239,   241,  4386,
    4466,  4012,  4411,   581,  4693,   248,  4399,   483,   484,  2724,
    3252,  4051,  2961,  3437,  3432,  3440,  4802,   430,   720,    84,
     263,    84,  4753,   725,  4754,  4626,  4174,  4635,   606,  4526,
    4519,  4345,  4498,  4221,  4500,  2817,  3285,  1083,  1146,  2273,
    4196,  4687,  4609,  2698,   622,    37,   476,  1619,  1735,  2588,
    3937,  1709,  2556,  2050,  3496,  3033,  4426,  2617,  1006,  2465,
    1100,   763,   993,  2110,  3457,  4671,   418,  2374,  2370,  1239,
    2997,  4537,  4673,  4539,  4540,   427,  2644,   320,   780,  3548,
    4546,  2639,  2979,  4503,  4791,  4515,  3736,  4327,  4792,  3812,
     442,  1211,  2489,  3950,  3095,  3442,   339,  1639,  1639,  4142,
    4454,  3281,  4795,  4569,   534,   535,   536,  4141,   460,  4141,
    2343,   541,  3088,   526,    84,  1471,  2550,  4583,  1421,  2593,
    3524,  4583,   824,   825,   826,   827,  3856,   557,  3525,  3579,
     560,  1745,  4691,  4599,   836,   622,   716,  2183,   333,  4569,
    2184,  1568,   610,  4609,  2692,  4712,  1117,   610,   140,   579,
     626,   394,   504,   396,  4629,   507,   351,   109,  3956,  4090,
    1964,   404,  3499,  4629,  1479,   641,   642,   597,  4846,   871,
    4312,   813,  4602,  4603,   166,  4495,  4864,   169,  4895,  4900,
    4646,  4401,  1520,  2677,  3530,   537,  3572,   609,   609,  4655,
    4656,  2139,  1894,  4659,  4795,  2670,  2669,  2021,  4799,  1645,
    1499,   601,  2612,   980,   556,  1411,  4290,   559,  2529,  3016,
     912,  4297,  3297,   602,   206,   987,  4646,  1109,  4785,   150,
     646,  4687,   646,  1647,  1109,  4691,   928,   929,   646,  1109,
     932,    -1,    -1,   476,   226,    -1,    -1,    -1,    -1,    -1,
     232,    -1,   234,    -1,    -1,    -1,  4712,    -1,    -1,    -1,
     952,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   964,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4703,  4704,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4750,    -1,    -1,   482,    -1,    -1,
      -1,   534,   535,   536,    -1,    -1,    -1,   289,   541,    -1,
    4901,    -1,    -1,    -1,    -1,   236,    -1,   238,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,  4785,
    4887,   313,    -1,    -1,    -1,  4791,  4792,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   544,
      -1,    -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   561,   298,   299,   300,
     301,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4880,    -1,    -1,    -1,   661,    -1,
      -1,  4887,    -1,    -1,    -1,  4891,   418,    -1,  4858,  4895,
      -1,    -1,    -1,    -1,  4900,   427,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1162,    -1,    -1,  1165,  1166,    -1,    -1,    -1,   460,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1190,  1191,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1199,  1200,  1201,
    1202,  1203,  1204,  1205,  1206,  1207,  1208,  1209,  1210,    -1,
      -1,    -1,   504,   444,   445,   507,    -1,  1219,  1220,    -1,
    1222,  1223,    -1,    -1,    -1,  1227,  1228,    -1,    -1,  1231,
    1232,  1233,  1234,    -1,  1236,  1237,  1238,    -1,    -1,    -1,
      -1,    -1,    -1,  1245,  1246,   537,  1248,  1249,  1250,  1251,
    1252,    -1,    -1,  1255,  1256,  1257,  1258,  1259,  1260,  1261,
    1262,  1263,  1264,  1265,    -1,  1267,    -1,    -1,  1270,  1271,
      -1,    -1,    -1,  1275,    -1,    -1,    -1,  1279,  1280,  1281,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1291,
    1292,  1293,    -1,    -1,    -1,    -1,    -1,    -1,  1300,    -1,
      -1,    -1,    -1,    -1,    -1,  1307,  1308,  1309,  1310,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1318,  1319,  1320,    -1,
    1322,  1323,  1324,  1325,  1326,    -1,  1328,  1329,  1330,  1331,
    1332,  1333,  1334,  1335,    -1,    -1,    -1,  1339,  1340,    -1,
      -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      -1,    12,    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      28,    -1,    30,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    83,  1425,    -1,    -1,    -1,    -1,    -1,    -1,
      91,    -1,    -1,    -1,    62,    63,    -1,    65,    -1,  1441,
     101,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    -1,   118,    -1,    -1,
      -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   132,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   144,   145,    -1,    -1,    -1,    -1,    -1,
     118,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   160,
      -1,    -1,    -1,   164,   132,   166,    -1,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,  1520,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1535,    -1,   196,    -1,    -1,   166,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1552,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,    -1,    -1,   248,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   263,    -1,   232,    -1,   234,  1609,    -1,    -1,
      -1,    -1,    13,   241,    -1,    -1,    -1,    -1,    -1,    -1,
     248,    -1,    -1,    -1,    -1,    26,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   263,    37,    38,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   320,
      -1,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,   339,    -1,
      -1,    -1,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   320,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,   102,    -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   339,    -1,    -1,    -1,   116,  1718,    -1,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,   387,    -1,    -1,    -1,
      -1,    -1,    -1,   394,    -1,   396,    -1,   138,   139,    -1,
     401,    -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1758,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   165,   166,   394,    -1,   396,   170,
      -1,    -1,   173,    -1,   435,    -1,   404,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   449,   450,
     451,   452,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   202,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   212,    -1,   214,    -1,   476,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   232,    -1,   234,    -1,    -1,    -1,    -1,    -1,   240,
     241,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   476,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1872,  1873,  1874,   534,   535,   536,    -1,    -1,    -1,    -1,
     541,    -1,    -1,   284,    -1,  1887,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   534,   535,   536,    -1,
      -1,  1913,   313,   541,    -1,    -1,    -1,  1919,   579,    -1,
    1922,    -1,  1924,   584,    -1,    -1,    -1,    -1,  1930,   557,
    1932,  1933,   560,    -1,  4476,  4477,   597,    -1,  4480,  4481,
    4482,  4483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   579,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1964,    -1,    -1,    -1,    -1,    -1,    -1,   597,
      -1,    -1,    -1,   624,  4516,    -1,    -1,    -1,    -1,    -1,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,   407,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   418,   419,    -1,
      -1,   422,   423,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   659,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   443,  2045,    -1,   696,    -1,    -1,    -1,    -1,
      -1,    -1,  2054,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4604,  4605,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4613,    -1,    -1,   725,    -1,    -1,    -1,    -1,    -1,
      -1,  2083,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   504,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   763,    -1,  2116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   780,
      -1,    -1,    -1,    -1,    -1,  2137,   537,    -1,    -1,    -1,
     541,    -1,    -1,  2145,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2154,    -1,    -1,    -1,    -1,    -1,   559,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   827,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   617,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   625,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   912,    -1,    -1,    -1,    -1,  2268,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2290,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   952,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2352,    -1,    -1,    -1,  2356,    -1,    -1,    -1,    -1,  2361,
    2362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2370,    -1,
    2372,    -1,  2374,  2375,  2376,  2377,    -1,    -1,  2380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2390,  2391,
      -1,  2393,  2394,    -1,  2396,  2397,  2398,  2399,    -1,  2401,
      -1,    -1,  2404,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2413,    -1,    -1,    -1,    -1,    -1,    -1,  2420,    -1,
    2422,    -1,  2424,  2425,    -1,  2427,  2428,    -1,    -1,    -1,
    2432,  2433,  2434,    -1,    -1,    -1,  2438,  2439,  2440,    -1,
    2442,    -1,  2444,    -1,  2446,    -1,  2448,    -1,  2450,    -1,
      -1,    -1,    -1,  2455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2472,    -1,    -1,    -1,    -1,    -1,    -1,  2479,    -1,    -1,
    2482,    -1,    -1,    -1,    -1,    -1,  2488,    -1,    -1,  2491,
      -1,    -1,    -1,  2495,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1162,    -1,    -1,  1165,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1190,
    1191,    -1,    -1,    -1,    -1,    -1,    -1,  2549,  1199,  1200,
      -1,    -1,  1203,  1204,  1205,  1206,  1207,  1208,  1209,  1210,
      -1,    -1,    -1,  2565,  2566,  2567,    -1,  2569,  1219,  1220,
      -1,  1222,  1223,    -1,    -1,    -1,  1227,    -1,    -1,    -1,
    1231,  1232,  1233,  1234,    -1,    -1,  1237,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1245,  1246,    -1,  1248,  1249,    -1,
      -1,    -1,    -1,    -1,  1255,  1256,  1257,    -1,    -1,  1260,
    1261,  1262,  1263,  1264,  1265,    -1,  1267,    -1,    -1,  1270,
    1271,    -1,    -1,    -1,  1275,    -1,    -1,    -1,  1279,  1280,
    1281,    -1,    -1,    -1,    -1,    28,    -1,    30,    -1,    -1,
    1291,  1292,  1293,    -1,    -1,  2647,    -1,    -1,    -1,  1300,
      -1,    -1,    -1,    -1,    -1,    -1,  1307,  1308,  1309,    -1,
      -1,    -1,    -1,    -1,    14,    -1,    16,    -1,    -1,    62,
      63,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,  1340,
      83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
    2702,    -1,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,  2723,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2736,    85,    -1,    -1,    -1,   132,
      -1,    -1,   135,    -1,    -1,    -1,  2748,  2749,    -1,    -1,
      -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   166,  1425,    -1,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,   138,   139,
    1441,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   151,   152,    -1,    -1,    -1,    -1,    -1,  2810,    -1,
      -1,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   178,  2831,
      -1,    -1,    -1,    -1,  2836,  2837,    -1,    -1,    -1,   232,
      -1,   234,    -1,    -1,    -1,   195,    -1,    -1,   241,    -1,
      -1,    -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,
      -1,   211,    -1,   213,  2866,  2867,    -1,   217,    -1,  1520,
     263,   221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1535,   235,    -1,    -1,    -1,  2891,
      -1,    -1,    -1,  2895,    -1,    -1,    -1,   247,    -1,   249,
      -1,  1552,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,    -1,    -1,
    2922,  2923,    -1,    -1,    -1,    -1,    -1,   320,    -1,    -1,
      -1,    -1,    -1,   283,    -1,    -1,    -1,   287,    -1,    -1,
      -1,  2943,    -1,    -1,   294,    -1,   339,    -1,    -1,    -1,
    2952,    -1,  2954,    -1,  2956,    -1,    -1,    -1,  1609,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2986,    -1,    -1,    -1,    -1,  2991,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3031,
      -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,  3041,
    3042,  3043,  3044,    -1,    -1,    -1,    -1,    -1,    -1,   399,
      -1,   401,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   414,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   476,    -1,    -1,    -1,  3089,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   447,    -1,    -1,
     450,    -1,   452,    -1,   454,   455,    -1,  1758,   458,   459,
      -1,    -1,    -1,    -1,  3116,    -1,    -1,    -1,    -1,   469,
      -1,    -1,   472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     480,    -1,    -1,    -1,  3136,    -1,   486,    -1,    -1,    -1,
      -1,   534,   535,   536,   494,    -1,    -1,    -1,   541,   499,
     500,   501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   532,    -1,    -1,  3187,   579,    -1,    -1,    -1,
     540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1872,  1873,  1874,    -1,    -1,    -1,    36,    37,    -1,
      -1,    -1,    -1,    42,   584,    44,    -1,    46,    47,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,    -1,
     600,    -1,    -1,   603,    63,    -1,    -1,    -1,   608,    -1,
      -1,    -1,  1913,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1922,    -1,  1924,    -1,    -1,    -1,    -1,    -1,    -1,
     630,    -1,    -1,  3285,    -1,    -1,    -1,    -1,   638,    -1,
      -1,    -1,    -1,    -1,   644,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   659,
     119,    -1,    -1,   122,    -1,    -1,  3318,    -1,    -1,    -1,
      -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,
      -1,  3363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,    -1,    -1,    -1,
      -1,  3393,    -1,    -1,  2045,  3397,  3398,    -1,  3400,   208,
     209,    -1,    -1,  2054,    -1,    -1,    -1,  3409,    -1,    14,
      -1,    16,  3414,    -1,    -1,  3417,    -1,  3419,  3420,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      -1,    -1,  2083,    38,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   252,    -1,    -1,    -1,    52,    53,    -1,
      -1,    56,    -1,  3455,    -1,    60,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,  2116,    -1,    -1,    -1,    -1,
      -1,    -1,   281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,   290,   291,    -1,   293,    -1,  2137,    -1,  3490,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
      -1,    -1,    -1,  2154,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   327,   328,
     329,    -1,  3524,   128,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   136,    -1,   138,   139,    -1,    -1,   346,   347,   348,
      -1,    -1,    -1,    -1,    -1,   354,   151,   152,   357,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3561,
      -1,    -1,    -1,    -1,   373,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   178,    -1,    -1,    -1,    -1,    -1,  3581,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     409,   410,    -1,    -1,    -1,  3607,   211,    -1,   213,    -1,
      -1,    -1,   217,    -1,    -1,    -1,   221,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   434,    -1,    -1,    -1,    -1,
     235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2290,
      -1,    -1,   247,    -1,   249,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
      -1,   490,   287,    -1,    -1,   494,    -1,    -1,    -1,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   508,
      -1,  2352,    -1,    -1,    -1,  2356,    -1,    -1,    -1,    -1,
    2361,  2362,    -1,    -1,    -1,    -1,  3718,  3719,    -1,  2370,
      -1,  2372,    -1,  2374,    -1,  2376,  2377,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2390,
    2391,    -1,  2393,    -1,    -1,  2396,  2397,  2398,  2399,    -1,
    2401,    -1,    -1,    -1,    -1,    -1,    -1,   566,    -1,    -1,
     569,    -1,  2413,   572,   573,   574,   575,    -1,    -1,  2420,
      -1,  2422,    -1,  2424,  2425,    -1,  2427,   382,    -1,    -1,
      -1,  2432,  2433,  2434,    -1,    -1,    -1,  2438,  2439,  2440,
      -1,  2442,    -1,  2444,   399,  2446,   401,  2448,    -1,  2450,
      -1,    -1,    -1,    -1,  2455,    -1,   615,   616,    -1,   414,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     425,  2472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   642,    -1,  3837,    -1,  2488,    -1,    -1,
    2491,    -1,   447,    -1,    -1,   450,    -1,   452,    -1,   454,
     455,    -1,    -1,   458,   459,  3857,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   469,    -1,    -1,   472,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   480,    -1,    -1,  3880,    -1,
      -1,   486,    -1,    -1,    -1,  3887,    -1,    -1,    -1,   494,
      -1,    -1,    -1,    -1,   499,   500,   501,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2567,    -1,    -1,    -1,
      -1,  3923,    -1,    -1,    -1,    -1,    -1,   532,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   540,    14,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    -1,    -1,   584,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,   596,    -1,    -1,    -1,   600,  2647,    -1,   603,    -1,
      -1,    -1,    -1,   608,    -1,    -1,    -1,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   630,   104,    -1,    -1,    -1,
      -1,    -1,    -1,   638,  4036,    -1,    -1,    -1,    -1,   644,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     128,    -1,    -1,    -1,   659,    -1,    -1,    -1,   136,    -1,
     138,   139,    -1,    -1,    -1,    -1,    -1,  4069,    -1,    -1,
      -1,  4073,    -1,   151,   152,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     178,    -1,    -1,    -1,    -1,    -1,  4108,  4109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   211,    -1,   213,    -1,    -1,    -1,   217,
      -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4167,    -1,    -1,    -1,   247,
      -1,   249,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2837,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,    -1,   287,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2891,    -1,    -1,    -1,  2895,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4257,    -1,    -1,    -1,    -1,
      -1,    -1,  4264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2922,  2923,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2943,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4302,  2952,    -1,  2954,   382,  2956,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4317,    -1,  4319,    -1,    -1,
      -1,   399,    -1,   401,    -1,    -1,    -1,    -1,    -1,     6,
      -1,    -1,    -1,    -1,    -1,    12,   414,    14,    -1,    -1,
      -1,    -1,  4344,    -1,    -1,    -1,  4348,   425,    -1,    -1,
      -1,    28,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   447,
      -1,    -1,   450,    -1,   452,    -1,    -1,   455,    -1,    -1,
     458,   459,    -1,    60,    -1,    -1,    -1,    -1,    65,    -1,
      -1,   469,    -1,    -1,   472,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   480,    -1,    -1,    -1,    83,    -1,   486,  4411,
      -1,    -1,    -1,    -1,    91,    -1,   494,    -1,    -1,    -1,
      -1,   499,   500,   501,   101,    -1,    -1,    -1,    -1,  4431,
      -1,    -1,    -1,    -1,    -1,  4437,    -1,    -1,  3089,    -1,
      -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,  4450,    -1,
      -1,    -1,    -1,    -1,   532,   132,    -1,    -1,   135,    -1,
      -1,    -1,   540,    -1,    -1,  3116,    -1,   144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   160,    -1,  3136,    -1,    -1,    -1,   166,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   584,    -1,    -1,    -1,
      -1,    -1,  4514,    -1,    -1,    -1,    -1,  4519,   596,   196,
      -1,    -1,   600,    -1,  4526,   603,    -1,    -1,    -1,    -1,
     608,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   232,    -1,   234,    -1,    -1,
     638,    -1,    -1,    -1,   241,    -1,   644,    -1,    -1,    -1,
      -1,   248,    -1,  4575,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   659,    -1,    -1,    -1,    -1,   263,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4635,    -1,    -1,    -1,    -1,    -1,  4641,
      -1,    -1,    -1,   320,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   339,    -1,    -1,    -1,   343,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4684,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4692,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     387,    -1,  3363,    -1,    -1,    -1,    -1,   394,    -1,   396,
      -1,  4723,    -1,    -1,    -1,    -1,    -1,   404,    -1,  4731,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3393,    -1,    -1,    -1,  3397,  3398,    -1,  4751,
      -1,  4753,  4754,    -1,    -1,    -1,    -1,    -1,  3409,    -1,
      -1,    -1,    -1,  3414,    -1,    -1,  3417,    -1,  3419,  3420,
      -1,    -1,    -1,   450,    -1,    -1,    -1,  4779,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   476,
      -1,  4803,    -1,    -1,  4806,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4838,    -1,    -1,  3490,
      -1,    -1,    -1,    -1,    -1,    -1,  4848,    -1,    -1,    -1,
      -1,  4853,    -1,    -1,    -1,    -1,    -1,   534,   535,   536,
      -1,    -1,    -1,    -1,   541,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3524,    -1,    -1,  4878,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4903,   579,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3561,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     597,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3581,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3718,  3719,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3857,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3880,
      -1,    -1,    -1,    -1,    -1,    -1,  3887,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3923,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4069,    -1,
      -1,    -1,  4073,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4257,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4317,    -1,  4319,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4450,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4575,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4684,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4692,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,  4723,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,    -1,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,  4903,   216,   217,   218,   219,    -1,   221,   222,
     223,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,   247,   248,   249,   250,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,   270,   271,    -1,
     273,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,   292,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,   397,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,   538,   539,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,   554,   555,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,   577,   578,   579,   580,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,    -1,    -1,   610,   611,   612,
     613,   614,    -1,    -1,   617,   618,    -1,   620,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,   642,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   652,
     653,    -1,    -1,    -1,    -1,   658,   659,    -1,    -1,   662,
     663,    -1,    -1,   666,   667,     5,    -1,     7,     8,     9,
      10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    37,    38,    39,
      40,    41,    42,    43,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
      -1,   221,   222,   223,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,   249,
     250,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,   292,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,    -1,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,   397,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,   538,   539,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
     610,   611,   612,   613,   614,    -1,    -1,   617,   618,    -1,
     620,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   652,   653,    -1,    -1,    -1,    -1,   658,   659,
      -1,    -1,   662,   663,    -1,    -1,   666,   667,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,   101,   102,   103,    -1,    -1,   106,
     107,   108,   109,   110,   111,    -1,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,
     127,   128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,    -1,   221,   222,   223,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
     247,   248,   249,   250,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,   273,   274,   275,    -1,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
     397,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,
     617,   618,    -1,   620,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   652,   653,    -1,    -1,    -1,
      -1,   658,   659,    -1,    -1,   662,   663,    -1,    -1,   666,
     667,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,    -1,    -1,    -1,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,    -1,   221,   222,   223,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,   249,   250,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,   273,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,   292,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,    -1,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,   397,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,   617,   618,    -1,   620,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   652,   653,
      -1,    -1,    -1,    -1,   658,   659,    -1,    -1,   662,   663,
      -1,    -1,   666,   667,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,    -1,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,    -1,
     221,   222,   223,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,   249,   250,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,   292,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,   397,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,   549,   550,
     551,   552,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,   610,
     611,   612,   613,   614,    -1,    -1,   617,   618,    -1,   620,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
      -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   652,   653,    -1,    -1,    -1,    -1,   658,   659,    -1,
      -1,   662,   663,    -1,    -1,   666,   667,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,    -1,   221,   222,   223,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,   235,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,   249,   250,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,   273,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,   292,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
      -1,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,   565,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,   617,
     618,    -1,   620,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   652,   653,    -1,    -1,    -1,    -1,
     658,   659,    -1,    -1,   662,   663,    -1,    -1,   666,   667,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,    -1,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,    -1,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,    -1,   221,   222,   223,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,   247,   248,   249,   250,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,   273,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,   292,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,   397,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,   610,   611,   612,   613,   614,
      -1,    -1,   617,   618,    -1,   620,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   652,   653,    -1,
      -1,    -1,    -1,   658,   659,    -1,    -1,   662,   663,    -1,
      -1,   666,   667,     5,    -1,     7,     8,     9,    10,    11,
      12,    13,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,    -1,   221,
     222,   223,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,   249,   250,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,   273,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
     292,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,    -1,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,   397,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,   617,   618,    -1,   620,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,
     642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     652,   653,    -1,    -1,    -1,    -1,   658,   659,    -1,    -1,
     662,   663,    -1,    -1,   666,   667,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,    -1,   221,   222,   223,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
     249,   250,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,   273,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,   292,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,   610,   611,   612,   613,   614,    -1,    -1,   617,   618,
      -1,   620,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   652,   653,    -1,    -1,    -1,    -1,   658,
     659,    -1,    -1,   662,   663,    -1,    -1,   666,   667,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,    -1,   221,   222,   223,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,   249,   250,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,   273,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,    -1,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,   397,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,   565,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,   610,   611,   612,   613,   614,    -1,
      -1,   617,   618,    -1,   620,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   652,   653,    -1,    -1,
      -1,    -1,   658,   659,    -1,    -1,   662,   663,    -1,    -1,
     666,   667,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,    -1,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,    -1,   221,   222,
     223,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,   247,   248,   249,   250,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,
     273,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,   292,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,   397,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,   538,   539,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,   554,   555,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,    -1,    -1,   610,   611,   612,
     613,   614,    -1,    -1,   617,   618,    -1,   620,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,   642,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   652,
     653,    -1,    -1,    -1,    -1,   658,   659,    -1,    -1,   662,
     663,    -1,    -1,   666,   667,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    37,    38,    39,
      40,    41,    42,    43,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
      -1,   221,   222,   223,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,   249,
     250,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,   292,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,    -1,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,   397,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,   538,   539,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
     610,   611,   612,   613,   614,    -1,    -1,   617,   618,    -1,
     620,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   652,   653,    -1,    -1,    -1,    -1,   658,   659,
      -1,    -1,   662,   663,    -1,    -1,   666,   667,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,   101,   102,   103,    -1,    -1,   106,
     107,   108,   109,   110,   111,    -1,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,
     127,   128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,    -1,   221,   222,   223,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
     247,   248,   249,   250,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,   273,   274,   275,    -1,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,   371,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
     397,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,
     617,   618,    -1,   620,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   652,   653,    -1,    -1,    -1,
      -1,   658,   659,    -1,    -1,   662,   663,    -1,    -1,   666,
     667,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,    -1,   221,   222,   223,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,   249,   250,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,   273,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,   292,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,    -1,    -1,   360,   361,   362,   363,
     364,    -1,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,   397,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,   617,   618,    -1,   620,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   652,   653,
      -1,    -1,    -1,    -1,   658,   659,    -1,    -1,   662,   663,
      -1,    -1,   666,   667,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,    -1,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,    -1,
     221,   222,   223,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,   249,   250,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,   292,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,   364,    -1,   366,   367,   368,    -1,   370,
     371,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,   397,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,   549,   550,
     551,   552,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,   610,
     611,   612,   613,   614,    -1,    -1,   617,   618,    -1,   620,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
      -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   652,   653,    -1,    -1,    -1,    -1,   658,   659,    -1,
      -1,   662,   663,    -1,    -1,   666,   667,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,    -1,   221,   222,   223,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,   235,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,   249,   250,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,   273,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,   292,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
      -1,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,   565,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,   617,
     618,    -1,   620,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   652,   653,    -1,    -1,    -1,    -1,
     658,   659,    -1,    -1,   662,   663,    -1,    -1,   666,   667,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    39,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,   129,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,   222,   223,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,   292,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,   370,   371,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,   666,   667,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
      -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,   217,   218,
     219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,    -1,   243,    -1,    -1,    -1,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,   264,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,    -1,   274,   275,    -1,   277,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,   486,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   667,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,   264,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   667,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,   486,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
      -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,   660,
      -1,    -1,    19,    -1,    -1,    22,   667,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,   660,    15,    -1,    -1,    -1,    19,   666,
     667,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
      -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,   659,    -1,
      15,    -1,    -1,    -1,    19,    -1,   667,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   667,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
      -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   654,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,   667,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
      -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,   659,    -1,
      15,    -1,    -1,    -1,    19,    -1,   667,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,   666,   667,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
      -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,   217,   218,
     219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   667,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   667,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
      -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   667,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
     667,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,    -1,    -1,   181,   182,
     183,   184,    -1,    -1,   187,   188,    -1,   190,   191,   192,
      -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,   642,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   666,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,   276,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   666,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,   276,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   666,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,   276,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   666,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
      -1,   642,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   666,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,   217,
     218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   666,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      -1,   666,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    84,    -1,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
      -1,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,   189,   190,   191,
     192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,   260,    -1,
      -1,   263,    -1,    -1,    -1,   267,   268,    -1,    -1,   271,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,    -1,    -1,    -1,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
      -1,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,    -1,    -1,   451,
      -1,   453,   454,    -1,   456,    -1,    -1,    -1,   460,    -1,
      -1,   463,   464,    -1,   466,   467,   468,    -1,    -1,   471,
      -1,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,   484,    -1,    -1,    -1,    -1,   489,   490,   491,
      -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,
      -1,   503,    -1,    -1,   506,   507,    -1,   509,    -1,   511,
      -1,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
      -1,   533,    -1,    -1,    -1,   537,    -1,    -1,    -1,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,    -1,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,
     602,    -1,    -1,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,   630,    -1,
      -1,    -1,   634,    -1,    -1,   637,    -1,   639,    -1,    -1,
     642,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   661,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,   109,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,   276,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,     5,   642,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   659,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,   217,
     218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,     5,   642,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,   654,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,    -1,   190,   191,
     192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,   654,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,     5,   642,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,   654,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,     5,   642,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,   654,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,   276,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,   495,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,     5,   647,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,   104,    -1,   106,    -1,   108,    -1,   110,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,   136,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,    -1,    -1,   181,   182,
     183,   184,    -1,    -1,   187,   188,    -1,   190,   191,   192,
      -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,    -1,
     243,    -1,    -1,    -1,   247,   248,   249,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,
      -1,   274,   275,   276,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,   287,   288,   289,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,   486,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,   581,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
     603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,   104,    -1,   106,
      -1,   108,    -1,   110,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,   136,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,   152,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,    -1,   243,    -1,    -1,    -1,
     247,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,   276,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
     287,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,   486,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,   499,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,   581,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,   603,   604,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,   222,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,   292,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,    -1,
     371,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,   588,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,   222,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,   292,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,   371,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,   588,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,   217,   218,
     219,    -1,   221,   222,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,   292,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,   371,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,   588,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,    -1,    -1,   181,   182,
     183,   184,    -1,    -1,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,   222,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,   292,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,   371,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,   588,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,   109,   110,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,   276,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,   276,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    39,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,   222,   223,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
      -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,   217,   218,
     219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,   292,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,   371,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,   588,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,    -1,    -1,   181,   182,
     183,   184,    -1,    -1,   187,   188,    -1,   190,   191,   192,
      -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,   292,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,   371,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,   397,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,   588,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,   276,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,   292,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
     371,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,   397,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,   588,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,   109,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,   276,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
      -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,   217,   218,
     219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,    -1,   274,   275,   276,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,   110,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,    -1,    -1,   181,   182,
     183,   184,    -1,    -1,   187,   188,    -1,   190,   191,   192,
      -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,
      -1,   274,   275,   276,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,   276,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,   276,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,   276,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    20,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
      -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,   217,   218,
     219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
     183,   184,    -1,    -1,   187,   188,    -1,   190,   191,   192,
      -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,   518,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
      -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,   217,   218,
     219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,    -1,    -1,   181,   182,
     183,   184,    -1,    -1,   187,   188,    -1,   190,   191,   192,
      -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
     417,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
      -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,   217,   218,
     219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,    -1,    -1,   181,   182,
     183,   184,    -1,    -1,   187,   188,    -1,   190,   191,   192,
      -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
     417,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   154,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,    -1,    -1,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
     189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
      -1,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,   260,    -1,    -1,   263,    -1,    -1,    -1,   267,   268,
      -1,    -1,   271,   272,    -1,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,   395,    -1,    -1,    -1,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
      -1,    -1,   451,    -1,   453,   454,    -1,   456,    -1,    -1,
      -1,   460,    -1,    -1,   463,   464,    -1,   466,   467,   468,
      -1,    -1,   471,    -1,   473,   474,   475,   476,   477,   478,
     479,    -1,   481,   482,    -1,   484,    -1,    -1,    -1,    -1,
     489,   490,   491,    -1,    -1,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,   503,    -1,    -1,   506,   507,    -1,
     509,    -1,   511,    -1,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,    -1,   533,    -1,    -1,    -1,   537,    -1,
      -1,    -1,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,    -1,    -1,    -1,    -1,
     599,    -1,    -1,   602,    -1,    -1,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,   630,    -1,    -1,    -1,   634,    -1,    -1,   637,    -1,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   154,   155,   156,    -1,   158,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,    -1,    -1,    -1,    -1,   181,   182,
     183,   184,    -1,    -1,   187,   188,   189,   190,   191,   192,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
      -1,    -1,    -1,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,   260,    -1,    -1,
     263,    -1,    -1,    -1,   267,   268,    -1,    -1,   271,   272,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,    -1,    -1,    -1,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,    -1,    -1,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,    -1,    -1,   451,    -1,
     453,   454,    -1,   456,    -1,    -1,    -1,   460,    -1,    -1,
     463,   464,    -1,   466,   467,   468,    -1,    -1,   471,    -1,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,   484,    -1,    -1,    -1,    -1,   489,   490,   491,    -1,
      -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,
     503,    -1,    -1,   506,   507,    -1,   509,    -1,   511,    -1,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,    -1,
     533,    -1,    -1,    -1,   537,    -1,    -1,    -1,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,   602,
      -1,    -1,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,   628,    -1,   630,    -1,    -1,
      -1,   634,    -1,    -1,   637,    -1,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,   155,   156,
      -1,   158,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
      -1,    -1,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,    -1,    -1,    -1,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,    -1,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,   260,    -1,    -1,   263,    -1,    -1,    -1,
     267,   268,    -1,    -1,   271,   272,    -1,   274,   275,    -1,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
      -1,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,    -1,
      -1,    -1,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,    -1,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,    -1,    -1,   451,    -1,   453,   454,    -1,   456,
      -1,    -1,    -1,   460,    -1,    -1,   463,   464,    -1,   466,
     467,   468,    -1,    -1,   471,    -1,   473,   474,   475,   476,
     477,   478,   479,    -1,   481,   482,    -1,   484,    -1,    -1,
      -1,    -1,   489,   490,   491,    -1,    -1,    -1,    -1,   496,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,   506,
     507,    -1,   509,    -1,   511,    -1,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,
     537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,    -1,
      -1,    -1,   599,    -1,    -1,   602,    -1,    -1,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,   628,    -1,   630,    -1,    -1,    -1,   634,    -1,    -1,
     637,    -1,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,   189,   190,
     191,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,    -1,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,   260,
      -1,    -1,   263,    -1,    -1,    -1,   267,   268,    -1,    -1,
     271,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,    -1,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,   395,    -1,    -1,    -1,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,    -1,    -1,
     451,    -1,   453,   454,    -1,   456,    -1,    -1,    -1,   460,
      -1,    -1,   463,   464,    -1,   466,   467,   468,    -1,    -1,
     471,    -1,   473,   474,   475,   476,   477,   478,   479,    -1,
     481,   482,    -1,   484,    -1,    -1,    -1,    -1,   489,   490,
     491,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,
      -1,    -1,   503,    -1,    -1,   506,   507,    -1,   509,    -1,
     511,    -1,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,    -1,   533,    -1,    -1,    -1,   537,    -1,    -1,    -1,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,    -1,    -1,    -1,   599,    -1,
      -1,   602,    -1,    -1,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,   634,    -1,    -1,   637,    -1,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,    -1,    -1,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,   189,   190,   191,   192,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,    -1,    -1,
      -1,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,   260,    -1,    -1,   263,    -1,
      -1,    -1,   267,   268,    -1,    -1,   271,   272,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,    -1,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,
     395,    -1,    -1,    -1,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,    -1,    -1,   451,    -1,   453,   454,
      -1,   456,    -1,    -1,    -1,   460,    -1,    -1,   463,   464,
      -1,   466,   467,   468,    -1,    -1,   471,    -1,   473,   474,
     475,   476,   477,   478,   479,    -1,   481,   482,    -1,   484,
      -1,    -1,    -1,    -1,   489,   490,   491,    -1,    -1,    -1,
      -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,   506,   507,    -1,   509,    -1,   511,    -1,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,    -1,   533,    -1,
      -1,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
      -1,    -1,    -1,    -1,   599,    -1,    -1,   602,    -1,    -1,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,
      -1,    -1,   637,    -1,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,    -1,    -1,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
     189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
      -1,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,   260,    -1,    -1,   263,    -1,    -1,    -1,   267,   268,
      -1,    -1,   271,   272,    -1,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,   395,    -1,    -1,    -1,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
      -1,    -1,   451,    -1,   453,   454,    -1,   456,    -1,    -1,
      -1,   460,    -1,    -1,   463,   464,    -1,   466,   467,   468,
      -1,    -1,   471,    -1,   473,   474,   475,   476,   477,   478,
     479,    -1,   481,   482,    -1,   484,    -1,    -1,    -1,    -1,
     489,   490,   491,    -1,    -1,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,   503,    -1,    -1,   506,   507,    -1,
     509,    -1,   511,    -1,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,    -1,   533,    -1,    -1,    -1,   537,    -1,
      -1,    -1,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,    -1,    -1,    -1,    -1,
     599,    -1,    -1,   602,    -1,    -1,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,   630,    -1,    -1,    -1,   634,    -1,    -1,   637,    -1,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,    -1,    -1,    -1,    -1,   181,   182,
     183,   184,    -1,    -1,   187,   188,   189,   190,   191,   192,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
      -1,    -1,    -1,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,   260,    -1,    -1,
     263,    -1,    -1,    -1,   267,   268,    -1,    -1,   271,   272,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,    -1,    -1,    -1,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,    -1,    -1,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,    -1,    -1,   451,    -1,
     453,   454,    -1,   456,    -1,    -1,    -1,   460,    -1,    -1,
     463,   464,    -1,   466,   467,   468,    -1,    -1,   471,    -1,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,   484,    -1,    -1,    -1,    -1,   489,   490,   491,    -1,
      -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,
     503,    -1,    -1,   506,   507,    -1,   509,    -1,   511,    -1,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,    -1,
     533,    -1,    -1,    -1,   537,    -1,    -1,    -1,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,   602,
      -1,    -1,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,   630,    -1,    -1,
      -1,   634,    -1,    -1,   637,    -1,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
      -1,    -1,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,    -1,    -1,    -1,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,    -1,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,   260,    -1,    -1,   263,    -1,    -1,    -1,
     267,   268,    -1,    -1,   271,   272,    -1,   274,   275,    -1,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
      -1,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,    -1,
      -1,    -1,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,    -1,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,    -1,    -1,   451,    -1,   453,   454,    -1,   456,
      -1,    -1,    -1,   460,    -1,    -1,   463,   464,    -1,   466,
     467,   468,    -1,    -1,   471,    -1,   473,   474,   475,   476,
     477,   478,   479,    -1,   481,   482,    -1,   484,    -1,    -1,
      -1,    -1,   489,   490,   491,    -1,    -1,    -1,    -1,   496,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,   506,
     507,    -1,   509,    -1,   511,    -1,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,
     537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,    -1,
      -1,    -1,   599,    -1,    -1,   602,    -1,    -1,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,   630,    -1,    -1,    -1,   634,    -1,    -1,
     637,    -1,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,    -1,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,   189,   190,
     191,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,    -1,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,   260,
      -1,    -1,   263,    -1,    -1,    -1,   267,   268,    -1,    -1,
     271,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,    -1,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,   395,    -1,    -1,    -1,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,    -1,    -1,
     451,    -1,   453,   454,    -1,   456,    -1,    -1,    -1,   460,
      -1,    -1,   463,   464,    -1,   466,   467,   468,    -1,    -1,
     471,    -1,   473,   474,   475,   476,   477,   478,   479,    -1,
     481,   482,    -1,   484,    -1,    -1,    -1,    -1,   489,   490,
     491,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,
      -1,    -1,   503,    -1,    -1,   506,   507,    -1,   509,    -1,
     511,    -1,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,    -1,   533,    -1,    -1,    -1,   537,    -1,    -1,    -1,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,    -1,    -1,    -1,   599,    -1,
      -1,   602,    -1,    -1,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,   634,    -1,    -1,   637,    -1,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,    -1,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,    -1,    -1,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,   189,   190,   191,   192,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,    -1,    -1,
      -1,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,   260,    -1,    -1,   263,    -1,
      -1,    -1,   267,   268,    -1,    -1,   271,   272,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,    -1,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,
     395,    -1,    -1,    -1,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,    -1,    -1,   451,    -1,   453,   454,
      -1,   456,    -1,    -1,    -1,   460,    -1,    -1,   463,   464,
      -1,   466,   467,   468,    -1,    -1,   471,    -1,   473,   474,
     475,   476,   477,   478,   479,    -1,   481,   482,    -1,   484,
      -1,    -1,    -1,    -1,   489,   490,   491,    -1,    -1,    -1,
      -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,   506,   507,    -1,   509,    -1,   511,    -1,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,    -1,   533,    -1,
      -1,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
      -1,    -1,    -1,    -1,   599,    -1,    -1,   602,    -1,    -1,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,
      -1,    -1,   637,    -1,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,    -1,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,    -1,    -1,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
      -1,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
      -1,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,    -1,   267,   268,
      -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,   395,    -1,    -1,    -1,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
      -1,    -1,   451,    -1,   453,    -1,    -1,   456,    -1,    -1,
      -1,   460,    -1,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,    -1,   473,   474,   475,   476,   477,   478,
     479,    -1,   481,   482,    -1,   484,    -1,    -1,    -1,    -1,
     489,   490,   491,    -1,    -1,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,   503,    -1,    -1,   506,   507,    -1,
     509,    -1,   511,    -1,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,    -1,   533,    -1,    -1,    -1,   537,    -1,
      -1,    -1,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,    -1,    -1,    -1,    -1,
     599,    -1,    -1,   602,    -1,    -1,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,    -1,    -1,   637,    -1,
     639,    -1,    -1,   642
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    34,    38,    52,    53,    56,    60,    65,
      66,    85,   104,   128,   136,   138,   139,   151,   152,   164,
     178,   195,   211,   213,   217,   221,   235,   247,   249,   265,
     283,   287,   294,   382,   399,   401,   414,   425,   447,   450,
     452,   454,   455,   458,   459,   469,   472,   480,   486,   494,
     499,   500,   501,   532,   540,   584,   596,   600,   603,   608,
     630,   638,   644,   659,   670,   673,   674,   675,   676,   677,
     679,   684,   686,   699,   730,   758,   765,   766,   780,   781,
     800,   819,   834,   894,   948,   986,  1067,  1112,  1115,  1125,
    1130,  1136,  1149,  1152,  1158,  1161,  1166,  1173,  1185,  1186,
    1362,  1364,  1376,  1379,  1404,  1412,  1425,  1432,  1446,  1450,
    1451,  1455,  1469,  1477,  1481,  1486,  1487,  1488,  1542,  1573,
    1579,  1581,  1588,  1591,  1625,  1627,  1633,  1634,  1635,  1636,
    1689,  1697,  1698,  1699,    12,   115,   133,   204,   288,   419,
     492,   557,  1068,  1658,  1659,  1660,  1661,   199,   284,   369,
    1160,  1453,   364,   365,  1219,  1626,   565,   666,  1531,   241,
       5,     7,     8,     9,    10,    11,    12,    15,    19,    22,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    34,
      38,    42,    45,    46,    47,    49,    51,    52,    55,    58,
      59,    61,    62,    64,    65,    67,    68,    69,    70,    71,
      72,    74,    75,    76,    77,    78,    79,    80,    82,    83,
      84,    85,    86,    87,    88,    89,    91,    92,    94,    95,
      96,    97,    98,   100,   103,   106,   108,   111,   113,   117,
     118,   119,   122,   127,   128,   133,   135,   140,   142,   143,
     144,   145,   146,   151,   154,   155,   156,   160,   162,   163,
     165,   166,   167,   169,   170,   172,   173,   174,   175,   176,
     177,   178,   181,   182,   183,   184,   187,   188,   190,   191,
     192,   195,   199,   200,   202,   204,   206,   207,   208,   209,
     210,   211,   212,   214,   217,   218,   219,   221,   225,   226,
     230,   231,   232,   233,   234,   238,   239,   240,   243,   248,
     249,   253,   255,   256,   258,   259,   263,   266,   267,   268,
     271,   274,   275,   281,   282,   284,   286,   288,   289,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   313,   314,   315,   316,   318,
     319,   320,   321,   323,   324,   325,   330,   331,   332,   333,
     334,   335,   338,   339,   341,   343,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   357,   360,   361,   362,
     363,   367,   368,   372,   374,   375,   376,   378,   379,   380,
     381,   383,   384,   393,   394,   395,   398,   400,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   414,   415,
     416,   418,   420,   421,   422,   423,   424,   426,   427,   428,
     431,   435,   436,   437,   438,   439,   442,   443,   444,   445,
     446,   448,   449,   451,   452,   453,   456,   458,   460,   461,
     463,   464,   466,   468,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   484,   485,   489,   490,
     491,   492,   496,   500,   502,   503,   504,   505,   506,   507,
     509,   510,   511,   512,   513,   514,   521,   522,   524,   527,
     531,   532,   533,   537,   540,   541,   543,   544,   545,   546,
     547,   548,   551,   552,   553,   554,   556,   557,   560,   561,
     562,   563,   566,   567,   569,   570,   571,   572,   578,   579,
     580,   584,   585,   586,   587,   589,   590,   592,   593,   595,
     596,   599,   602,   604,   606,   607,   614,   617,   621,   622,
     623,   624,   625,   626,   627,   634,   635,   637,   638,   639,
     642,   724,  1530,  1534,  1540,  1541,   801,   313,   556,   559,
    1575,  1153,   634,  1629,   288,   389,   557,  1413,  1363,   115,
     174,   204,   241,   288,   419,   471,   492,   557,   562,   581,
     606,   622,  1375,  1534,  1160,   108,   767,   723,   667,  1527,
    1529,  1534,   685,   782,  1377,   408,   512,  1482,   118,   241,
     639,  1493,  1575,   835,  1160,   659,   895,  1534,  1478,   480,
     606,  1575,  1160,   837,  1380,  1470,   518,   755,   759,   760,
    1534,   723,  1629,  1534,  1191,  1193,  1194,  1195,   533,  1543,
    1433,   759,    13,   504,   578,    13,   504,   559,  1427,   408,
     512,  1580,  1405,  1534,   836,    34,    85,   162,   414,   436,
     472,   532,  1691,   659,  1187,  1188,     0,   164,   671,   414,
     115,   203,   471,   515,   598,   606,   705,   706,  1045,  1046,
    1047,  1375,   183,   199,   402,  1452,  1453,  1527,  1534,   647,
    1080,  1534,   647,   724,   215,   724,   276,  1531,  1534,  1536,
     840,   841,   844,   867,  1534,  1104,  1105,  1074,  1207,  1658,
     647,  1575,  1185,  1376,  1379,  1404,  1412,  1449,    25,  1629,
    1536,  1167,   731,   667,   628,   802,   803,   806,   810,   697,
     698,  1531,  1126,   622,  1150,  1575,    18,  1630,   215,   455,
     842,   867,   237,   295,   428,  1423,  1424,     8,    22,    31,
      37,    39,    40,    41,    43,    56,    57,    62,    63,    71,
      74,    76,    77,    78,    79,    80,    97,   101,   102,   107,
     109,   110,   114,   115,   120,   121,   122,   127,   129,   132,
     179,   185,   186,   193,   199,   208,   210,   216,   222,   223,
     230,   235,   247,   250,   268,   273,   281,   292,   317,   322,
     334,   338,   340,   344,   345,   346,   347,   348,   356,   364,
     365,   366,   370,   371,   376,   397,   404,   409,   410,   412,
     426,   454,   455,   468,   470,   477,   478,   484,   538,   539,
     545,   549,   550,   555,   565,   569,   570,   571,   572,   582,
     583,   584,   588,   591,   606,   610,   611,   612,   613,   618,
     620,   626,   627,   642,   652,   653,   658,   659,   662,   663,
     666,   667,  1213,  1214,  1215,  1216,  1220,  1228,  1229,  1230,
    1231,  1232,  1233,  1241,  1245,  1259,  1512,  1515,  1517,  1518,
    1519,  1523,  1525,  1530,  1534,   235,  1374,  1374,  1374,   235,
    1373,   215,  1374,  1374,  1374,   867,  1374,  1374,  1374,  1575,
     680,  1456,   142,    13,    14,   104,   110,   136,   152,   174,
     178,   190,   213,   241,   247,   287,   420,   424,   440,   448,
     456,   486,   499,   500,   551,   581,   603,   605,  1536,  1592,
    1596,  1597,  1599,  1601,  1602,  1534,   381,    70,   432,   667,
    1536,   795,   796,   134,   224,   295,  1382,  1534,  1531,   218,
     511,  1483,   251,  1489,  1574,    34,    70,   189,   260,   272,
     381,   467,   744,   779,   780,   783,   784,   785,   787,   788,
     789,   790,   792,   815,   817,   823,   830,  1530,  1535,  1541,
    1575,   987,  1207,    50,   896,   201,    37,   313,  1438,  1479,
    1534,   723,  1162,  1131,   744,   826,   134,   295,  1383,  1411,
     313,   427,   504,  1471,  1472,   614,   756,   494,   761,     7,
      13,   424,  1589,  1590,  1597,  1599,   576,  1630,  1192,   251,
     387,  1326,  1327,  1356,  1357,    13,   147,   224,   520,   521,
     522,   523,   524,   525,   542,  1200,  1201,  1202,  1654,  1544,
      62,    63,   132,   212,   284,   352,   404,   471,   491,   578,
     666,  1010,  1534,  1547,  1559,  1563,  1564,    13,    26,    38,
      62,    74,   100,   102,   104,   116,   166,   170,   173,   202,
     204,   212,   214,   240,   241,   262,   284,   313,   381,   407,
     418,   419,   422,   423,   443,   491,   504,   541,   559,   625,
    1010,  1044,  1434,  1438,  1439,  1441,  1450,  1530,  1560,   761,
     505,   697,   432,   631,  1116,  1117,  1118,   505,   697,  1426,
    1534,  1531,  1575,  1411,   824,  1213,    39,   222,   223,   565,
    1513,  1514,  1532,  1690,  1690,  1690,  1690,  1690,  1187,   660,
     486,   665,  1534,   235,   947,   947,   947,  1655,  1659,  1660,
    1661,   492,   707,   241,   241,   241,   559,  1448,  1447,   332,
     563,   590,  1070,   604,   109,  1536,  1537,  1538,  1596,  1072,
     846,   868,  1534,  1071,  1076,     6,    60,   152,   365,   431,
     433,   869,   559,   237,   380,  1106,  1107,  1108,   526,  1662,
    1663,   174,  1073,  1536,  1137,   820,   661,  1168,  1169,  1170,
    1171,  1527,   659,   732,  1534,   811,   158,   813,  1213,   810,
     576,  1368,  1369,  1527,  1151,  1368,    59,   367,   367,   447,
    1631,   845,   868,     6,   201,  1414,  1420,  1421,  1534,  1423,
     659,   659,   659,  1228,   659,   659,   659,  1213,  1262,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,  1212,  1212,  1212,   659,  1211,   659,   659,
     659,   565,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,  1213,   659,   659,   659,   659,
    1260,  1261,  1523,  1534,   659,   659,   659,   659,   659,   659,
     659,   659,   659,  1213,  1211,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,  1211,   565,   659,   659,   659,   565,   659,
     659,   659,   565,  1514,   659,  1212,  1211,  1211,   659,   659,
     659,   659,   659,   659,  1228,  1228,  1228,  1213,  1649,  1650,
    1534,  1246,  1534,    17,    18,   386,   389,   640,  1217,  1218,
     168,   205,   257,   269,   358,   647,   648,   649,  1221,    35,
     148,   254,   277,   344,   441,   497,   498,   513,   650,   651,
     652,   653,   654,   655,   656,   657,  1219,  1228,    73,   388,
     661,  1532,   659,   667,   179,  1534,   724,  1534,   179,  1534,
     868,   724,   723,  1536,   878,  1439,   724,   723,  1367,  1374,
     609,   681,    37,   140,   166,   169,   206,   226,   289,   313,
     418,   427,   442,   460,   504,   507,   537,  1457,  1462,  1463,
    1530,  1575,    90,   666,   768,   769,   770,   771,  1534,   418,
    1600,   474,   474,   557,   562,   606,   622,  1212,   384,  1604,
     556,   377,  1606,    69,   504,  1603,   116,   622,  1605,   576,
     377,   661,    20,   647,  1312,  1313,  1582,  1534,   162,  1213,
     237,  1103,   512,    91,   427,  1484,    52,    89,   295,  1495,
    1527,  1576,  1577,   818,  1534,   201,   361,   793,  1535,  1535,
    1534,   786,   162,   779,   665,   674,   829,   668,  1159,   660,
    1213,   279,   282,   429,   897,   899,   666,   678,  1531,   289,
    1163,  1537,  1539,  1164,  1165,  1527,   622,  1128,  1575,   602,
     829,   251,  1370,  1384,  1385,  1527,  1474,    52,  1473,   661,
    1532,    58,    68,    82,    94,    95,    96,   113,   333,   351,
     482,   544,   561,   762,   764,   384,  1600,   377,   201,   377,
     480,  1632,  1631,   597,  1637,  1638,  1358,    50,   278,  1331,
    1332,  1333,   201,  1197,   198,   287,  1203,   654,  1204,  1205,
    1207,  1202,   132,  1546,  1562,  1564,   494,   471,   667,    37,
     132,   495,   647,  1011,  1012,  1395,  1536,   198,  1395,  1570,
    1536,  1549,   666,  1536,    37,   132,  1014,  1015,  1536,   667,
    1550,  1548,  1395,   505,   173,   277,   629,  1445,   659,   115,
     174,   204,   419,   559,   581,   622,  1445,    13,   957,  1536,
    1331,   201,   254,  1440,  1442,    72,   537,   198,   537,   556,
     512,    72,   537,    13,    45,    98,   103,   256,   331,   395,
     514,   553,  1428,  1429,  1430,   697,   226,   537,   698,   537,
    1331,  1445,  1442,   289,   165,    75,   421,   556,   580,   198,
    1206,   537,   617,  1119,  1120,  1119,   379,   636,    92,   661,
    1119,  1119,  1369,  1103,   829,   151,   661,   378,  1693,   552,
    1694,   261,   463,  1692,   660,  1638,  1640,  1641,  1642,  1643,
    1193,   164,   672,  1219,  1534,   723,   723,    11,   204,   419,
     581,   711,  1207,  1657,  1663,  1671,  1676,  1677,  1678,  1684,
     204,   711,  1656,  1663,  1671,  1678,  1684,  1658,   947,   947,
     947,   947,   947,  1449,  1454,  1513,  1534,   132,   944,   945,
     954,   955,  1019,   118,  1212,   666,   725,     6,   847,   725,
     383,   117,   864,   864,   864,     4,  1527,  1108,   485,   622,
     724,  1663,  1138,  1139,  1369,   821,   822,   666,   254,   661,
     401,  1179,  1181,  1182,   733,   734,  1213,  1213,   744,   162,
     804,   687,   183,   428,   661,  1127,  1368,    61,   183,   187,
     198,   330,   428,  1154,  1155,  1156,    59,   447,   847,   864,
    1371,  1372,  1527,  1528,  1534,   661,  1417,   667,  1422,  1213,
    1213,    13,   147,  1253,  1314,  1253,  1253,  1253,   628,  1264,
    1213,  1213,  1259,  1259,  1213,  1213,  1213,  1213,  1226,  1227,
    1213,  1213,  1213,  1213,   147,  1253,  1314,   660,   129,   193,
     222,   292,   371,   588,   660,  1340,  1343,  1344,   660,  1213,
    1213,  1213,  1213,  1523,  1649,   123,   124,   125,   126,   127,
     227,   228,   229,   230,   334,   336,   337,   338,   345,   426,
     483,   484,   626,   641,   642,  1309,  1310,  1213,  1259,   119,
     122,   569,   572,  1311,   147,  1248,  1213,  1213,  1213,  1213,
    1309,  1259,  1213,  1259,  1261,    10,   661,   667,   147,  1253,
    1213,  1213,   147,  1253,  1213,  1213,  1259,  1259,  1259,  1213,
    1213,  1213,  1259,  1216,  1213,  1213,  1213,  1213,  1213,  1213,
     660,  1213,  1253,  1253,  1213,  1213,   147,  1253,  1213,  1310,
    1310,  1213,    48,   270,   577,  1213,  1213,   660,  1524,  1525,
    1534,  1253,  1253,  1213,  1213,  1213,   660,   661,   660,   486,
     659,  1646,  1647,  1213,   666,  1247,  1536,   667,  1213,  1213,
    1213,  1215,   186,   370,   583,   599,  1219,    13,    19,  1215,
    1222,  1216,  1216,   659,  1228,  1216,  1216,  1216,  1216,   277,
    1216,  1216,   250,  1216,   250,  1216,  1216,  1216,  1216,  1216,
      35,   254,   277,   441,  1536,  1228,  1213,  1234,  1534,   667,
     377,   878,  1595,  1597,   368,   624,   879,   880,   166,  1539,
    1611,  1368,  1365,   666,   682,   683,   289,   289,   289,   289,
      52,   289,   697,   289,   661,  1206,  1458,   122,   569,   572,
     763,   773,  1245,  1517,  1523,  1536,   661,   647,   556,   659,
    1617,  1539,  1617,  1617,  1617,  1537,  1538,  1539,  1612,  1616,
     204,   419,   559,  1598,   174,   178,   190,   420,   448,   456,
     500,   551,  1602,  1534,   191,   361,  1534,  1583,  1584,   235,
     568,  1384,  1531,   231,   606,  1213,  1485,  1174,   284,  1494,
    1313,   661,   821,   201,  1534,  1213,   294,   665,    34,   294,
     454,   630,  1368,  1208,    75,   659,   904,   905,   904,   905,
     402,   907,   219,   264,  1536,    33,   576,  1480,   661,   576,
     661,   576,  1129,  1368,   827,  1385,  1381,   401,  1278,  1279,
     576,  1476,   697,  1472,   661,   647,   198,   661,  1539,  1538,
    1613,   204,   419,  1598,  1534,    13,   147,  1645,   154,   391,
    1351,  1352,  1359,  1328,  1203,   292,   371,   475,   588,  1334,
    1335,  1515,  1534,   153,   486,   659,   663,  1199,  1265,  1266,
    1267,  1268,  1269,  1280,  1281,  1293,   629,  1315,   603,   254,
     661,  1213,  1521,  1534,   661,  1545,  1395,  1597,  1534,    73,
    1017,  1213,  1539,   376,   404,   565,  1571,   258,   432,  1565,
    1566,  1567,  1568,   212,   284,   491,  1561,  1395,  1534,   578,
    1551,  1562,   661,  1553,    13,    37,   132,   377,  1213,  1572,
     537,   254,  1443,  1206,  1206,   654,   947,   724,   724,   724,
    1527,   724,  1527,   289,   349,   537,  1437,  1437,  1445,  1534,
     724,  1445,  1538,  1440,  1445,  1531,   724,  1445,   255,   554,
     188,   198,  1431,   661,   173,   537,  1440,  1527,  1442,  1440,
    1440,  1213,  1445,  1445,  1445,  1114,   446,   527,  1121,  1122,
    1113,   509,  1118,  1266,   825,  1513,   406,  1695,  1327,  1333,
    1644,   179,   704,  1595,  1612,   204,  1677,   947,   947,  1207,
     174,   947,  1663,  1536,  1534,  1534,  1534,  1527,   945,    73,
    1010,   143,  1536,    83,    97,   266,   342,   367,   430,   526,
     727,   729,   437,   592,   865,   866,   243,   861,   862,   863,
     870,   878,   880,   659,  1531,    27,   321,   855,   856,   857,
     870,   871,   872,   878,   880,   848,   849,   855,  1069,   133,
     253,   947,  1075,   661,   405,  1140,   745,  1536,   132,  1172,
    1534,  1170,  1527,   893,  1181,   241,   264,  1042,  1183,   660,
     661,   812,    56,   628,   805,   807,   150,   236,   238,   296,
     298,   299,   300,   301,   302,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   314,   315,   316,   444,   445,   688,
     689,   696,  1369,   198,  1157,   604,  1155,    83,   362,   438,
     593,   858,   859,   860,   870,   874,   875,   876,   877,   878,
     880,   608,   843,   661,  1418,  1278,   667,  1422,  1421,   201,
     654,  1534,   661,   660,  1253,   660,  1254,   660,   660,   660,
    1213,   158,   628,  1263,    20,   660,   609,   660,   660,   660,
     661,   660,   661,   660,   661,   661,   661,   661,   609,   661,
    1242,   660,   654,   660,   661,   661,   660,   660,   660,   660,
     201,   661,   660,   661,  1244,   660,   661,   661,   661,   653,
     660,   661,   660,   660,   659,  1523,  1534,  1253,   660,   660,
     660,  1253,   660,   661,   660,   660,   660,   660,   660,   660,
     661,   660,   254,   660,   661,   661,   660,   661,   661,   660,
     660,   660,   661,   201,   661,  1253,   660,   660,   661,   661,
     661,   660,   201,  1213,   201,  1213,   201,  1213,   201,   660,
     661,   660,   660,   660,   660,   661,    20,   275,   661,  1033,
     660,  1259,  1284,  1285,  1286,   659,  1189,  1190,   597,  1651,
     664,  1561,   495,  1534,   186,   370,   583,   599,   659,    18,
    1213,  1649,   172,  1319,  1216,  1213,  1213,  1216,   659,  1228,
    1216,  1207,  1238,  1239,  1240,   659,   667,  1534,  1527,   879,
     661,  1395,  1396,   661,    54,   462,  1109,  1368,  1536,   661,
     137,  1465,   697,  1463,  1368,  1464,   771,   774,   775,   770,
     372,   478,   772,  1534,  1618,  1619,   576,   233,   631,   661,
    1594,   654,  1527,  1534,  1610,  1610,  1610,   191,   205,   267,
     269,   361,   416,   647,   648,   649,  1585,  1587,  1315,   797,
    1378,  1539,  1175,  1176,  1177,  1178,  1527,   242,   295,   432,
     636,  1578,  1577,   251,   816,   831,   833,   832,   659,  1207,
    1340,   548,   908,   898,    12,   900,  1213,  1531,  1539,  1539,
    1165,  1527,  1368,   183,   428,   607,  1132,  1133,  1134,  1213,
     486,   494,   613,   614,   659,   939,  1386,  1389,   659,   129,
     193,   222,   292,   371,   588,  1339,    13,  1475,   764,   763,
    1597,   213,   201,   661,  1610,  1610,  1610,  1639,   565,  1533,
    1533,   666,  1353,  1354,  1355,  1536,  1213,  1329,  1522,   177,
     475,   375,   661,  1292,  1534,   105,   244,   261,   273,   355,
     470,   542,  1276,  1277,   661,  1527,  1292,  1316,   215,  1320,
     496,  1205,  1208,  1208,   667,  1562,   198,  1572,   198,   132,
    1016,  1018,  1536,  1395,   659,   659,   275,   379,   636,   661,
     661,   667,   667,   667,  1564,  1213,  1565,  1552,  1554,  1555,
    1531,   201,  1444,  1531,  1213,   660,  1534,   723,  1445,   427,
    1331,  1430,  1443,  1445,  1440,  1527,  1445,  1445,   661,   602,
    1123,   494,   744,   661,   198,  1696,  1331,   943,   944,   631,
    1593,   947,   724,  1534,   724,   947,   947,   708,   586,   609,
    1055,   377,   377,   700,  1396,  1396,   353,  1531,   526,   526,
     526,   526,   526,   485,  1531,  1531,  1396,   661,   863,   115,
     225,   393,   404,   411,   510,   606,   709,   710,  1396,  1396,
     661,   857,   850,   851,   870,   871,   872,     6,    12,    14,
      16,    28,    30,    60,    65,    66,    71,    83,    91,   101,
     118,   135,   144,   145,   152,   160,   166,   176,   196,   239,
     241,   248,   263,   287,   320,   339,   343,   382,   387,   394,
     396,   401,   404,   435,   449,   450,   451,   452,   476,   534,
     535,   536,   541,   557,   560,   579,   584,   597,   891,   950,
     952,   954,   955,  1081,  1085,  1087,  1090,  1096,  1097,  1098,
    1100,  1101,  1323,  1530,  1527,   377,   719,  1077,  1139,   198,
     131,   743,   746,  1180,   659,  1213,   568,   808,   807,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   661,   604,  1396,  1396,  1396,  1396,   661,   860,
     288,   184,   852,   853,   854,   870,   871,   872,   873,   876,
     877,   878,   880,  1372,  1534,   609,  1415,  1534,  1266,   667,
    1422,   250,  1213,   660,  1213,   568,  1213,  1213,   162,    37,
      63,   119,   122,   130,   149,   252,   357,   502,   572,   601,
    1255,  1011,  1227,  1213,  1226,  1259,  1213,  1213,  1011,  1255,
    1259,   660,   250,   250,  1213,  1213,  1213,  1259,  1213,  1213,
    1213,  1213,  1213,  1216,   660,   660,  1213,  1213,  1213,  1213,
    1213,  1213,  1259,   250,  1213,  1213,  1213,   660,  1213,  1213,
    1213,  1213,   201,  1213,   201,  1213,   201,  1213,  1213,  1213,
      37,    63,  1028,  1029,  1030,  1031,  1032,  1340,  1339,   660,
     660,  1196,  1197,  1198,  1652,  1653,  1654,  1189,   660,   486,
    1645,  1536,  1213,  1649,  1215,   660,   661,   660,  1228,  1309,
    1309,    18,  1213,  1649,  1319,  1213,   660,   661,  1258,  1259,
    1534,  1366,  1597,   956,  1536,  1539,  1109,   683,   647,   198,
     631,  1459,  1460,   647,   661,   660,   661,  1612,    50,   621,
     631,  1614,     7,  1616,   667,   667,   576,   576,   576,  1586,
    1331,   744,  1386,   661,  1179,  1181,  1533,   636,   284,    89,
     791,   821,   823,   826,   824,   901,   902,   903,  1534,   913,
    1216,    50,   659,   915,   905,   647,   659,   576,   201,  1135,
    1133,   162,   940,  1387,   659,  1392,  1397,  1392,   660,   939,
    1388,  1520,  1521,  1524,  1534,  1390,  1308,  1534,   647,   384,
    1611,  1538,   201,   201,   201,  1186,  1360,  1536,   661,   661,
      21,   138,  1330,  1335,  1336,   177,  1335,  1335,  1282,  1287,
    1292,  1265,   261,   261,   390,  1294,   273,   470,  1276,  1294,
    1265,  1267,  1278,  1289,  1290,  1213,    50,   220,  1317,   341,
      20,  1209,  1531,  1534,   654,  1534,   673,  1539,   565,   565,
     432,   453,   489,  1569,  1567,  1566,  1395,  1553,   661,  1557,
    1559,  1563,   129,   193,   292,   371,   588,  1341,  1435,   170,
     625,   371,  1444,  1315,  1440,  1122,   297,   696,  1124,  1407,
    1408,  1524,   162,  1339,   335,     7,  1534,   659,   466,  1685,
    1672,   724,   197,    49,   219,   479,  1061,  1061,   377,  1527,
    1527,   277,   659,   882,   885,   949,   951,   952,  1018,  1012,
     118,   118,   133,   253,   222,   292,   371,   588,   881,  1342,
    1343,  1530,   863,  1531,  1531,  1531,  1531,  1339,  1531,  1531,
     660,   661,   881,   881,   857,   661,   851,    81,    93,   401,
     965,   975,   976,  1042,  1046,  1047,  1102,  1396,  1102,   401,
    1396,  1396,  1102,  1396,   401,   401,  1396,  1396,   576,   143,
    1396,   262,   557,   197,   401,   417,  1042,  1102,   262,  1396,
     401,   557,   143,  1396,  1396,  1396,  1396,  1396,  1102,   401,
      50,  1396,  1396,   893,  1396,   401,   403,    20,   576,   647,
    1111,   401,   401,  1396,  1396,  1396,  1396,   146,   331,  1534,
    1396,  1396,   401,  1396,   950,   661,   890,   891,  1085,   659,
     667,   964,   977,  1526,  1534,  1395,  1664,    87,   481,   450,
    1078,    13,    75,  1141,    99,   180,   751,   777,  1534,   162,
     779,   665,   659,   417,  1305,  1306,  1307,  1534,   744,  1213,
     659,   659,   659,  1339,  1531,  1531,  1341,  1531,  1339,  1531,
    1531,  1531,  1531,  1531,  1531,  1531,  1339,  1339,  1531,   111,
     367,   506,  1518,  1531,  1339,   689,  1531,  1340,   881,   881,
     860,   215,  1396,   661,   854,   667,  1266,  1315,  1422,  1315,
    1213,   660,  1213,   568,   659,  1002,  1003,  1003,  1003,   659,
     997,   998,  1002,  1257,  1003,   252,  1003,   252,   660,   660,
     660,    20,  1223,   660,    20,   660,   660,   660,  1243,  1213,
    1213,   660,   660,   661,   660,   387,  1250,   661,   661,   660,
     661,   660,   254,  1235,  1236,   660,   660,   660,   660,   661,
     660,   660,  1213,   660,   198,   660,   660,   661,   660,   661,
     661,   660,  1213,   660,  1213,   660,  1213,   660,   660,   660,
     659,  1023,  1023,    21,   138,   468,   652,  1025,  1026,  1027,
     661,   661,  1315,  1204,  1654,   660,  1641,  1285,  1648,   667,
    1065,   660,  1259,  1215,   660,   661,   660,  1208,  1240,   660,
     659,  1461,   432,    58,    68,    82,    94,    95,    96,   113,
     333,   351,   464,   482,   544,   561,   776,   775,  1619,   631,
    1622,   404,   565,  1536,   384,   654,   654,  1612,  1612,  1612,
     659,   798,   377,  1402,  1177,  1527,  1181,   237,  1184,  1490,
     794,  1534,   814,  1535,   814,   828,   828,   828,   660,   661,
    1208,   899,   401,   916,   917,  1340,   901,  1539,   350,   454,
    1200,  1393,  1394,  1524,  1398,   661,   659,  1389,   660,   660,
     661,   667,  1637,   660,   661,   763,   201,  1613,  1613,  1613,
    1010,  1013,  1354,  1522,  1336,   597,   660,  1641,  1288,   664,
     261,  1294,  1294,  1280,   261,   377,   609,  1313,  1200,  1321,
    1522,  1318,  1326,  1531,  1534,   667,   660,   660,    84,   589,
     432,  1572,  1556,  1558,  1331,  1436,  1445,   647,   661,   661,
    1406,  1395,   630,  1538,  1679,   130,   252,   434,   543,   960,
     659,   724,   712,   118,  1527,   702,   703,  1527,   277,   939,
     961,   962,   963,   964,   965,   889,   890,   661,   951,   710,
     851,  1064,  1526,   947,    66,   197,   417,   598,   974,  1041,
     947,  1042,  1043,  1043,   235,   946,   132,  1534,  1526,  1160,
    1341,  1339,  1373,  1339,    13,  1086,  1094,  1095,  1534,  1160,
    1531,  1531,  1010,  1396,  1339,   264,  1374,   264,  1373,  1373,
    1536,  1095,  1396,   191,   267,   367,   959,  1339,   132,  1534,
    1341,  1341,  1373,  1160,  1324,  1325,  1524,   132,  1339,   132,
    1339,  1345,   892,  1531,  1160,  1527,  1160,  1160,    86,    88,
     132,   156,   192,   395,   439,   958,   132,  1339,   132,  1339,
     132,  1339,  1339,  1345,  1086,   953,     6,   152,  1098,   961,
    1534,     9,   191,  1110,   440,   973,   974,  1035,   978,   667,
     132,  1342,  1531,  1534,   659,  1665,  1219,  1628,    24,   175,
     713,   576,   144,   160,   715,    13,   659,  1142,   217,   661,
     747,    90,   112,   665,  1086,   660,   661,   809,   692,   693,
    1339,   694,   695,  1339,   690,   691,  1339,  1534,   881,   854,
    1534,  1315,  1326,  1309,  1213,   129,   292,   371,   588,  1256,
     371,   659,   998,  1004,    63,   119,   122,   130,   149,   194,
     252,   354,   357,   434,   572,   601,   990,   991,  1224,  1255,
     660,  1309,  1309,  1213,    50,   488,  1249,  1213,  1213,  1259,
      46,   355,   660,   631,  1237,  1213,  1309,  1213,  1213,  1213,
    1213,   660,   660,   660,  1340,   660,  1033,  1028,  1026,  1028,
    1029,  1339,  1320,  1196,  1646,  1534,   660,  1259,  1209,  1341,
    1466,  1467,   182,   287,   213,   565,    20,   609,  1615,   457,
    1620,  1620,  1620,   132,  1213,  1400,  1401,   158,   159,   799,
     155,  1184,   271,   237,   455,  1496,   661,   903,   660,   219,
     264,   918,   660,   661,   660,  1204,   661,  1395,  1399,  1400,
    1397,  1391,  1389,  1520,  1534,   893,  1534,  1613,  1012,  1361,
    1330,  1645,  1313,  1268,  1265,  1280,   261,   261,  1265,  1280,
    1270,  1271,  1303,  1304,  1204,   632,   633,   661,  1322,  1330,
    1213,  1331,   654,  1557,  1562,  1331,  1531,   696,  1408,  1315,
    1401,   735,   736,   737,  1534,   512,  1686,     9,    33,   838,
     377,   635,   701,   659,   659,  1527,   660,   660,   661,   886,
    1496,   951,  1160,   659,   264,   264,  1043,   947,  1064,  1534,
     947,   947,  1219,   152,   494,  1086,  1526,  1083,   661,  1340,
    1012,  1531,  1373,  1094,  1526,  1526,   631,  1531,   977,  1086,
     661,  1330,   896,  1086,  1091,  1086,   659,   660,  1534,  1527,
      36,    37,    42,    44,    46,    47,   119,   122,   130,   149,
     167,   192,   194,   208,   209,   252,   281,   290,   291,   293,
     327,   328,   329,   346,   347,   348,   354,   357,   373,   374,
     409,   410,   434,   490,   494,   508,   566,   569,   572,   573,
     574,   575,   615,   616,   642,   988,   989,   990,   991,   992,
     993,   994,   995,  1534,  1534,  1666,    20,   415,  1213,  1213,
     377,   719,   724,   377,    83,   720,  1143,   240,   198,  1534,
     988,  1008,   198,   198,   660,  1306,   568,   660,   661,   660,
     661,   660,   661,   278,  1337,   660,   660,   660,   660,   660,
      22,    37,    51,   595,  1010,  1020,  1021,   661,   371,  1003,
     997,    63,  1003,   252,  1225,   660,   660,   660,   660,  1251,
    1513,   660,   660,   661,   660,   341,   266,   427,   660,   660,
     660,   660,   660,   660,  1024,   660,   661,  1317,   660,   660,
     661,    18,  1468,   384,  1531,    67,   259,   363,   529,   546,
     637,  1608,  1609,   631,  1621,  1621,  1621,   660,   661,   744,
     795,  1403,   251,  1534,   659,   906,   900,   919,  1534,   917,
     941,  1394,  1401,   660,  1640,    75,  1497,  1283,   377,  1273,
    1280,  1280,   377,  1275,  1213,   659,  1301,  1302,  1291,  1522,
     419,  1346,  1326,   660,   661,   738,  1531,   245,   254,   392,
     739,   740,   741,   742,   136,   247,   603,   839,   481,  1536,
     659,  1062,  1063,  1534,  1062,   660,   884,   883,   963,    20,
     942,  1088,  1213,   947,  1064,  1534,   609,  1054,   586,  1064,
    1064,   179,   132,   132,   977,  1154,  1095,  1017,  1526,  1109,
     559,  1110,  1082,  1325,  1092,  1094,  1084,  1464,   659,  1036,
    1002,  1002,  1003,  1003,   997,   413,   659,   997,   997,  1021,
      63,   615,   990,   992,  1021,  1021,    63,   616,   616,   619,
     997,   659,  1003,  1003,  1003,  1021,  1002,  1003,   979,   997,
     619,  1002,  1021,    37,  1002,  1022,  1002,  1002,  1003,  1004,
     667,   660,   661,  1667,  1668,  1309,   504,  1531,   151,  1079,
    1146,  1534,    13,   659,  1144,   748,  1017,   132,   778,   754,
     755,  1339,   749,   750,   744,   693,   695,   691,   475,  1335,
    1416,  1020,  1011,  1022,   371,  1021,  1252,  1522,  1213,   341,
     181,   660,  1339,  1326,  1467,   144,   565,   565,   565,    18,
    1607,   213,   318,   319,   323,   324,   325,  1623,  1624,  1401,
     264,   559,  1207,   909,   659,   613,   920,  1196,   161,   171,
     385,   564,  1498,  1499,   280,  1500,  1646,  1272,   609,  1274,
     609,  1308,   196,   237,   608,  1296,  1297,  1300,  1196,  1330,
    1534,  1356,  1357,  1337,  1680,   737,  1008,   660,   661,   737,
     377,   713,   383,  1062,   660,   661,  1330,   659,   660,  1640,
     949,   659,   939,   402,   659,  1089,   660,  1064,  1054,   586,
    1061,   966,  1061,   968,   969,   122,   569,   572,   652,   653,
    1516,  1517,  1110,  1527,  1160,  1093,  1132,   660,  1037,  1534,
     317,  1038,   502,   601,   643,   999,  1000,  1001,  1066,  1513,
     999,   999,  1021,   619,   999,  1066,  1021,   999,    28,    73,
      83,   132,   207,   370,   377,   417,   490,   598,   980,   981,
    1005,  1006,  1007,  1034,  1219,  1530,   528,   996,  1021,  1022,
    1021,  1022,   999,   999,  1534,  1534,   486,   659,  1669,   714,
     721,   722,   660,   661,  1145,   517,   519,   752,   753,   754,
     757,  1219,  1534,  1213,  1185,   177,   475,   465,  1419,   660,
     661,  1330,   660,   660,  1331,    64,  1608,   384,  1339,  1339,
    1339,  1518,   371,   652,  1338,  1624,   603,  1527,   913,   547,
     914,   911,   912,  1534,   254,   274,    83,    91,   118,   241,
     320,   339,   362,   557,   936,   937,   938,  1439,    50,    50,
     161,    50,  1499,   530,   564,  1501,  1502,  1213,   659,  1213,
     659,   660,  1042,  1042,  1297,  1347,  1203,   466,  1687,   741,
    1207,   718,   719,   659,   660,    83,   263,   631,  1049,  1053,
    1057,  1060,  1530,  1063,   371,  1050,  1052,  1057,  1059,   889,
     939,   887,  1340,   916,   972,   970,  1061,   659,   967,   659,
     659,  1518,  1518,   893,   251,   660,   661,   202,   400,   503,
     377,  1039,  1001,   660,   661,   660,  1016,  1531,   366,  1009,
    1516,    15,   603,   132,   264,    20,  1007,   264,   370,  1395,
     647,  1191,  1187,   631,  1670,   531,   716,   779,  1534,   417,
    1147,  1148,  1534,   661,   779,   200,   177,  1204,  1522,  1346,
     292,   371,  1409,  1410,  1524,  1278,  1208,  1340,   660,   661,
     922,   567,  1396,  1396,   143,   143,  1396,  1396,  1396,  1396,
     659,   931,   938,   166,  1513,  1513,    50,  1513,    50,    50,
    1502,  1308,  1308,   198,  1295,  1295,   659,  1681,   726,  1673,
     715,   709,   586,   609,  1048,  1051,  1056,  1057,  1058,  1531,
    1396,   398,  1099,  1100,  1101,  1060,  1395,  1330,   660,  1099,
    1059,   886,   660,  1637,   660,   659,   659,   971,  1062,   659,
    1062,  1062,   659,  1534,   136,   603,  1021,  1513,  1021,   659,
    1210,   366,   614,   659,   132,  1342,  1531,  1534,   371,   660,
      55,    66,   284,  1213,   163,   717,   660,   661,   753,  1330,
    1203,   661,  1395,  1491,   660,   910,   912,   659,   924,   926,
     921,  1531,  1531,  1396,  1396,  1342,  1342,  1340,  1536,   548,
     932,   933,  1396,  1513,  1513,  1513,   660,   660,   215,   261,
     387,  1299,  1298,  1207,  1348,  1349,  1350,  1008,   727,   728,
    1628,  1688,  1527,   720,   660,  1061,  1061,  1099,  1058,  1339,
    1530,  1101,  1100,   132,  1342,  1531,  1534,   888,  1062,  1062,
     659,   660,  1062,   660,   660,   916,    54,   367,   462,   494,
    1040,  1040,   660,  1340,  1210,   987,  1640,    66,   384,    66,
    1213,  1148,  1410,  1401,  1013,   914,   659,   925,   926,   927,
     326,   923,   926,  1531,  1531,   934,   660,   661,   956,    50,
      50,   659,   659,  1213,   660,   661,  1682,   141,   779,   198,
     151,  1640,   660,   660,  1062,  1048,   660,  1049,  1050,   660,
       5,   132,   370,   377,   377,   660,   660,   384,   384,  1492,
     660,   661,   326,   929,   930,  1216,   935,  1536,   933,  1305,
    1307,  1208,  1350,   726,  1207,   721,  1035,  1048,   660,  1048,
     603,   136,   405,   623,   982,   475,  1503,   926,   661,   928,
     936,   660,   660,  1683,  1674,  1048,  1040,  1040,    83,   598,
     983,   984,   985,   233,  1497,   930,   660,   779,   157,  1531,
     264,   985,    50,  1500,   477,  1513,   237,  1504,  1675,   371,
     659,  1506,   779,   280,   475,  1505,   660,   666,  1507,  1508,
    1524,   494,  1509,  1536,   660,   661,  1510,  1511,  1524,  1508,
     661,  1395,  1511,  1207,  1401,  1208
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   669,   670,   671,   670,   670,   672,   672,   673,   673,
     673,   674,   674,   674,   674,   674,   674,   674,   674,   674,
     674,   674,   674,   674,   674,   674,   674,   674,   674,   674,
     674,   674,   674,   674,   674,   674,   674,   674,   674,   674,
     674,   674,   674,   674,   674,   674,   674,   674,   674,   674,
     674,   674,   674,   674,   674,   674,   674,   674,   674,   674,
     674,   674,   674,   674,   674,   674,   674,   675,   676,   676,
     677,   678,   678,   680,   679,   681,   681,   682,   682,   683,
     685,   684,   687,   686,   688,   688,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   690,   690,   690,   691,   692,
     692,   692,   693,   694,   694,   694,   695,   696,   696,   696,
     696,   696,   696,   696,   697,   697,   698,   700,   699,   701,
     699,   702,   699,   703,   699,   704,   699,   705,   699,   699,
     699,   699,   699,   706,   699,   708,   707,   709,   709,   710,
     710,   710,   710,   710,   710,   710,   712,   711,   714,   713,
     713,   715,   715,   715,   715,   716,   716,   717,   717,   718,
     718,   719,   720,   720,   722,   721,   723,   724,   724,   725,
     725,   726,   726,   727,   727,   727,   727,   727,   727,   727,
     728,   728,   729,   729,   731,   730,   732,   732,   733,   733,
     734,   734,   735,   735,   736,   736,   738,   737,   739,   739,
     740,   740,   741,   742,   742,   742,   742,   743,   743,   744,
     744,   745,   745,   747,   746,   746,   748,   746,   746,   750,
     749,   751,   751,   752,   752,   753,   754,   754,   755,   756,
     756,   757,   757,   757,   757,   757,   758,   759,   759,   760,
     760,   761,   761,   762,   762,   763,   763,   763,   764,   764,
     764,   764,   764,   764,   764,   764,   764,   764,   764,   764,
     765,   766,   767,   767,   768,   768,   769,   769,   770,   771,
     771,   772,   772,   773,   774,   774,   775,   776,   776,   776,
     776,   776,   776,   776,   776,   776,   776,   776,   776,   776,
     777,   777,   778,   778,   779,   779,   779,   779,   779,   779,
     779,   779,   779,   779,   779,   780,   780,   780,   780,   782,
     781,   784,   783,   786,   785,   787,   788,   789,   791,   790,
     792,   793,   793,   793,   794,   794,   796,   797,   798,   795,
     799,   799,   799,   801,   800,   803,   804,   802,   802,   805,
     805,   806,   806,   808,   809,   807,   811,   812,   810,   813,
     813,   814,   814,   816,   815,   818,   817,   820,   819,   822,
     821,   823,   825,   824,   827,   826,   828,   829,   831,   830,
     832,   830,   833,   830,   835,   834,   836,   834,   837,   834,
     838,   838,   839,   839,   839,   840,   841,   842,   843,   843,
     844,   844,   845,   846,   847,   847,   849,   848,   850,   850,
     850,   851,   851,   851,   852,   853,   853,   853,   854,   854,
     854,   854,   854,   854,   854,   854,   855,   856,   856,   856,
     857,   857,   857,   857,   857,   858,   859,   859,   859,   860,
     860,   860,   860,   860,   860,   860,   861,   862,   862,   862,
     863,   863,   863,   864,   865,   866,   867,   868,   869,   869,
     869,   870,   871,   872,   873,   874,   875,   876,   877,   878,
     879,   879,   880,   880,   881,   881,   883,   882,   882,   884,
     882,   882,   885,   885,   886,   887,   886,   888,   886,   889,
     890,   890,   892,   891,   893,   895,   894,   896,   897,   898,
     897,   897,   897,   897,   897,   899,   899,   900,   900,   901,
     901,   902,   902,   903,   904,   905,   906,   907,   907,   908,
     909,   908,   910,   908,   911,   911,   912,   913,   914,   914,
     915,   915,   916,   916,   918,   917,   919,   920,   921,   920,
     922,   920,   923,   923,   924,   924,   925,   925,   927,   928,
     926,   929,   929,   930,   930,   931,   931,   932,   932,   934,
     933,   935,   936,   936,   937,   937,   938,   938,   938,   938,
     938,   938,   938,   938,   938,   940,   941,   939,   942,   942,
     943,   943,   944,   944,   945,   945,   946,   946,   947,   947,
     948,   948,   949,   949,   950,   950,   951,   951,   951,   952,
     952,   952,   952,   952,   952,   952,   952,   952,   952,   952,
     952,   952,   952,   952,   952,   952,   952,   952,   952,   953,
     952,   952,   952,   952,   952,   952,   952,   952,   952,   952,
     952,   952,   952,   952,   952,   952,   954,   955,   956,   957,
     958,   958,   958,   958,   958,   958,   958,   959,   959,   959,
     960,   960,   960,   960,   961,   962,   962,   963,   963,   964,
     964,   966,   965,   967,   965,   968,   965,   969,   965,   970,
     965,   971,   965,   972,   965,   965,   973,   973,   974,   975,
     975,   976,   978,   979,   977,   980,   980,   981,   981,   982,
     982,   982,   983,   983,   984,   984,   985,   985,   985,   986,
     987,   988,   988,   988,   988,   988,   988,   988,   988,   988,
     988,   988,   988,   988,   988,   988,   988,   988,   988,   988,
     988,   988,   988,   988,   988,   988,   988,   988,   988,   988,
     988,   988,   988,   988,   988,   988,   988,   988,   988,   988,
     989,   989,   989,   989,   989,   989,   989,   989,   990,   991,
     991,   992,   992,   993,   993,   993,   993,   993,   994,   994,
     994,   994,   994,   995,   995,   995,   996,   996,   997,   997,
     997,   998,   999,   999,  1000,  1000,  1001,  1001,  1001,  1002,
    1002,  1002,  1002,  1003,  1003,  1004,  1004,  1005,  1005,  1006,
    1006,  1007,  1007,  1007,  1007,  1007,  1007,  1007,  1007,  1007,
    1007,  1007,  1007,  1007,  1007,  1007,  1008,  1009,  1009,  1010,
    1010,  1011,  1011,  1012,  1012,  1013,  1013,  1014,  1014,  1015,
    1015,  1016,  1017,  1017,  1018,  1018,  1019,  1019,  1020,  1020,
    1020,  1021,  1021,  1021,  1021,  1021,  1022,  1022,  1024,  1023,
    1025,  1025,  1026,  1027,  1027,  1027,  1027,  1028,  1029,  1030,
    1030,  1031,  1032,  1032,  1033,  1033,  1034,  1034,  1035,  1036,
    1036,  1037,  1037,  1038,  1038,  1038,  1038,  1039,  1039,  1039,
    1039,  1039,  1040,  1040,  1040,  1040,  1040,  1041,  1041,  1042,
    1042,  1043,  1043,  1044,  1044,  1044,  1045,  1045,  1046,  1047,
    1048,  1048,  1049,  1049,  1050,  1050,  1051,  1051,  1052,  1052,
    1053,  1053,  1054,  1054,  1055,  1055,  1055,  1056,  1056,  1057,
    1057,  1057,  1057,  1057,  1057,  1058,  1058,  1059,  1060,  1060,
    1061,  1061,  1061,  1062,  1062,  1063,  1063,  1064,  1064,  1065,
    1065,  1066,  1066,  1068,  1069,  1067,  1070,  1067,  1067,  1071,
    1067,  1072,  1067,  1073,  1067,  1074,  1067,  1075,  1067,  1067,
    1067,  1067,  1067,  1076,  1067,  1077,  1077,  1077,  1077,  1078,
    1078,  1079,  1079,  1080,  1080,  1081,  1081,  1081,  1081,  1081,
    1081,  1081,  1081,  1081,  1081,  1082,  1081,  1081,  1083,  1081,
    1084,  1081,  1081,  1081,  1081,  1081,  1085,  1086,  1086,  1088,
    1087,  1089,  1089,  1089,  1091,  1090,  1092,  1093,  1092,  1094,
    1094,  1095,  1096,  1096,  1097,  1098,  1098,  1098,  1098,  1098,
    1098,  1098,  1098,  1098,  1098,  1098,  1098,  1098,  1098,  1098,
    1098,  1098,  1098,  1098,  1098,  1099,  1099,  1099,  1099,  1099,
    1100,  1100,  1101,  1101,  1102,  1102,  1103,  1103,  1105,  1104,
    1106,  1106,  1107,  1107,  1108,  1108,  1109,  1109,  1109,  1110,
    1110,  1110,  1111,  1111,  1111,  1111,  1113,  1112,  1114,  1112,
    1112,  1112,  1115,  1116,  1116,  1117,  1117,  1118,  1118,  1118,
    1120,  1119,  1121,  1121,  1122,  1122,  1122,  1123,  1123,  1123,
    1124,  1124,  1126,  1125,  1127,  1127,  1127,  1128,  1129,  1128,
    1131,  1130,  1132,  1132,  1133,  1133,  1134,  1134,  1134,  1135,
    1135,  1137,  1136,  1138,  1138,  1139,  1140,  1140,  1141,  1141,
    1142,  1143,  1142,  1144,  1145,  1144,  1146,  1146,  1146,  1147,
    1147,  1147,  1148,  1148,  1149,  1149,  1150,  1151,  1150,  1153,
    1152,  1154,  1154,  1155,  1155,  1156,  1156,  1156,  1156,  1156,
    1156,  1157,  1157,  1159,  1158,  1160,  1160,  1160,  1162,  1161,
    1161,  1163,  1163,  1164,  1164,  1165,  1167,  1166,  1168,  1168,
    1169,  1169,  1170,  1171,  1172,  1172,  1174,  1173,  1175,  1175,
    1176,  1176,  1177,  1178,  1180,  1179,  1182,  1181,  1183,  1183,
    1184,  1184,  1185,  1186,  1186,  1188,  1187,  1187,  1190,  1189,
    1189,  1192,  1191,  1193,  1193,  1193,  1195,  1194,  1196,  1197,
    1198,  1198,  1199,  1199,  1200,  1200,  1201,  1201,  1202,  1202,
    1202,  1203,  1203,  1203,  1204,  1204,  1204,  1205,  1205,  1206,
    1207,  1208,  1209,  1209,  1209,  1209,  1209,  1210,  1210,  1210,
    1211,  1211,  1211,  1212,  1212,  1213,  1213,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1213,  1213,  1214,  1214,  1214,  1214,
    1214,  1214,  1215,  1215,  1215,  1215,  1215,  1215,  1215,  1215,
    1215,  1215,  1215,  1215,  1215,  1215,  1216,  1216,  1216,  1216,
    1216,  1216,  1216,  1216,  1216,  1216,  1216,  1216,  1216,  1216,
    1216,  1217,  1217,  1218,  1218,  1219,  1219,  1220,  1220,  1221,
    1221,  1221,  1221,  1221,  1221,  1222,  1222,  1223,  1223,  1224,
    1224,  1224,  1224,  1224,  1224,  1225,  1224,  1224,  1224,  1224,
    1224,  1226,  1227,  1227,  1228,  1228,  1228,  1228,  1228,  1228,
    1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,
    1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,
    1228,  1228,  1228,  1228,  1229,  1229,  1229,  1229,  1229,  1229,
    1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,
    1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,
    1229,  1229,  1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,
    1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,
    1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,  1231,
    1231,  1231,  1231,  1231,  1231,  1231,  1231,  1231,  1231,  1231,
    1231,  1231,  1231,  1231,  1231,  1231,  1231,  1231,  1231,  1231,
    1231,  1231,  1231,  1231,  1231,  1232,  1232,  1232,  1232,  1232,
    1232,  1232,  1232,  1234,  1233,  1233,  1235,  1235,  1236,  1236,
    1237,  1237,  1238,  1238,  1239,  1239,  1240,  1241,  1241,  1241,
    1241,  1241,  1241,  1241,  1242,  1243,  1241,  1241,  1241,  1241,
    1241,  1241,  1241,  1241,  1241,  1241,  1241,  1244,  1241,  1246,
    1245,  1247,  1247,  1247,  1248,  1248,  1249,  1249,  1250,  1251,
    1250,  1252,  1252,  1254,  1253,  1255,  1256,  1255,  1255,  1255,
    1255,  1255,  1255,  1255,  1255,  1255,  1255,  1255,  1257,  1255,
    1258,  1258,  1259,  1259,  1260,  1260,  1261,  1261,  1262,  1262,
    1263,  1263,  1264,  1264,  1265,  1265,  1266,  1267,  1267,  1268,
    1268,  1269,  1270,  1269,  1271,  1269,  1269,  1272,  1269,  1273,
    1269,  1269,  1274,  1269,  1275,  1269,  1269,  1276,  1276,  1276,
    1277,  1277,  1278,  1278,  1279,  1281,  1280,  1280,  1280,  1282,
    1283,  1282,  1284,  1286,  1285,  1288,  1287,  1290,  1291,  1289,
    1292,  1293,  1294,  1294,  1295,  1295,  1295,  1295,  1296,  1296,
    1298,  1297,  1299,  1297,  1300,  1300,  1301,  1302,  1301,  1304,
    1303,  1305,  1305,  1306,  1306,  1307,  1307,  1308,  1308,  1309,
    1309,  1309,  1309,  1309,  1309,  1309,  1309,  1309,  1309,  1309,
    1309,  1310,  1310,  1310,  1310,  1310,  1310,  1310,  1310,  1310,
    1311,  1311,  1311,  1311,  1312,  1312,  1312,  1313,  1313,  1314,
    1314,  1315,  1316,  1315,  1317,  1318,  1317,  1319,  1319,  1320,
    1320,  1321,  1321,  1322,  1322,  1322,  1323,  1324,  1324,  1325,
    1326,  1326,  1328,  1327,  1329,  1329,  1330,  1330,  1330,  1331,
    1331,  1332,  1333,  1333,  1333,  1334,  1334,  1334,  1335,  1335,
    1335,  1335,  1335,  1336,  1337,  1337,  1337,  1337,  1338,  1338,
    1338,  1339,  1339,  1339,  1339,  1339,  1339,  1340,  1340,  1340,
    1340,  1340,  1341,  1341,  1341,  1341,  1341,  1342,  1342,  1342,
    1342,  1342,  1343,  1344,  1344,  1345,  1345,  1346,  1347,  1346,
    1348,  1348,  1349,  1349,  1350,  1352,  1351,  1353,  1353,  1354,
    1355,  1355,  1356,  1356,  1358,  1357,  1360,  1361,  1359,  1359,
    1359,  1363,  1362,  1365,  1364,  1366,  1364,  1364,  1364,  1364,
    1364,  1364,  1364,  1367,  1364,  1364,  1364,  1364,  1364,  1364,
    1368,  1368,  1369,  1370,  1371,  1371,  1372,  1373,  1373,  1374,
    1374,  1375,  1375,  1377,  1378,  1376,  1380,  1381,  1379,  1382,
    1382,  1382,  1382,  1383,  1383,  1384,  1384,  1385,  1386,  1386,
    1386,  1387,  1386,  1388,  1388,  1389,  1389,  1390,  1389,  1391,
    1389,  1392,  1392,  1393,  1393,  1394,  1395,  1395,  1396,  1396,
    1398,  1397,  1399,  1399,  1400,  1400,  1401,  1401,  1402,  1403,
    1402,  1405,  1406,  1404,  1407,  1407,  1408,  1409,  1409,  1410,
    1411,  1411,  1413,  1412,  1415,  1416,  1414,  1417,  1414,  1418,
    1414,  1419,  1419,  1420,  1420,  1421,  1421,  1422,  1422,  1423,
    1423,  1424,  1424,  1424,  1426,  1425,  1427,  1427,  1428,  1428,
    1429,  1429,  1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,
    1430,  1431,  1431,  1433,  1432,  1434,  1434,  1434,  1434,  1434,
    1434,  1434,  1434,  1434,  1434,  1434,  1434,  1434,  1434,  1435,
    1434,  1436,  1434,  1434,  1434,  1434,  1434,  1434,  1434,  1434,
    1434,  1434,  1434,  1434,  1434,  1434,  1434,  1434,  1434,  1434,
    1434,  1434,  1434,  1434,  1434,  1434,  1434,  1434,  1434,  1434,
    1434,  1434,  1434,  1434,  1434,  1434,  1434,  1434,  1437,  1437,
    1437,  1438,  1438,  1439,  1439,  1440,  1440,  1441,  1441,  1442,
    1442,  1443,  1443,  1444,  1444,  1445,  1445,  1445,  1447,  1446,
    1448,  1446,  1449,  1449,  1449,  1449,  1449,  1450,  1450,  1451,
    1452,  1452,  1452,  1453,  1453,  1454,  1454,  1454,  1456,  1455,
    1458,  1457,  1457,  1459,  1459,  1460,  1461,  1460,  1462,  1462,
    1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,
    1463,  1463,  1463,  1463,  1463,  1463,  1464,  1464,  1465,  1465,
    1466,  1466,  1466,  1467,  1468,  1468,  1470,  1469,  1471,  1471,
    1473,  1472,  1474,  1472,  1472,  1475,  1475,  1476,  1476,  1478,
    1477,  1479,  1480,  1480,  1482,  1481,  1483,  1483,  1483,  1484,
    1484,  1484,  1484,  1485,  1485,  1486,  1487,  1489,  1490,  1491,
    1492,  1488,  1493,  1493,  1494,  1494,  1495,  1495,  1495,  1496,
    1496,  1496,  1497,  1497,  1498,  1498,  1499,  1499,  1499,  1499,
    1500,  1500,  1501,  1501,  1502,  1502,  1503,  1503,  1504,  1504,
    1505,  1505,  1506,  1506,  1506,  1507,  1507,  1508,  1508,  1509,
    1509,  1510,  1510,  1511,  1512,  1512,  1512,  1512,  1513,  1513,
    1514,  1514,  1514,  1515,  1516,  1516,  1516,  1517,  1517,  1517,
    1517,  1517,  1517,  1517,  1517,  1517,  1517,  1518,  1518,  1518,
    1518,  1518,  1519,  1519,  1519,  1520,  1520,  1521,  1521,  1522,
    1523,  1523,  1524,  1524,  1525,  1525,  1525,  1526,  1526,  1526,
    1526,  1527,  1527,  1527,  1528,  1528,  1529,  1530,  1530,  1531,
    1532,  1533,  1534,  1534,  1535,  1535,  1536,  1536,  1536,  1537,
    1537,  1537,  1538,  1538,  1539,  1540,  1540,  1540,  1540,  1540,
    1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,
    1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,
    1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,
    1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,
    1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,  1540,
    1540,  1540,  1540,  1540,  1540,  1540,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1543,  1542,  1544,  1545,  1542,
    1546,  1546,  1548,  1547,  1549,  1547,  1550,  1547,  1552,  1551,
    1551,  1553,  1553,  1555,  1554,  1556,  1554,  1558,  1557,  1557,
    1559,  1559,  1559,  1560,  1560,  1560,  1560,  1561,  1561,  1561,
    1561,  1562,  1563,  1563,  1563,  1563,  1563,  1563,  1563,  1563,
    1563,  1563,  1564,  1564,  1564,  1565,  1565,  1565,  1565,  1566,
    1567,  1568,  1568,  1569,  1569,  1569,  1569,  1570,  1570,  1571,
    1571,  1571,  1572,  1572,  1572,  1572,  1572,  1574,  1573,  1575,
    1575,  1576,  1576,  1577,  1578,  1578,  1578,  1578,  1578,  1580,
    1579,  1581,  1581,  1582,  1581,  1583,  1583,  1584,  1584,  1585,
    1585,  1585,  1585,  1586,  1585,  1587,  1587,  1587,  1587,  1587,
    1588,  1589,  1589,  1589,  1589,  1589,  1589,  1590,  1590,  1591,
    1592,  1592,  1592,  1592,  1592,  1593,  1593,  1594,  1594,  1595,
    1595,  1596,  1597,  1597,  1598,  1598,  1599,  1599,  1600,  1600,
    1601,  1601,  1603,  1602,  1604,  1602,  1605,  1602,  1606,  1602,
    1602,  1602,  1602,  1602,  1602,  1602,  1602,  1602,  1602,  1602,
    1602,  1602,  1602,  1602,  1602,  1602,  1602,  1602,  1602,  1602,
    1602,  1602,  1602,  1602,  1602,  1602,  1607,  1607,  1608,  1608,
    1609,  1609,  1609,  1610,  1610,  1610,  1610,  1611,  1611,  1612,
    1612,  1613,  1613,  1614,  1614,  1615,  1615,  1616,  1616,  1616,
    1616,  1616,  1617,  1617,  1618,  1618,  1619,  1620,  1620,  1620,
    1620,  1620,  1621,  1621,  1622,  1622,  1623,  1623,  1624,  1624,
    1624,  1624,  1624,  1624,  1626,  1625,  1627,  1628,  1628,  1629,
    1629,  1630,  1630,  1630,  1631,  1631,  1631,  1632,  1632,  1633,
    1634,  1634,  1635,  1636,  1637,  1637,  1639,  1638,  1640,  1640,
    1641,  1641,  1643,  1642,  1644,  1644,  1645,  1645,  1645,  1646,
    1646,  1647,  1648,  1647,  1649,  1650,  1651,  1652,  1652,  1653,
    1653,  1654,  1654,  1654,  1654,  1654,  1654,  1654,  1654,  1655,
    1655,  1655,  1656,  1656,  1656,  1656,  1656,  1657,  1657,  1657,
    1657,  1657,  1657,  1658,  1658,  1659,  1660,  1661,  1661,  1661,
    1662,  1662,  1662,  1664,  1663,  1665,  1665,  1666,  1666,  1668,
    1667,  1669,  1669,  1670,  1670,  1670,  1670,  1672,  1673,  1674,
    1675,  1671,  1676,  1676,  1677,  1679,  1680,  1681,  1682,  1683,
    1678,  1685,  1686,  1687,  1688,  1684,  1689,  1689,  1689,  1689,
    1689,  1689,  1690,  1690,  1690,  1691,  1691,  1692,  1692,  1692,
    1693,  1693,  1694,  1695,  1694,  1696,  1696,  1697,  1697,  1698,
    1698,  1699
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       4,     1,     2,     0,     4,     0,     2,     3,     1,     2,
       0,     3,     0,     6,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     5,     5,     1,     0,     1,     3,     1,     0,
       1,     3,     1,     0,     1,     3,     1,     3,     3,     3,
       3,     3,     3,     3,     0,     1,     1,     0,     7,     0,
      14,     0,    13,     0,    13,     0,     6,     0,     3,     5,
       6,     4,     3,     0,     3,     0,    12,     1,     3,     2,
       2,     2,     2,     2,     2,     2,     0,    13,     0,     6,
       2,     0,     1,     3,     1,     0,     2,     0,     2,     0,
       1,     4,     0,     2,     0,     2,     0,     3,     1,     0,
       2,     0,     2,     2,     2,     2,     2,     3,     3,     1,
       1,     2,     3,     3,     0,     4,     0,     3,     0,     1,
       3,     1,     0,     1,     3,     1,     0,     3,     0,     1,
       3,     1,     2,     0,     1,     1,     1,     0,     3,     2,
       3,     0,     3,     0,     5,     5,     0,     7,     5,     0,
       2,     1,     1,     1,     3,     1,     1,     1,     3,     0,
       1,     1,     1,     1,     2,     1,     3,     1,     1,     0,
       1,     0,     2,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     4,     0,     1,     1,     3,     1,     3,     3,     1,
       2,     1,     1,     1,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     0,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       5,     0,     2,     0,     3,     2,     2,     2,     0,     6,
       2,     0,     2,     1,     1,     3,     0,     0,     0,     7,
       0,     2,     2,     0,     6,     0,     0,     4,     1,     1,
       2,     1,     2,     0,     0,     6,     0,     0,     6,     0,
       2,     0,     1,     0,     6,     0,     3,     0,     5,     0,
       4,     3,     0,     6,     0,     6,     1,     0,     0,     6,
       0,     6,     0,     6,     0,     4,     0,     4,     0,     4,
       1,     1,     1,     1,     1,     2,     4,     5,     0,     4,
       4,     4,     3,     3,     2,     2,     0,     2,     1,     2,
       3,     1,     1,     1,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     4,
       0,     1,     1,     1,     1,     1,     0,     7,     3,     0,
       5,     1,     2,     4,     0,     0,     5,     0,     7,     1,
       0,     1,     0,     4,     0,     0,     3,     5,     6,     0,
       4,     2,     2,     2,     2,     0,     1,     0,     3,     0,
       1,     1,     3,     1,     4,     5,     5,     0,     2,     0,
       0,     7,     0,    10,     1,     3,     1,     1,     0,     2,
       0,     3,     1,     3,     0,     6,     1,     0,     0,     5,
       0,     4,     1,     1,     1,     3,     1,     3,     0,     0,
       5,     1,     3,     1,     1,     0,     3,     1,     3,     0,
       4,     1,     0,     1,     2,     1,     3,     4,     3,     3,
       3,     3,     4,     4,     3,     0,     0,     6,     0,     1,
       0,     1,     1,     2,     1,     1,     0,     3,     0,     3,
       1,     3,     0,     1,     1,     2,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     0,
       6,     1,     1,     3,     4,     4,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     2,
       2,     0,     9,     0,    10,     0,     9,     0,     9,     0,
      10,     0,    11,     0,    10,     2,     0,     1,     4,     0,
       1,     2,     0,     0,     5,     1,     7,     0,     2,     0,
       1,     1,     0,     1,     2,     1,     1,     2,     2,     4,
       3,     3,     3,     3,     1,     2,     1,     1,     3,     2,
       3,     2,     2,     1,     3,     3,     2,     3,     1,     2,
       2,     2,     1,     2,     3,     1,     1,     2,     3,     2,
       3,     2,     2,     3,     3,     3,     5,     5,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     2,     1,     2,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     3,     0,     1,
       1,     5,     0,     1,     2,     1,     1,     1,     1,     3,
       3,     3,     3,     0,     1,     0,     1,     0,     1,     2,
       1,     1,     2,     2,     4,     1,     3,     2,     1,     2,
       2,     2,     3,     3,     3,     3,     2,     2,     1,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       1,     1,     0,     2,     1,     1,     0,     1,     2,     1,
       1,     0,     1,     2,     1,     2,     0,     1,     0,     4,
       1,     1,     1,     0,     1,     2,     1,     1,     2,     1,
       3,     3,     1,     1,     0,     2,     0,     1,     5,     0,
       3,     3,     1,     0,     2,     2,     2,     0,     3,     3,
       6,     6,     1,     1,     2,     2,     2,     2,     2,     1,
       1,     0,     1,     1,     1,     1,     0,     1,     1,     1,
       0,     1,     0,     1,     0,     1,     1,     2,     1,     2,
       1,     2,     0,     2,     0,     2,     2,     2,     2,     3,
       2,     3,     3,     3,     3,     1,     1,     1,     1,     3,
       1,     1,     1,     4,     2,     1,     4,     0,     1,     0,
       2,     1,     3,     0,     0,     7,     0,     5,     7,     0,
       5,     0,     5,     0,     5,     0,     4,     0,    11,     3,
       4,     3,     3,     0,     8,     0,     3,     1,     4,     0,
       3,     0,     2,     0,     1,     0,     2,     2,     2,     2,
       1,     1,     1,     4,     4,     0,     6,     4,     0,     5,
       0,     6,     4,     3,     1,     7,     2,     1,     1,     0,
       6,     0,     3,     2,     0,     5,     0,     0,     6,     1,
       3,     1,     1,     3,     3,     3,     2,     4,     6,     5,
       5,     5,     3,     4,     2,     2,     6,     5,     3,     5,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     2,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     2,
       0,     1,     2,     1,     1,     1,     0,     1,     1,     0,
       2,     1,     0,     1,     1,     1,     0,     6,     0,     5,
       4,     4,     3,     0,     1,     1,     3,     3,     2,     2,
       0,     2,     1,     3,     0,     1,     1,     0,     2,     4,
       1,     3,     0,     5,     0,     1,     1,     3,     0,     4,
       0,     4,     0,     1,     1,     2,     1,     1,     1,     0,
       2,     0,     5,     1,     3,     2,     0,     3,     1,     4,
       1,     0,     4,     1,     0,     4,     0,     1,     3,     0,
       1,     3,     1,     1,     2,     6,     3,     0,     4,     0,
       3,     0,     1,     1,     2,     1,     1,     1,     1,     1,
       2,     0,     2,     0,     5,     0,     1,     1,     0,     4,
       4,     3,     5,     1,     3,     3,     0,     6,     1,     1,
       1,     3,     2,     3,     1,     1,     0,     6,     1,     1,
       1,     3,     3,     4,     0,     6,     0,     2,     0,     4,
       0,     2,     1,     2,     4,     0,     3,     3,     0,     4,
       3,     0,     3,     4,     3,    11,     0,     3,     8,     2,
       0,     1,     1,     1,     0,     1,     2,     1,     1,     1,
       1,     0,     2,     4,     3,     1,     1,     3,     4,     0,
       0,     0,     0,     2,     2,     1,     1,     0,     2,     3,
       0,     2,     3,     0,     2,     3,     3,     3,     2,     3,
       4,     3,     4,     3,     4,     1,     3,     4,     3,     3,
       6,     1,     5,     6,     5,     7,     6,     8,     5,     6,
       4,     4,     5,     3,     4,     1,     3,     3,     3,     3,
       3,     3,     5,     5,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     2,     1,
       2,     1,     1,     1,     2,     0,     3,     1,     1,     2,
       2,     4,     1,     3,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     3,     2,     2,     2,     2,     3,
       3,     5,     6,     4,     4,     7,     2,     6,     5,     6,
       6,     4,     4,     5,     4,     6,     2,     2,     4,     4,
       4,    10,     6,     8,     6,     4,     4,     6,     4,     4,
       4,     6,     4,     7,     7,     7,     6,     6,     6,     6,
       3,     4,     6,     8,     2,     2,     8,     8,     6,     6,
       2,     6,     6,     8,     8,     6,     8,     6,     2,     8,
       8,     2,     2,     2,     6,     6,     4,     4,     8,     4,
       4,     4,     4,     3,     8,     6,     8,     4,     4,     6,
       4,     4,     4,     6,     8,     4,     3,     6,     4,     6,
       5,     8,     7,    10,     1,     6,     4,     4,     4,     4,
       4,     6,     4,     0,     5,     6,     2,     3,     0,     4,
       0,     3,     0,     1,     1,     3,     4,     4,     5,     4,
       4,     4,     5,     4,     0,     0,     7,     4,     5,     4,
       5,     4,     4,     4,     4,     4,     5,     0,     8,     0,
       3,     3,     1,     4,     0,     1,     0,     2,     0,     0,
       4,     4,     2,     0,     3,     2,     0,     4,     2,     1,
       1,     2,     1,     2,     1,     2,     2,     2,     0,     3,
       0,     1,     1,     3,     1,     3,     1,     3,     0,     1,
       0,     2,     4,     5,     1,     1,     1,     1,     4,     1,
       3,     3,     0,     6,     0,     8,     4,     0,     8,     0,
      10,     6,     0,     8,     0,    10,     6,     1,     2,     1,
       1,     2,     0,     1,     5,     0,     5,     3,     5,     2,
       0,     5,     1,     0,     3,     0,     3,     0,     0,     5,
       0,     1,     0,     1,     0,     2,     3,     3,     1,     1,
       0,     7,     0,     7,     1,     2,     0,     0,     2,     0,
       2,     0,     1,     1,     1,     1,     3,     1,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     1,     0,     2,     0,
       1,     0,     0,     3,     0,     0,     3,     2,     0,     0,
       4,     4,     2,     0,     1,     1,     3,     3,     1,     2,
       0,     1,     0,     4,     4,     2,     0,     1,     1,     0,
       1,     1,     2,     5,     4,     1,     3,     3,     1,     1,
       1,     1,     1,     1,     0,     2,     3,     4,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     0,     6,
       0,     1,     3,     1,     3,     0,     2,     3,     1,     1,
       2,     1,     0,     1,     0,     3,     0,     0,     7,     2,
       1,     0,     3,     0,     7,     0,     7,     4,     6,     4,
       4,     5,     5,     0,     6,     4,     4,     5,     6,     4,
       1,     3,     1,     2,     1,     3,     1,     0,     2,     0,
       2,     0,     1,     0,     0,     8,     0,     0,     6,     0,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     3,
       4,     0,     3,     3,     1,     2,     2,     0,     3,     0,
       5,     3,     1,     3,     1,     3,     1,     1,     0,     1,
       0,     4,     0,     1,     3,     1,     1,     1,     0,     0,
       6,     0,     0,    11,     3,     1,     3,     3,     1,     3,
       0,     1,     0,     4,     0,     0,     9,     0,     5,     0,
       6,     0,     2,     1,     3,     2,     4,     0,     2,     0,
       2,     1,     1,     1,     0,     4,     0,     1,     0,     1,
       1,     3,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     0,     3,     0,     3,     2,     4,     4,     3,     4,
       4,     1,     3,     3,     3,     3,     6,     2,     2,     0,
       6,     0,     7,     5,     2,     1,     1,     1,     5,     5,
       2,     2,     1,     4,     3,     2,     3,     2,     2,     1,
       4,     4,     3,     3,     2,     3,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     0,     1,     0,     2,     0,     1,     1,
       1,     0,     2,     0,     2,     0,     3,     3,     0,     4,
       0,     4,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     0,     3,     0,     1,     1,     0,     4,
       0,     4,     1,     0,     1,     4,     0,     3,     3,     1,
       2,     2,     2,     2,     3,     3,     2,     1,     1,     1,
       1,     2,     1,     1,     1,     2,     0,     1,     0,     5,
       0,     1,     3,     1,     0,     3,     0,     3,     3,     1,
       0,     4,     0,     3,     2,     0,     1,     0,     2,     0,
       3,     3,     2,     2,     0,     5,     0,     1,     1,     0,
       1,     1,     2,     1,     2,     1,     2,     0,     0,     0,
       0,    22,     1,     1,     0,     1,     0,     1,     1,     0,
       1,     1,     0,     2,     2,     1,     3,     4,     3,     3,
       0,     2,     2,     1,     3,     3,     0,     4,     0,     3,
       1,     1,     0,     3,     2,     3,     1,     1,     2,     0,
       2,     3,     1,     5,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     2,     2,     2,     1,     1,     3,     5,     1,
       1,     1,     1,     1,     3,     4,     5,     1,     5,     3,
       2,     1,     3,     2,     2,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     0,     0,     7,
       1,     3,     0,     3,     0,     3,     0,     3,     0,     3,
       2,     0,     2,     0,     2,     0,     4,     0,     3,     1,
       1,     1,     1,     0,     1,     1,     1,     0,     2,     2,
       2,     3,     3,     4,     6,     2,     3,     3,     3,     5,
       2,     3,     1,     3,     3,     1,     1,     3,     3,     1,
       3,     2,     2,     2,     2,     2,     1,     1,     3,     1,
       4,     4,     1,     1,     1,     1,     1,     0,     4,     1,
       1,     1,     3,     3,     1,     1,     2,     2,     2,     0,
       3,     4,     3,     0,     7,     1,     2,     1,     1,     1,
       1,     1,     1,     0,     5,     1,     1,     1,     1,     1,
       3,     6,     6,     6,     7,     5,     3,     4,     1,     3,
       8,     8,     8,     6,     4,     0,     3,     0,     3,     1,
       3,     2,     1,     1,     0,     1,     1,     2,     0,     1,
       1,     3,     0,     3,     0,     3,     0,     3,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     3,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     2,     0,     1,     3,     1,
       2,     2,     2,     1,     3,     3,     1,     1,     3,     1,
       3,     1,     3,     1,     1,     1,     1,     4,     5,     4,
       6,     1,     0,     3,     3,     1,     1,     0,     2,     2,
       2,     2,     0,     2,     0,     3,     2,     1,     2,     2,
       2,     2,     2,     2,     0,     3,     1,     0,     1,     0,
       1,     0,     3,     2,     0,     1,     2,     0,     1,     4,
       4,     5,     2,     3,     0,     1,     0,     4,     1,     1,
       0,     1,     0,     2,     2,     1,     0,     1,     1,     3,
       4,     1,     0,     5,     3,     0,     0,     0,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     3,     3,     3,
       0,     3,     3,     0,     8,     0,     3,     1,     3,     0,
       3,     2,     4,     0,     3,     4,     4,     0,     0,     0,
       0,    18,     2,     1,     7,     0,     0,     0,     0,     0,
      15,     0,     0,     0,     0,    12,     4,     4,     3,     4,
       3,     2,     1,     3,     5,     1,     1,     0,     1,     1,
       0,     2,     0,     0,     3,     0,     2,     5,     3,     3,
       3,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (thd);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, THD *thd)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, thd); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
{
  YYUSE (yyvaluep);
  YYUSE (thd);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (THD *thd)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, thd);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 2026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
              my_yyabort_error((ER_EMPTY_QUERY, MYF(0)));

            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
#line 19969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3:
#line 2035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
#line 19996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 5:
#line 2060 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
#line 20005 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 67:
#line 2139 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[0].lex_str);
          }
#line 20015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 70:
#line 2153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[-2].lex_str);
          }
#line 20025 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 71:
#line 2162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[0].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
#line 20035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 72:
#line 2168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[0].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
#line 20045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 73:
#line 2177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[0].lex_str);
          }
#line 20055 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 74:
#line 2183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 79:
#line 2198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr,
                                                               thd->mem_root))
              MYSQL_YYABORT;
          }
#line 20073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 80:
#line 2211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HELP"));
          }
#line 20082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 81:
#line 2216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[0].lex_str).str;
          }
#line 20092 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 82:
#line 2227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
#line 20100 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 83:
#line 2231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 86:
#line 2241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.host = (yyvsp[0].lex_str).str;
          }
#line 20114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 87:
#line 2245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.user = (yyvsp[0].lex_str).str;
          }
#line 20122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 88:
#line 2249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.password = (yyvsp[0].lex_str).str;
          }
#line 20130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 89:
#line 2253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.port = (yyvsp[0].ulong_num);
          }
#line 20138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 90:
#line 2257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.connect_retry = (yyvsp[0].ulong_num);
          }
#line 20146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 91:
#line 2261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl= (yyvsp[0].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
#line 20155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 92:
#line 2266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_ca= (yyvsp[0].lex_str).str;
          }
#line 20163 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 93:
#line 2270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_capath= (yyvsp[0].lex_str).str;
          }
#line 20171 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 94:
#line 2274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_cert= (yyvsp[0].lex_str).str;
          }
#line 20179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 95:
#line 2278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_cipher= (yyvsp[0].lex_str).str;
          }
#line 20187 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 96:
#line 2282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_key= (yyvsp[0].lex_str).str;
          }
#line 20195 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 97:
#line 2286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[0].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
#line 20204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 98:
#line 2291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_crl= (yyvsp[0].lex_str).str;
          }
#line 20212 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 99:
#line 2295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_crlpath= (yyvsp[0].lex_str).str;
          }
#line 20220 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 100:
#line 2300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[0].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
               my_yyabort_error((ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0),
                                 SLAVE_MAX_HEARTBEAT_PERIOD));

            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 20251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 101:
#line 2327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
#line 20259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 102:
#line 2331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_do_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 20267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 103:
#line 2335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_ignore_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 20275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 108:
#line 2350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 20283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 112:
#line 2363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_do_domain_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 20291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 116:
#line 2376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_ignore_domain_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 20299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 117:
#line 2383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.log_file_name = (yyvsp[0].lex_str).str;
          }
#line 20307 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 118:
#line 2387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, (yyvsp[0].ulonglong_number));
          }
#line 20326 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 119:
#line 2402 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.relay_log_name = (yyvsp[0].lex_str).str;
          }
#line 20334 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 120:
#line 2406 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.relay_log_pos = (yyvsp[0].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
#line 20344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 121:
#line 2412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
#line 20354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 122:
#line 2418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
#line 20364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 123:
#line 2424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
#line 20374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 124:
#line 2433 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
          }
#line 20383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 126:
#line 2442 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->mi.connection_name= (yyvsp[0].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME"));
#endif
         }
#line 20395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 127:
#line 2455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (!(lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_create_table()))
              MYSQL_YYABORT;
            lex->create_info.init();
            if (lex->set_command_with_check(SQLCOM_CREATE_TABLE, (yyvsp[-3].num), (yyvsp[-4].object_ddl_options) | (yyvsp[-1].object_ddl_options)))
               MYSQL_YYABORT;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            /*
              For CREATE TABLE we should not open the table even if it exists.
              If the table exists, we should either not create it or replace it
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
            lex->create_info.default_table_charset= NULL;
            lex->name= null_lex_str;
            lex->create_last_non_select_table= lex->last_table();
          }
#line 20421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 128:
#line 2477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            create_table_set_open_action_and_adjust_tables(lex);
          }
#line 20431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 129:
#line 2485 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-6].key_type), (yyvsp[-3].lex_str), (yyvsp[-2].key_alg), (yyvsp[-7].object_ddl_options) | (yyvsp[-4].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 20442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 130:
#line 2492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 131:
#line 2495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-5].key_type), (yyvsp[-2].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-6].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 20459 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 132:
#line 2502 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 133:
#line 2505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-5].key_type), (yyvsp[-2].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-6].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 20476 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 134:
#line 2512 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20482 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 135:
#line 2514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
#line 20491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 136:
#line 2519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->set_command_with_check(SQLCOM_CREATE_DB, 0, (yyvsp[-5].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
               MYSQL_YYABORT;
            lex->name= (yyvsp[-2].lex_str);
          }
#line 20502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 137:
#line 2526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.set((yyvsp[0].object_ddl_options));
            Lex->create_view_mode= ((yyvsp[0].object_ddl_options).or_replace() ? VIEW_CREATE_OR_REPLACE :
                                                      VIEW_CREATE_NEW);
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
#line 20514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 138:
#line 2533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 139:
#line 2535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_USER, (yyvsp[-4].object_ddl_options) | (yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 20529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 140:
#line 2541 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_ROLE, (yyvsp[-5].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 20538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 141:
#line 2546 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
#line 20546 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 142:
#line 2550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
#line 20554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 143:
#line 2553 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->set_command(SQLCOM_CREATE_SERVER, (yyvsp[0].object_ddl_options)); }
#line 20560 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 144:
#line 2555 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20566 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 145:
#line 2560 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            Lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 20576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 146:
#line 2567 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->server_options.scheme= (yyvsp[-4].lex_str); }
#line 20582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 149:
#line 2577 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.username.str == 0);
            Lex->server_options.username= (yyvsp[0].lex_str);
          }
#line 20591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 150:
#line 2582 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.host.str == 0);
            Lex->server_options.host= (yyvsp[0].lex_str);
          }
#line 20600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 151:
#line 2587 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.db.str == 0);
            Lex->server_options.db= (yyvsp[0].lex_str);
          }
#line 20609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 152:
#line 2592 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.owner.str == 0);
            Lex->server_options.owner= (yyvsp[0].lex_str);
          }
#line 20618 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 153:
#line 2597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.password.str == 0);
            Lex->server_options.password= (yyvsp[0].lex_str);
          }
#line 20627 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 154:
#line 2602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.socket.str == 0);
            Lex->server_options.socket= (yyvsp[0].lex_str);
          }
#line 20636 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 155:
#line 2607 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.port= (yyvsp[0].ulong_num);
          }
#line 20644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 156:
#line 2614 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[-3].simple_string);
            if (lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[0].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
#line 20664 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 157:
#line 2634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
#line 20676 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 158:
#line 2645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_expression= (yyvsp[-1].item);
            Lex->event_parse_data->interval= (yyvsp[0].interval);
          }
#line 20685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 160:
#line 2652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[0].item);
          }
#line 20693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 161:
#line 2658 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 20699 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 162:
#line 2660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
#line 20709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 163:
#line 2666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
#line 20719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 164:
#line 2672 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
#line 20729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 165:
#line 2681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, 0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
#line 20740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 166:
#line 2688 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_starts= (yyvsp[0].item);
          }
#line 20748 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 168:
#line 2696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_ends= (yyvsp[0].item);
          }
#line 20756 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 169:
#line 2702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 20762 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 171:
#line 2708 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->on_completion= (yyvsp[-1].num)
                                    ? Event_parse_data::ON_COMPLETION_DROP
                                    : Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
#line 20773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 172:
#line 2717 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 20779 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 173:
#line 2719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[0].lex_str);
            (yyval.num)= 1;
          }
#line 20788 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 174:
#line 2726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
              my_yyabort_error((ER_EVENT_RECURSION_FORBIDDEN, MYF(0)));
              
            if (!make_sp_head(thd, lex->event_parse_data->identifier, TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
#line 20823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 175:
#line 2757 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->event_parse_data->body_changed= TRUE;
          }
#line 20837 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 176:
#line 2770 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
#line 20853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 177:
#line 2785 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(yyvsp[-2].lex_str).str || check_db_name(&(yyvsp[-2].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            if (check_routine_name(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
#line 20868 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 178:
#line 2796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[0].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name(db, (yyvsp[0].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
#line 20887 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 179:
#line 2813 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20893 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 180:
#line 2814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 181:
#line 2818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20905 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 182:
#line 2819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 183:
#line 2825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.comment= (yyvsp[0].lex_str); }
#line 20917 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 184:
#line 2827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* Just parse it, we only have one language for now. */ }
#line 20923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 185:
#line 2829 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
#line 20929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 186:
#line 2831 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
#line 20935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 187:
#line 2833 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
#line 20941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 188:
#line 2835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
#line 20947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 189:
#line 2837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20953 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 190:
#line 2842 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 191:
#line 2843 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.detistic= ! (yyvsp[-1].num); }
#line 20965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 192:
#line 2848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
#line 20973 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 193:
#line 2852 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
#line 20981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 194:
#line 2859 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[0].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[0].spname), TYPE_ENUM_PROCEDURE);
          }
#line 20994 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 195:
#line 2867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21000 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 200:
#line 2883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->value_list.push_back((yyvsp[0].item), thd->mem_root);
          }
#line 21008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 201:
#line 2887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->value_list.push_back((yyvsp[0].item), thd->mem_root);
          }
#line 21016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 206:
#line 2905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_PARAM, MYF(0), (yyvsp[0].lex_str).str));

            sp_variable *spvar= spc->add_variable(thd, (yyvsp[0].lex_str));

            lex->init_last_field(&spvar->field_def, (yyvsp[0].lex_str).str,
                                 thd->variables.collation_database);
            (yyval.spvar)= spvar;
          }
#line 21034 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 207:
#line 2919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_variable *spvar= (yyvsp[-1].spvar);

            spvar->type= (yyvsp[0].field_type);
            if (lex->sphead->fill_field_definition(thd, lex, (yyvsp[0].field_type),
                                                   lex->last_field))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

            (yyval.spvar)= spvar;
          }
#line 21054 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 212:
#line 2948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyvsp[0].spvar)->mode=(yyvsp[-1].spvar_mode); }
#line 21060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 213:
#line 2952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
#line 21066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 214:
#line 2953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
#line 21072 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 215:
#line 2954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_OUT; }
#line 21078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 216:
#line 2955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_INOUT; }
#line 21084 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 217:
#line 2959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 219:
#line 2964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 221:
#line 2970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
#line 21104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 222:
#line 2974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[-1].spblock).vars || (yyvsp[-1].spblock).conds) && ((yyvsp[-2].spblock).curs || (yyvsp[-2].spblock).hndlrs))
              my_yyabort_error((ER_SP_VARCOND_AFTER_CURSHNDLR, MYF(0)));
            if ((yyvsp[-1].spblock).curs && (yyvsp[-2].spblock).hndlrs)
              my_yyabort_error((ER_SP_CURSOR_AFTER_HANDLER, MYF(0)));
            (yyval.spblock).vars= (yyvsp[-2].spblock).vars + (yyvsp[-1].spblock).vars;
            (yyval.spblock).conds= (yyvsp[-2].spblock).conds + (yyvsp[-1].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[-2].spblock).hndlrs + (yyvsp[-1].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[-2].spblock).curs + (yyvsp[-1].spblock).curs;
          }
#line 21123 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 223:
#line 2992 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;

            // get the last variable:
            uint num_vars= pctx->context_var_count();
            uint var_idx= pctx->var_context2runtime(num_vars - 1);
            sp_variable *spvar= pctx->find_variable(var_idx);

            lex->sphead->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[0].num));
            thd->lex->init_last_field(&spvar->field_def, spvar->name.str,
                                      thd->variables.collation_database);
          }
#line 21142 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 224:
#line 3008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (yyvsp[-1].field_type);
            Item *dflt_value_item= (yyvsp[0].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null(thd);
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[-3].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
              bool last= i == num_vars - 1;
            
              if (!spvar)
                MYSQL_YYABORT;
            
              if (!last)
                spvar->field_def= *lex->last_field;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;
              spvar->field_def.field_name= spvar->name.str;
            
              if (lex->sphead->fill_field_definition(thd, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new (thd->mem_root)
                                  sp_instr_set(lex->sphead->instructions(),
                                               pctx, var_idx, dflt_value_item,
                                               var_type, lex, last);
              if (is == NULL || lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[-3].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
#line 21202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 225:
#line 3064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[-3].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_COND, MYF(0), (yyvsp[-3].lex_str).str));
            if(spc->add_condition(thd, (yyvsp[-3].lex_str), (yyvsp[0].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
#line 21218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 226:
#line 3076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[-2].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new (thd->mem_root) sp_instr_hpush_jump(sp->instructions(),
                   ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[-2].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)))
              MYSQL_YYABORT;
          }
#line 21249 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 227:
#line 3103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[-5].num) == sp_handler::CONTINUE)
            {
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
#line 21285 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 228:
#line 3135 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[-3].lex_str), &offp, TRUE))
              my_yyabort_error((ER_SP_DUP_CURS, MYF(0), (yyvsp[-3].lex_str).str));

            i= new (thd->mem_root)
                 sp_instr_cpush(sp->instructions(), ctx, (yyvsp[0].lex),
                                ctx->current_cursor_count());
            if (i == NULL || sp->add_instr(i) || ctx->add_cursor((yyvsp[-3].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
#line 21308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 229:
#line 3156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd);
          }
#line 21316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 230:
#line 3160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
              my_yyabort_error((ER_SP_BAD_CURSOR_SELECT, MYF(0)));
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 21333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 231:
#line 3175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_handler::EXIT; }
#line 21339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 232:
#line 3176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_handler::CONTINUE; }
#line 21345 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 233:
#line 3182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 21351 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 234:
#line 3184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)+= 1; }
#line 21357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 235:
#line 3189 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[0].spcondvalue)))
              my_yyabort_error((ER_SP_DUP_HANDLER, MYF(0)));

            sp_instr_hpush_jump *i= (sp_instr_hpush_jump *)sp->last_instruction();
            i->add_condition((yyvsp[0].spcondvalue));
          }
#line 21373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 236:
#line 3204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* mysql errno */
            if ((yyvsp[0].ulong_num) == 0)
              my_yyabort_error((ER_WRONG_VALUE, MYF(0), "CONDITION", "0"));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[0].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 238:
#line 3216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[0].lex_str)) || is_sqlstate_completion((yyvsp[0].lex_str).str))
              my_yyabort_error((ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[0].lex_str).str));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[0].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21405 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 239:
#line 3234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21411 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 240:
#line 3235 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 241:
#line 3240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= (yyvsp[0].spcondvalue);
          }
#line 21425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 242:
#line 3244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[0].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 21435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 243:
#line 3250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21445 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 244:
#line 3256 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 245:
#line 3262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 246:
#line 3271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[-1].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 21480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 247:
#line 3285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_condition_value *cond;

            /* SIGNAL foo cannot be used outside of stored programs */
            if (lex->spcont == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            cond= lex->spcont->find_condition((yyvsp[0].lex_str), false);
            if (cond == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            if (cond->type != sp_condition_value::SQLSTATE)
              my_yyabort_error((ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0)));
            (yyval.spcondvalue)= cond;
          }
#line 21499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 248:
#line 3300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= (yyvsp[0].spcondvalue); }
#line 21505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 249:
#line 3305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= NULL; }
#line 21511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 250:
#line 3307 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= (yyvsp[0].spcondvalue); }
#line 21517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 251:
#line 3312 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
#line 21525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 253:
#line 3320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[-2].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[0].item);
          }
#line 21537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 254:
#line 3329 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[-2].diag_condition_item_name);
            if (info->m_item[index] != NULL)
              my_yyabort_error((ER_DUP_SIGNAL_SET, MYF(0),
                                Diag_condition_item_names[index].str));
            info->m_item[index]= (yyvsp[0].item);
          }
#line 21551 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 255:
#line 3345 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 21557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 256:
#line 3347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[0].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[0].item);
          }
#line 21579 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 257:
#line 3365 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 21585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 258:
#line 3371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
#line 21591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 259:
#line 3373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
#line 21597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 260:
#line 3375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
#line 21603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 261:
#line 3377 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
#line 21609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 262:
#line 3379 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
#line 21615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 263:
#line 3381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
#line 21621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 264:
#line 3383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
#line 21627 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 265:
#line 3385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
#line 21633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 266:
#line 3387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
#line 21639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 267:
#line 3389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
#line 21645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 268:
#line 3391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
#line 21651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 269:
#line 3393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
#line 21657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 270:
#line 3398 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[-1].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 21673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 271:
#line 3413 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Diagnostics_information *info= (yyvsp[0].diag_info);

            info->set_which_da((yyvsp[-2].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 21689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 272:
#line 3428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
#line 21695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 273:
#line 3430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
#line 21701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 274:
#line 3435 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[0].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
#line 21711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 275:
#line 3441 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[-1].item), (yyvsp[0].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
#line 21721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 276:
#line 3450 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[0].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 21731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 277:
#line 3456 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].stmt_info_list)->push_back((yyvsp[0].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[-2].stmt_info_list);
          }
#line 21741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 278:
#line 3465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[0].stmt_info_item_name), (yyvsp[-2].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
#line 21751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 279:
#line 3473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(thd, (yyvsp[0].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 21764 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 280:
#line 3482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 21774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 281:
#line 3491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
#line 21780 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 282:
#line 3493 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
#line 21786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 283:
#line 3502 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 21792 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 284:
#line 3507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[0].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 21802 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 285:
#line 3513 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].cond_info_list)->push_back((yyvsp[0].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[-2].cond_info_list);
          }
#line 21812 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 286:
#line 3522 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[0].cond_info_item_name), (yyvsp[-2].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
#line 21822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 287:
#line 3530 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
#line 21828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 288:
#line 3532 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
#line 21834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 289:
#line 3534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
#line 21840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 290:
#line 3536 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
#line 21846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 291:
#line 3538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
#line 21852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 292:
#line 3540 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
#line 21858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 293:
#line 3542 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
#line 21864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 294:
#line 3544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
#line 21870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 295:
#line 3546 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
#line 21876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 296:
#line 3548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
#line 21882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 297:
#line 3550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
#line 21888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 298:
#line 3552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
#line 21894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 299:
#line 3554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
#line 21900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 300:
#line 3559 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[0].lex_str).str));
            spc->add_variable(thd, (yyvsp[0].lex_str));
            (yyval.num)= 1;
          }
#line 21916 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 301:
#line 3571 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[0].lex_str).str));
            spc->add_variable(thd, (yyvsp[0].lex_str));
            (yyval.num)= (yyvsp[-2].num) + 1;
          }
#line 21932 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 302:
#line 3585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = NULL; }
#line 21938 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 303:
#line 3586 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 21944 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 319:
#line 3612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->sphead->new_cont_backpatch(NULL);
          }
#line 21954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 320:
#line 3618 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->do_cont_backpatch(); }
#line 21960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 321:
#line 3622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
#line 21972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 322:
#line 3630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            /* "USE db" doesn't work in a procedure */
            if (lex->sql_command == SQLCOM_CHANGE_DB)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "USE"));
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new (thd->mem_root)
                sp_instr_stmt(sp->instructions(), lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_start() - sp->m_tmp_query;;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22018 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 323:
#line 3675 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 22024 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 324:
#line 3677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
              my_yyabort_error((ER_SP_BADRETURN, MYF(0)));

            sp_instr_freturn *i;

            i= new (thd->mem_root)
                 sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[0].item),
                                  sp->m_return_field_def.sql_type, lex);
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;
            sp->m_flags|= sp_head::HAS_RETURN;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22048 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 325:
#line 3700 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[0].lex_str));

            if (! lab)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[0].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;
            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., SP_LAB_ITER),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            n= ctx->diff_handlers(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(hpop);
            }
            n= ctx->diff_cursors(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(cpop);
            }
            i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL)
              MYSQL_YYABORT;
            sp->push_backpatch(i, lab);  /* Jumping forward */
            sp->add_instr(i);
          }
#line 22099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 326:
#line 3750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[0].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[0].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;

            n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL ||
                  sp->add_instr(hpop))
                MYSQL_YYABORT;
            }
            n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL ||
                  sp->add_instr(cpop))
                MYSQL_YYABORT;
            }
            i= new (thd->mem_root)
              sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 327:
#line 3791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[0].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22160 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 328:
#line 3809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[-1].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[-1].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 329:
#line 3824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 330:
#line 3829 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[0].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 334:
#line 3853 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
#line 22222 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 335:
#line 3867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
#line 22240 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 336:
#line 3883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 22246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 337:
#line 3885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, ctx, (yyvsp[-1].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 338:
#line 3901 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0));
          }
#line 22282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 339:
#line 3913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
#line 22292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 343:
#line 3928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;

            /**
              An example of the CASE statement in use is
            <pre>
            CREATE PROCEDURE proc_19194_simple(i int)
            BEGIN
              DECLARE str CHAR(10);

              CASE i
                WHEN 1 THEN SET str="1";
                WHEN 2 THEN SET str="2";
                WHEN 3 THEN SET str="3";
                ELSE SET str="unknown";
              END CASE;

              SELECT str;
            END
            </pre>
              The actions are used to generate the following code:
            <pre>
            SHOW PROCEDURE CODE proc_19194_simple;
            Pos     Instruction
            0       set str@1 NULL
            1       set_case_expr (12) 0 i@0
            2       jump_if_not 5(12) (case_expr@0 = 1)
            3       set str@1 _latin1'1'
            4       jump 12
            5       jump_if_not 8(12) (case_expr@0 = 2)
            6       set str@1 _latin1'2'
            7       jump 12
            8       jump_if_not 11(12) (case_expr@0 = 3)
            9       set str@1 _latin1'3'
            10      jump 12
            11      set str@1 _latin1'unknown'
            12      stmt 0 "SELECT str"
            </pre>
            */

            Lex->sphead->new_cont_backpatch(NULL);

            /*
              BACKPATCH: Creating target label for the jump to after END CASE
              (instruction 12 in the example)
            */
            Lex->spcont->push_label(thd, empty_lex_str, Lex->sphead->instructions());
          }
#line 22346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 344:
#line 3981 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              BACKPATCH: Resolving forward jump from
              "case_stmt_action_then" to after END CASE
              (jump from instruction 4 to 12, 7 to 12 ... in the example)
            */
            Lex->sphead->backpatch(Lex->spcont->pop_label());

            if ((yyvsp[-3].num))
              Lex->spcont->pop_case_expr_id();

            Lex->sphead->do_cont_backpatch();
          }
#line 22364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 345:
#line 3997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); /* For expr $2 */ }
#line 22370 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 346:
#line 3999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (case_stmt_action_expr(Lex, (yyvsp[0].item)))
              MYSQL_YYABORT;

            if (Lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22382 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 347:
#line 4007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 22388 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 348:
#line 4009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 22394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 353:
#line 4024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
#line 22402 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 354:
#line 4028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[0].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 355:
#line 4040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
#line 22427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 356:
#line 4049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
#line 22435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 357:
#line 4053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[0].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 358:
#line 4063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
#line 22458 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 359:
#line 4072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new (thd->mem_root)
              sp_instr_error(ip, lex->spcont, ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 361:
#line 4086 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 22479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 362:
#line 4087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 22485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 363:
#line 4092 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[-2].lex_str));

            if (lab)
              my_yyabort_error((ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[-2].lex_str).str));
            lex->name= (yyvsp[-2].lex_str);
          }
#line 22499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 364:
#line 4102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, (yyvsp[-1].splabel)->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            }
          }
#line 22511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 365:
#line 4113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
#line 22519 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 366:
#line 4117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 367:
#line 4122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
#line 22535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 368:
#line 4128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22541 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 369:
#line 4132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->push_label(thd, lex->name,
                                                   lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
#line 22554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 370:
#line 4143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[-2].spblock).hndlrs)
            {
              i= new (thd->mem_root)
                sp_instr_hpop(sp->instructions(), ctx, (yyvsp[-2].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[-2].spblock).curs)
            {
              i= new (thd->mem_root)
                sp_instr_cpop(sp->instructions(), ctx, (yyvsp[-2].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
            (yyval.splabel) = lex->spcont->pop_label();
          }
#line 22585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 371:
#line 4173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 372:
#line 4187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[-1].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 373:
#line 4203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
#line 22636 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 374:
#line 4218 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 22642 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 375:
#line 4220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[-2].item), lab->ip, lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
#line 22661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 376:
#line 4238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            if ((yyvsp[0].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str,
                                lab->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            }
          }
#line 22676 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 377:
#line 4251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            DBUG_ASSERT(lab->name.length == 0);
          }
#line 22686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 378:
#line 4260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
          }
#line 22695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 379:
#line 4265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 380:
#line 4267 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
#line 22711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 381:
#line 4273 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22717 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 382:
#line 4275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
          }
#line 22726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 383:
#line 4280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22732 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 384:
#line 4285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
#line 22741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 385:
#line 4291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 386:
#line 4293 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
#line 22757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 387:
#line 4300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 388:
#line 4302 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
#line 22772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 389:
#line 4308 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22778 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 390:
#line 4313 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
#line 22784 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 391:
#line 4315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
#line 22790 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 392:
#line 4320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
#line 22796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 393:
#line 4322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
#line 22802 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 394:
#line 4324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
#line 22808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 398:
#line 4358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22814 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 399:
#line 4360 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[0].lex_str).str;
          }
#line 22823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 400:
#line 4370 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
#line 22831 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 401:
#line 4376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
#line 22839 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 406:
#line 4399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22845 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 453:
#line 4493 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[0].lex_str).str;
          }
#line 22854 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 454:
#line 4501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[0].lex_str).str;
          }
#line 22863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 455:
#line 4509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[0].lex_str).str;
          }
#line 22872 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 456:
#line 4517 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[0].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
#line 22886 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 457:
#line 4530 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[0].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
#line 22900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 458:
#line 4543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
#line 22909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 459:
#line 4548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
#line 22918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 460:
#line 4553 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
#line 22927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 461:
#line 4561 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[0].ulonglong_number);
          }
#line 22936 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 462:
#line 4569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[0].ulonglong_number);
          }
#line 22945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 463:
#line 4577 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[0].ulonglong_number);
          }
#line 22954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 464:
#line 4585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[0].ulonglong_number);
          }
#line 22963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 465:
#line 4593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[0].ulonglong_number);
          }
#line 22972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 466:
#line 4601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[0].ulonglong_number);
          }
#line 22981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 467:
#line 4609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP"));
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[0].ulong_num);
          }
#line 22992 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 468:
#line 4619 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT"));
            lex->alter_tablespace_info->ts_comment= (yyvsp[0].lex_str).str;
          }
#line 23003 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 469:
#line 4629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE, MYF(0),
                                "STORAGE ENGINE"));
            lex->alter_tablespace_info->storage_engine= (yyvsp[0].db_type);
          }
#line 23015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 472:
#line 4645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
#line 23024 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 473:
#line 4650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT"));
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
#line 23035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 474:
#line 4659 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulonglong_number)= (yyvsp[0].ulonglong_number);}
#line 23041 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 475:
#line 4661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[0].lex_str).str;
            uint str_len= (yyvsp[0].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G': text_shift_number+=30; break;
                case 'm':
                case 'M': text_shift_number+=20; break;
                case 'k':
                case 'K': text_shift_number+=10; break;
                default:
                  my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
              }
              if (prefix_number >> 31)
                my_yyabort_error((ER_SIZE_OVERFLOW_ERROR, MYF(0)));
              number= prefix_number << text_shift_number;
            }
            else
              my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
            (yyval.ulonglong_number)= number;
          }
#line 23076 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 476:
#line 4699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.option_list= NULL; }
#line 23082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 477:
#line 4700 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23088 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 478:
#line 4701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 479:
#line 4707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 23100 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 480:
#line 4707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 481:
#line 4709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {

            Lex->create_info.add(DDL_options_st::OPT_LIKE);
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[0].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
#line 23121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 482:
#line 4722 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table)= (yyvsp[0].table); }
#line 23127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 483:
#line 4723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table)= (yyvsp[-1].table); }
#line 23133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 484:
#line 4727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23139 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 485:
#line 4729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(0);}
#line 23145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 486:
#line 4730 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23151 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 487:
#line 4732 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 23157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 488:
#line 4733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23163 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 489:
#line 4738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
#line 23177 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 490:
#line 4774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23183 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 492:
#line 4780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
#line 23201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 494:
#line 4798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
              my_yyabort_error((ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                                "--skip-partition"));
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), "partitioning",
                              "--with-plugin-partition"));
#endif
          }
#line 23217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 495:
#line 4813 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(thd, ER_PARTITION_ENTRY_ERROR);
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
#line 23234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 496:
#line 4825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23240 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 498:
#line 4834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
#line 23251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 499:
#line 4841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= HASH_PARTITION; }
#line 23257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 500:
#line 4842 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 501:
#line 4844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= RANGE_PARTITION; }
#line 23269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 502:
#line 4846 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= RANGE_PARTITION; }
#line 23275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 503:
#line 4848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= LIST_PARTITION; }
#line 23281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 504:
#line 4850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= LIST_PARTITION; }
#line 23287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 505:
#line 4854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 506:
#line 4856 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->linear_hash_ind= TRUE;}
#line 23299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 507:
#line 4861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
#line 23305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 508:
#line 4863 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch ((yyvsp[0].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 23323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 509:
#line 4879 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 510:
#line 4880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 511:
#line 4884 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 512:
#line 4885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 513:
#line 4890 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[0].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of partition fields"));
          }
#line 23364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 514:
#line 4906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
#line 23374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 515:
#line 4916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[-3].simple_string)+1, (yyvsp[-2].item), (yyvsp[-1].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
#line 23386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 516:
#line 4927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->part_info->set_part_expr((yyvsp[-3].simple_string)+1, (yyvsp[-2].item), (yyvsp[-1].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
#line 23395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 517:
#line 4935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 518:
#line 4937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            uint num_parts= (yyvsp[0].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "partitions"));

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
#line 23415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 519:
#line 4949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 520:
#line 4951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->subpart_type= HASH_PARTITION; }
#line 23427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 521:
#line 4952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 522:
#line 4955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
#line 23443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 523:
#line 4960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23449 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 524:
#line 4964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 525:
#line 4965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 526:
#line 4970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[0].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of subpartition fields"));
          }
#line 23477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 527:
#line 4985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[0].item);
          }
#line 23494 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 528:
#line 5000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23500 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 529:
#line 5002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint num_parts= (yyvsp[0].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "subpartitions"));
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
#line 23513 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 530:
#line 5014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "RANGE"));
            if (part_info->part_type == LIST_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "LIST"));
          }
#line 23527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 531:
#line 5024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_PART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
#line 23550 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 532:
#line 5045 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 533:
#line 5046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 534:
#line 5051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new (thd->mem_root) partition_element();

            if (!p_elem ||
                 part_info->partitions.push_back(p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
#line 23583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 535:
#line 5071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 536:
#line 5076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            if (check_ident_length(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            p_elem->partition_name= (yyvsp[0].lex_str).str;
          }
#line 23601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 537:
#line 5087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->error_if_requires_values())
                 MYSQL_YYABORT;
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
#line 23617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 538:
#line 5099 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "RANGE", "LESS THAN"));
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
#line 23634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 539:
#line 5111 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23640 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 540:
#line 5113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "LIST", "IN"));
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
#line 23657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 541:
#line 5125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 542:
#line 5130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 23689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 543:
#line 5151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 544:
#line 5156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val(thd))
              {
                MYSQL_YYABORT;
              }
            }
          }
#line 23728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 545:
#line 5185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(thd, ER_ROW_SINGLE_PARTITION_FIELD_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 23741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 546:
#line 5196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 547:
#line 5197 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 548:
#line 5202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 23769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 549:
#line 5213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 550:
#line 5215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
#line 23800 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 551:
#line 5238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23806 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 552:
#line 5239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23812 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 553:
#line 5244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(thd, ER_MAXVALUE_IN_VALUES_IN);
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 23829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 554:
#line 5257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[0].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
#line 23849 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 555:
#line 5277 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 23867 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 556:
#line 5291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
#line 23894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 557:
#line 5316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 558:
#line 5317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 559:
#line 5322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new (thd->mem_root)
                                           partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
#line 23944 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 560:
#line 5355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23950 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 561:
#line 5360 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_ident_length(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            Lex->part_info->curr_part_elem->partition_name= (yyvsp[0].lex_str).str;
          }
#line 23960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 562:
#line 5368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 563:
#line 5369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 564:
#line 5373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 565:
#line 5374 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23984 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 566:
#line 5379 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[0].lex_str).str; }
#line 23990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 567:
#line 5381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[0].db_type);
            part_info->default_engine_type= (yyvsp[0].db_type);
          }
#line 24000 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 568:
#line 5387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[0].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[0].lex_str).length;
          }
#line 24010 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 569:
#line 5393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[0].ulong_num); }
#line 24016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 570:
#line 5395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[0].ulonglong_number); }
#line 24022 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 571:
#line 5397 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[0].ulonglong_number); }
#line 24028 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 572:
#line 5399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[0].lex_str).str; }
#line 24034 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 573:
#line 5401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[0].lex_str).str; }
#line 24040 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 574:
#line 5403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[0].lex_str).str; }
#line 24046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 575:
#line 5412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 24065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 576:
#line 5427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 24073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 577:
#line 5431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
#line 24085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 578:
#line 5441 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 579:
#line 5442 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24097 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 580:
#line 5446 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 581:
#line 5447 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 582:
#line 5451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 583:
#line 5452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 584:
#line 5456 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 585:
#line 5457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 586:
#line 5462 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->check_exists= FALSE;
          }
#line 24141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 587:
#line 5466 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->check_exists= TRUE;
          }
#line 24149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 588:
#line 5473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).init();
          }
#line 24157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 589:
#line 5477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_NOT_EXISTS);
          }
#line 24165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 590:
#line 5484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).init();
          }
#line 24173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 591:
#line 5488 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_OR_REPLACE);
          }
#line 24181 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 599:
#line 5511 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!lex->m_sql_cmd)
            {
              DBUG_ASSERT(lex->sql_command == SQLCOM_ALTER_TABLE);
              if (!(lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table()))
                MYSQL_YYABORT;
            }
            Storage_engine_name *opt=
              lex->m_sql_cmd->option_storage_engine_name();
            DBUG_ASSERT(opt); // Expect a proper Sql_cmd
            *opt= Storage_engine_name((yyvsp[0].lex_str));
            lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
#line 24200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 600:
#line 5526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.max_rows= (yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
#line 24209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 601:
#line 5531 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.min_rows= (yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
#line 24218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 602:
#line 5536 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.avg_row_length=(yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
#line 24227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 603:
#line 5541 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.password=(yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
#line 24236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 604:
#line 5546 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.comment=(yyvsp[0].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
#line 24245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 605:
#line 5551 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.auto_increment_value=(yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
#line 24254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 606:
#line 5556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
#line 24273 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 607:
#line 5571 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
#line 24283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 608:
#line 5577 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
#line 24302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 609:
#line 5592 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
#line 24311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 610:
#line 5597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
#line 24330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 611:
#line 5612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
#line 24340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 612:
#line 5618 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[0].ulong_num) == 0 || (yyvsp[0].ulong_num) > 0xffff)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
#line 24362 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 613:
#line 5636 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
#line 24371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 614:
#line 5641 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
#line 24380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 615:
#line 5646 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
#line 24389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 616:
#line 5651 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[0].choice);
          }
#line 24398 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 617:
#line 5656 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
#line 24407 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 618:
#line 5661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.row_type= (yyvsp[0].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
#line 24416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 619:
#line 5666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
#line 24424 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 620:
#line 5670 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list.first;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
#line 24450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 623:
#line 5694 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.merge_insert_method= (yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
#line 24459 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 624:
#line 5699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.data_file_name= (yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
#line 24468 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 625:
#line 5704 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.index_file_name= (yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
#line 24477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 626:
#line 5709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.tablespace= (yyvsp[0].lex_str).str;}
#line 24483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 627:
#line 5711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.storage_media= HA_SM_DISK;}
#line 24489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 628:
#line 5713 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
#line 24495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 629:
#line 5715 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.connect_string.str= (yyvsp[0].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[0].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
#line 24505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 630:
#line 5721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[0].ulong_num);
          }
#line 24514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 631:
#line 5726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[0].choice);
          }
#line 24523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 632:
#line 5731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 24535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 633:
#line 5739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 24547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 634:
#line 5747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 24557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 635:
#line 5753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 24567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 636:
#line 5762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->create_info.add_table_option_default_charset((yyvsp[0].charset)))
              MYSQL_YYABORT;
          }
#line 24576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 637:
#line 5770 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[0].charset) &&
                 !((yyvsp[0].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[0].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[0].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
#line 24594 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 638:
#line 5787 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Storage_engine_name((yyvsp[0].lex_str)).
                 resolve_storage_engine_with_error(thd, &(yyval.db_type),
                                            thd->lex->create_info.tmp_table()))
              MYSQL_YYABORT;
          }
#line 24605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 639:
#line 5797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[0].lex_str), false)))
              (yyval.db_type)= plugin_hton(plugin);
            else
              my_yyabort_error((ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 24617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 640:
#line 5807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
#line 24623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 641:
#line 5808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_FIXED; }
#line 24629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 642:
#line 5809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
#line 24635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 643:
#line 5810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
#line 24641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 644:
#line 5811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
#line 24647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 645:
#line 5812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
#line 24653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 646:
#line 5813 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_PAGE; }
#line 24659 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 647:
#line 5817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
#line 24665 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 648:
#line 5818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
#line 24671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 649:
#line 5819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
#line 24677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 650:
#line 5823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) STRING_RESULT; }
#line 24683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 651:
#line 5824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) REAL_RESULT; }
#line 24689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 652:
#line 5825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) DECIMAL_RESULT; }
#line 24695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 653:
#line 5826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) INT_RESULT; }
#line 24701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 654:
#line 5832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
#line 24709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 661:
#line 5854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[-1].lex_str), (yyvsp[0].key_alg), (yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 662:
#line 5859 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 663:
#line 5861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[-2].lex_str), (yyvsp[0].key_alg), (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 664:
#line 5866 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 665:
#line 5868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[0].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 666:
#line 5873 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 667:
#line 5875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[0].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24767 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 668:
#line 5880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 669:
#line 5884 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[-1].lex_str).str ? (yyvsp[-1].lex_str) : (yyvsp[-4].lex_str), (yyvsp[0].key_alg), (yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 670:
#line 5889 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 671:
#line 5892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-4].key_type), (yyvsp[-2].lex_str).str ? (yyvsp[-2].lex_str) : (yyvsp[-5].lex_str), (yyvsp[0].key_alg), (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 672:
#line 5897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 673:
#line 5899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->check_add_key((yyvsp[-1].object_ddl_options)) ||
               !(Lex->last_key= (new (thd->mem_root)
                                 Key(Key::MULTIPLE, (yyvsp[-4].lex_str).str ? (yyvsp[-4].lex_str) : (yyvsp[0].lex_str),
                                     HA_KEY_ALG_UNDEF, true, (yyvsp[-1].object_ddl_options)))))
              MYSQL_YYABORT;
            Lex->option_list= NULL;
          }
#line 24818 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 674:
#line 5908 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Key *key= (new (thd->mem_root)
                       Foreign_key((yyvsp[-5].lex_str).str ? (yyvsp[-5].lex_str) : (yyvsp[-9].lex_str),
                                   lex->last_key->columns,
                                   (yyvsp[0].table)->db,
                                   (yyvsp[0].table)->table,
                                   lex->ref_list,
                                   lex->fk_delete_opt,
                                   lex->fk_update_opt,
                                   lex->fk_match_option,
                                    (yyvsp[-6].object_ddl_options)));
            if (key == NULL)
              MYSQL_YYABORT;
            /*
              handle_if_exists_options() expectes the two keys in this order:
              the Foreign_key, followed by its auto-generated Key.
            */
            lex->alter_info.key_list.push_back(key, thd->mem_root);
            lex->alter_info.key_list.push_back(Lex->last_key, thd->mem_root);
            lex->option_list= NULL;

            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
#line 24848 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 675:
#line 5933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24854 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 679:
#line 5946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 24860 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 680:
#line 5947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 24866 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 681:
#line 5951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 24872 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 682:
#line 5956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Create_field *f= new (thd->mem_root) Create_field();

            if (check_string_char_length(&(yyvsp[0].lex_str), 0, NAME_CHAR_LEN,
                                         system_charset_info, 1))
              my_yyabort_error((ER_TOO_LONG_IDENT, MYF(0), (yyvsp[0].lex_str).str));

            if (!f)
              MYSQL_YYABORT;

            lex->init_last_field(f, (yyvsp[0].lex_str).str, NULL);
          }
#line 24890 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 683:
#line 5969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->set_last_field_type((yyvsp[0].field_type)); }
#line 24896 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 684:
#line 5971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Create_field *f= lex->last_field;

            if (f->check(thd))
              MYSQL_YYABORT;

            lex->alter_info.create_list.push_back(f, thd->mem_root);

            if (f->flags & PRI_KEY_FLAG)
              add_key_to_list(lex, &(yyvsp[-4].lex_str), Key::PRIMARY, Lex->check_exists);
            else if (f->flags & (UNIQUE_FLAG | UNIQUE_KEY_FLAG))
              add_key_to_list(lex, &(yyvsp[-4].lex_str), Key::UNIQUE, Lex->check_exists);
          }
#line 24915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 687:
#line 5995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 688:
#line 5996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 689:
#line 6001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
#line 24935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 690:
#line 6005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
#line 24943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 691:
#line 6009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(TRUE);
          }
#line 24951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 692:
#line 6015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 693:
#line 6016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 694:
#line 6020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 696:
#line 6026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 24979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 697:
#line 6032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 24989 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 698:
#line 6037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->comment= (yyvsp[0].lex_str); }
#line 24995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 699:
#line 6042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
              my_yyabort_error((ER_SYNTAX_ERROR, MYF(0)));
          }
#line 25009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 700:
#line 6055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Virtual_column_info *v= new (thd->mem_root) Virtual_column_info();
            if (!v)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)) - 1;
            v->expr_str.str= (char* ) thd->memdup((yyvsp[-2].simple_string) + 1, expr_len);
            v->expr_str.length= expr_len;
            v->expr_item= (yyvsp[-1].item);
            Lex->last_field->vcol_info= v;
          }
#line 25027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 701:
#line 6071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=(yyvsp[-2].field_type); }
#line 25033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 702:
#line 6072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=(yyvsp[-2].field_type); }
#line 25039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 703:
#line 6074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)=MYSQL_TYPE_FLOAT;
            if (Lex->length && !Lex->dec)
            {
              int err;
              ulonglong tmp_length= my_strtoll10(Lex->length, NULL, &err);
              if (err || tmp_length > PRECISION_FOR_DOUBLE)
                my_yyabort_error((ER_WRONG_FIELD_SPEC, MYF(0),
                                  Lex->last_field->field_name));
              if (tmp_length > PRECISION_FOR_FLOAT)
                (yyval.field_type)= MYSQL_TYPE_DOUBLE;
              Lex->length= 0;
            }
          }
#line 25058 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 704:
#line 6089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_BIT;
          }
#line 25067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 705:
#line 6094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)=MYSQL_TYPE_BIT;
          }
#line 25075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 706:
#line 6098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_TINY;
          }
#line 25084 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 707:
#line 6103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_TINY;
          }
#line 25093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 708:
#line 6108 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
#line 25101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 709:
#line 6112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
#line 25110 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 710:
#line 6117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)=MYSQL_TYPE_STRING;
            bincmp_collation(national_charset_info, (yyvsp[0].num));
          }
#line 25119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 711:
#line 6122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_STRING;
            bincmp_collation(national_charset_info, (yyvsp[0].num));
          }
#line 25129 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 712:
#line 6128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
#line 25138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 713:
#line 6133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
#line 25148 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 714:
#line 6139 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)= MYSQL_TYPE_VARCHAR;
          }
#line 25156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 715:
#line 6143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)= MYSQL_TYPE_VARCHAR;
            bincmp_collation(national_charset_info, (yyvsp[0].num));
          }
#line 25165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 716:
#line 6148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)= MYSQL_TYPE_VARCHAR;
          }
#line 25174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 717:
#line 6153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER_THD(thd, ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.field_type)=MYSQL_TYPE_YEAR;
          }
#line 25196 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 718:
#line 6171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_DATE; }
#line 25202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 719:
#line 6173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)= opt_mysql56_temporal_format ?
                MYSQL_TYPE_TIME2 : MYSQL_TYPE_TIME; }
#line 25209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 720:
#line 6176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.field_type)= opt_mysql56_temporal_format ?
                  MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                Unless --explicit-defaults-for-timestamp is given.
              */
              if (!opt_explicit_defaults_for_timestamp)
                Lex->last_field->flags|= NOT_NULL_FLAG;
              (yyval.field_type)= opt_mysql56_temporal_format ? MYSQL_TYPE_TIMESTAMP2
                                              : MYSQL_TYPE_TIMESTAMP;
            }
          }
#line 25230 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 721:
#line 6193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)= opt_mysql56_temporal_format ?
                MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME; }
#line 25237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 722:
#line 6196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_TINY_BLOB;
          }
#line 25246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 723:
#line 6201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_BLOB;
          }
#line 25255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 724:
#line 6206 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->last_field->geom_type= (yyvsp[-2].geom_type);
            (yyval.field_type)=MYSQL_TYPE_GEOMETRY;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 25270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 725:
#line 6217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB;
          }
#line 25279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 726:
#line 6222 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_LONG_BLOB;
          }
#line 25288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 727:
#line 6227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB;
          }
#line 25297 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 728:
#line 6232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB; }
#line 25303 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 729:
#line 6234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_TINY_BLOB; }
#line 25309 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 730:
#line 6236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_BLOB; }
#line 25315 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 731:
#line 6238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB; }
#line 25321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 732:
#line 6240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_LONG_BLOB; }
#line 25327 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 733:
#line 6242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_NEWDECIMAL;}
#line 25333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 734:
#line 6244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_NEWDECIMAL;}
#line 25339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 735:
#line 6246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_NEWDECIMAL;}
#line 25345 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 736:
#line 6248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_ENUM; }
#line 25351 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 737:
#line 6250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_SET; }
#line 25357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 738:
#line 6252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB; }
#line 25363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 739:
#line 6254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)=MYSQL_TYPE_LONGLONG;
            Lex->last_field->flags|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
#line 25373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 740:
#line 6262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_GEOMETRY; }
#line 25379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 741:
#line 6263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_GEOMETRYCOLLECTION; }
#line 25385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 742:
#line 6265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.geom_type)= Field::GEOM_POINT;
          }
#line 25395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 743:
#line 6270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTIPOINT; }
#line 25401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 744:
#line 6271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_LINESTRING; }
#line 25407 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 745:
#line 6272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTILINESTRING; }
#line 25413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 746:
#line 6273 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_POLYGON; }
#line 25419 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 747:
#line 6274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTIPOLYGON; }
#line 25425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 748:
#line 6278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 749:
#line 6282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25437 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 750:
#line 6283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 751:
#line 6287 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25449 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 752:
#line 6288 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 753:
#line 6292 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 754:
#line 6293 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 755:
#line 6294 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 756:
#line 6295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 757:
#line 6296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 758:
#line 6300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_LONG; }
#line 25491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 759:
#line 6301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_TINY; }
#line 25497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 760:
#line 6302 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_SHORT; }
#line 25503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 761:
#line 6303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_INT24; }
#line 25509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 762:
#line 6304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_LONGLONG; }
#line 25515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 763:
#line 6309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
#line 25524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 764:
#line 6314 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
#line 25530 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 765:
#line 6316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
#line 25536 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 766:
#line 6321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->srid= 0; }
#line 25542 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 767:
#line 6324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->srid=atoi((yyvsp[0].lex_str).str);
          }
#line 25550 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 768:
#line 6331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->dec=Lex->length= (char*)0; }
#line 25556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 769:
#line 6333 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->dec= (char*)0; }
#line 25562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 770:
#line 6335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25568 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 771:
#line 6340 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[-3].lex_str).str;
            lex->dec=(yyvsp[-1].lex_str).str;
          }
#line 25578 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 772:
#line 6348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25584 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 773:
#line 6349 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25590 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 774:
#line 6353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 775:
#line 6354 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 776:
#line 6358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 777:
#line 6359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG;}
#line 25614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 778:
#line 6360 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
#line 25620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 779:
#line 6364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 780:
#line 6365 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 781:
#line 6366 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 782:
#line 6367 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 783:
#line 6370 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length=(char*) 0; /* use default length */ }
#line 25650 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 784:
#line 6371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 25656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 785:
#line 6375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25662 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 786:
#line 6376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 787:
#line 6380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 788:
#line 6381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 789:
#line 6385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 791:
#line 6390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags&= ~ NOT_NULL_FLAG; }
#line 25692 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 792:
#line 6391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= NOT_NULL_FLAG; }
#line 25698 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 793:
#line 6392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->def= (yyvsp[0].item); }
#line 25704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 794:
#line 6394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->last_field->on_update= item;
          }
#line 25715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 795:
#line 6400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
#line 25721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 796:
#line 6402 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex=Lex;
            lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 25731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 797:
#line 6408 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 25741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 798:
#line 6414 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 25751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 799:
#line 6420 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
#line 25761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 800:
#line 6425 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->comment= (yyvsp[0].lex_str); }
#line 25767 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 801:
#line 6427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[0].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[0].charset)->name,Lex->charset->csname));
            Lex->last_field->charset= (yyvsp[0].charset);
          }
#line 25778 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 802:
#line 6434 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
#line 25790 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 803:
#line 6442 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
#line 25802 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 804:
#line 6450 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->last_field->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 25812 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 805:
#line 6456 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->last_field->option_list, &Lex->option_list_last);
          }
#line 25821 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 806:
#line 6465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.field_type)= (yyvsp[-1].field_type);

          if ((yyvsp[0].charset))
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[0].charset))))
              MYSQL_YYABORT;
          }
          Lex->set_last_field_type((yyvsp[-1].field_type));
        }
#line 25836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 807:
#line 6480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 25846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 808:
#line 6486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 25852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 809:
#line 6490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 810:
#line 6491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 811:
#line 6496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[0].lex_str).str,MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 25873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 812:
#line 6500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_bin; }
#line 25879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 813:
#line 6504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset);   }
#line 25885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 814:
#line 6505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 815:
#line 6509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= NULL; }
#line 25897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 816:
#line 6510 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= (yyvsp[0].charset); }
#line 25903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 817:
#line 6515 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[0].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[0].lex_str).str)))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 25913 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 818:
#line 6520 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_bin; }
#line 25919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 819:
#line 6524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset);   }
#line 25925 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 820:
#line 6525 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 821:
#line 6530 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[0].lex_str).str)))
              MYSQL_YYABORT;
          }
#line 25940 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 822:
#line 6537 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25946 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 823:
#line 6538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset); }
#line 25952 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 824:
#line 6542 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset); }
#line 25958 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 825:
#line 6543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25964 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 826:
#line 6547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25970 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 827:
#line 6548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 828:
#line 6552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= (yyvsp[0].charset); }
#line 25982 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 829:
#line 6553 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_latin1; }
#line 25988 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 830:
#line 6555 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)= get_charset_by_csname("ucs2", MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2"));
          }
#line 25997 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 831:
#line 6562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(NULL, false); }
#line 26003 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 832:
#line 6563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(&my_charset_bin, false); }
#line 26009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 833:
#line 6564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation((yyvsp[-1].charset), (yyvsp[0].num)); }
#line 26015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 834:
#line 6565 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(NULL, true); }
#line 26021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 835:
#line 6566 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation((yyvsp[0].charset), true); }
#line 26027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 836:
#line 6570 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 26033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 837:
#line 6571 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= true; }
#line 26039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 838:
#line 6576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          if ((yyvsp[0].ulong_num) == 0)
          {
            my_parse_error(thd, ER_SYNTAX_ERROR);
            MYSQL_YYABORT;
          }
        }
#line 26051 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 839:
#line 6584 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[-2].ulong_num); }
#line 26057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 840:
#line 6588 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 26063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 841:
#line 6589 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
#line 26069 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 842:
#line 6593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
#line 26075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 843:
#line 6596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 26081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 844:
#line 6597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 26087 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 845:
#line 6598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[-1].ulong_num) | (yyvsp[0].ulong_num); }
#line 26093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 846:
#line 6599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num) ; }
#line 26099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 847:
#line 6604 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.ulong_num)= (yyvsp[0].ulong_num) < 1 ? 1 : ((yyvsp[0].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[0].ulong_num));
          (yyval.ulong_num)--;
        }
#line 26108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 848:
#line 6612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.ulong_num)= (1 | (yyvsp[0].ulong_num)) << (yyvsp[-1].ulong_num);
        }
#line 26116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 849:
#line 6618 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 26122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 850:
#line 6619 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)|= (yyvsp[0].ulong_num); }
#line 26128 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 851:
#line 6624 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          uint start= (yyvsp[-2].ulong_num);
          uint end= (yyvsp[0].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
#line 26139 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 852:
#line 6633 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 26145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 853:
#line 6634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 26151 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 854:
#line 6638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 26157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 855:
#line 6639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 26163 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 858:
#line 6653 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)=(yyvsp[-3].table);
          }
#line 26171 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 859:
#line 6660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ref_list.empty(); }
#line 26177 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 861:
#line 6666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key, thd->mem_root);
          }
#line 26188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 862:
#line 6673 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key, thd->mem_root);
          }
#line 26201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 863:
#line 6685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
#line 26207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 864:
#line 6687 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
#line 26213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 865:
#line 6689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
#line 26219 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 866:
#line 6691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
#line 26225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 867:
#line 6696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= FK_OPTION_UNDEF;
            lex->fk_delete_opt= FK_OPTION_UNDEF;
          }
#line 26235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 868:
#line 6702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[0].m_fk_option);
            lex->fk_delete_opt= FK_OPTION_UNDEF;
          }
#line 26245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 869:
#line 6708 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[0].m_fk_option);
          }
#line 26255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 870:
#line 6715 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[-3].m_fk_option);
            lex->fk_delete_opt= (yyvsp[0].m_fk_option);
          }
#line 26265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 871:
#line 6722 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[0].m_fk_option);
            lex->fk_delete_opt= (yyvsp[-3].m_fk_option);
          }
#line 26275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 872:
#line 6730 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_RESTRICT; }
#line 26281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 873:
#line 6731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_CASCADE; }
#line 26287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 874:
#line 6732 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_SET_NULL; }
#line 26293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 875:
#line 6733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_NO_ACTION; }
#line 26299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 876:
#line 6734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_SET_DEFAULT; }
#line 26305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 877:
#line 6738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::PRIMARY; }
#line 26311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 878:
#line 6739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::UNIQUE; }
#line 26317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 879:
#line 6743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 880:
#line 6744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 881:
#line 6748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 883:
#line 6753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 884:
#line 6754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 885:
#line 6755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 886:
#line 6759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::MULTIPLE; }
#line 26359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 887:
#line 6760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::UNIQUE; }
#line 26365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 888:
#line 6764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::FULLTEXT;}
#line 26371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 889:
#line 6769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 26384 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 890:
#line 6780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 891:
#line 6781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 26396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 892:
#line 6785 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26402 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 893:
#line 6786 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 26408 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 894:
#line 6790 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 895:
#line 6791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 26420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 902:
#line 6810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
#line 26426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 903:
#line 6811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 26432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 904:
#line 6815 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
#line 26438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 905:
#line 6816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 26444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 906:
#line 6817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 26450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 907:
#line 6821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.algorithm= (yyvsp[0].key_alg); }
#line 26456 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 908:
#line 6823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.algorithm= (yyvsp[0].key_alg); }
#line 26462 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 909:
#line 6828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.block_size= (yyvsp[0].ulong_num); }
#line 26468 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 910:
#line 6830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.comment= (yyvsp[0].lex_str); }
#line 26474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 911:
#line 6832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 26486 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 912:
#line 6840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 26498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 913:
#line 6848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 26508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 914:
#line 6854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
#line 26517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 919:
#line 6872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (plugin_is_ready(&(yyvsp[0].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->last_key->key_create_info.parser_name= (yyvsp[0].lex_str);
            else
              my_yyabort_error((ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 26528 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 920:
#line 6881 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
#line 26534 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 921:
#line 6882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
#line 26540 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 922:
#line 6883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
#line 26546 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 923:
#line 6888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_key->columns.push_back((yyvsp[-1].key_part), thd->mem_root);
          }
#line 26554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 924:
#line 6892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_key->columns.push_back((yyvsp[-1].key_part), thd->mem_root);
          }
#line 26562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 925:
#line 6899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
#line 26572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 926:
#line 6905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int key_part_len= atoi((yyvsp[-1].lex_str).str);
            if (!key_part_len)
              my_yyabort_error((ER_KEY_PART_0, MYF(0), (yyvsp[-3].lex_str).str));
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[-3].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
#line 26585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 927:
#line 6916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 26591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 928:
#line 6917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 26597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 929:
#line 6921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 26603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 930:
#line 6922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 26609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 931:
#line 6927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->interval_list.push_back((yyvsp[0].string), thd->mem_root); }
#line 26615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 932:
#line 6929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->interval_list.push_back((yyvsp[0].string), thd->mem_root); }
#line 26621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 933:
#line 6937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->name= null_lex_str;
            Lex->only_view= FALSE;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->select_lex.init_order();
            Lex->create_info.init();
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
#line 26639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 934:
#line 6951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
#line 26653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 935:
#line 6961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
#line 26667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 936:
#line 6971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
#line 26676 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 937:
#line 6976 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[-2].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
#line 26689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 938:
#line 6985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "DATABASE"));
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[-4].lex_str);
          }
#line 26701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 939:
#line 6993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 26713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 940:
#line 7001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[-2].spname);
          }
#line 26724 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 941:
#line 7008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 26736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 942:
#line 7016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[-2].spname);
          }
#line 26747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 943:
#line 7023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_mode= VIEW_ALTER;
          }
#line 26759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 944:
#line 7031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 945:
#line 7038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_algorithm= VIEW_ALGORITHM_INHERIT;
            lex->create_view_mode= VIEW_ALTER;
          }
#line 26778 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 946:
#line 7047 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26784 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 947:
#line 7049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[0].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_begin= (yyvsp[-2].simple_string);
          }
#line 26805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 948:
#line 7070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyvsp[-4].num) || (yyvsp[-3].num) || (yyvsp[-2].num) || (yyvsp[-1].num) || (yyvsp[0].num)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_end= (char*)YYLIP->get_cpp_ptr();
          }
#line 26823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 949:
#line 7084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
#line 26832 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 950:
#line 7089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
#line 26841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 951:
#line 7094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
#line 26850 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 952:
#line 7099 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
#line 26859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 953:
#line 7104 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 26869 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 954:
#line 7108 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 955:
#line 7112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 26881 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 956:
#line 7113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26887 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 957:
#line 7114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26893 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 958:
#line 7115 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 959:
#line 7119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 26905 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 960:
#line 7121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[0].spname); 
            (yyval.num)= 1;
          }
#line 26918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 961:
#line 7132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 26924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 962:
#line 7133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26930 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 963:
#line 7137 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 26936 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 964:
#line 7138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 26942 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 966:
#line 7144 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 967:
#line 7152 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 973:
#line 7174 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
            DBUG_ASSERT(!Lex->if_exists());
            Lex->create_info.add((yyvsp[-1].object_ddl_options));
          }
#line 26976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 974:
#line 7181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[-1].num);
          }
#line 26986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 975:
#line 7188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 977:
#line 7201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
#line 27016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 978:
#line 7212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 980:
#line 7224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 982:
#line 7236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->alter_info.num_parts= (yyvsp[0].ulong_num);
          }
#line 27056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 983:
#line 7243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27070 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 985:
#line 7255 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[-1].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[-1].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27097 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 986:
#line 7281 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
#line 27105 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 987:
#line 7288 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
#line 27113 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 989:
#line 7297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            DBUG_ASSERT(!Lex->create_info.if_not_exists());
            lex->create_info.set((yyvsp[-1].object_ddl_options));
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 27131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 990:
#line 7311 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 992:
#line 7317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
#line 27146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 993:
#line 7322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->part_info->num_parts= (yyvsp[0].ulong_num);
          }
#line 27154 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 994:
#line 7329 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 27169 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 996:
#line 7344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
#line 27177 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 997:
#line 7348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
#line 27185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 998:
#line 7352 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
#line 27194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 999:
#line 7359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1000:
#line 7360 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27206 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1001:
#line 7365 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[0].lex_str).str,
                                                          thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
#line 27219 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1004:
#line 7386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
#line 27228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1005:
#line 7394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
#line 27236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1006:
#line 7398 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 27245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1007:
#line 7403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
#line 27254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1008:
#line 7409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->last_field->change= (yyvsp[-2].lex_str).str;
          }
#line 27264 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1009:
#line 7416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->last_field->change= Lex->last_field->field_name;
          }
#line 27274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1010:
#line 7422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::COLUMN, (yyvsp[-1].lex_str).str, (yyvsp[-2].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
#line 27288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1011:
#line 7432 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[0].lex_str).str, (yyvsp[-1].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
#line 27302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1012:
#line 7442 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, primary_key_name,
                                        FALSE));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
#line 27317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1013:
#line 7453 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[0].lex_str).str, (yyvsp[-1].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
#line 27331 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1014:
#line 7463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
#line 27341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1015:
#line 7469 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
#line 27351 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1016:
#line 7475 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_column *ac= new (thd->mem_root) Alter_column((yyvsp[-3].lex_str).str,(yyvsp[0].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
#line 27364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1017:
#line 7484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_column *ac= (new (thd->mem_root)
                               Alter_column((yyvsp[-2].lex_str).str, (Item*) 0));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
#line 27378 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1018:
#line 7494 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[0].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[0].table)->table.str,(yyvsp[0].table)->table.length, FALSE) ||
                ((yyvsp[0].table)->db.str && check_db_name(&(yyvsp[0].table)->db)))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[0].table)->table.str));
            lex->name= (yyvsp[0].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
#line 27398 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1019:
#line 7510 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(yyvsp[-1].charset))
            {
              (yyvsp[-1].charset)= thd->variables.collation_database;
            }
            (yyvsp[0].charset)= (yyvsp[0].charset) ? (yyvsp[0].charset) : (yyvsp[-1].charset);
            if (!my_charset_same((yyvsp[-1].charset),(yyvsp[0].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[0].charset)->name, (yyvsp[-1].charset)->csname));
            if (Lex->create_info.add_alter_list_item_convert_to_charset((yyvsp[0].charset)))
              MYSQL_YYABORT;
            Lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
#line 27416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1020:
#line 7524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
#line 27425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1021:
#line 7529 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
#line 27433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1022:
#line 7533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
#line 27442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1030:
#line 7550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
#line 27451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1031:
#line 7555 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 27460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1032:
#line 7563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
#line 27469 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1033:
#line 7568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 27478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1034:
#line 7575 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1035:
#line 7576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1036:
#line 7580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 0;}
#line 27496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1037:
#line 7581 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1;}
#line 27502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1038:
#line 7585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 0;}
#line 27508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1044:
#line 7599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1;}
#line 27514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1045:
#line 7601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
#line 27523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1046:
#line 7608 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_DEFAULT; }
#line 27529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1047:
#line 7609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_RESTRICT; }
#line 27535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1048:
#line 7610 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_CASCADE; }
#line 27541 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1049:
#line 7614 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1050:
#line 7616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            store_position_for_column((yyvsp[0].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
#line 27556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1051:
#line 7621 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
#line 27565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1052:
#line 7628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1053:
#line 7629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1054:
#line 7630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1055:
#line 7631 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1056:
#line 7636 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
#line 27600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1057:
#line 7643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27606 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1058:
#line 7645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
#line 27616 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1059:
#line 7650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1060:
#line 7652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
#line 27633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1061:
#line 7659 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
#line 27644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1062:
#line 7669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[0].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[0].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[0].num);
          }
#line 27661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1063:
#line 7685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= 0;
          }
#line 27669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1064:
#line 7689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[0].num);
          }
#line 27677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1065:
#line 7696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[0].num);
          }
#line 27685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1066:
#line 7700 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[-2].num) | (yyvsp[0].num);
          }
#line 27693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1067:
#line 7707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
#line 27701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1068:
#line 7711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
#line 27709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1069:
#line 7715 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
#line 27717 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1070:
#line 7721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt= 0; }
#line 27723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1071:
#line 7723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1074:
#line 7732 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1075:
#line 7733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt|=SLAVE_SQL; }
#line 27741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1076:
#line 7734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt|=SLAVE_IO; }
#line 27747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1077:
#line 7738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1078:
#line 7740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
               my_yyabort_error((ER_BAD_SLAVE_UNTIL_COND, MYF(0)));
          }
#line 27766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1079:
#line 7749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.gtid_pos_str = (yyvsp[0].lex_str);
          }
#line 27774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1082:
#line 7761 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1083:
#line 7768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27791 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1084:
#line 7772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= 0; }
#line 27797 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1085:
#line 7773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= T_QUICK; }
#line 27803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1086:
#line 7774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= T_EXTEND; }
#line 27809 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1088:
#line 7779 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->only_view= TRUE; }
#line 27815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1090:
#line 7784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[0].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1091:
#line 7794 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1092:
#line 7804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags = T_MEDIUM; }
#line 27847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1093:
#line 7805 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1094:
#line 7809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1095:
#line 7810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1096:
#line 7814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_QUICK; }
#line 27871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1097:
#line 7815 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_EXTEND; }
#line 27877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1098:
#line 7816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
#line 27883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1099:
#line 7820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 27889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1100:
#line 7821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FROM_MYSQL; }
#line 27895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1101:
#line 7826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1102:
#line 7836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1106:
#line 7856 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1107:
#line 7858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
#line 27935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1108:
#line 7865 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1109:
#line 7867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1110:
#line 7870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27953 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1111:
#line 7872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX* lex= thd->lex;
            lex->column_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
#line 27964 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1113:
#line 7883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27970 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1114:
#line 7885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX* lex= thd->lex;
            lex->index_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
#line 27981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1116:
#line 7897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1117:
#line 7899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
#line 27996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1118:
#line 7904 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
#line 28005 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1119:
#line 7912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1122:
#line 7919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->index_list->push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
          }
#line 28021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1123:
#line 7926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back((LEX_STRING*)
                                        thd->memdup(&str, sizeof(LEX_STRING)),
                                        thd->mem_root);
          }
#line 28032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1124:
#line 7936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[0].lex_str);
            Lex->ident.str=    NULL;
            Lex->ident.length= 0;
          }
#line 28043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1125:
#line 7944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[-3].lex_str);
            Lex->ident=   (yyvsp[0].lex_str);
          }
#line 28053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1127:
#line 7953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->only_view= TRUE; }
#line 28059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1129:
#line 7957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 28073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1130:
#line 7967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "CHECK"));
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 28087 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1131:
#line 7979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags = T_MEDIUM; }
#line 28093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1132:
#line 7980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1133:
#line 7984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28105 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1134:
#line 7985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28111 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1135:
#line 7989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_QUICK; }
#line 28117 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1136:
#line 7990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_FAST; }
#line 28123 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1137:
#line 7991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_MEDIUM; }
#line 28129 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1138:
#line 7992 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_EXTEND; }
#line 28135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1139:
#line 7993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
#line 28141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1140:
#line 7994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
#line 28147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1141:
#line 7998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 28153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1142:
#line 7999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
#line 28159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1143:
#line 8004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 28173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1144:
#line 8014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 28185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1145:
#line 8024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 28191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1146:
#line 8025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 28197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1147:
#line 8026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 28203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1148:
#line 8031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
#line 28211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1149:
#line 8035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1150:
#line 8037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
#line 28225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1151:
#line 8044 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[-2].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 28235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1152:
#line 8050 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[-2].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 28245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1155:
#line 8064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(thd, (yyvsp[-2].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(thd, (yyvsp[0].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
#line 28259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1156:
#line 8077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.reset();
          }
#line 28267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1157:
#line 8081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 28277 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1162:
#line 8100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1163:
#line 8110 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1164:
#line 8119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 28305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1165:
#line 8120 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str) = default_key_cache_base; }
#line 28311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1166:
#line 8125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
#line 28321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1167:
#line 8131 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28327 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1172:
#line 8146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), NULL, (yyvsp[0].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28338 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1173:
#line 8156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-3].table), NULL, (yyvsp[0].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28349 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1174:
#line 8166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
#line 28357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1176:
#line 8173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
#line 28367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1178:
#line 8182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 28373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1180:
#line 8188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 28379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1181:
#line 8189 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
#line 28385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1182:
#line 8199 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
#line 28394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1185:
#line 8212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
#line 28406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1186:
#line 8220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
#line 28415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1188:
#line 8229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(true);
          }
#line 28423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1189:
#line 8234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
#line 28432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1191:
#line 8243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            /* Parentheses carry no meaning here */
            lex->current_select->set_braces(false);
          }
#line 28442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1195:
#line 8273 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-9].num) && (yyvsp[-1].num))         /* double "INTO" clause */
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "INTO", "INTO"));

            if ((yyvsp[-2].num) && ((yyvsp[-9].num) || (yyvsp[-1].num))) /* "INTO" with "PROCEDURE ANALYSE" */
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO"));
          }
#line 28454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1196:
#line 8283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 28466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1197:
#line 8291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 28474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1202:
#line 8318 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
#line 28484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1205:
#line 8333 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT"));
          }
#line 28493 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1209:
#line 8347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE"));

            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
#line 28514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1210:
#line 8364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE"));

            Lex->safe_to_cache_query=1;
            Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
          }
#line 28535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1212:
#line 8385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_WRITE;
            lex->current_select->set_lock_for_tables(TL_WRITE, false);
            lex->safe_to_cache_query=0;
          }
#line 28546 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1213:
#line 8392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_READ_WITH_SHARED_LOCKS;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS, false);
            lex->safe_to_cache_query=0;
          }
#line 28558 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1216:
#line 8405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root)
                          Item_field(thd, &thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
#line 28573 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1217:
#line 8419 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_item_to_list(thd, (yyvsp[-1].item)))
              MYSQL_YYABORT;
          }
#line 28582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1218:
#line 8424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT((yyvsp[-3].simple_string) < (yyvsp[-1].simple_string));

            if (add_item_to_list(thd, (yyvsp[-2].item)))
              MYSQL_YYABORT;
            if ((yyvsp[0].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[0].lex_str).str))
                my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[0].lex_str).str));
              (yyvsp[-2].item)->is_autogenerated_name= FALSE;
              (yyvsp[-2].item)->set_name((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[-2].item)->name)
            {
              (yyvsp[-2].item)->set_name((yyvsp[-3].simple_string), (uint) ((yyvsp[-1].simple_string) - (yyvsp[-3].simple_string)), thd->charset());
            }
          }
#line 28605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1219:
#line 8445 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_tok_start();
          }
#line 28613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1220:
#line 8451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
#line 28621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1221:
#line 8457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
#line 28629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1222:
#line 8463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=null_lex_str;}
#line 28635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1223:
#line 8464 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1224:
#line 8465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1225:
#line 8466 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1226:
#line 8467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28659 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1227:
#line 8471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= NOT_FIXED_DEC;  }
#line 28665 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1228:
#line 8472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= NOT_FIXED_DEC;  }
#line 28671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1229:
#line 8473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].ulong_num); }
#line 28677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1230:
#line 8477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;  }
#line 28683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1231:
#line 8478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;  }
#line 28689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1232:
#line 8479 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].ulong_num); }
#line 28695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1233:
#line 8483 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1234:
#line 8484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1235:
#line 8490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[-2].item)))
            {
              item1= (Item_cond_or*) (yyvsp[-2].item);
              if (is_cond_or((yyvsp[0].item)))
              {
                item3= (Item_cond_or*) (yyvsp[0].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[0].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[0].item), thd->mem_root);
                (yyval.item) = (yyvsp[-2].item);
              }
            }
            else if (is_cond_or((yyvsp[0].item)))
            {
              item3= (Item_cond_or*) (yyvsp[0].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[-2].item), thd->mem_root);
              (yyval.item) = (yyvsp[0].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item)= new (thd->mem_root) Item_cond_or(thd, (yyvsp[-2].item), (yyvsp[0].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 28762 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1236:
#line 8541 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* XOR is a proprietary extension */
            (yyval.item)= new (thd->mem_root) Item_func_xor(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1237:
#line 8548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[-2].item)))
            {
              item1= (Item_cond_and*) (yyvsp[-2].item);
              if (is_cond_and((yyvsp[0].item)))
              {
                item3= (Item_cond_and*) (yyvsp[0].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[0].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[0].item), thd->mem_root);
                (yyval.item) = (yyvsp[-2].item);
              }
            }
            else if (is_cond_and((yyvsp[0].item)))
            {
              item3= (Item_cond_and*) (yyvsp[0].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[-2].item), thd->mem_root);
              (yyval.item) = (yyvsp[0].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item)= new (thd->mem_root) Item_cond_and(thd, (yyvsp[-2].item), (yyvsp[0].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 28820 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1238:
#line 8591 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= negate_expression(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28830 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1239:
#line 8597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1240:
#line 8603 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28850 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1241:
#line 8609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28860 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1242:
#line 8615 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1243:
#line 8621 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28880 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1244:
#line 8627 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28890 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1246:
#line 8637 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1247:
#line 8643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28910 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1248:
#line 8649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28920 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1249:
#line 8655 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (*(yyvsp[-1].boolfunc2creator))(0)->create(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28930 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1250:
#line 8661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= all_any_subquery_creator(thd, (yyvsp[-5].item), (yyvsp[-4].boolfunc2creator), (yyvsp[-3].num), (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28940 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1252:
#line 8671 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[-4].item), (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28950 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1253:
#line 8677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[-5].item), (yyvsp[-1].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1254:
#line 8686 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[-4].item), true, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28973 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1255:
#line 8692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-6].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_func_in(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1256:
#line 8700 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[-5].item), false, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1257:
#line 8706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-7].item), thd->mem_root);
            Item_func_in *item= new (thd->mem_root) Item_func_in(thd, *(yyvsp[-1].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
#line 29009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1258:
#line 8716 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_between(thd, (yyvsp[-4].item), (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1259:
#line 8722 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
#line 29032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1260:
#line 8731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item1= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[-3].item));
            Item *item4= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[0].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(thd, item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1261:
#line 8741 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_like(thd, (yyvsp[-3].item), (yyvsp[-1].item), (yyvsp[0].item),
                                                   Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1262:
#line 8748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_like(thd, (yyvsp[-4].item), (yyvsp[-1].item), (yyvsp[0].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_not(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1263:
#line 8758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1264:
#line 8764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_regex(thd, (yyvsp[-3].item), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1266:
#line 8777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1267:
#line 8783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1268:
#line 8789 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1269:
#line 8795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29134 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1270:
#line 8801 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1271:
#line 8807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29154 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1272:
#line 8813 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-4].item), (yyvsp[-1].item), (yyvsp[0].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1273:
#line 8819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-4].item), (yyvsp[-1].item), (yyvsp[0].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1274:
#line 8825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1275:
#line 8831 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_div(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1276:
#line 8837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1277:
#line 8843 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29214 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1278:
#line 8849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29224 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1279:
#line 8855 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1289:
#line 8884 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
#line 29240 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1290:
#line 8885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
#line 29246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1291:
#line 8886 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
#line 29252 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1292:
#line 8887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_le_creator; }
#line 29258 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1293:
#line 8888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
#line 29264 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1294:
#line 8889 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
#line 29270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1295:
#line 8893 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 29276 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1296:
#line 8894 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 29282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1297:
#line 8899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
#line 29293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1298:
#line 8905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[0].num); }
#line 29299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1299:
#line 8910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29310 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1300:
#line 8917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1301:
#line 8924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29332 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1302:
#line 8931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1303:
#line 8938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1304:
#line 8945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
#line 29363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1305:
#line 8950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= thd->variables.collation_connection; }
#line 29369 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1306:
#line 8952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
#line 29379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1307:
#line 8958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
#line 29390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1308:
#line 8965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1309:
#line 8972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
#line 29413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1310:
#line 8980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
#line 29425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1311:
#line 8991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[-3].item);
     (yyval.dyncol_def)->value= (yyvsp[-1].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[0].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
#line 29449 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1312:
#line 9013 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[0].dyncol_def), thd->mem_root);
       }
#line 29460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1313:
#line 9020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
         (yyvsp[-2].dyncol_def_list)->push_back((yyvsp[0].dyncol_def), thd->mem_root);
         (yyval.dyncol_def_list)= (yyvsp[-2].dyncol_def_list);
       }
#line 29469 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1319:
#line 9033 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *i1= new (thd->mem_root) Item_string(thd, (yyvsp[0].lex_str).str,
                                                      (yyvsp[0].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation(thd, (yyvsp[-2].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1321:
#line 9044 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item_param); }
#line 29490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1324:
#line 9048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29500 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1325:
#line 9054 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item);
          }
#line 29508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1326:
#line 9058 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_neg(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1327:
#line 9064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29528 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1328:
#line 9070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= negate_expression(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1329:
#line 9076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect(thd, (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29548 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1330:
#line 9082 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[-1].item); }
#line 29554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1331:
#line 9084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1332:
#line 9091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1333:
#line 9098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect(thd, (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29586 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1334:
#line 9104 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[-1].item)->type() == Item::STRING_ITEM)
            {
              Item_string *item= (Item_string *) (yyvsp[-1].item);
              enum_field_types type= item->odbc_temporal_literal_type(&(yyvsp[-2].lex_str));
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd, item->val_str(NULL),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[-1].item);
          }
#line 29614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1335:
#line 9128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-5].item_list)->push_front((yyvsp[-2].item), thd->mem_root);
            Item_func_match *i1= new (thd->mem_root) Item_func_match(thd, *(yyvsp[-5].item_list),
                                                                     (yyvsp[-1].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(thd, i1);
            (yyval.item)= i1;
          }
#line 29628 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1336:
#line 9138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[0].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1337:
#line 9145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[-3].item), (yyvsp[-1].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1338:
#line 9153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(thd, *(yyvsp[-2].item_list), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1339:
#line 9159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[-3].item), (yyvsp[-1].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1340:
#line 9166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset(thd, (yyvsp[-3].item), (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29682 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1341:
#line 9172 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_splocal *il= (yyvsp[-1].item)->get_item_splocal();
            if (il)
              my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str));
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context(),
                                                         (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1342:
#line 9182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(thd, Lex->current_context(),
                                                        (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1343:
#line 9190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[0].item), (yyvsp[-3].item), (yyvsp[-2].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29717 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1344:
#line 9205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29727 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1345:
#line 9211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[-3].item_list), (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29737 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1346:
#line 9217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 29750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1347:
#line 9226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 29763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1348:
#line 9235 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1349:
#line 9241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1350:
#line 9247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29793 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1351:
#line 9253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert(thd, (yyvsp[-7].item), (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1352:
#line 9259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[-1].item), thd->mem_root);
            list->push_front((yyvsp[-3].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29821 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1353:
#line 9273 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-5].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *(yyvsp[-1].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1354:
#line 9284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_left(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1355:
#line 9290 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29856 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1356:
#line 9296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_month(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29866 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1357:
#line 9302 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_right(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1358:
#line 9308 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_second(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29886 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1359:
#line 9314 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast(thd, (yyvsp[-1].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1360:
#line 9321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast(thd, (yyvsp[-1].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29908 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1361:
#line 9328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time(thd, (yyvsp[-3].item), (yyvsp[-1].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1362:
#line 9334 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29928 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1363:
#line 9340 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29938 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1364:
#line 9346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1365:
#line 9352 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29958 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1366:
#line 9358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1367:
#line 9364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1368:
#line 9370 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29988 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1369:
#line 9376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29998 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1370:
#line 9382 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_user(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
#line 30010 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1371:
#line 9390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_year(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1372:
#line 9411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30031 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1373:
#line 9418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30041 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1374:
#line 9424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30052 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1375:
#line 9431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1376:
#line 9439 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1377:
#line 9446 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1378:
#line 9452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_extract(thd, (yyvsp[-3].interval), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1379:
#line 9458 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format(thd, (yyvsp[-3].date_time_type), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1380:
#line 9464 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1381:
#line 9471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_locate(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1382:
#line 9477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1383:
#line 9484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1384:
#line 9490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1385:
#line 9496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1386:
#line 9502 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30175 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1387:
#line 9508 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1388:
#line 9514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local(thd, (yyvsp[0].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1389:
#line 9532 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-1].item), (yyvsp[-3].item), (yyvsp[-5].interval_time_st), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1390:
#line 9538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff(thd, (yyvsp[-3].item), (yyvsp[-1].item), (yyvsp[-5].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1391:
#line 9544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1392:
#line 9551 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30249 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1393:
#line 9558 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1394:
#line 9566 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[-3].item), *(yyvsp[-1].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1395:
#line 9573 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[-3].item), *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30280 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1396:
#line 9580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1397:
#line 9587 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[-1].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1398:
#line 9594 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1399:
#line 9611 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1400:
#line 9617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1401:
#line 9623 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1402:
#line 9629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1403:
#line 9635 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_database(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1404:
#line 9642 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_if(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1405:
#line 9648 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30384 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1406:
#line 9654 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1407:
#line 9660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_last_value(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30404 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1408:
#line 9666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1409:
#line 9672 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30424 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1410:
#line 9678 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=  new (thd->mem_root)
              Item_func_password(thd, (yyvsp[-1].item), Item_func_password::OLD);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1411:
#line 9685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item* i1;
            i1= new (thd->mem_root) Item_func_password(thd, (yyvsp[-1].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
#line 30447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1412:
#line 9693 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_quarter(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1413:
#line 9699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1414:
#line 9705 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1415:
#line 9711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1416:
#line 9717 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 30499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1417:
#line 9725 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_round(thd, (yyvsp[-3].item), (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1418:
#line 9731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *i1;
            LEX_STRING name= {C_STRING_WITH_LEN("default_week_format")};
            if (!(i1= get_system_var(thd, OPT_SESSION,
                                     name, null_lex_str)))
              MYSQL_YYABORT;
            i1->set_name((const char *)
                         STRING_WITH_LEN("@@default_week_format"),
                         system_charset_info);
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[-1].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1419:
#line 9745 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1420:
#line 9751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[-2].item), 0, 0, (yyvsp[-1].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1421:
#line 9757 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, (yyvsp[-5].item), 0, (yyvsp[-2].ulong_num),
                                        (yyvsp[-1].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1422:
#line 9765 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_char_typecast(thd, (yyvsp[-4].item), (yyvsp[-1].ulong_num),
                                                               &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, item, 0, (yyvsp[-1].ulong_num),
                                        MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30575 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1423:
#line 9777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[-7].item), (yyvsp[-5].ulong_num), (yyvsp[-3].ulong_num),
                                                            (yyvsp[-1].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30586 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1424:
#line 9784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[0].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 30602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1425:
#line 9799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_precise_rel(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                 Item_func::SP_CONTAINS_FUNC));
          }
#line 30612 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1426:
#line 9805 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
#line 30623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1427:
#line 9812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
#line 30634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1428:
#line 9819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
#line 30645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1429:
#line 9826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
#line 30656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1430:
#line 9833 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
#line 30667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1431:
#line 9840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point(thd, (yyvsp[-3].item), (yyvsp[-1].item)));
          }
#line 30675 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1432:
#line 9844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
#line 30686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1433:
#line 9863 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
#line 30709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1434:
#line 9882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[-4].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[-4].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[-4].lex_str), (yyvsp[-1].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[-2].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[-1].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[-4].lex_str), (yyvsp[-1].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
#line 30766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1435:
#line 9935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[-5].lex_str).str || check_db_name(&(yyvsp[-5].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-5].lex_str).str));
            if (check_routine_name(&(yyvsp[-3].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[-5].lex_str), (yyvsp[-3].lex_str), true, (yyvsp[-1].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
#line 30805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1436:
#line 9973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].num) | (yyvsp[0].num); }
#line 30811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1437:
#line 9975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_BOOL; }
#line 30817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1438:
#line 9979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_NL; }
#line 30823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1439:
#line 9980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_NL; }
#line 30829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1440:
#line 9984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;         }
#line 30835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1441:
#line 9985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_EXPAND; }
#line 30841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1442:
#line 9989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= NULL; }
#line 30847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1443:
#line 9990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list); }
#line 30853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1444:
#line 9995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 30864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1445:
#line 10002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 30873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1446:
#line 10010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[0].lex_str).str)
            {
              (yyvsp[-2].item)->is_autogenerated_name= FALSE;
              (yyvsp[-2].item)->set_name((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[-2].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[-2].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[-2].item)->set_name((yyvsp[-3].simple_string), (uint) ((yyvsp[-1].simple_string) - (yyvsp[-3].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[-2].item);
          }
#line 30901 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1447:
#line 10037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[-1].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1448:
#line 10043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[-1].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1449:
#line 10049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1450:
#line 10055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1451:
#line 10061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1452:
#line 10067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_int(thd, (int32) 0L, 1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30964 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1453:
#line 10076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1454:
#line 10082 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr++; }
#line 30980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1455:
#line 10084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr--; }
#line 30986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1456:
#line 10086 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, *(yyvsp[-2].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1457:
#line 10092 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1458:
#line 10103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1459:
#line 10109 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1460:
#line 10115 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1461:
#line 10121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[-1].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1462:
#line 10127 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[-1].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1463:
#line 10133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1464:
#line 10139 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31076 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1465:
#line 10145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[-1].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31086 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1466:
#line 10151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[-1].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1467:
#line 10157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr++; }
#line 31102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1468:
#line 10161 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(thd, Lex->current_context(), (yyvsp[-5].num), (yyvsp[-3].item_list),
                                         sel->gorder_list, (yyvsp[-1].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[-3].item_list)->empty();
            sel->gorder_list.empty();
          }
#line 31118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1469:
#line 10176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (! Lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
          }
#line 31127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1470:
#line 10181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item);
          }
#line 31135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1471:
#line 10188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[-2].lex_str), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item, thd->mem_root);
          }
#line 31149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1472:
#line 10198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
#line 31161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1473:
#line 10206 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[-1].lex_str).str && (yyvsp[0].lex_str).str && check_reserved_words(&(yyvsp[-1].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[-2].var_type), (yyvsp[-1].lex_str), (yyvsp[0].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
#line 31178 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1474:
#line 10221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1475:
#line 10222 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 31190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1476:
#line 10227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
#line 31200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1477:
#line 10232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 31206 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1479:
#line 10238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_yyabort_error((ER_WRONG_USAGE, MYF(0),
                                "CUBE/ROLLUP", "ORDER BY"));
            }
          }
#line 31222 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1481:
#line 10254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_gorder_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 31228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1482:
#line 10256 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_gorder_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 31234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1483:
#line 10261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1484:
#line 10270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[0].item);
          }
#line 31256 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1485:
#line 10278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
#line 31262 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1486:
#line 10280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= thd->variables.collation_connection; }
#line 31268 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1487:
#line 10282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
#line 31274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1488:
#line 10284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
#line 31280 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1489:
#line 10286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31286 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1490:
#line 10288 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1491:
#line 10290 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1492:
#line 10292 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31304 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1493:
#line 10294 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31310 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1494:
#line 10296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1495:
#line 10298 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
#line 31326 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1496:
#line 10304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
#line 31336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1497:
#line 10310 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
#line 31342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1498:
#line 10312 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
#line 31348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1499:
#line 10314 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
#line 31354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1500:
#line 10317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= NULL; }
#line 31360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1501:
#line 10318 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list);}
#line 31366 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1502:
#line 10323 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 31377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1503:
#line 10330 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 31386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1504:
#line 10337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list); }
#line 31392 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1505:
#line 10338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[-1].item_list); }
#line 31398 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1506:
#line 10343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 31409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1507:
#line 10350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 31418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1508:
#line 10357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= NULL; }
#line 31424 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1509:
#line 10358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 31430 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1510:
#line 10362 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= NULL; }
#line 31436 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1511:
#line 10363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 31442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1512:
#line 10368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[-2].item), thd->mem_root);
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 31454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1513:
#line 10376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-4].item_list)->push_back((yyvsp[-2].item), thd->mem_root);
            (yyvsp[-4].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-4].item_list);
          }
#line 31464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1514:
#line 10386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 31470 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1515:
#line 10388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(thd)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1516:
#line 10399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[0].table_list)); }
#line 31489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1517:
#line 10410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 31495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1518:
#line 10411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[-1].table_list); }
#line 31501 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1519:
#line 10417 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 31507 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1520:
#line 10419 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));
          }
#line 31515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1521:
#line 10437 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));

            if (unlikely(Select->add_cross_joined_table((yyvsp[-2].table_list), (yyvsp[0].table_list), (yyvsp[-1].num))))
              MYSQL_YYABORT;
          }
#line 31526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1522:
#line 10445 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-3].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 31538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1523:
#line 10453 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	    (yyvsp[-3].table_list)->straight=(yyvsp[-4].num);
            add_join_on(thd, (yyvsp[-3].table_list), (yyvsp[0].item));
            (yyvsp[-3].table_list)->on_context= Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
#line 31549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1524:
#line 10461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && (yyvsp[-1].table_list));
          }
#line 31557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1525:
#line 10465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
	    (yyvsp[-5].table_list)->straight=(yyvsp[-6].num);
            add_join_natural((yyvsp[-7].table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select); 
	    (yyval.table_list)=(yyvsp[-5].table_list); 
          }
#line 31567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1526:
#line 10471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));
	    (yyvsp[0].table_list)->straight=(yyvsp[-1].num);
            add_join_natural((yyvsp[-3].table_list),(yyvsp[0].table_list),NULL,Select);
          }
#line 31577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1527:
#line 10480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-5].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 31589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1528:
#line 10488 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            add_join_on(thd, (yyvsp[-3].table_list), (yyvsp[0].item));
            (yyvsp[-3].table_list)->on_context= Lex->pop_context();
            (yyvsp[-3].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[-3].table_list);
            Select->parsing_place= NO_MATTER;
          }
#line 31601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1529:
#line 10496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].table_list) && (yyvsp[0].table_list));
          }
#line 31609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1530:
#line 10500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            add_join_natural((yyvsp[-9].table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select); 
            (yyvsp[-5].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[-5].table_list); 
          }
#line 31619 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1531:
#line 10506 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[0].table_list));
            add_join_natural((yyvsp[-5].table_list),(yyvsp[0].table_list),NULL,Select);
            (yyvsp[0].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[0].table_list);
          }
#line 31630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1532:
#line 10516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-5].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 31642 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1533:
#line 10524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on(thd, (yyval.table_list), (yyvsp[0].item));
            (yyvsp[-7].table_list)->on_context= Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
#line 31655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1534:
#line 10533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].table_list) && (yyvsp[0].table_list));
          }
#line 31663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1535:
#line 10537 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select);
          }
#line 31674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1536:
#line 10544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[0].table_list));
            add_join_natural((yyvsp[0].table_list),(yyvsp[-5].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
#line 31686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1537:
#line 10555 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31692 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1538:
#line 10556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31698 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1539:
#line 10557 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 31704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1540:
#line 10561 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = (yyvsp[0].num); }
#line 31710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1541:
#line 10562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1542:
#line 10570 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string_list)= 0;}
#line 31722 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1544:
#line 10576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string_list)= (yyvsp[-2].string_list);
          }
#line 31730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1545:
#line 10590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
#line 31739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1546:
#line 10595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[-3].table), (yyvsp[-1].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[-2].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
#line 31754 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1547:
#line 10606 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[-2].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            if ((yyvsp[-1].select_lex)->init_nested_join(thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
#line 31776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1548:
#line 10642 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[-2].table_list) || (yyvsp[0].lex_str_ptr)) && (yyvsp[-3].select_lex)->embedding &&
                !(yyvsp[-3].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[-2].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new (thd->mem_root) Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(thd,
                                               ti, (yyvsp[0].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[0].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[-2].table_list);
            }
            /*
              Fields in derived table can be used in upper select in
              case of merge. We do not add HAVING fields because we do
              not merge such derived. We do not add union because
              also do not merge them
            */
            if ((yyval.table_list) && (yyval.table_list)->derived &&
                !(yyval.table_list)->derived->first_select()->next_select())
              (yyval.table_list)->select_lex->add_where_field((yyval.table_list)->derived->first_select());
          }
#line 31843 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1549:
#line 10727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].table_list) && (yyvsp[0].num))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1550:
#line 10737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), FALSE))
              MYSQL_YYABORT;
          }
#line 31864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1551:
#line 10742 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();

            if ((yyvsp[-4].table_list) != NULL)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1552:
#line 10760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1553:
#line 10772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 31907 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1554:
#line 10780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 31915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1555:
#line 10788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].select_lex)->init_nested_join(thd))
              MYSQL_YYABORT;
          }
#line 31924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1556:
#line 10793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[-2].select_lex)->end_nested_join(thd)) && (yyvsp[0].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[0].table_list) && (yyval.table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1557:
#line 10808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 31962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1558:
#line 10825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 31970 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1560:
#line 10832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= Select; }
#line 31976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1561:
#line 10837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
              my_yyabort_error((ER_VIEW_SELECT_DERIVED, MYF(0)));

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(thd))
            {
              /* we are not in parentheses */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
#line 32000 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1562:
#line 10859 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1563:
#line 10860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32012 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1564:
#line 10865 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
#line 32020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1565:
#line 10868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
#line 32026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1566:
#line 10869 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
#line 32032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1567:
#line 10870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
#line 32038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1568:
#line 10874 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
#line 32044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1569:
#line 10875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
#line 32050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1570:
#line 10880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_index_hint_type((yyvsp[-2].index_hint), (yyvsp[0].num));
          }
#line 32058 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1572:
#line 10885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[0].num));
          }
#line 32066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1577:
#line 10898 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->alloc_index_hints(thd); }
#line 32072 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1579:
#line 10902 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {  Select->clear_index_hints(); }
#line 32078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1581:
#line 10907 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, NULL, 0); }
#line 32084 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1582:
#line 10908 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1583:
#line 10913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length); }
#line 32096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1584:
#line 10915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
#line 32102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1587:
#line 10925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.string_list)= new (thd->mem_root) List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s, thd->mem_root);
          }
#line 32117 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1588:
#line 10936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[-2].string_list)->push_back(s, thd->mem_root);
            (yyval.string_list)= (yyvsp[-2].string_list);
          }
#line 32131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1589:
#line 10948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1590:
#line 10949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
#line 32143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1591:
#line 10950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
#line 32149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1592:
#line 10951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
#line 32155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1593:
#line 10952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
#line 32161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1594:
#line 10953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
#line 32167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1595:
#line 10954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
#line 32173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1596:
#line 10955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
#line 32179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1597:
#line 10956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
#line 32185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1598:
#line 10957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
#line 32191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1599:
#line 10958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
#line 32197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1600:
#line 10959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
#line 32203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1601:
#line 10963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_DAY; }
#line 32209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1602:
#line 10964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
#line 32215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1603:
#line 10965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
#line 32221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1604:
#line 10966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
#line 32227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1605:
#line 10967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
#line 32233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1606:
#line 10968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
#line 32239 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1607:
#line 10969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
#line 32245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1608:
#line 10970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
#line 32251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1609:
#line 10971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
#line 32257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1610:
#line 10975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
#line 32263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1611:
#line 10976 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
#line 32269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1612:
#line 10977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
#line 32275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1613:
#line 10978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
#line 32281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1617:
#line 10988 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str_ptr)=0; }
#line 32287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1618:
#line 10990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) thd->memdup(&(yyvsp[0].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
#line 32297 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1621:
#line 11003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->where= 0; }
#line 32303 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1622:
#line 11005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= IN_WHERE;
          }
#line 32311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1623:
#line 11009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond(thd, (yyvsp[0].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
          }
#line 32323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1625:
#line 11021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= IN_HAVING;
          }
#line 32331 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1626:
#line 11025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond(thd, (yyvsp[0].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
          }
#line 32343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1627:
#line 11036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[0].item);
          }
#line 32352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1628:
#line 11041 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string_ascii(thd, "", 0) :
                 new (thd->mem_root) Item_string_ascii(thd, "\\", 1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1631:
#line 11062 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_group_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1632:
#line 11064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_group_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1633:
#line 11068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1634:
#line 11070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                                "global union parameters"));
            lex->current_select->olap= CUBE_TYPE;

            my_yyabort_error((ER_NOT_SUPPORTED_YET, MYF(0), "CUBE"));
          }
#line 32404 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1635:
#line 11087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                                "global union parameters"));
            lex->current_select->olap= ROLLUP_TYPE;
          }
#line 32423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1639:
#line 11118 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            bool ascending= ((yyvsp[0].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[-1].item), ascending))
              MYSQL_YYABORT;
          }
#line 32433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1642:
#line 11136 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE &&
                !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(thd))
                MYSQL_YYABORT;
            }
            if (sel->master_unit()->is_union() && !sel->braces)
            {
               /*
                 At this point we don't know yet whether this is the last
                 select in union or not, but we move ORDER BY to
                 fake_select_lex anyway. If there would be one more select
                 in union mysql_new_select will correctly throw error.
               */
               DBUG_ASSERT(sel->master_unit()->fake_select_lex);
               lex->current_select= sel->master_unit()->fake_select_lex;
             }
          }
#line 32480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1643:
#line 11179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {

          }
#line 32488 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1644:
#line 11186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_order_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32494 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1645:
#line 11188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_order_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32500 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1646:
#line 11192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =  1; }
#line 32506 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1647:
#line 11193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =1; }
#line 32512 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1648:
#line 11194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =0; }
#line 32518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1649:
#line 11198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1650:
#line 11199 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32530 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1651:
#line 11204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            if (sel->master_unit()->is_union() && !sel->braces)
            {
              /* Move LIMIT that belongs to UNION to fake_select_lex */
              Lex->current_select= sel->master_unit()->fake_select_lex;
              DBUG_ASSERT(Select);
            }
          }
#line 32544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1652:
#line 11217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            if (!sel->select_limit->basic_const_item() ||
                sel->select_limit->val_int() > 0)
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 32555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1653:
#line 11225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 32563 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1654:
#line 11229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 32571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1655:
#line 11236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
#line 32582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1656:
#line 11243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            sel->offset_limit= (yyvsp[-2].item);
            sel->explicit_limit= 1;
          }
#line 32593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1657:
#line 11250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[-2].item);
            sel->offset_limit= (yyvsp[0].item);
            sel->explicit_limit= 1;
          }
#line 32604 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1658:
#line 11260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[0].lex_str), false)))
          {
            splocal= new (thd->mem_root)
              Item_splocal(thd, (yyvsp[0].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
            my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));
          if (splocal->type() != Item::INT_ITEM)
            my_yyabort_error((ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0)));
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
#line 32635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1659:
#line 11287 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyvsp[0].item_param)->limit_clause_param= TRUE;
        }
#line 32643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1660:
#line 11291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1661:
#line 11297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1662:
#line 11303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1663:
#line 11312 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[0].item);
          }
#line 32682 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1664:
#line 11319 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
#line 32691 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1665:
#line 11324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
#line 32702 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1666:
#line 11330 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
#line 32708 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1667:
#line 11331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
#line 32714 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1668:
#line 11335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1669:
#line 11336 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1670:
#line 11337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32732 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1671:
#line 11341 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32738 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1672:
#line 11342 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 32744 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1673:
#line 11343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1674:
#line 11344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32756 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1675:
#line 11345 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32762 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1676:
#line 11346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32768 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1677:
#line 11350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1678:
#line 11351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 32780 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1679:
#line 11352 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1680:
#line 11353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32792 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1681:
#line 11354 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT; }
#line 32798 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1682:
#line 11358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32804 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1683:
#line 11359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32810 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1684:
#line 11360 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32816 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1685:
#line 11361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1686:
#line 11362 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1687:
#line 11366 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1688:
#line 11367 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1689:
#line 11368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulonglong_number)= strtoull((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 32846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1690:
#line 11369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1691:
#line 11370 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT; }
#line 32858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1692:
#line 11375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_ONLY_INTEGERS_ALLOWED); }
#line 32864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1695:
#line 11384 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.choice)= (yyvsp[0].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
#line 32870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1696:
#line 11385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.choice)= HA_CHOICE_UNDEF; }
#line 32876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1697:
#line 11389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 32882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1698:
#line 11391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
              my_yyabort_error((ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE"));

            if (&lex->select_lex != lex->current_select)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery"));
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(thd, &lex->current_select->context,
                                           NULL, NULL, (yyvsp[0].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);

            /*
              PROCEDURE CLAUSE cannot handle subquery as one of its parameter,
              so set expr_allows_subselect as false to disallow any subqueries
              further. Reset expr_allows_subselect back to true once the
              parameters are reduced.
            */
            Lex->expr_allows_subselect= false;
          }
#line 32915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1699:
#line 11420 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Subqueries are allowed from now.*/
            Lex->expr_allows_subselect= true;
            (yyval.num)= true;
          }
#line 32925 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1700:
#line 11428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1701:
#line 11429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1704:
#line 11439 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_proc_to_list(thd, (yyvsp[-1].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[-1].item)->name)
              (yyvsp[-1].item)->set_name((yyvsp[-2].simple_string), (uint) ((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)), thd->charset());
          }
#line 32948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1705:
#line 11448 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->describe &&
                (!(lex->result= new (thd->mem_root) select_dumpvar(thd))))
              MYSQL_YYABORT;
          }
#line 32959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1706:
#line 11455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1708:
#line 11460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32971 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1709:
#line 11464 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->result)
            {
              if ((yyvsp[0].myvar) == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)Lex->result)->var_list.push_back((yyvsp[0].myvar), thd->mem_root);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(Lex->describe);
            }
          }
#line 32992 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1710:
#line 11484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.myvar) = Lex->result ? new (thd->mem_root) my_var_user((yyvsp[0].lex_str)) : NULL;
          }
#line 33000 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1711:
#line 11488 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_variable *t;

            if (!Lex->spcont || !(t= Lex->spcont->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));
            (yyval.myvar) = Lex->result ? (new (thd->mem_root)
                                my_var_sp((yyvsp[0].lex_str), t->offset, t->type,
                                          Lex->sphead)) :
                                NULL;
          }
#line 33015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1712:
#line 11501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 33021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1713:
#line 11502 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= true; }
#line 33027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1714:
#line 11507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (! Lex->parsing_options.allows_select_into)
              my_yyabort_error((ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO"));
          }
#line 33036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1716:
#line 11516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange=
                    new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str, 0)) ||
                !(lex->result=
                    new (thd->mem_root) select_export(thd, lex->exchange)))
              MYSQL_YYABORT;
          }
#line 33050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1717:
#line 11526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->cs= (yyvsp[0].charset); }
#line 33056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1719:
#line 11529 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result=
                      new (thd->mem_root) select_dump(thd, lex->exchange)))
                MYSQL_YYABORT;
            }
          }
#line 33073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1720:
#line 11542 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
#line 33081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1721:
#line 11553 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
#line 33091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1722:
#line 11559 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->insert_list= (yyvsp[0].item_list);
          }
#line 33099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1723:
#line 11570 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_TABLE, (yyvsp[-2].num), (yyvsp[0].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 33110 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1724:
#line 11577 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1725:
#line 11578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1726:
#line 11579 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[-3].lex_str).str, (yyvsp[-4].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
#line 33143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1727:
#line 11596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_DB, (yyvsp[-1].object_ddl_options));
            lex->name= (yyvsp[0].lex_str);
          }
#line 33153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1728:
#line 11602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[-2].lex_str).str && check_db_name(&(yyvsp[-2].lex_str)))
               my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[-3].object_ddl_options));
            spname= new (thd->mem_root) sp_name((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
#line 33172 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1729:
#line 11617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[-1].object_ddl_options));
            spname= new (thd->mem_root) sp_name(db, (yyvsp[0].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
#line 33192 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1730:
#line 11633 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            lex->set_command(SQLCOM_DROP_PROCEDURE, (yyvsp[-1].object_ddl_options));
            lex->spname= (yyvsp[0].spname);
          }
#line 33204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1731:
#line 11641 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_USER, (yyvsp[-2].object_ddl_options));
          }
#line 33212 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1732:
#line 11645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_ROLE, (yyvsp[-2].object_ddl_options));
          }
#line 33220 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1733:
#line 11649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_VIEW, (yyvsp[0].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 33231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1734:
#line 11656 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1735:
#line 11658 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->spname= (yyvsp[0].spname);
            Lex->set_command(SQLCOM_DROP_EVENT, (yyvsp[-1].object_ddl_options));
          }
#line 33246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1736:
#line 11663 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_TRIGGER, (yyvsp[-1].object_ddl_options));
            lex->spname= (yyvsp[0].spname);
          }
#line 33256 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1737:
#line 11669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
#line 33265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1738:
#line 11674 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
#line 33274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1739:
#line 11679 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_SERVER, (yyvsp[-1].object_ddl_options));
            Lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 33283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1742:
#line 11692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[0].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33295 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1743:
#line 11703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[0].string_list)))
              MYSQL_YYABORT;
          }
#line 33309 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1746:
#line 11721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[0].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1747:
#line 11732 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
#line 33330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1748:
#line 11737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
#line 33339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1749:
#line 11745 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_NONE);
        }
#line 33347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1750:
#line 11749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_EXISTS);
        }
#line 33355 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1751:
#line 11755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 33361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1752:
#line 11756 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= HA_LEX_CREATE_TMP_TABLE; }
#line 33367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1753:
#line 11764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
#line 33378 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1754:
#line 11772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_lock_for_tables((yyvsp[-2].lock_type), true);
            Lex->current_select= &Lex->select_lex;
          }
#line 33387 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1755:
#line 11777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33393 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1756:
#line 11782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
#line 33404 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1757:
#line 11789 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_lock_for_tables((yyvsp[-1].lock_type), true);
            Lex->current_select= &Lex->select_lex;
          }
#line 33413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1758:
#line 11794 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33419 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1759:
#line 11799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 33432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1760:
#line 11807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 33438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1761:
#line 11809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
#line 33450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1762:
#line 11816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE; }
#line 33456 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1763:
#line 11820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= (yyvsp[0].lock_type); }
#line 33462 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1764:
#line 11822 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
#line 33474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1765:
#line 11832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1766:
#line 11833 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33486 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1767:
#line 11838 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
#line 33497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1768:
#line 11846 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1769:
#line 11847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1770:
#line 11848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1771:
#line 11850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!(lex->insert_list= new (thd->mem_root) List_item) ||
                lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1773:
#line 11861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 33532 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1774:
#line 11862 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 33538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1775:
#line 11866 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1776:
#line 11867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33550 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1777:
#line 11869 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(0);}
#line 33556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1778:
#line 11870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1779:
#line 11872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 33568 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1780:
#line 11873 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33574 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1785:
#line 11888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[-2].item), thd->mem_root) ||
                lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1786:
#line 11897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1787:
#line 11898 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1788:
#line 11902 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1789:
#line 11903 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1790:
#line 11908 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
              if (!(Lex->insert_list= new (thd->mem_root) List_item))
                MYSQL_YYABORT;
          }
#line 33618 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1791:
#line 11913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33628 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1792:
#line 11921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1794:
#line 11927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1795:
#line 11932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33652 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1796:
#line 11939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item);}
#line 33658 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1797:
#line 11941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1799:
#line 11950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates= DUP_UPDATE; }
#line 33674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1801:
#line 11958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
#line 33685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1802:
#line 11966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *slex= &Lex->select_lex;
            if (slex->table_list.elements > 1)
              Lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (slex->get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       slex->get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            slex->set_lock_for_tables((yyvsp[-4].lock_type), slex->table_list.elements == 1);
          }
#line 33708 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1803:
#line 11984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33714 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1806:
#line 11994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_item_to_list(thd, (yyvsp[-2].item)) || add_value_to_list(thd, (yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 33723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1809:
#line 12007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[-2].item), thd->mem_root) || 
              lex->value_list.push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1810:
#line 12016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
#line 33740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1811:
#line 12017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 33746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1812:
#line 12024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
#line 33761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1814:
#line 12039 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[0].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 33776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1815:
#line 12050 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1816:
#line 12051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33788 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1817:
#line 12053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 33798 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1818:
#line 12059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
#line 33807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1819:
#line 12064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 33817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1820:
#line 12070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
#line 33826 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1825:
#line 12088 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Table_ident *ti= new (thd->mem_root) Table_ident((yyvsp[-1].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33843 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1826:
#line 12101 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Table_ident *ti= new (thd->mem_root) Table_ident(thd, (yyvsp[-3].lex_str), (yyvsp[-1].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33860 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1827:
#line 12116 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33866 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1828:
#line 12117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33872 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1829:
#line 12121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33878 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1830:
#line 12122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33884 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1831:
#line 12126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= OPTION_QUICK; }
#line 33890 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1832:
#line 12127 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
#line 33896 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1833:
#line 12128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1; }
#line 33902 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1834:
#line 12133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 33917 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1835:
#line 12144 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 33929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1842:
#line 12168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_CPU;
    }
#line 33937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1843:
#line 12172 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
#line 33945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1844:
#line 12176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
#line 33953 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1845:
#line 12180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
#line 33961 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1846:
#line 12184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
#line 33969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1847:
#line 12188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_IPC;
    }
#line 33977 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1848:
#line 12192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
#line 33985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1849:
#line 12196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
#line 33993 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1850:
#line 12200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_ALL;
    }
#line 34001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1851:
#line 12207 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_query_id= 0;
    }
#line 34009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1852:
#line 12211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_query_id= atoi((yyvsp[0].lex_str).str);
    }
#line 34017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1853:
#line 12220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->create_info.init();
          }
#line 34030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1854:
#line 12229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 34038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1855:
#line 12236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
#line 34049 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1856:
#line 12243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
#line 34061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1857:
#line 12251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
#line 34073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1858:
#line 12259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
#line 34085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1859:
#line 12267 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
#line 34097 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1860:
#line 12275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[-1].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
#line 34109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1861:
#line 12283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
#line 34120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1862:
#line 12290 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ident= (yyvsp[0].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
#line 34131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1863:
#line 12297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
#line 34141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1864:
#line 12303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.db_type= (yyvsp[-1].db_type); }
#line 34147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1865:
#line 12305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.db_type= NULL; }
#line 34153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1866:
#line 12307 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[-1].simple_string))
              (yyvsp[-2].table)->change_db((yyvsp[-1].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[-2].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
#line 34166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1867:
#line 12316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
#line 34174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1868:
#line 12320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
#line 34182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1869:
#line 12324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
#line 34191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1871:
#line 12330 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
#line 34200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1873:
#line 12335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[-1].simple_string))
              (yyvsp[-2].table)->change_db((yyvsp[-1].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[-2].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
#line 34213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1874:
#line 12344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
#line 34224 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1875:
#line 12351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
#line 34233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1876:
#line 12356 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
#line 34242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1877:
#line 12361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
#line 34251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1878:
#line 12366 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (void) create_select_for_variable("warning_count"); }
#line 34257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1879:
#line 12368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (void) create_select_for_variable("error_count"); }
#line 34263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1880:
#line 12370 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
#line 34269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1881:
#line 12372 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
#line 34275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1882:
#line 12374 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
#line 34281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1883:
#line 12376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              MYSQL_YYABORT;
          }
#line 34292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1884:
#line 12383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[-2].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_STATUS))
              MYSQL_YYABORT;
          }
#line 34304 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1885:
#line 12391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
#line 34310 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1886:
#line 12393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[-2].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_VARIABLES))
              MYSQL_YYABORT;
          }
#line 34322 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1887:
#line 12401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
#line 34333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1888:
#line 12408 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
#line 34344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1889:
#line 12415 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
#line 34355 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1890:
#line 12422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[-1].lex_user);
          }
#line 34365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1891:
#line 12428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_SHOW_CREATE_DB, (yyvsp[-1].object_ddl_options));
            Lex->name= (yyvsp[0].lex_str);
          }
#line 34374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1892:
#line 12433 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,0))
              MYSQL_YYABORT;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
#line 34386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1893:
#line 12441 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
#line 34398 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1894:
#line 12449 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
#line 34406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1895:
#line 12453 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
#line 34415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1896:
#line 12458 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
#line 34426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1897:
#line 12465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
#line 34435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1898:
#line 12470 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[0].spname);
          }
#line 34446 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1899:
#line 12477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[0].spname);
          }
#line 34457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1900:
#line 12484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[0].spname);
          }
#line 34467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1901:
#line 12490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
#line 34478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1902:
#line 12497 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
#line 34489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1903:
#line 12504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[0].spname);
          }
#line 34498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1904:
#line 12509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[0].spname);
          }
#line 34507 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1905:
#line 12514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->spname= (yyvsp[0].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
#line 34516 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1906:
#line 12519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[0].item));
          }
#line 34527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1907:
#line 12526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             bool in_plugin;
             lex->sql_command= SQLCOM_SHOW_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[-2].lex_str).str, &in_plugin);
             if (!table || !table->old_format || !in_plugin)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[-1].simple_string));
               MYSQL_YYABORT;
             }
             if (lex->wild && table->idx_field1 < 0)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[0].simple_string));
               MYSQL_YYABORT;
             }
             if (make_schema_select(thd, Lex->current_select, table))
               MYSQL_YYABORT;
           }
#line 34550 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1908:
#line 12548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
#line 34556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1909:
#line 12550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
#line 34562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1910:
#line 12552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
#line 34568 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1915:
#line 12566 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= 0; }
#line 34574 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1916:
#line 12567 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[0].lex_str).str; }
#line 34580 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1917:
#line 12571 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->verbose=0; }
#line 34586 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1918:
#line 12572 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->verbose=1; }
#line 34592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1921:
#line 12581 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.log_file_name = 0; }
#line 34598 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1922:
#line 12582 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.log_file_name = (yyvsp[0].lex_str).str; }
#line 34604 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1923:
#line 12586 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.pos = 4; /* skip magic number */ }
#line 34610 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1924:
#line 12587 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.pos = (yyvsp[0].ulonglong_number); }
#line 34616 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1925:
#line 12591 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= 0; }
#line 34622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1926:
#line 12593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
            (yyval.simple_string)= (yyvsp[-1].simple_string);
          }
#line 34634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1927:
#line 12601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->where= normalize_cond(thd, (yyvsp[0].item));
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
            (yyval.simple_string)= (yyvsp[-1].simple_string);
          }
#line 34645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1928:
#line 12612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[0].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
#line 34660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1929:
#line 12623 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 34668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1930:
#line 12627 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_NORMAL; }
#line 34674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1931:
#line 12629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
#line 34683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1939:
#line 12650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->analyze_stmt= true;
          }
#line 34691 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1940:
#line 12656 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_EXTENDED; }
#line 34697 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1941:
#line 12657 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_PARTITIONS; }
#line 34703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1942:
#line 12658 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1943:
#line 12662 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1944:
#line 12664 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, "JSON"))
              Lex->explain_json= true;
            else if (!my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, "TRADITIONAL"))
              DBUG_ASSERT(Lex->explain_json==false);
            else
              my_yyabort_error((ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 34728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1945:
#line 12675 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1946:
#line 12676 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->wild= (yyvsp[0].string); }
#line 34740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1947:
#line 12678 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
#line 34752 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1948:
#line 12692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 34763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1949:
#line 12699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1950:
#line 12704 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
#line 34783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1951:
#line 12714 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1953:
#line 12719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1954:
#line 12721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          TABLE_LIST *tables= Lex->query_tables;
          for (; tables; tables= tables->next_global)
          {
            tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
            tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
            tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
          }
        }
#line 34809 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1955:
#line 12734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_READ_LOCK | (yyvsp[0].num); }
#line 34815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1956:
#line 12736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(thd, ER_NO_TABLES_USED);
              MYSQL_YYABORT;
            } 
            Lex->type|= REFRESH_FOR_EXPORT;
          }
#line 34828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1957:
#line 12743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1959:
#line 12749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1960:
#line 12754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_ERROR_LOG; }
#line 34846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1961:
#line 12756 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_ENGINE_LOG; }
#line 34852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1962:
#line 12758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_GENERAL_LOG; }
#line 34858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1963:
#line 12760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_SLOW_LOG; }
#line 34864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1964:
#line 12762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_BINARY_LOG; }
#line 34870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1965:
#line 12764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS"));
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
#line 34882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1966:
#line 12772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
#line 34888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1967:
#line 12774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_HOSTS; }
#line 34894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1968:
#line 12776 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_GRANT; }
#line 34900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1969:
#line 12778 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name= empty_lex_str;
          }
#line 34909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1970:
#line 12783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_STATUS; }
#line 34915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1971:
#line 12785 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE"));
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
#line 34927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1972:
#line 12793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_MASTER; }
#line 34933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1973:
#line 12795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_DES_KEY_FILE; }
#line 34939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1974:
#line 12797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_USER_RESOURCES; }
#line 34945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1975:
#line 12799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->type|= REFRESH_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[-1].lex_str).str);
             if (!table || !table->reset_table)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[0].simple_string));
               MYSQL_YYABORT;
             }
             Lex->view_list.push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[-1].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
           }
#line 34962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1976:
#line 12814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1977:
#line 12815 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1978:
#line 12819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1979:
#line 12821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1983:
#line 12831 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint32 value= (uint32) (yyvsp[0].ulonglong_number);
            if ((yyvsp[0].ulonglong_number) > UINT_MAX32)
            {
              my_printf_error(ER_BINLOG_CANT_DELETE_GTID_DOMAIN,
                              "The value of gtid domain being deleted ('%llu') "
                              "exceeds its maximum size "
                              "of 32 bit unsigned integer", MYF(0), (yyvsp[0].ulonglong_number));
              MYSQL_YYABORT;
            }
            insert_dynamic(&Lex->delete_gtid_domain, (uchar*) &value);
          }
#line 35003 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1984:
#line 12846 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num)= 0;}
#line 35009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1985:
#line 12847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num)= REFRESH_CHECKPOINT; }
#line 35015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1986:
#line 12851 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
#line 35024 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1987:
#line 12856 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1990:
#line 12865 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_SLAVE; }
#line 35036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1991:
#line 12867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 35042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1992:
#line 12869 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->type|= REFRESH_MASTER;
             Lex->next_binlog_file_number= 0;
          }
#line 35051 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1994:
#line 12874 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_QUERY_CACHE;}
#line 35057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1995:
#line 12878 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->reset_slave_info.all= false; }
#line 35063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1996:
#line 12879 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->reset_slave_info.all= true; }
#line 35069 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1997:
#line 12883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1998:
#line 12885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->next_binlog_file_number = (yyvsp[0].ulong_num);
          }
#line 35083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1999:
#line 12892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
#line 35093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2000:
#line 12898 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2002:
#line 12907 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->to_log = (yyvsp[0].lex_str).str;
          }
#line 35107 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2003:
#line 12911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[0].item), thd->mem_root);
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
#line 35118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2004:
#line 12923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
#line 35130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2005:
#line 12931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->kill_signal= (killed_state) ((yyvsp[-2].num) | (yyvsp[-1].num));
          }
#line 35138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2006:
#line 12937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_HARD_BIT; }
#line 35144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2007:
#line 12938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_HARD_BIT; }
#line 35150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2008:
#line 12939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 35156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2009:
#line 12942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_CONNECTION; }
#line 35162 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2010:
#line 12943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_CONNECTION; }
#line 35168 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2011:
#line 12944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_QUERY; }
#line 35174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2012:
#line 12946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
          }
#line 35183 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2013:
#line 12954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->value_list.push_front((yyval.item), thd->mem_root);
         }
#line 35191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2014:
#line 12958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root);
            Lex->kill_type= KILL_TYPE_USER;
          }
#line 35200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2015:
#line 12966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
#line 35206 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2016:
#line 12973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[0].lex_str).str;
          }
#line 35216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2017:
#line 12984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            mysql_init_select(lex);

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[0].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
#line 35232 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2018:
#line 12996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[-2].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str, 0, (yyvsp[-5].filetype))))
              MYSQL_YYABORT;
          }
#line 35246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2019:
#line 13006 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[-9].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[0].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
            lex->many_values.empty();
          }
#line 35261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2020:
#line 13017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->cs= (yyvsp[0].charset); }
#line 35267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2021:
#line 13021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35273 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2022:
#line 13025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.filetype)= FILETYPE_CSV; }
#line 35279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2023:
#line 13026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.filetype)= FILETYPE_XML; }
#line 35285 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2024:
#line 13030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=0;}
#line 35291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2025:
#line 13031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1;}
#line 35297 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2026:
#line 13035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
#line 35303 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2027:
#line 13037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 35315 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2028:
#line 13044 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 35321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2029:
#line 13048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates=DUP_ERROR; }
#line 35327 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2030:
#line 13049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates=DUP_REPLACE; }
#line 35333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2031:
#line 13050 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1; }
#line 35339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2036:
#line 13065 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[0].string);
          }
#line 35348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2037:
#line 13070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[0].string);
            lex->exchange->opt_enclosed= 1;
          }
#line 35359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2038:
#line 13077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[0].string);
          }
#line 35368 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2039:
#line 13082 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[0].string);
          }
#line 35377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2044:
#line 13100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[0].string);
          }
#line 35386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2045:
#line 13105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[0].string);
          }
#line 35395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2046:
#line 13112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 35401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2047:
#line 13114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->line_term = (yyvsp[0].string); }
#line 35407 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2049:
#line 13119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[-1].lex_str).str);
          }
#line 35416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2050:
#line 13126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 35422 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2051:
#line 13127 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 35428 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2052:
#line 13131 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35434 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2053:
#line 13132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35440 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2054:
#line 13133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35446 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2055:
#line 13138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 35452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2056:
#line 13140 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 35458 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2057:
#line 13144 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.item)= (yyvsp[0].item);}
#line 35464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2058:
#line 13146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2059:
#line 13154 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2060:
#line 13155 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35486 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2063:
#line 13165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[-4].item), thd->mem_root) || 
                lex->value_list.push_back((yyvsp[-1].item), thd->mem_root))
                MYSQL_YYABORT;
            (yyvsp[-1].item)->set_name_no_truncate((yyvsp[-2].simple_string), (uint) ((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)), thd->charset());
          }
#line 35498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2064:
#line 13178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(thd, tmp.str, tmp.length,
                                                cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2065:
#line 13202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35542 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2066:
#line 13214 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_string_with_introducer(thd, (yyvsp[0].lex_str).str,
                                                                (yyvsp[0].lex_str).length, (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2067:
#line 13221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_string* item= (Item_string*) (yyvsp[-1].item);
            item->append((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[0].lex_str).str,
                                                                (yyvsp[0].lex_str).length);
            }
          }
#line 35573 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2068:
#line 13240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[0].lex_str).str,
                                             (yyvsp[0].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
#line 35585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2069:
#line 13247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string)= (yyvsp[0].string); }
#line 35591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2070:
#line 13253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 35608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2071:
#line 13266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_hex_string(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 35621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2072:
#line 13275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_bin_string(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 35638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2073:
#line 13291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
            const char *query_start= lex->sphead ? lex->sphead->m_tmp_query
                                                 : thd->query();
            item= new (thd->mem_root) Item_param(thd, lip->get_tok_start() -
                                                      query_start);
            if (!((yyval.item_param)= item) || lex->param_list.push_back(item, thd->mem_root))
              my_yyabort_error((ER_OUT_OF_RESOURCES, MYF(0)));
          }
#line 35656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2074:
#line 13307 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 35662 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2075:
#line 13308 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item_num); }
#line 35668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2076:
#line 13310 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[0].item_num)->max_length++;
            (yyval.item)= (yyvsp[0].item_num)->neg(thd);
          }
#line 35677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2077:
#line 13317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 35683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2078:
#line 13318 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item_num); }
#line 35689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2079:
#line 13319 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 35695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2080:
#line 13321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            YYLIP->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item)= new (thd->mem_root) Item_null(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
#line 35713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2081:
#line 13335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_int(thd, (char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2082:
#line 13341 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_int(thd, (char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35733 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2083:
#line 13347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35743 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2084:
#line 13353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_hex_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2085:
#line 13359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2086:
#line 13365 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_string_with_introducer *item_str;
            /*
              Pass NULL as name. Name will be set in the "select_item" rule and
              will include the introducer and the original hex/bin notation.
            */
            item_str= new (thd->mem_root)
               Item_string_with_introducer(thd, NULL, (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length(),
                                           (yyvsp[-1].charset));
            if (!item_str || !item_str->check_well_formed_result(true))
              MYSQL_YYABORT;

            (yyval.item)= item_str;
          }
#line 35782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2087:
#line 13383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[0].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[0].lex_str).str, NULL, &error),
                           (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 35796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2088:
#line 13393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[0].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[0].lex_str).str, NULL, &error),
                           (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 35810 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2089:
#line 13403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 35820 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2090:
#line 13409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
#line 35833 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2091:
#line 13418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_float(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
#line 35845 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2092:
#line 13430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
#line 35855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2093:
#line 13436 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
#line 35865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2094:
#line 13442 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
#line 35875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2095:
#line 13457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 35881 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2096:
#line 13458 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 35887 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2097:
#line 13463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
#line 35900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2098:
#line 13472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[-4].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[-2].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
#line 35916 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2099:
#line 13486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 35922 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2100:
#line 13491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
                my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal(thd, (yyvsp[0].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, NullS, (yyvsp[0].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[0].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 35969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2101:
#line 13533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 35975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2102:
#line 13538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[0].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, NullS, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2103:
#line 13554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 36002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2104:
#line 13559 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[-2].lex_str).str[0]=='N' || (yyvsp[-2].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT"));

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE"));

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool tmp_read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(thd, Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[0].lex_str).str,
                                            SELECT_ACL,
                                            tmp_read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[-2].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 36078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2105:
#line 13631 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[-2].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 36106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2106:
#line 13655 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[-4].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[-2].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 schema,
                                                 (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 36137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2107:
#line 13684 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2108:
#line 13686 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[-4].lex_str).str, table->db))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-4].lex_str).str));
            if (my_strcasecmp(table_alias_charset, (yyvsp[-2].lex_str).str,
                              table->table_name))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            (yyval.lex_str)=(yyvsp[0].lex_str);
          }
#line 36157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2109:
#line 13696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[-2].lex_str).str, table->alias))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            (yyval.lex_str)=(yyvsp[0].lex_str);
          }
#line 36168 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2110:
#line 13702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2111:
#line 13707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[0].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2112:
#line 13713 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[-2].lex_str), (yyvsp[0].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2113:
#line 13719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* For Delphi */
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[0].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36205 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2114:
#line 13729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[-1].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2115:
#line 13735 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[-3].lex_str), (yyvsp[-1].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2116:
#line 13744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new (thd->mem_root) Table_ident(thd, db, (yyvsp[0].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2117:
#line 13753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 36242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2118:
#line 13755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[0].lex_str).str,
                                                   (yyvsp[0].lex_str).str+(yyvsp[0].lex_str).length,
                                                   (yyvsp[0].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[0].lex_str).length)
              {
                ErrConvString err((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[0].lex_str);
            }
            else
            {
              if (thd->convert_with_error(system_charset_info, &(yyval.lex_str),
                                          thd->charset(), (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length))
                MYSQL_YYABORT;
            }
          }
#line 36271 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2119:
#line 13783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
#line 36286 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2120:
#line 13797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
#line 36301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2121:
#line 13811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
#line 36317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2122:
#line 13825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 36323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2123:
#line 13827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 36334 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2124:
#line 13836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 36340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2125:
#line 13838 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 36351 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2126:
#line 13847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2127:
#line 13848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2128:
#line 13849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36369 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2129:
#line 13854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[0].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
#line 36386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2130:
#line 13867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[-2].lex_str); (yyval.lex_user)->host=(yyvsp[0].lex_str);
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
#line 36420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2131:
#line 13897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
#line 36432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2134:
#line 13909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           if ((yyvsp[0].lex_user)->user.str != current_user.str && (yyvsp[0].lex_user)->host.str == 0)
             (yyvsp[0].lex_user)->host= host_not_specified;
           (yyval.lex_user)= (yyvsp[0].lex_user);
         }
#line 36442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2135:
#line 13918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2136:
#line 13919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2137:
#line 13920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2138:
#line 13921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2139:
#line 13922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2140:
#line 13923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2141:
#line 13924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2142:
#line 13925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2143:
#line 13926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2144:
#line 13927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2145:
#line 13928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2146:
#line 13929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2147:
#line 13930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2148:
#line 13931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2149:
#line 13932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36532 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2150:
#line 13933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2151:
#line 13934 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2152:
#line 13935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36550 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2153:
#line 13936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2154:
#line 13937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2155:
#line 13938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36568 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2156:
#line 13939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36574 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2157:
#line 13940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36580 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2158:
#line 13941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36586 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2159:
#line 13942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2160:
#line 13943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36598 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2161:
#line 13944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36604 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2162:
#line 13945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36610 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2163:
#line 13946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36616 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2164:
#line 13947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2165:
#line 13948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36628 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2166:
#line 13949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2167:
#line 13950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36640 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2168:
#line 13951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36646 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2169:
#line 13952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36652 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2170:
#line 13953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36658 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2171:
#line 13954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36664 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2172:
#line 13955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36670 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2173:
#line 13956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36676 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2174:
#line 13957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36682 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2175:
#line 13958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36688 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2176:
#line 13959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36694 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2177:
#line 13960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36700 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2178:
#line 13961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36706 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2179:
#line 13962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36712 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2180:
#line 13963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36718 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2181:
#line 13964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36724 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2182:
#line 13965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2183:
#line 13966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2184:
#line 13967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36742 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2185:
#line 13968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36748 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2186:
#line 13969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36754 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2187:
#line 13970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36760 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2188:
#line 13971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2189:
#line 13972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2190:
#line 13973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36778 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2191:
#line 13974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36784 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2192:
#line 13975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36790 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2193:
#line 13976 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2194:
#line 13977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36802 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2195:
#line 13978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2196:
#line 13988 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36814 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2197:
#line 13989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36820 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2198:
#line 13990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36826 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2199:
#line 13991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36832 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2200:
#line 13992 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36838 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2201:
#line 13993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2202:
#line 13994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36850 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2203:
#line 13995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36856 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2204:
#line 13996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36862 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2205:
#line 13997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36868 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2206:
#line 13998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36874 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2207:
#line 13999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36880 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2208:
#line 14000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36886 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2209:
#line 14001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36892 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2210:
#line 14002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2211:
#line 14003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36904 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2212:
#line 14004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36910 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2213:
#line 14005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36916 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2214:
#line 14006 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36922 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2215:
#line 14007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36928 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2216:
#line 14008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36934 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2217:
#line 14009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36940 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2218:
#line 14010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36946 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2219:
#line 14011 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36952 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2220:
#line 14012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36958 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2221:
#line 14013 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36964 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2222:
#line 14014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36970 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2223:
#line 14015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2224:
#line 14016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36982 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2225:
#line 14017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36988 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2226:
#line 14018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36994 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2227:
#line 14019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37000 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2228:
#line 14020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2229:
#line 14021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37012 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2230:
#line 14022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37018 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2231:
#line 14023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37024 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2232:
#line 14024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2233:
#line 14025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2234:
#line 14026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2235:
#line 14027 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37048 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2236:
#line 14028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37054 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2237:
#line 14029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2238:
#line 14030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2239:
#line 14031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37072 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2240:
#line 14032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2241:
#line 14033 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37084 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2242:
#line 14034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2243:
#line 14035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2244:
#line 14036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2245:
#line 14037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2246:
#line 14042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2247:
#line 14043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2248:
#line 14044 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2249:
#line 14045 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2250:
#line 14046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2251:
#line 14047 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2252:
#line 14048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2253:
#line 14049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2254:
#line 14050 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37162 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2255:
#line 14051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37168 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2256:
#line 14052 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2257:
#line 14053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37180 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2258:
#line 14054 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2259:
#line 14055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37192 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2260:
#line 14056 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37198 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2261:
#line 14057 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2262:
#line 14058 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37210 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2263:
#line 14059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2264:
#line 14060 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37222 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2265:
#line 14061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2266:
#line 14062 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2267:
#line 14063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37240 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2268:
#line 14064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2269:
#line 14065 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37252 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2270:
#line 14066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37258 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2271:
#line 14067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37264 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2272:
#line 14068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2273:
#line 14069 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37276 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2274:
#line 14070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2275:
#line 14071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2276:
#line 14072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37294 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2277:
#line 14073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2278:
#line 14074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2279:
#line 14075 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2280:
#line 14076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37318 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2281:
#line 14077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2282:
#line 14078 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2283:
#line 14079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2284:
#line 14080 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2285:
#line 14081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2286:
#line 14082 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2287:
#line 14083 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2288:
#line 14084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37366 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2289:
#line 14085 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37372 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2290:
#line 14086 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37378 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2291:
#line 14087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37384 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2292:
#line 14088 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2293:
#line 14089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2294:
#line 14090 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37402 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2295:
#line 14091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37408 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2296:
#line 14092 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2297:
#line 14093 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2298:
#line 14094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2299:
#line 14095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2300:
#line 14096 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2301:
#line 14097 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2302:
#line 14098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2303:
#line 14099 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37456 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2304:
#line 14100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37462 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2305:
#line 14101 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37468 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2306:
#line 14102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2307:
#line 14103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2308:
#line 14104 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37486 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2309:
#line 14105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37492 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2310:
#line 14106 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2311:
#line 14107 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2312:
#line 14108 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37510 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2313:
#line 14109 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37516 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2314:
#line 14110 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37522 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2315:
#line 14111 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37528 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2316:
#line 14112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37534 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2317:
#line 14113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37540 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2318:
#line 14114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37546 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2319:
#line 14115 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37552 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2320:
#line 14116 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37558 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2321:
#line 14117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37564 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2322:
#line 14118 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37570 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2323:
#line 14119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2324:
#line 14120 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2325:
#line 14121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2326:
#line 14122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37594 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2327:
#line 14123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2328:
#line 14124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37606 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2329:
#line 14125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37612 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2330:
#line 14126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37618 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2331:
#line 14127 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37624 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2332:
#line 14128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2333:
#line 14129 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37636 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2334:
#line 14130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37642 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2335:
#line 14131 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37648 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2336:
#line 14132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37654 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2337:
#line 14133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2338:
#line 14134 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2339:
#line 14135 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2340:
#line 14136 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2341:
#line 14137 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37684 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2342:
#line 14138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37690 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2343:
#line 14139 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2344:
#line 14140 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37702 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2345:
#line 14141 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37708 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2346:
#line 14142 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37714 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2347:
#line 14143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2348:
#line 14144 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2349:
#line 14145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37732 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2350:
#line 14146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37738 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2351:
#line 14147 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37744 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2352:
#line 14148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2353:
#line 14149 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37756 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2354:
#line 14150 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37762 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2355:
#line 14151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37768 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2356:
#line 14152 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2357:
#line 14153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37780 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2358:
#line 14154 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2359:
#line 14155 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37792 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2360:
#line 14156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37798 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2361:
#line 14157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37804 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2362:
#line 14158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37810 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2363:
#line 14159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37816 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2364:
#line 14160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2365:
#line 14161 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2366:
#line 14162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2367:
#line 14163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2368:
#line 14164 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2369:
#line 14165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2370:
#line 14166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2371:
#line 14167 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2372:
#line 14168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2373:
#line 14169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2374:
#line 14170 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2375:
#line 14171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2376:
#line 14172 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2377:
#line 14173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2378:
#line 14174 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2379:
#line 14175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2380:
#line 14176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2381:
#line 14177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2382:
#line 14178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37930 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2383:
#line 14179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37936 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2384:
#line 14180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37942 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2385:
#line 14181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2386:
#line 14182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2387:
#line 14183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2388:
#line 14184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2389:
#line 14185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2390:
#line 14186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2391:
#line 14187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37984 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2392:
#line 14188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2393:
#line 14189 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2394:
#line 14190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2395:
#line 14191 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2396:
#line 14192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38014 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2397:
#line 14193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2398:
#line 14194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2399:
#line 14195 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2400:
#line 14196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2401:
#line 14197 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2402:
#line 14198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2403:
#line 14199 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2404:
#line 14200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38062 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2405:
#line 14201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2406:
#line 14202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38074 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2407:
#line 14203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38080 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2408:
#line 14204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38086 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2409:
#line 14205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38092 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2410:
#line 14206 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38098 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2411:
#line 14207 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2412:
#line 14208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38110 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2413:
#line 14209 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2414:
#line 14210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2415:
#line 14211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38128 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2416:
#line 14212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38134 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2417:
#line 14213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38140 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2418:
#line 14214 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2419:
#line 14215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38152 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2420:
#line 14216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38158 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2421:
#line 14217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2422:
#line 14218 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2423:
#line 14219 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2424:
#line 14220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2425:
#line 14221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2426:
#line 14222 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2427:
#line 14223 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2428:
#line 14224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38206 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2429:
#line 14225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38212 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2430:
#line 14226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2431:
#line 14227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38224 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2432:
#line 14228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38230 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2433:
#line 14229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2434:
#line 14230 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2435:
#line 14231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38248 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2436:
#line 14232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2437:
#line 14233 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2438:
#line 14234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2439:
#line 14235 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38272 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2440:
#line 14236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38278 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2441:
#line 14237 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2442:
#line 14238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2443:
#line 14239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38296 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2444:
#line 14240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2445:
#line 14241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2446:
#line 14242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2447:
#line 14243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38320 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2448:
#line 14244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38326 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2449:
#line 14245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38332 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2450:
#line 14246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38338 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2451:
#line 14247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2452:
#line 14248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38350 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2453:
#line 14249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38356 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2454:
#line 14250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38362 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2455:
#line 14251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38368 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2456:
#line 14252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2457:
#line 14253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2458:
#line 14254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2459:
#line 14255 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38392 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2460:
#line 14256 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38398 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2461:
#line 14257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38404 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2462:
#line 14258 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38410 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2463:
#line 14259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2464:
#line 14260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38422 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2465:
#line 14261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38428 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2466:
#line 14262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38434 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2467:
#line 14263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38440 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2468:
#line 14264 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38446 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2469:
#line 14265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2470:
#line 14266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38458 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2471:
#line 14267 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2472:
#line 14268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38470 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2473:
#line 14269 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38476 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2474:
#line 14270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38482 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2475:
#line 14271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38488 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2476:
#line 14272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38494 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2477:
#line 14273 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38500 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2478:
#line 14274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38506 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2479:
#line 14275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38512 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2480:
#line 14276 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2481:
#line 14277 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2482:
#line 14278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38530 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2483:
#line 14279 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38536 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2484:
#line 14280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38542 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2485:
#line 14281 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38548 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2486:
#line 14282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2487:
#line 14283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38560 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2488:
#line 14284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38566 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2489:
#line 14285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2490:
#line 14286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38578 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2491:
#line 14287 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38584 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2492:
#line 14288 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38590 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2493:
#line 14289 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2494:
#line 14290 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2495:
#line 14291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2496:
#line 14292 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2497:
#line 14293 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2498:
#line 14294 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2499:
#line 14295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2500:
#line 14296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2501:
#line 14297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2502:
#line 14298 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38650 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2503:
#line 14299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2504:
#line 14300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38662 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2505:
#line 14312 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->autocommit= 0;
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 38676 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2506:
#line 14322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38682 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2507:
#line 14324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->option_type= OPT_SESSION;
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->autocommit= 0;
          }
#line 38694 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2508:
#line 14332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0), "SET STATEMENT"));
            lex->stmt_var_list= lex->var_list;
            lex->var_list.empty();
          }
#line 38706 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2509:
#line 14340 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38712 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2512:
#line 14355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
#line 38721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2514:
#line 14361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= OPT_DEFAULT;
          }
#line 38729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2515:
#line 14365 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
#line 38738 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2516:
#line 14370 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= (yyvsp[0].var_type);
          }
#line 38746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2518:
#line 14380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2520:
#line 14386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38764 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2523:
#line 14400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 38772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2524:
#line 14404 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2525:
#line 14409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 38789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2526:
#line 14413 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38798 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2527:
#line 14422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= (yyvsp[0].var_type);
          }
#line 38806 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2530:
#line 14430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 38812 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2531:
#line 14431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38818 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2532:
#line 14432 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38824 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2533:
#line 14436 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38830 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2534:
#line 14437 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 38836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2535:
#line 14438 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38842 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2536:
#line 14439 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38848 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2537:
#line 14443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_DEFAULT; }
#line 38854 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2538:
#line 14444 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 38860 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2539:
#line 14445 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38866 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2540:
#line 14446 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38872 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2541:
#line 14452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if ((yyvsp[-2].variable).var && (yyvsp[-2].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[-2].variable), lex->option_type, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceding local variable is illegal.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 38896 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2542:
#line 14476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if ((yyvsp[-2].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(thd, &(yyvsp[-2].variable).base_name, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[-2].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[-2].variable), lex->option_type, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[-2].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
          }
#line 38926 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2543:
#line 14502 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[-2].lex_str), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new (thd->mem_root) set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var, thd->mem_root);
          }
#line 38941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2544:
#line 14513 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            struct sys_var_with_base tmp= (yyvsp[-2].variable);
            if (tmp.var == trg_new_row_fake_var)
            {
              my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), "NEW");
              MYSQL_YYABORT;
            }
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[-3].var_type), (yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 38962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2545:
#line 14530 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[0].charset) ? (yyvsp[0].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= (new (thd->mem_root)
                  set_var_collation_client(cs2,
                                           thd->variables.collation_database,
                                            cs2));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 38980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2546:
#line 14544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(thd, ER_SYNTAX_ERROR);

            MYSQL_YYABORT;
          }
#line 38999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2547:
#line 14559 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[-1].charset) ? (yyvsp[-1].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[0].charset) ? (yyvsp[0].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new (thd->mem_root) set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 39022 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2548:
#line 14578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            LEX_USER *user;
            if (!(user=(LEX_USER *) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role(user,
                                                             (yyvsp[0].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 39043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2549:
#line 14595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role((yyvsp[0].lex_user), (yyvsp[-2].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 39059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2550:
#line 14607 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_role *var= new (thd->mem_root) set_var_role((yyvsp[0].lex_str));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 39071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2551:
#line 14615 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_password *var= (new (thd->mem_root)
                                    set_var_password(lex->definer));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 39087 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2552:
#line 14631 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[0].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[0].lex_str);
            }
          }
#line 39117 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2553:
#line 14657 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[-2].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "OLD")))
            {
              if ((yyvsp[-2].lex_str).str[0]=='O' || (yyvsp[-2].lex_str).str[0]=='o')
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", ""));
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after "));
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[0].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[0].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[-2].lex_str);
            }
          }
#line 39158 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2554:
#line 14694 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[0].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
#line 39173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2559:
#line 14715 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[0].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_read_only"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 39192 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2560:
#line 14733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[0].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_isolation"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 39211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2561:
#line 14750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= true; }
#line 39217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2562:
#line 14751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 39223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2563:
#line 14755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
#line 39229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2564:
#line 14756 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
#line 39235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2565:
#line 14757 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
#line 39241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2566:
#line 14758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
#line 39247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2567:
#line 14763 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (spc && spc->find_variable(pw, false))
              my_yyabort_error((ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str));
            if (!(lex->definer= (LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            lex->definer->user= current_user;
            lex->definer->plugin= empty_lex_str;
            lex->definer->auth= empty_lex_str;
          }
#line 39265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2568:
#line 14776 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer= (yyvsp[-1].lex_user); }
#line 39271 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2569:
#line 14780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer->pwhash= (yyvsp[0].lex_str);}
#line 39277 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2570:
#line 14781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer->pwtext= (yyvsp[-1].lex_str); }
#line 39283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2571:
#line 14783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->definer->pwtext= (yyvsp[-1].lex_str);
            Lex->definer->pwhash.str= Item_func_password::alloc(thd,
                                   (yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length, Item_func_password::OLD);
            Lex->definer->pwhash.length=  SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
          }
#line 39294 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2572:
#line 14792 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 39300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2573:
#line 14793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=0; }
#line 39306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2574:
#line 14795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ON",  2);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 39316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2575:
#line 14801 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ALL", 3);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 39326 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2576:
#line 14807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "binary", 6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 39336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2577:
#line 14818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "LOCK"));
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
#line 39348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2578:
#line 14826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2579:
#line 14830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 39360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2580:
#line 14831 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 39366 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2583:
#line 14841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[0].num);
            bool lock_for_write= lock_type >= TL_WRITE_ALLOW_WRITE;
            ulong table_options= lock_for_write ? TL_OPTION_UPDATING : 0;
            enum_mdl_type mdl_type= !lock_for_write
                                    ? MDL_SHARED_READ
                                    : lock_type == TL_WRITE_CONCURRENT_INSERT
                                      ? MDL_SHARED_WRITE
                                      : MDL_SHARED_NO_READ_WRITE;

            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), (yyvsp[-1].lex_str_ptr), table_options,
                                           lock_type, mdl_type))
              MYSQL_YYABORT;
          }
#line 39385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2584:
#line 14858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_READ_NO_INSERT; }
#line 39391 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2585:
#line 14859 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_WRITE_DEFAULT; }
#line 39397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2586:
#line 14861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 39405 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2587:
#line 14865 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
#line 39411 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2588:
#line 14866 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_READ; }
#line 39417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2589:
#line 14871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "UNLOCK"));
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
#line 39429 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2590:
#line 14879 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2591:
#line 14888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-2].table), (yyvsp[0].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
#line 39448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2592:
#line 14897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), 0, 0))
              MYSQL_YYABORT;
          }
#line 39461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2593:
#line 14906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int(thd, (int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), 0, 0))
              MYSQL_YYABORT;
          }
#line 39482 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2594:
#line 14923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
#line 39497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2595:
#line 14936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ident= null_lex_str; }
#line 39503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2596:
#line 14937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ident= (yyvsp[-1].lex_str); }
#line 39509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2597:
#line 14941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RFIRST; }
#line 39515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2598:
#line 14942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RNEXT;  }
#line 39521 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2599:
#line 14946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RFIRST; }
#line 39527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2600:
#line 14947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RNEXT;  }
#line 39533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2601:
#line 14948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RPREV;  }
#line 39539 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2602:
#line 14949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RLAST;  }
#line 39545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2603:
#line 14951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[0].ha_rkey_mode);
            if (!(lex->insert_list= new (thd->mem_root) List_item))
              MYSQL_YYABORT;
          }
#line 39557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2604:
#line 14959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39563 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2605:
#line 14963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
#line 39569 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2606:
#line 14964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
#line 39575 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2607:
#line 14965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
#line 39581 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2608:
#line 14966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
#line 39587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2609:
#line 14967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
#line 39593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2610:
#line 14974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39599 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2611:
#line 14979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
#line 39609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2612:
#line 14985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
#line 39624 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2613:
#line 14996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
#line 39639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2614:
#line 15007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
#line 39647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2615:
#line 15011 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[-2].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
#line 39658 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2616:
#line 15018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[-2].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 39668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2617:
#line 15027 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 39674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2618:
#line 15029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 39680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2619:
#line 15034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2620:
#line 15040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
#line 39696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2621:
#line 15047 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
#line 39711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2622:
#line 15059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
#line 39726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2623:
#line 15070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[-3].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
#line 39737 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2624:
#line 15077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[-3].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 39749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2625:
#line 15088 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer = 0; }
#line 39755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2626:
#line 15089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer = (yyvsp[0].lex_user); }
#line 39761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2627:
#line 15092 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= false; }
#line 39767 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2628:
#line 15093 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= true; }
#line 39773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2629:
#line 15097 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 39782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2630:
#line 15102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 39791 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2631:
#line 15110 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->reset_auth();
          }
#line 39802 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2632:
#line 15120 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            CHARSET_INFO *cs= system_charset_info;
            /* trim end spaces (as they'll be lost in mysql.user anyway) */
            (yyvsp[0].lex_str).length= cs->cset->lengthsp(cs, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            (yyvsp[0].lex_str).str[(yyvsp[0].lex_str).length] = '\0';
            if ((yyvsp[0].lex_str).length == 0)
              my_yyabort_error((ER_INVALID_ROLE, MYF(0), ""));
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[0].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         cs, 0))
              MYSQL_YYABORT;
          }
#line 39825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2636:
#line 15147 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39831 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2637:
#line 15149 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
#line 39840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2642:
#line 15167 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = SELECT_ACL;}
#line 39846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2643:
#line 15168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2644:
#line 15170 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = INSERT_ACL;}
#line 39858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2645:
#line 15171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2646:
#line 15173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = UPDATE_ACL; }
#line 39870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2647:
#line 15174 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2648:
#line 15176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = REFERENCES_ACL;}
#line 39882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2649:
#line 15177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2650:
#line 15178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= DELETE_ACL;}
#line 39894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2651:
#line 15179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2652:
#line 15180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= INDEX_ACL;}
#line 39906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2653:
#line 15181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= ALTER_ACL;}
#line 39912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2654:
#line 15182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_ACL;}
#line 39918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2655:
#line 15183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= DROP_ACL;}
#line 39924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2656:
#line 15184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= EXECUTE_ACL;}
#line 39930 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2657:
#line 15185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= RELOAD_ACL;}
#line 39936 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2658:
#line 15186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHUTDOWN_ACL;}
#line 39942 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2659:
#line 15187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= PROCESS_ACL;}
#line 39948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2660:
#line 15188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= FILE_ACL;}
#line 39954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2661:
#line 15189 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 39960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2662:
#line 15190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHOW_DB_ACL;}
#line 39966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2663:
#line 15191 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SUPER_ACL;}
#line 39972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2664:
#line 15192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_TMP_ACL;}
#line 39978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2665:
#line 15193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= LOCK_TABLES_ACL; }
#line 39984 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2666:
#line 15194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= REPL_SLAVE_ACL; }
#line 39990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2667:
#line 15195 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= REPL_CLIENT_ACL; }
#line 39996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2668:
#line 15196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_VIEW_ACL; }
#line 40002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2669:
#line 15197 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHOW_VIEW_ACL; }
#line 40008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2670:
#line 15198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_PROC_ACL; }
#line 40014 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2671:
#line 15199 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= ALTER_PROC_ACL; }
#line 40020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2672:
#line 15200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_USER_ACL; }
#line 40026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2673:
#line 15201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= EVENT_ACL;}
#line 40032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2674:
#line 15202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= TRIGGER_ACL; }
#line 40038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2675:
#line 15203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
#line 40044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2676:
#line 15207 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2677:
#line 15208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2680:
#line 15218 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SUBJECT"));
            lex->x509_subject=(yyvsp[0].lex_str).str;
          }
#line 40067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2681:
#line 15225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "ISSUER"));
            lex->x509_issuer=(yyvsp[0].lex_str).str;
          }
#line 40078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2682:
#line 15232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "CIPHER"));
            lex->ssl_cipher=(yyvsp[0].lex_str).str;
          }
#line 40089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2683:
#line 15242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 40104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2684:
#line 15253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[-2].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 40117 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2685:
#line 15262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 40130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2686:
#line 15271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[0].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
#line 40143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2687:
#line 15283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40152 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2688:
#line 15288 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2689:
#line 15296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2690:
#line 15301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2691:
#line 15309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2692:
#line 15314 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2697:
#line 15325 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-3].lex_user);
            (yyvsp[-3].lex_user)->pwtext= (yyvsp[0].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
          }
#line 40208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2698:
#line 15332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.lex_user)= (yyvsp[-4].lex_user); 
            (yyvsp[-4].lex_user)->pwhash= (yyvsp[0].lex_str);
          }
#line 40217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2699:
#line 15337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-3].lex_user);
            (yyvsp[-3].lex_user)->plugin= (yyvsp[0].lex_str);
            (yyvsp[-3].lex_user)->auth= empty_lex_str;
          }
#line 40227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2700:
#line 15343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-5].lex_user);
            (yyvsp[-5].lex_user)->plugin= (yyvsp[-2].lex_str);
            (yyvsp[-5].lex_user)->auth= (yyvsp[0].lex_str);
          }
#line 40237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2701:
#line 15349 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 40243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2702:
#line 15354 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
#line 40252 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2706:
#line 15368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            String *new_str= new (thd->mem_root) String((const char*) (yyvsp[0].lex_str).str,(yyvsp[0].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= (new (thd->mem_root)
                                LEX_COLUMN(*new_str,lex->which_columns));
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col, thd->mem_root);
            }
          }
#line 40282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2708:
#line 15398 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
#line 40290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2709:
#line 15402 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
#line 40298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2710:
#line 15406 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
#line 40306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2711:
#line 15410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
#line 40314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2712:
#line 15416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40320 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2714:
#line 15421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40326 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2715:
#line 15422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 40332 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2716:
#line 15426 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40338 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2717:
#line 15427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2718:
#line 15431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 40350 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2719:
#line 15433 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
#line 40360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2720:
#line 15439 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
#line 40370 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2721:
#line 15445 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
#line 40380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2722:
#line 15451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[0].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
#line 40390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2723:
#line 15457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.max_statement_time= (yyvsp[0].item_num)->val_real();
            lex->mqh.specified_limits|= USER_RESOURCES::MAX_STATEMENT_TIME;
          }
#line 40400 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2724:
#line 15466 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
#line 40410 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2725:
#line 15471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2726:
#line 15476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_COMPOUND;
            Lex->sphead->set_stmt_end(thd);
            Lex->sphead->restore_thd_mem_root(thd);
          }
#line 40426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2727:
#line 15484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 40432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2728:
#line 15485 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 40438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2729:
#line 15489 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2730:
#line 15490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2731:
#line 15495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
#line 40456 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2732:
#line 15496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_NO; }
#line 40462 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2733:
#line 15497 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_YES; }
#line 40468 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2734:
#line 15502 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
#line 40474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2735:
#line 15503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_YES; }
#line 40480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2736:
#line 15504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_NO; }
#line 40486 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2737:
#line 15508 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40492 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2738:
#line 15509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2739:
#line 15514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[-1].m_yes_no_unk) != TVL_YES || (yyvsp[0].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[-1].m_yes_no_unk);
            lex->tx_release= (yyvsp[0].m_yes_no_unk);
          }
#line 40511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2740:
#line 15526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[-1].m_yes_no_unk) != TVL_YES || (yyvsp[0].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[-1].m_yes_no_unk);
            lex->tx_release= (yyvsp[0].m_yes_no_unk);
          }
#line 40524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2741:
#line 15536 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 40534 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2742:
#line 15545 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 40544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2743:
#line 15554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 40554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2744:
#line 15567 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40560 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2746:
#line 15573 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), TRUE))
              MYSQL_YYABORT;
          }
#line 40569 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2747:
#line 15578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
#line 40581 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2749:
#line 15589 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 40587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2750:
#line 15593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 40593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2751:
#line 15594 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 40599 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2752:
#line 15598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
#line 40617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2753:
#line 15612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
#line 40626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2756:
#line 15624 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1; }
#line 40632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2757:
#line 15625 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1; }
#line 40638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2758:
#line 15626 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=0; }
#line 40644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2759:
#line 15632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
#line 40652 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2760:
#line 15637 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
#line 40660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2762:
#line 15646 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), FALSE))
              MYSQL_YYABORT;
          }
#line 40669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2763:
#line 15651 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[-4].select_lex);
          }
#line 40678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2764:
#line 15660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.select_lex)= (yyvsp[-1].select_lex);
          }
#line 40686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2765:
#line 15666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
#line 40709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2766:
#line 15687 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;

            /*
              A subquery (and all the subsequent query blocks in a UNION) can
              add columns to an outer query block. Reserve space for them.
              Aggregate functions in having clause can also add fields to an
              outer select.
            */
            for (SELECT_LEX *temp= child->master_unit()->first_select();
                 temp != NULL; temp= temp->next_select())
            {
              lex->current_select->select_n_where_fields+=
                temp->select_n_where_fields;
              lex->current_select->select_n_having_items+=
                temp->select_n_having_items;
            }
          }
#line 40738 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2771:
#line 15724 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_STRAIGHT_JOIN; }
#line 40744 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2772:
#line 15726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
#line 40756 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2773:
#line 15733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_DISTINCT; }
#line 40762 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2774:
#line 15734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_SMALL_RESULT; }
#line 40768 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2775:
#line 15735 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_BIG_RESULT; }
#line 40774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2776:
#line 15737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
#line 40784 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2777:
#line 15743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
#line 40794 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2778:
#line 15748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_ALL; }
#line 40800 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2779:
#line 15759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40806 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2780:
#line 15761 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40812 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2781:
#line 15763 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40818 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2795:
#line 15796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
#line 40833 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2796:
#line 15810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->definer= (yyvsp[0].lex_user);
            Lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
            Lex->ssl_cipher= Lex->x509_subject= Lex->x509_issuer= 0;
            bzero(&(Lex->mqh), sizeof(Lex->mqh));
          }
#line 40844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2797:
#line 15826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
#line 40850 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2798:
#line 15828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
#line 40856 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2799:
#line 15830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
#line 40862 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2800:
#line 15835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
#line 40868 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2801:
#line 15837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
#line 40874 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2802:
#line 15839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
#line 40880 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2803:
#line 15844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
#line 40898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2805:
#line 15862 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40904 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2807:
#line 15868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
#line 40914 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2808:
#line 15874 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
#line 40924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2809:
#line 15882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
#line 40937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2810:
#line 15891 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
#line 40954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2813:
#line 15912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_NONE; }
#line 40960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2814:
#line 15914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
#line 40966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2815:
#line 15916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
#line 40972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2816:
#line 15918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
#line 40978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2817:
#line 15931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[0].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 40987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2818:
#line 15940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $10 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
#line 40995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2819:
#line 15946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $14 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
#line 41003 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2820:
#line 15951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $17 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER"));

            lex->stmt_definition_begin= (yyvsp[-14].simple_string);
            lex->ident.str= (yyvsp[-7].simple_string);
            lex->ident.length= (yyvsp[-3].simple_string) - (yyvsp[-7].simple_string);
            lex->spname= (yyvsp[-11].spname);

            if (!make_sp_head(thd, (yyvsp[-11].spname), TYPE_ENUM_TRIGGER))
              MYSQL_YYABORT;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
#line 41025 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2821:
#line 15969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $19 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[-7].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
#line 41053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2822:
#line 16001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { thd->lex->udf.type= UDFTYPE_AGGREGATE; }
#line 41059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2823:
#line 16002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { thd->lex->udf.type= UDFTYPE_FUNCTION;  }
#line 41065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2824:
#line 16008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[-5].object_ddl_options)))
              MYSQL_YYABORT;
            if (is_native_function(thd, & (yyvsp[-4].lex_str)))
              my_yyabort_error((ER_NATIVE_FCT_NAME_COLLISION, MYF(0), (yyvsp[-4].lex_str).str));
            lex->sql_command= SQLCOM_CREATE_FUNCTION;
            lex->udf.name= (yyvsp[-4].lex_str);
            lex->udf.returns= (Item_result) (yyvsp[-2].num);
            lex->udf.dl= (yyvsp[0].lex_str).str;
          }
#line 41081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2825:
#line 16026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $5 */
            LEX *lex= Lex;
            Lex_input_stream *lip= YYLIP;
            const char* tmp_param_begin;

            if (lex->add_create_options_with_check((yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
            lex->spname= (yyvsp[-1].spname);

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION"));

            if (!make_sp_head(thd, (yyvsp[-1].spname), TYPE_ENUM_FUNCTION))
              MYSQL_YYABORT;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
#line 41105 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2826:
#line 16047 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
#line 41113 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2827:
#line 16051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $10 */
            LEX *lex= Lex;
            lex->init_last_field(&lex->sphead->m_return_field_def, NULL,
                                 thd->variables.collation_database);
          }
#line 41123 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2828:
#line 16057 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $12 */
            if (Lex->sphead->fill_field_definition(thd, Lex, (yyvsp[0].field_type),
                                                   Lex->last_field))
              MYSQL_YYABORT;
          }
#line 41133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2829:
#line 16063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
#line 41144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2830:
#line 16070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
              my_yyabort_error((ER_SP_NORETURN, MYF(0), sp->m_qname.str));
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to
                occur before the call), the warning will provide a hint
                explaining the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER_THD(thd, ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
#line 41197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2831:
#line 16122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;

            if (Lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE"));

            if (!make_sp_head(thd, (yyvsp[0].spname), TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;
            Lex->spname= (yyvsp[0].spname);
          }
#line 41213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2832:
#line 16134 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
#line 41225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2833:
#line 16143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
#line 41233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2834:
#line 16147 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
#line 41241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2835:
#line 16151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
#line 41254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2836:
#line 16165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
#line 41262 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2837:
#line 16169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
#line 41270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2838:
#line 16173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
#line 41278 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2839:
#line 16177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
#line 41286 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2840:
#line 16181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
#line 41294 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2841:
#line 16185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
#line 41302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2842:
#line 16192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[0].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length(), 0, 0);
          }
#line 41313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2843:
#line 16199 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].string)->length() <= MAXGTRIDSIZE && (yyvsp[0].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[-2].string)->ptr(), (yyvsp[-2].string)->length(), (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length());
          }
#line 41324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2844:
#line 16206 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].string)->length() <= MAXGTRIDSIZE && (yyvsp[-2].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[0].ulong_num), (yyvsp[-4].string)->ptr(), (yyvsp[-4].string)->length(), (yyvsp[-2].string)->ptr(), (yyvsp[-2].string)->length());
          }
#line 41335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2845:
#line 16215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2846:
#line 16216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2847:
#line 16220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 41353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2848:
#line 16221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_JOIN;        }
#line 41359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2849:
#line 16222 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_RESUME;      }
#line 41365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2850:
#line 16226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 41371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2851:
#line 16227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_ONE_PHASE;   }
#line 41377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2852:
#line 16232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 41383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2853:
#line 16234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_SUSPEND;     }
#line 41389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2855:
#line 16239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2856:
#line 16240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_FOR_MIGRATE; }
#line 41401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2857:
#line 16245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[-2].lex_str);
            lex->ident= (yyvsp[0].lex_str);
          }
#line 41412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2858:
#line 16252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 41423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2859:
#line 16262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[0].lex_str);
          }
#line 41433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2860:
#line 16268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 41444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2861:
#line 16279 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	  YYERROR;
	}
#line 41452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;


#line 41456 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (thd, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, thd);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, thd);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
