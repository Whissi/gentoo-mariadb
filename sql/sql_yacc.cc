/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */
#line 25 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:339  */

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include <my_global.h>
#include "sql_priv.h"
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_show.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "sql_cte.h"
#include "sql_window.h"
#include "item_windowfunc.h"
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"
#include "lex_token.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(thd, (char*) (A));              \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)                  \
  if (!(A))                                      \
  {                                              \
    my_parse_error(thd, ER_SYNTAX_ERROR);        \
    MYSQL_YYABORT;                               \
  }

#define my_yyabort_error(A)                      \
  do { my_error A; MYSQL_YYABORT; } while(0)

#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

static void my_parse_error_intern(THD *thd, const char *err_text,
                                  const char *yytext)
{
  Lex_input_stream *lip= &thd->m_parser_state->m_lip;
  if (!yytext)
  {
    if (!(yytext= lip->get_tok_start()))
      yytext= "";
  }
  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext),
                    thd->variables.character_set_client);
  my_error(ER_PARSE_ERROR, MYF(0), err_text, err.ptr(), lip->yylineno);
}


static void my_parse_error(THD *thd, uint err_number, const char *yytext=0)
{
  return my_parse_error_intern(thd, ER_THD(thd, err_number), yytext);
}

void LEX::parse_error()
{
  my_parse_error(thd, ER_SYNTAX_ERROR);
}


/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER_THD(thd, ER_SYNTAX_ERROR);
  my_parse_error_intern(thd, s, 0);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


static sp_head *make_sp_head(THD *thd, sp_name *name,
                             enum stored_procedure_type type)
{
  LEX *lex= thd->lex;
  sp_head *sp;

  /* Order is important here: new - reset - init */
  if ((sp= sp_head::create()))
  {
    sp->reset_thd_mem_root(thd);
    sp->init(lex);
    sp->m_type= type;
    if (name)
      sp->init_sp_name(thd, name);
    sp->m_chistics= &lex->sp_chistics;
    lex->sphead= sp;
  }
  bzero(&lex->sp_chistics, sizeof(lex->sp_chistics));
  return sp;
}

static bool maybe_start_compound_statement(THD *thd)
{
  if (!thd->lex->sphead)
  {
    if (!make_sp_head(thd, NULL, TYPE_ENUM_PROCEDURE))
      return 1;

    Lex->sp_chistics.suid= SP_IS_NOT_SUID;
    Lex->sphead->set_body_start(thd, YYLIP->get_cpp_ptr());
  }
  return 0;
}

static bool push_sp_label(THD *thd, LEX_STRING label)
{
  sp_pcontext *ctx= thd->lex->spcont;
  sp_label *lab= ctx->find_label(label);

  if (lab)
  {
    my_error(ER_SP_LABEL_REDEFINE, MYF(0), label.str);
    return 1;
  }
  else
  {
    lab= thd->lex->spcont->push_label(thd, label,
        thd->lex->sphead->instructions());
    lab->type= sp_label::ITERATION;
  }
  return 0;
}

static bool push_sp_empty_label(THD *thd)
{
  if (maybe_start_compound_statement(thd))
    return 1;
  /* Unlabeled controls get an empty label. */
  thd->lex->spcont->push_label(thd, empty_lex_str,
      thd->lex->sphead->instructions());
  return 0;
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new (lex->thd->mem_root)
    sp_instr_set_case_expr(sp->instructions(), parsing_ctx, case_expr_id, expr,
                           lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;
  THD *thd= lex->thd;

  if (simple)
  {
    var= new (thd->mem_root)
         Item_case_expr(thd, ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new (thd->mem_root) Item_func_eq(thd, var, when);
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !MY_TEST(i) ||
         sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i= new (lex->thd->mem_root) sp_instr_jump(ip, ctx);
  if (!MY_TEST(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to after END CASE
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(lex->thd, i, ctx->last_label());
}

static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var != NULL)
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new (thd->mem_root)
         set_var(thd, var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var, thd->mem_root);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null(thd);
    if (it == NULL)
      return TRUE;
  }

  sp_set= new (thd->mem_root)
         sp_instr_set(lex->sphead->instructions(), lex->spcont,
                                   spv->offset, it, spv->sql_type(),
                                   lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new (thd->mem_root) Item_null(thd);

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(thd, lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new (thd->mem_root)
        sp_instr_set_trigger_field(lex->sphead->instructions(),
                                                 lex->spcont, trg_fld, val,
         lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= (uint)(start_in_q - lex->sphead->m_tmp_query);
  len_in_q= (uint)(end_in_q - start_in_q);

  item= new (thd->mem_root)
    Item_splocal(thd, name, spvar->offset, spvar->sql_type(),
                 pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(thd, left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(thd, left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(thd, left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select
          statement uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
                       is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->order_list.first && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "ORDER BY");
    return TRUE;
  }

  if (lex->current_select->explicit_limit && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "LIMIT");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  lex->current_select->with_all_modifier= !is_union_distinct;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}


static bool add_create_index_prepare(LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->option_list= NULL;
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    if (no_lookahead)
        lex->sphead->m_tmp_query= lip->get_ptr();
    else
        lex->sphead->m_tmp_query= lip->get_tok_end();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex->spcont, lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}


static void add_key_to_list(LEX *lex, LEX_STRING *field_name,
                            enum Key::Keytype type, bool check_exists)
{
  Key *key;
  MEM_ROOT *mem_root= lex->thd->mem_root;
  key= new (mem_root)
        Key(type, null_lex_str, HA_KEY_ALG_UNDEF, false,
             DDL_options(check_exists ?
                         DDL_options::OPT_IF_NOT_EXISTS :
                         DDL_options::OPT_NONE));
  key->columns.push_back(new (mem_root) Key_part_spec(*field_name, 0),
                         mem_root);
  lex->alter_info.key_list.push_back(key, mem_root);
}

void LEX::init_last_field(Column_definition *field, const char *field_name,
         CHARSET_INFO *cs)
{
  last_field= field;

  field->field_name= field_name;

  /* reset LEX fields that are used in Create_field::set_and_check() */
  charset= cs;
}

void LEX::set_last_field_type(const Lex_field_type_st &type)
{
  last_field->sql_type= type.field_type();
  last_field->charset= charset;

  if (type.length())
  {
    int err;
    last_field->length= my_strtoll10(type.length(), NULL, &err);
    if (err)
      last_field->length= ~0ULL; // safety
  }
  else
    last_field->length= 0;

  last_field->decimals= type.dec() ? (uint)atoi(type.dec()) : 0;
}

bool LEX::set_bincmp(CHARSET_INFO *cs, bool bin)
{
  /*
     if charset is NULL - we're parsing a field declaration.
     we cannot call find_bin_collation for a field here, because actual
     field charset is determined in get_sql_field_charset() much later.
     so we only set a flag.
  */
  if (!charset)
  {
    charset= cs;
    last_field->flags|= bin ? BINCMP_FLAG : 0;
    return false;
  }

  charset= bin ? find_bin_collation(cs ? cs : charset)
               :                    cs ? cs : charset;
  return charset == NULL;
}

#define bincmp_collation(X,Y)           \
  do                                    \
  {                                     \
     if (Lex->set_bincmp(X,Y))          \
       MYSQL_YYABORT;                   \
  } while(0)

Virtual_column_info *add_virtual_expression(THD *thd, Item *expr)
{
  Virtual_column_info *v= new (thd->mem_root) Virtual_column_info();
  if (!v)
  {
     mem_alloc_error(sizeof(Virtual_column_info));
     return 0;
   }
   v->expr= expr;
   v->utf8= 0;  /* connection charset */
   return v;
}


#line 976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "sql_yacc.h".  */
#ifndef YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED
# define YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int MYSQLdebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    ABORT_SYM = 258,
    ACCESSIBLE_SYM = 259,
    ACTION = 260,
    ADD = 261,
    ADMIN_SYM = 262,
    ADDDATE_SYM = 263,
    AFTER_SYM = 264,
    AGAINST = 265,
    AGGREGATE_SYM = 266,
    ALGORITHM_SYM = 267,
    ALL = 268,
    ALTER = 269,
    ALWAYS_SYM = 270,
    ANALYZE_SYM = 271,
    AND_AND_SYM = 272,
    AND_SYM = 273,
    ANY_SYM = 274,
    AS = 275,
    ASC = 276,
    ASCII_SYM = 277,
    ASENSITIVE_SYM = 278,
    AT_SYM = 279,
    ATOMIC_SYM = 280,
    AUTHORS_SYM = 281,
    AUTOEXTEND_SIZE_SYM = 282,
    AUTO_INC = 283,
    AUTO_SYM = 284,
    AVG_ROW_LENGTH = 285,
    AVG_SYM = 286,
    BACKUP_SYM = 287,
    BEFORE_SYM = 288,
    BEGIN_SYM = 289,
    BETWEEN_SYM = 290,
    BIGINT = 291,
    BINARY = 292,
    BINLOG_SYM = 293,
    BIN_NUM = 294,
    BIT_AND = 295,
    BIT_OR = 296,
    BIT_SYM = 297,
    BIT_XOR = 298,
    BLOB_SYM = 299,
    BLOCK_SYM = 300,
    BOOLEAN_SYM = 301,
    BOOL_SYM = 302,
    BOTH = 303,
    BTREE_SYM = 304,
    BY = 305,
    BYTE_SYM = 306,
    CACHE_SYM = 307,
    CALL_SYM = 308,
    CASCADE = 309,
    CASCADED = 310,
    CASE_SYM = 311,
    CAST_SYM = 312,
    CATALOG_NAME_SYM = 313,
    CHAIN_SYM = 314,
    CHANGE = 315,
    CHANGED = 316,
    CHARSET = 317,
    CHAR_SYM = 318,
    CHECKPOINT_SYM = 319,
    CHECKSUM_SYM = 320,
    CHECK_SYM = 321,
    CIPHER_SYM = 322,
    CLASS_ORIGIN_SYM = 323,
    CLIENT_SYM = 324,
    CLOSE_SYM = 325,
    COALESCE = 326,
    CODE_SYM = 327,
    COLLATE_SYM = 328,
    COLLATION_SYM = 329,
    COLUMNS = 330,
    COLUMN_ADD_SYM = 331,
    COLUMN_CHECK_SYM = 332,
    COLUMN_CREATE_SYM = 333,
    COLUMN_DELETE_SYM = 334,
    COLUMN_GET_SYM = 335,
    COLUMN_SYM = 336,
    COLUMN_NAME_SYM = 337,
    COMMENT_SYM = 338,
    COMMITTED_SYM = 339,
    COMMIT_SYM = 340,
    COMPACT_SYM = 341,
    COMPLETION_SYM = 342,
    COMPRESSED_SYM = 343,
    CONCURRENT = 344,
    CONDITION_SYM = 345,
    CONNECTION_SYM = 346,
    CONSISTENT_SYM = 347,
    CONSTRAINT = 348,
    CONSTRAINT_CATALOG_SYM = 349,
    CONSTRAINT_NAME_SYM = 350,
    CONSTRAINT_SCHEMA_SYM = 351,
    CONTAINS_SYM = 352,
    CONTEXT_SYM = 353,
    CONTINUE_SYM = 354,
    CONTRIBUTORS_SYM = 355,
    CONVERT_SYM = 356,
    COUNT_SYM = 357,
    CPU_SYM = 358,
    CREATE = 359,
    CROSS = 360,
    CUBE_SYM = 361,
    CUME_DIST_SYM = 362,
    CURDATE = 363,
    CURRENT_SYM = 364,
    CURRENT_USER = 365,
    CURRENT_ROLE = 366,
    CURRENT_POS_SYM = 367,
    CURSOR_SYM = 368,
    CURSOR_NAME_SYM = 369,
    CURTIME = 370,
    DATABASE = 371,
    DATABASES = 372,
    DATAFILE_SYM = 373,
    DATA_SYM = 374,
    DATETIME = 375,
    DATE_ADD_INTERVAL = 376,
    DATE_SUB_INTERVAL = 377,
    DATE_SYM = 378,
    DAY_HOUR_SYM = 379,
    DAY_MICROSECOND_SYM = 380,
    DAY_MINUTE_SYM = 381,
    DAY_SECOND_SYM = 382,
    DAY_SYM = 383,
    DEALLOCATE_SYM = 384,
    DECIMAL_NUM = 385,
    DECIMAL_SYM = 386,
    DECLARE_SYM = 387,
    DEFAULT = 388,
    DEFINER_SYM = 389,
    DELAYED_SYM = 390,
    DELAY_KEY_WRITE_SYM = 391,
    DELETE_DOMAIN_ID_SYM = 392,
    DELETE_SYM = 393,
    DENSE_RANK_SYM = 394,
    DESC = 395,
    DESCRIBE = 396,
    DES_KEY_FILE = 397,
    DETERMINISTIC_SYM = 398,
    DIAGNOSTICS_SYM = 399,
    DIRECTORY_SYM = 400,
    DISABLE_SYM = 401,
    DISCARD = 402,
    DISK_SYM = 403,
    DISTINCT = 404,
    DIV_SYM = 405,
    DOUBLE_SYM = 406,
    DO_DOMAIN_IDS_SYM = 407,
    DO_SYM = 408,
    DROP = 409,
    DUAL_SYM = 410,
    DUMPFILE = 411,
    DUPLICATE_SYM = 412,
    DYNAMIC_SYM = 413,
    EACH_SYM = 414,
    ELSE = 415,
    ELSEIF_SYM = 416,
    ENABLE_SYM = 417,
    ENCLOSED = 418,
    END = 419,
    ENDS_SYM = 420,
    END_OF_INPUT = 421,
    ENGINES_SYM = 422,
    ENGINE_SYM = 423,
    ENUM = 424,
    EQUAL_SYM = 425,
    ERROR_SYM = 426,
    ERRORS = 427,
    ESCAPED = 428,
    ESCAPE_SYM = 429,
    EVENTS_SYM = 430,
    EVENT_SYM = 431,
    EVERY_SYM = 432,
    EXCHANGE_SYM = 433,
    EXAMINED_SYM = 434,
    EXCLUDE_SYM = 435,
    EXECUTE_SYM = 436,
    EXISTS = 437,
    EXIT_SYM = 438,
    EXPANSION_SYM = 439,
    EXPORT_SYM = 440,
    EXTENDED_SYM = 441,
    EXTENT_SIZE_SYM = 442,
    EXTRACT_SYM = 443,
    FALSE_SYM = 444,
    FAST_SYM = 445,
    FAULTS_SYM = 446,
    FETCH_SYM = 447,
    FILE_SYM = 448,
    FIRST_VALUE_SYM = 449,
    FIRST_SYM = 450,
    FIXED_SYM = 451,
    FLOAT_NUM = 452,
    FLOAT_SYM = 453,
    FLUSH_SYM = 454,
    FOLLOWS_SYM = 455,
    FOLLOWING_SYM = 456,
    FORCE_SYM = 457,
    FOREIGN = 458,
    FOR_SYM = 459,
    FORMAT_SYM = 460,
    FOUND_SYM = 461,
    FROM = 462,
    FULL = 463,
    FULLTEXT_SYM = 464,
    FUNCTION_SYM = 465,
    GE = 466,
    GENERAL = 467,
    GENERATED_SYM = 468,
    GEOMETRYCOLLECTION = 469,
    GEOMETRY_SYM = 470,
    GET_FORMAT = 471,
    GET_SYM = 472,
    GLOBAL_SYM = 473,
    GRANT = 474,
    GRANTS = 475,
    GROUP_SYM = 476,
    GROUP_CONCAT_SYM = 477,
    LAG_SYM = 478,
    LEAD_SYM = 479,
    HANDLER_SYM = 480,
    HARD_SYM = 481,
    HASH_SYM = 482,
    HAVING = 483,
    HELP_SYM = 484,
    HEX_NUM = 485,
    HEX_STRING = 486,
    HIGH_PRIORITY = 487,
    HOST_SYM = 488,
    HOSTS_SYM = 489,
    HOUR_MICROSECOND_SYM = 490,
    HOUR_MINUTE_SYM = 491,
    HOUR_SECOND_SYM = 492,
    HOUR_SYM = 493,
    ID_SYM = 494,
    IDENT = 495,
    IDENTIFIED_SYM = 496,
    IDENT_QUOTED = 497,
    IF_SYM = 498,
    IGNORE_DOMAIN_IDS_SYM = 499,
    IGNORE_SYM = 500,
    IGNORE_SERVER_IDS_SYM = 501,
    IMMEDIATE_SYM = 502,
    IMPORT = 503,
    INDEXES = 504,
    INDEX_SYM = 505,
    INFILE = 506,
    INITIAL_SIZE_SYM = 507,
    INNER_SYM = 508,
    INOUT_SYM = 509,
    INSENSITIVE_SYM = 510,
    INSERT = 511,
    INSERT_METHOD = 512,
    INSTALL_SYM = 513,
    INTERVAL_SYM = 514,
    INTO = 515,
    INT_SYM = 516,
    INVOKER_SYM = 517,
    IN_SYM = 518,
    IO_SYM = 519,
    IPC_SYM = 520,
    IS = 521,
    ISOLATION = 522,
    ISSUER_SYM = 523,
    ITERATE_SYM = 524,
    JOIN_SYM = 525,
    JSON_SYM = 526,
    KEYS = 527,
    KEY_BLOCK_SIZE = 528,
    KEY_SYM = 529,
    KILL_SYM = 530,
    LANGUAGE_SYM = 531,
    LAST_SYM = 532,
    LAST_VALUE = 533,
    LE = 534,
    LEADING = 535,
    LEAVES = 536,
    LEAVE_SYM = 537,
    LEFT = 538,
    LESS_SYM = 539,
    LEVEL_SYM = 540,
    LEX_HOSTNAME = 541,
    LIKE = 542,
    LIMIT = 543,
    LINEAR_SYM = 544,
    LINES = 545,
    LINESTRING = 546,
    LIST_SYM = 547,
    LOAD = 548,
    LOCAL_SYM = 549,
    LOCATOR_SYM = 550,
    LOCKS_SYM = 551,
    LOCK_SYM = 552,
    LOGFILE_SYM = 553,
    LOGS_SYM = 554,
    LONGBLOB = 555,
    LONGTEXT = 556,
    LONG_NUM = 557,
    LONG_SYM = 558,
    LOOP_SYM = 559,
    LOW_PRIORITY = 560,
    MASTER_CONNECT_RETRY_SYM = 561,
    MASTER_DELAY_SYM = 562,
    MASTER_GTID_POS_SYM = 563,
    MASTER_HOST_SYM = 564,
    MASTER_LOG_FILE_SYM = 565,
    MASTER_LOG_POS_SYM = 566,
    MASTER_PASSWORD_SYM = 567,
    MASTER_PORT_SYM = 568,
    MASTER_SERVER_ID_SYM = 569,
    MASTER_SSL_CAPATH_SYM = 570,
    MASTER_SSL_CA_SYM = 571,
    MASTER_SSL_CERT_SYM = 572,
    MASTER_SSL_CIPHER_SYM = 573,
    MASTER_SSL_CRL_SYM = 574,
    MASTER_SSL_CRLPATH_SYM = 575,
    MASTER_SSL_KEY_SYM = 576,
    MASTER_SSL_SYM = 577,
    MASTER_SSL_VERIFY_SERVER_CERT_SYM = 578,
    MASTER_SYM = 579,
    MASTER_USER_SYM = 580,
    MASTER_USE_GTID_SYM = 581,
    MASTER_HEARTBEAT_PERIOD_SYM = 582,
    MATCH = 583,
    MAX_CONNECTIONS_PER_HOUR = 584,
    MAX_QUERIES_PER_HOUR = 585,
    MAX_ROWS = 586,
    MAX_SIZE_SYM = 587,
    MAX_SYM = 588,
    MAX_UPDATES_PER_HOUR = 589,
    MAX_STATEMENT_TIME_SYM = 590,
    MAX_USER_CONNECTIONS_SYM = 591,
    MAX_VALUE_SYM = 592,
    MEDIUMBLOB = 593,
    MEDIUMINT = 594,
    MEDIUMTEXT = 595,
    MEDIUM_SYM = 596,
    MEMORY_SYM = 597,
    MERGE_SYM = 598,
    MESSAGE_TEXT_SYM = 599,
    MICROSECOND_SYM = 600,
    MIGRATE_SYM = 601,
    MINUTE_MICROSECOND_SYM = 602,
    MINUTE_SECOND_SYM = 603,
    MINUTE_SYM = 604,
    MIN_ROWS = 605,
    MIN_SYM = 606,
    MODE_SYM = 607,
    MODIFIES_SYM = 608,
    MODIFY_SYM = 609,
    MOD_SYM = 610,
    MONTH_SYM = 611,
    MULTILINESTRING = 612,
    MULTIPOINT = 613,
    MULTIPOLYGON = 614,
    MUTEX_SYM = 615,
    MYSQL_SYM = 616,
    MYSQL_ERRNO_SYM = 617,
    NAMES_SYM = 618,
    NAME_SYM = 619,
    NATIONAL_SYM = 620,
    NATURAL = 621,
    NCHAR_STRING = 622,
    NCHAR_SYM = 623,
    NE = 624,
    NEG = 625,
    NEW_SYM = 626,
    NEXT_SYM = 627,
    NODEGROUP_SYM = 628,
    NONE_SYM = 629,
    NOT2_SYM = 630,
    NOT_SYM = 631,
    NOW_SYM = 632,
    NO_SYM = 633,
    NO_WAIT_SYM = 634,
    NO_WRITE_TO_BINLOG = 635,
    NTILE_SYM = 636,
    NULL_SYM = 637,
    NUM = 638,
    NUMBER_SYM = 639,
    NUMERIC_SYM = 640,
    NTH_VALUE_SYM = 641,
    NVARCHAR_SYM = 642,
    OFFSET_SYM = 643,
    OLD_PASSWORD_SYM = 644,
    ON = 645,
    ONE_SYM = 646,
    ONLY_SYM = 647,
    ONLINE_SYM = 648,
    OPEN_SYM = 649,
    OPTIMIZE = 650,
    OPTIONS_SYM = 651,
    OPTION = 652,
    OPTIONALLY = 653,
    OR2_SYM = 654,
    ORDER_SYM = 655,
    OR_OR_SYM = 656,
    OR_SYM = 657,
    OTHERS_SYM = 658,
    OUTER = 659,
    OUTFILE = 660,
    OUT_SYM = 661,
    OVER_SYM = 662,
    OWNER_SYM = 663,
    PACK_KEYS_SYM = 664,
    PAGE_SYM = 665,
    PAGE_CHECKSUM_SYM = 666,
    PARAM_MARKER = 667,
    PARSER_SYM = 668,
    PARSE_VCOL_EXPR_SYM = 669,
    PARTIAL = 670,
    PARTITION_SYM = 671,
    PARTITIONS_SYM = 672,
    PARTITIONING_SYM = 673,
    PASSWORD_SYM = 674,
    PERCENT_RANK_SYM = 675,
    PERSISTENT_SYM = 676,
    PHASE_SYM = 677,
    PLUGINS_SYM = 678,
    PLUGIN_SYM = 679,
    POINT_SYM = 680,
    POLYGON = 681,
    PORT_SYM = 682,
    POSITION_SYM = 683,
    PRECEDES_SYM = 684,
    PRECEDING_SYM = 685,
    PRECISION = 686,
    PREPARE_SYM = 687,
    PRESERVE_SYM = 688,
    PREV_SYM = 689,
    PRIMARY_SYM = 690,
    PRIVILEGES = 691,
    PROCEDURE_SYM = 692,
    PROCESS = 693,
    PROCESSLIST_SYM = 694,
    PROFILE_SYM = 695,
    PROFILES_SYM = 696,
    PROXY_SYM = 697,
    PURGE = 698,
    QUARTER_SYM = 699,
    QUERY_SYM = 700,
    QUICK = 701,
    RANGE_SYM = 702,
    RANK_SYM = 703,
    READS_SYM = 704,
    READ_ONLY_SYM = 705,
    READ_SYM = 706,
    READ_WRITE_SYM = 707,
    REAL = 708,
    REBUILD_SYM = 709,
    RECOVER_SYM = 710,
    RECURSIVE_SYM = 711,
    REDOFILE_SYM = 712,
    REDO_BUFFER_SIZE_SYM = 713,
    REDUNDANT_SYM = 714,
    REFERENCES = 715,
    REGEXP = 716,
    RELAY = 717,
    RELAYLOG_SYM = 718,
    RELAY_LOG_FILE_SYM = 719,
    RELAY_LOG_POS_SYM = 720,
    RELAY_THREAD = 721,
    RELEASE_SYM = 722,
    RELOAD = 723,
    REMOVE_SYM = 724,
    RENAME = 725,
    REORGANIZE_SYM = 726,
    REPAIR = 727,
    REPEATABLE_SYM = 728,
    REPEAT_SYM = 729,
    REPLACE = 730,
    REPLICATION = 731,
    REQUIRE_SYM = 732,
    RESET_SYM = 733,
    RESIGNAL_SYM = 734,
    RESOURCES = 735,
    RESTORE_SYM = 736,
    RESTRICT = 737,
    RESUME_SYM = 738,
    RETURNED_SQLSTATE_SYM = 739,
    RETURNING_SYM = 740,
    RETURNS_SYM = 741,
    RETURN_SYM = 742,
    REVERSE_SYM = 743,
    REVOKE = 744,
    RIGHT = 745,
    ROLE_SYM = 746,
    ROLLBACK_SYM = 747,
    ROLLUP_SYM = 748,
    ROUTINE_SYM = 749,
    ROW_SYM = 750,
    ROWS_SYM = 751,
    ROW_COUNT_SYM = 752,
    ROW_FORMAT_SYM = 753,
    ROW_NUMBER_SYM = 754,
    RTREE_SYM = 755,
    SAVEPOINT_SYM = 756,
    SCHEDULE_SYM = 757,
    SCHEMA_NAME_SYM = 758,
    SECOND_MICROSECOND_SYM = 759,
    SECOND_SYM = 760,
    SECURITY_SYM = 761,
    SELECT_SYM = 762,
    SENSITIVE_SYM = 763,
    SEPARATOR_SYM = 764,
    SERIALIZABLE_SYM = 765,
    SERIAL_SYM = 766,
    SESSION_SYM = 767,
    SERVER_SYM = 768,
    SERVER_OPTIONS = 769,
    SET = 770,
    SET_VAR = 771,
    SHARE_SYM = 772,
    SHIFT_LEFT = 773,
    SHIFT_RIGHT = 774,
    SHOW = 775,
    SHUTDOWN = 776,
    SIGNAL_SYM = 777,
    SIGNED_SYM = 778,
    SIMPLE_SYM = 779,
    SLAVE = 780,
    SLAVES = 781,
    SLAVE_POS_SYM = 782,
    SLOW = 783,
    SMALLINT = 784,
    SNAPSHOT_SYM = 785,
    SOCKET_SYM = 786,
    SOFT_SYM = 787,
    SONAME_SYM = 788,
    SOUNDS_SYM = 789,
    SOURCE_SYM = 790,
    SPATIAL_SYM = 791,
    SPECIFIC_SYM = 792,
    SQLEXCEPTION_SYM = 793,
    SQLSTATE_SYM = 794,
    SQLWARNING_SYM = 795,
    SQL_BIG_RESULT = 796,
    SQL_BUFFER_RESULT = 797,
    SQL_CACHE_SYM = 798,
    SQL_CALC_FOUND_ROWS = 799,
    SQL_NO_CACHE_SYM = 800,
    SQL_SMALL_RESULT = 801,
    SQL_SYM = 802,
    SQL_THREAD = 803,
    REF_SYSTEM_ID_SYM = 804,
    SSL_SYM = 805,
    STARTING = 806,
    STARTS_SYM = 807,
    START_SYM = 808,
    STATEMENT_SYM = 809,
    STATS_AUTO_RECALC_SYM = 810,
    STATS_PERSISTENT_SYM = 811,
    STATS_SAMPLE_PAGES_SYM = 812,
    STATUS_SYM = 813,
    STDDEV_SAMP_SYM = 814,
    STD_SYM = 815,
    STOP_SYM = 816,
    STORAGE_SYM = 817,
    STORED_SYM = 818,
    STRAIGHT_JOIN = 819,
    STRING_SYM = 820,
    SUBCLASS_ORIGIN_SYM = 821,
    SUBDATE_SYM = 822,
    SUBJECT_SYM = 823,
    SUBPARTITIONS_SYM = 824,
    SUBPARTITION_SYM = 825,
    SUBSTRING = 826,
    SUM_SYM = 827,
    SUPER_SYM = 828,
    SUSPEND_SYM = 829,
    SWAPS_SYM = 830,
    SWITCHES_SYM = 831,
    SYSDATE = 832,
    TABLES = 833,
    TABLESPACE = 834,
    TABLE_REF_PRIORITY = 835,
    TABLE_SYM = 836,
    TABLE_CHECKSUM_SYM = 837,
    TABLE_NAME_SYM = 838,
    TEMPORARY = 839,
    TEMPTABLE_SYM = 840,
    TERMINATED = 841,
    TEXT_STRING = 842,
    TEXT_SYM = 843,
    THAN_SYM = 844,
    THEN_SYM = 845,
    TIES_SYM = 846,
    TIMESTAMP = 847,
    TIMESTAMP_ADD = 848,
    TIMESTAMP_DIFF = 849,
    TIME_SYM = 850,
    TINYBLOB = 851,
    TINYINT = 852,
    TINYTEXT = 853,
    TO_SYM = 854,
    TRAILING = 855,
    TRANSACTION_SYM = 856,
    TRANSACTIONAL_SYM = 857,
    TRIGGERS_SYM = 858,
    TRIGGER_SYM = 859,
    TRIM = 860,
    TRUE_SYM = 861,
    TRUNCATE_SYM = 862,
    TYPES_SYM = 863,
    TYPE_SYM = 864,
    UDF_RETURNS_SYM = 865,
    ULONGLONG_NUM = 866,
    UNBOUNDED_SYM = 867,
    UNCOMMITTED_SYM = 868,
    UNDEFINED_SYM = 869,
    UNDERSCORE_CHARSET = 870,
    UNDOFILE_SYM = 871,
    UNDO_BUFFER_SIZE_SYM = 872,
    UNDO_SYM = 873,
    UNICODE_SYM = 874,
    UNINSTALL_SYM = 875,
    UNION_SYM = 876,
    UNIQUE_SYM = 877,
    UNKNOWN_SYM = 878,
    UNLOCK_SYM = 879,
    UNSIGNED = 880,
    UNTIL_SYM = 881,
    UPDATE_SYM = 882,
    UPGRADE_SYM = 883,
    USAGE = 884,
    USER_SYM = 885,
    USE_FRM = 886,
    USE_SYM = 887,
    USING = 888,
    UTC_DATE_SYM = 889,
    UTC_TIMESTAMP_SYM = 890,
    UTC_TIME_SYM = 891,
    VALUES = 892,
    VALUE_SYM = 893,
    VARBINARY = 894,
    VARCHAR = 895,
    VARIABLES = 896,
    VARIANCE_SYM = 897,
    VARYING = 898,
    VAR_SAMP_SYM = 899,
    VIA_SYM = 900,
    VIEW_SYM = 901,
    VIRTUAL_SYM = 902,
    WAIT_SYM = 903,
    WARNINGS = 904,
    WEEK_SYM = 905,
    WEIGHT_STRING_SYM = 906,
    WHEN_SYM = 907,
    WHERE = 908,
    WINDOW_SYM = 909,
    WHILE_SYM = 910,
    WITH = 911,
    WITH_CUBE_SYM = 912,
    WITH_ROLLUP_SYM = 913,
    WORK_SYM = 914,
    WRAPPER_SYM = 915,
    WRITE_SYM = 916,
    X509_SYM = 917,
    XA_SYM = 918,
    XML_SYM = 919,
    XOR = 920,
    YEAR_MONTH_SYM = 921,
    YEAR_SYM = 922,
    ZEROFILL = 923,
    IMPOSSIBLE_ACTION = 924,
    CONDITIONLESS_JOIN = 925,
    ON_SYM = 926
  };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define ATOMIC_SYM 280
#define AUTHORS_SYM 281
#define AUTOEXTEND_SIZE_SYM 282
#define AUTO_INC 283
#define AUTO_SYM 284
#define AVG_ROW_LENGTH 285
#define AVG_SYM 286
#define BACKUP_SYM 287
#define BEFORE_SYM 288
#define BEGIN_SYM 289
#define BETWEEN_SYM 290
#define BIGINT 291
#define BINARY 292
#define BINLOG_SYM 293
#define BIN_NUM 294
#define BIT_AND 295
#define BIT_OR 296
#define BIT_SYM 297
#define BIT_XOR 298
#define BLOB_SYM 299
#define BLOCK_SYM 300
#define BOOLEAN_SYM 301
#define BOOL_SYM 302
#define BOTH 303
#define BTREE_SYM 304
#define BY 305
#define BYTE_SYM 306
#define CACHE_SYM 307
#define CALL_SYM 308
#define CASCADE 309
#define CASCADED 310
#define CASE_SYM 311
#define CAST_SYM 312
#define CATALOG_NAME_SYM 313
#define CHAIN_SYM 314
#define CHANGE 315
#define CHANGED 316
#define CHARSET 317
#define CHAR_SYM 318
#define CHECKPOINT_SYM 319
#define CHECKSUM_SYM 320
#define CHECK_SYM 321
#define CIPHER_SYM 322
#define CLASS_ORIGIN_SYM 323
#define CLIENT_SYM 324
#define CLOSE_SYM 325
#define COALESCE 326
#define CODE_SYM 327
#define COLLATE_SYM 328
#define COLLATION_SYM 329
#define COLUMNS 330
#define COLUMN_ADD_SYM 331
#define COLUMN_CHECK_SYM 332
#define COLUMN_CREATE_SYM 333
#define COLUMN_DELETE_SYM 334
#define COLUMN_GET_SYM 335
#define COLUMN_SYM 336
#define COLUMN_NAME_SYM 337
#define COMMENT_SYM 338
#define COMMITTED_SYM 339
#define COMMIT_SYM 340
#define COMPACT_SYM 341
#define COMPLETION_SYM 342
#define COMPRESSED_SYM 343
#define CONCURRENT 344
#define CONDITION_SYM 345
#define CONNECTION_SYM 346
#define CONSISTENT_SYM 347
#define CONSTRAINT 348
#define CONSTRAINT_CATALOG_SYM 349
#define CONSTRAINT_NAME_SYM 350
#define CONSTRAINT_SCHEMA_SYM 351
#define CONTAINS_SYM 352
#define CONTEXT_SYM 353
#define CONTINUE_SYM 354
#define CONTRIBUTORS_SYM 355
#define CONVERT_SYM 356
#define COUNT_SYM 357
#define CPU_SYM 358
#define CREATE 359
#define CROSS 360
#define CUBE_SYM 361
#define CUME_DIST_SYM 362
#define CURDATE 363
#define CURRENT_SYM 364
#define CURRENT_USER 365
#define CURRENT_ROLE 366
#define CURRENT_POS_SYM 367
#define CURSOR_SYM 368
#define CURSOR_NAME_SYM 369
#define CURTIME 370
#define DATABASE 371
#define DATABASES 372
#define DATAFILE_SYM 373
#define DATA_SYM 374
#define DATETIME 375
#define DATE_ADD_INTERVAL 376
#define DATE_SUB_INTERVAL 377
#define DATE_SYM 378
#define DAY_HOUR_SYM 379
#define DAY_MICROSECOND_SYM 380
#define DAY_MINUTE_SYM 381
#define DAY_SECOND_SYM 382
#define DAY_SYM 383
#define DEALLOCATE_SYM 384
#define DECIMAL_NUM 385
#define DECIMAL_SYM 386
#define DECLARE_SYM 387
#define DEFAULT 388
#define DEFINER_SYM 389
#define DELAYED_SYM 390
#define DELAY_KEY_WRITE_SYM 391
#define DELETE_DOMAIN_ID_SYM 392
#define DELETE_SYM 393
#define DENSE_RANK_SYM 394
#define DESC 395
#define DESCRIBE 396
#define DES_KEY_FILE 397
#define DETERMINISTIC_SYM 398
#define DIAGNOSTICS_SYM 399
#define DIRECTORY_SYM 400
#define DISABLE_SYM 401
#define DISCARD 402
#define DISK_SYM 403
#define DISTINCT 404
#define DIV_SYM 405
#define DOUBLE_SYM 406
#define DO_DOMAIN_IDS_SYM 407
#define DO_SYM 408
#define DROP 409
#define DUAL_SYM 410
#define DUMPFILE 411
#define DUPLICATE_SYM 412
#define DYNAMIC_SYM 413
#define EACH_SYM 414
#define ELSE 415
#define ELSEIF_SYM 416
#define ENABLE_SYM 417
#define ENCLOSED 418
#define END 419
#define ENDS_SYM 420
#define END_OF_INPUT 421
#define ENGINES_SYM 422
#define ENGINE_SYM 423
#define ENUM 424
#define EQUAL_SYM 425
#define ERROR_SYM 426
#define ERRORS 427
#define ESCAPED 428
#define ESCAPE_SYM 429
#define EVENTS_SYM 430
#define EVENT_SYM 431
#define EVERY_SYM 432
#define EXCHANGE_SYM 433
#define EXAMINED_SYM 434
#define EXCLUDE_SYM 435
#define EXECUTE_SYM 436
#define EXISTS 437
#define EXIT_SYM 438
#define EXPANSION_SYM 439
#define EXPORT_SYM 440
#define EXTENDED_SYM 441
#define EXTENT_SIZE_SYM 442
#define EXTRACT_SYM 443
#define FALSE_SYM 444
#define FAST_SYM 445
#define FAULTS_SYM 446
#define FETCH_SYM 447
#define FILE_SYM 448
#define FIRST_VALUE_SYM 449
#define FIRST_SYM 450
#define FIXED_SYM 451
#define FLOAT_NUM 452
#define FLOAT_SYM 453
#define FLUSH_SYM 454
#define FOLLOWS_SYM 455
#define FOLLOWING_SYM 456
#define FORCE_SYM 457
#define FOREIGN 458
#define FOR_SYM 459
#define FORMAT_SYM 460
#define FOUND_SYM 461
#define FROM 462
#define FULL 463
#define FULLTEXT_SYM 464
#define FUNCTION_SYM 465
#define GE 466
#define GENERAL 467
#define GENERATED_SYM 468
#define GEOMETRYCOLLECTION 469
#define GEOMETRY_SYM 470
#define GET_FORMAT 471
#define GET_SYM 472
#define GLOBAL_SYM 473
#define GRANT 474
#define GRANTS 475
#define GROUP_SYM 476
#define GROUP_CONCAT_SYM 477
#define LAG_SYM 478
#define LEAD_SYM 479
#define HANDLER_SYM 480
#define HARD_SYM 481
#define HASH_SYM 482
#define HAVING 483
#define HELP_SYM 484
#define HEX_NUM 485
#define HEX_STRING 486
#define HIGH_PRIORITY 487
#define HOST_SYM 488
#define HOSTS_SYM 489
#define HOUR_MICROSECOND_SYM 490
#define HOUR_MINUTE_SYM 491
#define HOUR_SECOND_SYM 492
#define HOUR_SYM 493
#define ID_SYM 494
#define IDENT 495
#define IDENTIFIED_SYM 496
#define IDENT_QUOTED 497
#define IF_SYM 498
#define IGNORE_DOMAIN_IDS_SYM 499
#define IGNORE_SYM 500
#define IGNORE_SERVER_IDS_SYM 501
#define IMMEDIATE_SYM 502
#define IMPORT 503
#define INDEXES 504
#define INDEX_SYM 505
#define INFILE 506
#define INITIAL_SIZE_SYM 507
#define INNER_SYM 508
#define INOUT_SYM 509
#define INSENSITIVE_SYM 510
#define INSERT 511
#define INSERT_METHOD 512
#define INSTALL_SYM 513
#define INTERVAL_SYM 514
#define INTO 515
#define INT_SYM 516
#define INVOKER_SYM 517
#define IN_SYM 518
#define IO_SYM 519
#define IPC_SYM 520
#define IS 521
#define ISOLATION 522
#define ISSUER_SYM 523
#define ITERATE_SYM 524
#define JOIN_SYM 525
#define JSON_SYM 526
#define KEYS 527
#define KEY_BLOCK_SIZE 528
#define KEY_SYM 529
#define KILL_SYM 530
#define LANGUAGE_SYM 531
#define LAST_SYM 532
#define LAST_VALUE 533
#define LE 534
#define LEADING 535
#define LEAVES 536
#define LEAVE_SYM 537
#define LEFT 538
#define LESS_SYM 539
#define LEVEL_SYM 540
#define LEX_HOSTNAME 541
#define LIKE 542
#define LIMIT 543
#define LINEAR_SYM 544
#define LINES 545
#define LINESTRING 546
#define LIST_SYM 547
#define LOAD 548
#define LOCAL_SYM 549
#define LOCATOR_SYM 550
#define LOCKS_SYM 551
#define LOCK_SYM 552
#define LOGFILE_SYM 553
#define LOGS_SYM 554
#define LONGBLOB 555
#define LONGTEXT 556
#define LONG_NUM 557
#define LONG_SYM 558
#define LOOP_SYM 559
#define LOW_PRIORITY 560
#define MASTER_CONNECT_RETRY_SYM 561
#define MASTER_DELAY_SYM 562
#define MASTER_GTID_POS_SYM 563
#define MASTER_HOST_SYM 564
#define MASTER_LOG_FILE_SYM 565
#define MASTER_LOG_POS_SYM 566
#define MASTER_PASSWORD_SYM 567
#define MASTER_PORT_SYM 568
#define MASTER_SERVER_ID_SYM 569
#define MASTER_SSL_CAPATH_SYM 570
#define MASTER_SSL_CA_SYM 571
#define MASTER_SSL_CERT_SYM 572
#define MASTER_SSL_CIPHER_SYM 573
#define MASTER_SSL_CRL_SYM 574
#define MASTER_SSL_CRLPATH_SYM 575
#define MASTER_SSL_KEY_SYM 576
#define MASTER_SSL_SYM 577
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 578
#define MASTER_SYM 579
#define MASTER_USER_SYM 580
#define MASTER_USE_GTID_SYM 581
#define MASTER_HEARTBEAT_PERIOD_SYM 582
#define MATCH 583
#define MAX_CONNECTIONS_PER_HOUR 584
#define MAX_QUERIES_PER_HOUR 585
#define MAX_ROWS 586
#define MAX_SIZE_SYM 587
#define MAX_SYM 588
#define MAX_UPDATES_PER_HOUR 589
#define MAX_STATEMENT_TIME_SYM 590
#define MAX_USER_CONNECTIONS_SYM 591
#define MAX_VALUE_SYM 592
#define MEDIUMBLOB 593
#define MEDIUMINT 594
#define MEDIUMTEXT 595
#define MEDIUM_SYM 596
#define MEMORY_SYM 597
#define MERGE_SYM 598
#define MESSAGE_TEXT_SYM 599
#define MICROSECOND_SYM 600
#define MIGRATE_SYM 601
#define MINUTE_MICROSECOND_SYM 602
#define MINUTE_SECOND_SYM 603
#define MINUTE_SYM 604
#define MIN_ROWS 605
#define MIN_SYM 606
#define MODE_SYM 607
#define MODIFIES_SYM 608
#define MODIFY_SYM 609
#define MOD_SYM 610
#define MONTH_SYM 611
#define MULTILINESTRING 612
#define MULTIPOINT 613
#define MULTIPOLYGON 614
#define MUTEX_SYM 615
#define MYSQL_SYM 616
#define MYSQL_ERRNO_SYM 617
#define NAMES_SYM 618
#define NAME_SYM 619
#define NATIONAL_SYM 620
#define NATURAL 621
#define NCHAR_STRING 622
#define NCHAR_SYM 623
#define NE 624
#define NEG 625
#define NEW_SYM 626
#define NEXT_SYM 627
#define NODEGROUP_SYM 628
#define NONE_SYM 629
#define NOT2_SYM 630
#define NOT_SYM 631
#define NOW_SYM 632
#define NO_SYM 633
#define NO_WAIT_SYM 634
#define NO_WRITE_TO_BINLOG 635
#define NTILE_SYM 636
#define NULL_SYM 637
#define NUM 638
#define NUMBER_SYM 639
#define NUMERIC_SYM 640
#define NTH_VALUE_SYM 641
#define NVARCHAR_SYM 642
#define OFFSET_SYM 643
#define OLD_PASSWORD_SYM 644
#define ON 645
#define ONE_SYM 646
#define ONLY_SYM 647
#define ONLINE_SYM 648
#define OPEN_SYM 649
#define OPTIMIZE 650
#define OPTIONS_SYM 651
#define OPTION 652
#define OPTIONALLY 653
#define OR2_SYM 654
#define ORDER_SYM 655
#define OR_OR_SYM 656
#define OR_SYM 657
#define OTHERS_SYM 658
#define OUTER 659
#define OUTFILE 660
#define OUT_SYM 661
#define OVER_SYM 662
#define OWNER_SYM 663
#define PACK_KEYS_SYM 664
#define PAGE_SYM 665
#define PAGE_CHECKSUM_SYM 666
#define PARAM_MARKER 667
#define PARSER_SYM 668
#define PARSE_VCOL_EXPR_SYM 669
#define PARTIAL 670
#define PARTITION_SYM 671
#define PARTITIONS_SYM 672
#define PARTITIONING_SYM 673
#define PASSWORD_SYM 674
#define PERCENT_RANK_SYM 675
#define PERSISTENT_SYM 676
#define PHASE_SYM 677
#define PLUGINS_SYM 678
#define PLUGIN_SYM 679
#define POINT_SYM 680
#define POLYGON 681
#define PORT_SYM 682
#define POSITION_SYM 683
#define PRECEDES_SYM 684
#define PRECEDING_SYM 685
#define PRECISION 686
#define PREPARE_SYM 687
#define PRESERVE_SYM 688
#define PREV_SYM 689
#define PRIMARY_SYM 690
#define PRIVILEGES 691
#define PROCEDURE_SYM 692
#define PROCESS 693
#define PROCESSLIST_SYM 694
#define PROFILE_SYM 695
#define PROFILES_SYM 696
#define PROXY_SYM 697
#define PURGE 698
#define QUARTER_SYM 699
#define QUERY_SYM 700
#define QUICK 701
#define RANGE_SYM 702
#define RANK_SYM 703
#define READS_SYM 704
#define READ_ONLY_SYM 705
#define READ_SYM 706
#define READ_WRITE_SYM 707
#define REAL 708
#define REBUILD_SYM 709
#define RECOVER_SYM 710
#define RECURSIVE_SYM 711
#define REDOFILE_SYM 712
#define REDO_BUFFER_SIZE_SYM 713
#define REDUNDANT_SYM 714
#define REFERENCES 715
#define REGEXP 716
#define RELAY 717
#define RELAYLOG_SYM 718
#define RELAY_LOG_FILE_SYM 719
#define RELAY_LOG_POS_SYM 720
#define RELAY_THREAD 721
#define RELEASE_SYM 722
#define RELOAD 723
#define REMOVE_SYM 724
#define RENAME 725
#define REORGANIZE_SYM 726
#define REPAIR 727
#define REPEATABLE_SYM 728
#define REPEAT_SYM 729
#define REPLACE 730
#define REPLICATION 731
#define REQUIRE_SYM 732
#define RESET_SYM 733
#define RESIGNAL_SYM 734
#define RESOURCES 735
#define RESTORE_SYM 736
#define RESTRICT 737
#define RESUME_SYM 738
#define RETURNED_SQLSTATE_SYM 739
#define RETURNING_SYM 740
#define RETURNS_SYM 741
#define RETURN_SYM 742
#define REVERSE_SYM 743
#define REVOKE 744
#define RIGHT 745
#define ROLE_SYM 746
#define ROLLBACK_SYM 747
#define ROLLUP_SYM 748
#define ROUTINE_SYM 749
#define ROW_SYM 750
#define ROWS_SYM 751
#define ROW_COUNT_SYM 752
#define ROW_FORMAT_SYM 753
#define ROW_NUMBER_SYM 754
#define RTREE_SYM 755
#define SAVEPOINT_SYM 756
#define SCHEDULE_SYM 757
#define SCHEMA_NAME_SYM 758
#define SECOND_MICROSECOND_SYM 759
#define SECOND_SYM 760
#define SECURITY_SYM 761
#define SELECT_SYM 762
#define SENSITIVE_SYM 763
#define SEPARATOR_SYM 764
#define SERIALIZABLE_SYM 765
#define SERIAL_SYM 766
#define SESSION_SYM 767
#define SERVER_SYM 768
#define SERVER_OPTIONS 769
#define SET 770
#define SET_VAR 771
#define SHARE_SYM 772
#define SHIFT_LEFT 773
#define SHIFT_RIGHT 774
#define SHOW 775
#define SHUTDOWN 776
#define SIGNAL_SYM 777
#define SIGNED_SYM 778
#define SIMPLE_SYM 779
#define SLAVE 780
#define SLAVES 781
#define SLAVE_POS_SYM 782
#define SLOW 783
#define SMALLINT 784
#define SNAPSHOT_SYM 785
#define SOCKET_SYM 786
#define SOFT_SYM 787
#define SONAME_SYM 788
#define SOUNDS_SYM 789
#define SOURCE_SYM 790
#define SPATIAL_SYM 791
#define SPECIFIC_SYM 792
#define SQLEXCEPTION_SYM 793
#define SQLSTATE_SYM 794
#define SQLWARNING_SYM 795
#define SQL_BIG_RESULT 796
#define SQL_BUFFER_RESULT 797
#define SQL_CACHE_SYM 798
#define SQL_CALC_FOUND_ROWS 799
#define SQL_NO_CACHE_SYM 800
#define SQL_SMALL_RESULT 801
#define SQL_SYM 802
#define SQL_THREAD 803
#define REF_SYSTEM_ID_SYM 804
#define SSL_SYM 805
#define STARTING 806
#define STARTS_SYM 807
#define START_SYM 808
#define STATEMENT_SYM 809
#define STATS_AUTO_RECALC_SYM 810
#define STATS_PERSISTENT_SYM 811
#define STATS_SAMPLE_PAGES_SYM 812
#define STATUS_SYM 813
#define STDDEV_SAMP_SYM 814
#define STD_SYM 815
#define STOP_SYM 816
#define STORAGE_SYM 817
#define STORED_SYM 818
#define STRAIGHT_JOIN 819
#define STRING_SYM 820
#define SUBCLASS_ORIGIN_SYM 821
#define SUBDATE_SYM 822
#define SUBJECT_SYM 823
#define SUBPARTITIONS_SYM 824
#define SUBPARTITION_SYM 825
#define SUBSTRING 826
#define SUM_SYM 827
#define SUPER_SYM 828
#define SUSPEND_SYM 829
#define SWAPS_SYM 830
#define SWITCHES_SYM 831
#define SYSDATE 832
#define TABLES 833
#define TABLESPACE 834
#define TABLE_REF_PRIORITY 835
#define TABLE_SYM 836
#define TABLE_CHECKSUM_SYM 837
#define TABLE_NAME_SYM 838
#define TEMPORARY 839
#define TEMPTABLE_SYM 840
#define TERMINATED 841
#define TEXT_STRING 842
#define TEXT_SYM 843
#define THAN_SYM 844
#define THEN_SYM 845
#define TIES_SYM 846
#define TIMESTAMP 847
#define TIMESTAMP_ADD 848
#define TIMESTAMP_DIFF 849
#define TIME_SYM 850
#define TINYBLOB 851
#define TINYINT 852
#define TINYTEXT 853
#define TO_SYM 854
#define TRAILING 855
#define TRANSACTION_SYM 856
#define TRANSACTIONAL_SYM 857
#define TRIGGERS_SYM 858
#define TRIGGER_SYM 859
#define TRIM 860
#define TRUE_SYM 861
#define TRUNCATE_SYM 862
#define TYPES_SYM 863
#define TYPE_SYM 864
#define UDF_RETURNS_SYM 865
#define ULONGLONG_NUM 866
#define UNBOUNDED_SYM 867
#define UNCOMMITTED_SYM 868
#define UNDEFINED_SYM 869
#define UNDERSCORE_CHARSET 870
#define UNDOFILE_SYM 871
#define UNDO_BUFFER_SIZE_SYM 872
#define UNDO_SYM 873
#define UNICODE_SYM 874
#define UNINSTALL_SYM 875
#define UNION_SYM 876
#define UNIQUE_SYM 877
#define UNKNOWN_SYM 878
#define UNLOCK_SYM 879
#define UNSIGNED 880
#define UNTIL_SYM 881
#define UPDATE_SYM 882
#define UPGRADE_SYM 883
#define USAGE 884
#define USER_SYM 885
#define USE_FRM 886
#define USE_SYM 887
#define USING 888
#define UTC_DATE_SYM 889
#define UTC_TIMESTAMP_SYM 890
#define UTC_TIME_SYM 891
#define VALUES 892
#define VALUE_SYM 893
#define VARBINARY 894
#define VARCHAR 895
#define VARIABLES 896
#define VARIANCE_SYM 897
#define VARYING 898
#define VAR_SAMP_SYM 899
#define VIA_SYM 900
#define VIEW_SYM 901
#define VIRTUAL_SYM 902
#define WAIT_SYM 903
#define WARNINGS 904
#define WEEK_SYM 905
#define WEIGHT_STRING_SYM 906
#define WHEN_SYM 907
#define WHERE 908
#define WINDOW_SYM 909
#define WHILE_SYM 910
#define WITH 911
#define WITH_CUBE_SYM 912
#define WITH_ROLLUP_SYM 913
#define WORK_SYM 914
#define WRAPPER_SYM 915
#define WRITE_SYM 916
#define X509_SYM 917
#define XA_SYM 918
#define XML_SYM 919
#define XOR 920
#define YEAR_MONTH_SYM 921
#define YEAR_SYM 922
#define ZEROFILL 923
#define IMPOSSIBLE_ACTION 924
#define CONDITIONLESS_JOIN 925
#define ON_SYM 926

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:355  */

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;

  /* structs */
  LEX_STRING lex_str;
  LEX_SYMBOL symbol;
  struct sys_var_with_base variable;
  struct { int vars, conds, hndlrs, curs; } spblock;
  Lex_length_and_dec_st Lex_length_and_dec;
  Lex_cast_type_st Lex_cast_type;
  Lex_field_type_st Lex_field_type;
  Lex_dyncol_type_st Lex_dyncol_type;

  /* pointers */
  Create_field *create_field;
  CHARSET_INFO *charset;
  Condition_information_item *cond_info_item;
  DYNCALL_CREATE_DEF *dyncol_def;
  Diagnostics_information *diag_info;
  Item *item;
  Item_num *item_num;
  Item_param *item_param;
  Key_part_spec *key_part;
  LEX *lex;
  LEX_STRING *lex_str_ptr;
  LEX_USER *lex_user;
  List<Condition_information_item> *cond_info_list;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  List<Item> *item_list;
  List<Statement_information_item> *stmt_info_list;
  List<String> *string_list;
  List<LEX_STRING> *lex_str_list;
  Statement_information_item *stmt_info_item;
  String *string;
  TABLE_LIST *table_list;
  Table_ident *table;
  char *simple_string;
  const char *const_simple_string;
  chooser_compare_func_creator boolfunc2creator;
  class my_var *myvar;
  class sp_condition_value *spcondvalue;
  class sp_head *sphead;
  class sp_label *splabel;
  class sp_name *spname;
  class sp_variable *spvar;
  class With_clause *with_clause;
  class Virtual_column_info *virtual_column;

  handlerton *db_type;
  st_select_lex *select_lex;
  struct p_elem_val *p_elem_value;
  class Window_frame *window_frame;
  class Window_frame_bound *window_frame_bound;
  udf_func *udf;
  st_trg_execution_order trg_execution_order;

  /* enums */
  enum Condition_information_item::Name cond_info_item_name;
  enum enum_diag_condition_item_name diag_condition_item_name;
  enum Diagnostics_information::Which_area diag_area;
  enum Field::geometry_type geom_type;
  enum enum_fk_option m_fk_option;
  enum Item_udftype udf_type;
  enum Key::Keytype key_type;
  enum Statement_information_item::Name stmt_info_item_name;
  enum enum_field_types field_type;
  enum enum_filetype filetype;
  enum enum_tx_isolation tx_isolation;
  enum enum_var_type var_type;
  enum enum_yes_no_unknown m_yes_no_unk;
  enum ha_choice choice;
  enum ha_key_alg key_alg;
  enum ha_rkey_function ha_rkey_mode;
  enum index_hint_type index_hint;
  enum interval_type interval, interval_time_st;
  enum row_type row_type;
  enum sp_variable::enum_mode spvar_mode;
  enum thr_lock_type lock_type;
  enum enum_mysql_timestamp_type date_time_type;
  enum Window_frame_bound::Bound_precedence_type bound_precedence_type;
  enum Window_frame::Frame_units frame_units;
  enum Window_frame::Frame_exclusion frame_exclusion;
  enum trigger_order_type trigger_action_order_type;
  DDL_options_st object_ddl_options;

#line 2447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int MYSQLparse (THD *thd);

#endif /* !YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 1017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:358  */

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);

#line 2464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  646
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   73629

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  694
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  1110
/* YYNRULES -- Number of rules.  */
#define YYNRULES  3036
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  5192

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   926

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   687,     2,     2,     2,   681,   676,     2,
     684,   685,   679,   678,   686,   677,   691,   680,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   693,   690,
     674,   672,   673,     2,   692,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   682,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   688,   675,   689,   683,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  2090,  2090,  2100,  2099,  2124,  2131,  2133,  2137,  2138,
    2139,  2144,  2145,  2146,  2147,  2148,  2149,  2150,  2151,  2152,
    2153,  2154,  2155,  2156,  2157,  2158,  2159,  2160,  2161,  2162,
    2163,  2164,  2165,  2166,  2167,  2168,  2169,  2170,  2171,  2172,
    2173,  2174,  2175,  2176,  2177,  2178,  2179,  2180,  2181,  2182,
    2183,  2184,  2185,  2186,  2187,  2188,  2189,  2190,  2191,  2192,
    2193,  2194,  2195,  2196,  2197,  2198,  2199,  2203,  2212,  2213,
    2217,  2229,  2229,  2239,  2238,  2247,  2246,  2257,  2259,  2259,
    2270,  2271,  2275,  2286,  2285,  2302,  2301,  2310,  2311,  2315,
    2319,  2323,  2327,  2331,  2335,  2345,  2350,  2354,  2358,  2362,
    2366,  2370,  2375,  2379,  2384,  2411,  2415,  2419,  2424,  2427,
    2429,  2430,  2434,  2440,  2442,  2443,  2447,  2453,  2455,  2456,
    2460,  2467,  2471,  2486,  2490,  2496,  2502,  2508,  2518,  2522,
    2526,  2540,  2539,  2570,  2567,  2580,  2578,  2590,  2588,  2599,
    2598,  2611,  2610,  2619,  2625,  2631,  2635,  2639,  2639,  2646,
    2645,  2657,  2658,  2662,  2667,  2672,  2677,  2682,  2687,  2692,
    2700,  2699,  2731,  2730,  2737,  2744,  2745,  2751,  2757,  2767,
    2773,  2779,  2781,  2788,  2789,  2793,  2803,  2804,  2812,  2812,
    2856,  2870,  2881,  2899,  2900,  2904,  2905,  2910,  2912,  2914,
    2916,  2918,  2920,  2922,  2928,  2929,  2933,  2937,  2945,  2944,
    2957,  2959,  2962,  2964,  2968,  2972,  2979,  2981,  2985,  2986,
    2991,  2990,  3021,  3023,  3027,  3028,  3032,  3036,  3037,  3038,
    3039,  3043,  3044,  3048,  3049,  3054,  3057,  3076,  3075,  3145,
    3158,  3157,  3216,  3238,  3238,  3257,  3258,  3263,  3265,  3270,
    3285,  3293,  3297,  3316,  3317,  3321,  3325,  3331,  3337,  3343,
    3352,  3366,  3381,  3387,  3388,  3394,  3397,  3401,  3409,  3426,
    3428,  3446,  3452,  3454,  3456,  3458,  3460,  3462,  3464,  3466,
    3468,  3470,  3472,  3474,  3479,  3494,  3510,  3511,  3516,  3522,
    3531,  3537,  3546,  3555,  3564,  3573,  3575,  3584,  3589,  3595,
    3604,  3613,  3615,  3617,  3619,  3621,  3623,  3625,  3627,  3629,
    3631,  3633,  3635,  3637,  3642,  3654,  3669,  3670,  3683,  3684,
    3685,  3686,  3687,  3691,  3692,  3693,  3694,  3695,  3696,  3697,
    3701,  3702,  3703,  3704,  3709,  3708,  3719,  3719,  3772,  3771,
    3796,  3846,  3887,  3906,  3905,  3925,  3942,  3944,  3945,  3949,
    3963,  3980,  3982,  3998,  3980,  4017,  4019,  4020,  4025,  4024,
    4094,  4096,  4094,  4105,  4110,  4111,  4115,  4116,  4121,  4125,
    4120,  4146,  4150,  4145,  4169,  4179,  4183,  4184,  4189,  4188,
    4210,  4209,  4219,  4218,  4229,  4229,  4269,  4284,  4283,  4315,
    4314,  4334,  4348,  4357,  4356,  4364,  4363,  4372,  4371,  4382,
    4381,  4390,  4389,  4399,  4398,  4409,  4411,  4416,  4418,  4420,
    4437,  4442,  4448,  4455,  4456,  4464,  4470,  4479,  4485,  4491,
    4492,  4496,  4496,  4501,  4502,  4503,  4507,  4508,  4509,  4513,
    4517,  4518,  4519,  4523,  4524,  4525,  4526,  4527,  4528,  4529,
    4530,  4534,  4538,  4539,  4540,  4544,  4545,  4546,  4547,  4548,
    4552,  4556,  4557,  4558,  4562,  4563,  4564,  4565,  4566,  4567,
    4568,  4572,  4576,  4577,  4578,  4582,  4583,  4584,  4589,  4597,
    4605,  4613,  4626,  4639,  4644,  4649,  4657,  4665,  4673,  4681,
    4689,  4697,  4705,  4715,  4725,  4735,  4737,  4741,  4746,  4756,
    4757,  4796,  4795,  4798,  4804,  4806,  4805,  4808,  4807,  4809,
    4823,  4824,  4828,  4829,  4835,  4833,  4840,  4845,  4847,  4846,
    4849,  4848,  4853,  4890,  4891,  4896,  4895,  4914,  4929,  4928,
    4946,  4945,  4951,  4959,  4958,  4961,  4963,  4965,  4967,  4972,
    4973,  4979,  4980,  4997,  4998,  5002,  5003,  5007,  5023,  5033,
    5044,  5053,  5054,  5067,  5069,  5068,  5073,  5071,  5082,  5083,
    5087,  5102,  5114,  5115,  5128,  5137,  5159,  5160,  5165,  5164,
    5189,  5201,  5213,  5212,  5227,  5226,  5240,  5264,  5286,  5290,
    5319,  5331,  5332,  5337,  5348,  5336,  5373,  5374,  5378,  5391,
    5412,  5425,  5451,  5452,  5457,  5456,  5494,  5503,  5504,  5508,
    5509,  5513,  5515,  5521,  5527,  5529,  5531,  5533,  5535,  5537,
    5546,  5554,  5554,  5575,  5576,  5580,  5581,  5585,  5596,  5597,
    5601,  5602,  5606,  5607,  5611,  5612,  5617,  5620,  5628,  5631,
    5638,  5642,  5648,  5650,  5654,  5655,  5659,  5660,  5661,  5665,
    5680,  5685,  5690,  5695,  5700,  5705,  5710,  5725,  5731,  5746,
    5751,  5766,  5772,  5790,  5795,  5800,  5805,  5810,  5815,  5821,
    5820,  5846,  5847,  5848,  5853,  5858,  5863,  5865,  5867,  5869,
    5875,  5880,  5885,  5893,  5901,  5907,  5916,  5924,  5941,  5951,
    5962,  5963,  5964,  5965,  5966,  5967,  5968,  5972,  5973,  5974,
    5978,  5979,  5980,  5981,  5986,  5993,  5994,  5998,  5999,  6000,
    6004,  6006,  6012,  6011,  6019,  6018,  6026,  6025,  6033,  6032,
    6042,  6039,  6050,  6048,  6057,  6056,  6094,  6101,  6102,  6106,
    6119,  6120,  6124,  6125,  6129,  6134,  6133,  6169,  6169,  6171,
    6170,  6182,  6183,  6187,  6188,  6193,  6195,  6194,  6203,  6204,
    6209,  6212,  6216,  6220,  6227,  6228,  6232,  6233,  6237,  6243,
    6249,  6254,  6253,  6272,  6278,  6279,  6289,  6301,  6301,  6304,
    6305,  6313,  6314,  6315,  6331,  6335,  6339,  6343,  6347,  6352,
    6357,  6361,  6366,  6371,  6389,  6391,  6394,  6411,  6414,  6419,
    6424,  6435,  6440,  6445,  6450,  6452,  6454,  6456,  6458,  6460,
    6462,  6464,  6466,  6468,  6470,  6472,  6480,  6481,  6482,  6483,
    6484,  6485,  6486,  6487,  6491,  6495,  6496,  6500,  6501,  6505,
    6506,  6507,  6508,  6509,  6513,  6514,  6515,  6516,  6517,  6521,
    6526,  6528,  6534,  6536,  6543,  6544,  6545,  6549,  6553,  6554,
    6555,  6556,  6557,  6558,  6562,  6563,  6564,  6565,  6569,  6570,
    6574,  6575,  6579,  6580,  6584,  6585,  6589,  6590,  6594,  6595,
    6596,  6603,  6604,  6610,  6617,  6621,  6622,  6628,  6629,  6637,
    6645,  6651,  6660,  6674,  6675,  6679,  6684,  6688,  6689,  6693,
    6694,  6698,  6704,  6708,  6709,  6713,  6721,  6722,  6726,  6727,
    6731,  6732,  6736,  6737,  6738,  6746,  6747,  6748,  6749,  6750,
    6754,  6755,  6760,  6759,  6772,  6773,  6777,  6780,  6781,  6782,
    6783,  6787,  6795,  6802,  6803,  6807,  6817,  6818,  6822,  6823,
    6826,  6828,  6832,  6844,  6845,  6849,  6856,  6869,  6870,  6872,
    6874,  6880,  6885,  6891,  6897,  6904,  6914,  6915,  6916,  6917,
    6918,  6922,  6923,  6927,  6928,  6932,  6933,  6937,  6938,  6939,
    6943,  6944,  6948,  6952,  6964,  6965,  6969,  6970,  6974,  6975,
    6979,  6980,  6984,  6985,  6989,  6990,  6994,  6995,  7000,  7001,
    7002,  7006,  7008,  7013,  7015,  7017,  7025,  7033,  7039,  7047,
    7048,  7052,  7056,  7057,  7067,  7068,  7069,  7073,  7077,  7084,
    7090,  7102,  7103,  7107,  7108,  7112,  7114,  7124,  7138,  7123,
    7158,  7157,  7171,  7180,  7179,  7195,  7194,  7210,  7209,  7225,
    7219,  7236,  7235,  7270,  7275,  7280,  7285,  7291,  7290,  7297,
    7306,  7307,  7308,  7309,  7313,  7314,  7326,  7327,  7331,  7332,
    7335,  7337,  7345,  7353,  7355,  7357,  7358,  7366,  7367,  7373,
    7382,  7380,  7393,  7406,  7405,  7418,  7416,  7429,  7436,  7446,
    7447,  7474,  7481,  7485,  7491,  7489,  7508,  7510,  7515,  7523,
    7522,  7538,  7542,  7541,  7553,  7554,  7558,  7574,  7575,  7579,
    7587,  7592,  7597,  7602,  7606,  7611,  7620,  7628,  7638,  7649,
    7659,  7670,  7680,  7686,  7692,  7701,  7711,  7727,  7741,  7746,
    7750,  7755,  7756,  7759,  7761,  7762,  7763,  7764,  7768,  7773,
    7781,  7786,  7794,  7795,  7799,  7800,  7804,  7804,  7807,  7809,
    7813,  7814,  7818,  7819,  7828,  7829,  7830,  7834,  7835,  7840,
    7848,  7849,  7850,  7851,  7856,  7855,  7865,  7864,  7872,  7879,
    7889,  7906,  7909,  7916,  7920,  7927,  7931,  7935,  7942,  7942,
    7948,  7949,  7953,  7954,  7955,  7959,  7960,  7969,  7976,  7977,
    7982,  7981,  7993,  7994,  7995,  7999,  8000,  8000,  8005,  8004,
    8025,  8026,  8030,  8031,  8035,  8036,  8037,  8041,  8042,  8047,
    8046,  8067,  8068,  8072,  8077,  8078,  8085,  8087,  8092,  8094,
    8093,  8105,  8107,  8106,  8119,  8120,  8125,  8134,  8135,  8136,
    8140,  8147,  8157,  8165,  8174,  8175,  8175,  8179,  8178,  8201,
    8202,  8206,  8207,  8211,  8212,  8213,  8214,  8215,  8216,  8220,
    8221,  8226,  8225,  8246,  8247,  8248,  8253,  8252,  8258,  8265,
    8271,  8280,  8281,  8285,  8299,  8298,  8311,  8312,  8316,  8317,
    8321,  8331,  8341,  8342,  8347,  8346,  8357,  8358,  8362,  8363,
    8367,  8377,  8388,  8387,  8395,  8395,  8404,  8405,  8410,  8411,
    8420,  8429,  8430,  8431,  8432,  8436,  8437,  8438,  8439,  8443,
    8443,  8455,  8459,  8459,  8471,  8475,  8475,  8487,  8492,  8492,
    8504,  8510,  8508,  8515,  8527,  8525,  8532,  8542,  8547,  8546,
    8551,  8555,  8566,  8567,  8571,  8572,  8576,  8577,  8578,  8582,
    8583,  8584,  8588,  8589,  8590,  8591,  8592,  8596,  8596,  8614,
    8621,  8623,  8627,  8631,  8637,  8644,  8646,  8654,  8655,  8659,
    8660,  8677,  8696,  8698,  8705,  8716,  8717,  8718,  8732,  8737,
    8759,  8765,  8771,  8777,  8783,  8784,  8785,  8786,  8787,  8791,
    8792,  8793,  8797,  8798,  8799,  8803,  8804,  8809,  8860,  8867,
    8910,  8916,  8922,  8928,  8934,  8940,  8946,  8952,  8956,  8962,
    8968,  8974,  8980,  8986,  8990,  8996,  9005,  9011,  9019,  9025,
    9034,  9040,  9048,  9058,  9065,  9073,  9079,  9088,  9092,  9098,
    9104,  9110,  9116,  9122,  9128,  9134,  9140,  9146,  9152,  9158,
    9164,  9170,  9176,  9180,  9181,  9185,  9186,  9190,  9191,  9195,
    9196,  9200,  9201,  9202,  9203,  9204,  9205,  9209,  9210,  9215,
    9219,  9223,  9224,  9225,  9229,  9230,  9231,  9232,  9233,  9234,
    9238,  9239,  9240,  9245,  9244,  9250,  9258,  9281,  9288,  9324,
    9325,  9326,  9327,  9328,  9329,  9330,  9331,  9332,  9333,  9334,
    9341,  9347,  9371,  9381,  9389,  9395,  9402,  9408,  9418,  9428,
    9429,  9440,  9441,  9448,  9454,  9458,  9464,  9470,  9476,  9492,
    9498,  9504,  9513,  9522,  9528,  9534,  9540,  9546,  9560,  9571,
    9577,  9583,  9589,  9595,  9601,  9608,  9615,  9621,  9627,  9633,
    9639,  9645,  9651,  9657,  9663,  9669,  9677,  9698,  9705,  9711,
    9718,  9725,  9732,  9739,  9745,  9751,  9758,  9764,  9771,  9777,
    9783,  9789,  9795,  9801,  9819,  9825,  9831,  9838,  9845,  9853,
    9860,  9867,  9874,  9881,  9898,  9904,  9910,  9916,  9922,  9929,
    9935,  9941,  9950,  9961,  9968,  9974,  9980,  9987,  9995, 10001,
   10007, 10013, 10019, 10027, 10033, 10039, 10045, 10051, 10059, 10071,
   10078, 10093, 10099, 10106, 10113, 10120, 10127, 10134, 10138, 10158,
   10157, 10229, 10267, 10269, 10274, 10275, 10279, 10280, 10284, 10285,
   10289, 10296, 10304, 10331, 10337, 10343, 10349, 10355, 10361, 10370,
   10377, 10379, 10376, 10386, 10397, 10403, 10409, 10415, 10421, 10427,
   10433, 10439, 10445, 10452, 10451, 10470, 10479, 10497, 10499, 10506,
   10513, 10520, 10527, 10534, 10541, 10548, 10555, 10562, 10569, 10580,
   10587, 10598, 10607, 10617, 10616, 10628, 10638, 10646, 10662, 10663,
   10668, 10673, 10676, 10678, 10682, 10684, 10690, 10689, 10706, 10709,
   10708, 10712, 10717, 10718, 10722, 10723, 10724, 10725, 10726, 10727,
   10728, 10732, 10733, 10734, 10738, 10739, 10743, 10750, 10758, 10759,
   10763, 10770, 10778, 10779, 10783, 10784, 10788, 10796, 10807, 10808,
   10820, 10831, 10832, 10838, 10839, 10857, 10866, 10864, 10882, 10880,
   10891, 10901, 10899, 10917, 10916, 10926, 10937, 10935, 10954, 10953,
   10964, 10976, 10977, 10978, 10982, 10983, 10991, 10992, 10996, 11011,
   11012, 11016, 11016, 11052, 11116, 11156, 11157, 11166, 11165, 11174,
   11175, 11176, 11180, 11181, 11182, 11182, 11186, 11192, 11200, 11200,
   11215, 11237, 11246, 11263, 11246, 11270, 11274, 11283, 11294, 11295,
   11300, 11303, 11304, 11305, 11309, 11310, 11315, 11314, 11320, 11319,
   11327, 11328, 11331, 11333, 11333, 11337, 11337, 11342, 11343, 11347,
   11349, 11354, 11355, 11359, 11370, 11383, 11384, 11385, 11386, 11387,
   11388, 11389, 11390, 11391, 11392, 11393, 11394, 11398, 11399, 11400,
   11401, 11402, 11403, 11404, 11405, 11406, 11410, 11411, 11412, 11413,
   11416, 11418, 11419, 11423, 11424, 11432, 11434, 11438, 11440, 11439,
   11453, 11456, 11455, 11470, 11476, 11490, 11492, 11496, 11498, 11503,
   11504, 11521, 11544, 11545, 11551, 11552, 11556, 11569, 11568, 11576,
   11577, 11586, 11587, 11591, 11592, 11596, 11597, 11611, 11612, 11616,
   11626, 11635, 11642, 11649, 11659, 11660, 11667, 11677, 11678, 11680,
   11682, 11684, 11693, 11697, 11698, 11702, 11714, 11716, 11721, 11720,
   11770, 11772, 11777, 11778, 11779, 11783, 11784, 11788, 11801, 11808,
   11813, 11820, 11827, 11834, 11844, 11879, 11883, 11889, 11895, 11904,
   11913, 11917, 11924, 11925, 11929, 11930, 11931, 11935, 11936, 11937,
   11938, 11939, 11940, 11944, 11945, 11946, 11947, 11948, 11952, 11953,
   11954, 11955, 11956, 11960, 11961, 11962, 11963, 11964, 11968, 11973,
   11974, 11978, 11979, 11984, 11983, 12017, 12018, 12022, 12023, 12027,
   12037, 12037, 12048, 12049, 12052, 12072, 12076, 12090, 12095, 12105,
   12094, 12107, 12120, 12132, 12131, 12149, 12148, 12157, 12157, 12174,
   12180, 12195, 12211, 12219, 12223, 12228, 12227, 12236, 12241, 12247,
   12252, 12257, 12265, 12266, 12270, 12281, 12294, 12295, 12299, 12311,
   12315, 12324, 12327, 12334, 12335, 12343, 12351, 12342, 12361, 12368,
   12360, 12378, 12386, 12387, 12395, 12399, 12400, 12411, 12412, 12416,
   12426, 12427, 12428, 12430, 12429, 12440, 12442, 12446, 12447, 12448,
   12452, 12453, 12457, 12458, 12462, 12472, 12473, 12477, 12478, 12483,
   12482, 12496, 12497, 12501, 12506, 12514, 12515, 12521, 12529, 12531,
   12531, 12539, 12547, 12538, 12569, 12570, 12574, 12582, 12583, 12587,
   12597, 12598, 12605, 12604, 12620, 12631, 12619, 12634, 12633, 12645,
   12644, 12657, 12659, 12663, 12664, 12668, 12681, 12697, 12698, 12702,
   12703, 12707, 12708, 12709, 12714, 12713, 12734, 12736, 12739, 12741,
   12744, 12745, 12748, 12752, 12756, 12760, 12764, 12768, 12772, 12776,
   12780, 12788, 12791, 12801, 12800, 12816, 12823, 12831, 12839, 12847,
   12855, 12863, 12870, 12877, 12883, 12885, 12887, 12896, 12900, 12905,
   12904, 12911, 12910, 12915, 12924, 12931, 12936, 12941, 12946, 12948,
   12950, 12952, 12954, 12956, 12963, 12971, 12973, 12981, 12988, 12995,
   13002, 13008, 13013, 13021, 13029, 13033, 13038, 13045, 13050, 13057,
   13064, 13070, 13077, 13082, 13089, 13096, 13101, 13106, 13111, 13118,
   13140, 13142, 13144, 13149, 13150, 13153, 13155, 13159, 13160, 13164,
   13165, 13169, 13170, 13174, 13175, 13179, 13180, 13184, 13185, 13193,
   13205, 13204, 13220, 13219, 13229, 13230, 13231, 13232, 13233, 13237,
   13238, 13242, 13249, 13250, 13251, 13255, 13256, 13268, 13269, 13270,
   13285, 13284, 13297, 13296, 13308, 13312, 13313, 13326, 13329, 13328,
   13340, 13341, 13346, 13348, 13350, 13352, 13354, 13356, 13364, 13366,
   13368, 13370, 13375, 13377, 13385, 13387, 13389, 13391, 13407, 13408,
   13412, 13413, 13416, 13418, 13419, 13423, 13439, 13440, 13445, 13444,
   13454, 13455, 13459, 13459, 13463, 13462, 13468, 13472, 13473, 13477,
   13478, 13486, 13485, 13496, 13500, 13504, 13517, 13516, 13531, 13532,
   13533, 13537, 13538, 13539, 13540, 13548, 13552, 13561, 13567, 13579,
   13591, 13601, 13612, 13578, 13620, 13621, 13625, 13626, 13630, 13631,
   13639, 13643, 13644, 13645, 13648, 13650, 13654, 13655, 13659, 13664,
   13671, 13676, 13683, 13685, 13689, 13690, 13694, 13699, 13707, 13708,
   13712, 13714, 13722, 13723, 13727, 13728, 13729, 13733, 13735, 13740,
   13741, 13750, 13751, 13755, 13756, 13760, 13773, 13797, 13809, 13816,
   13835, 13843, 13848, 13861, 13870, 13886, 13912, 13913, 13921, 13922,
   13923, 13924, 13938, 13944, 13950, 13956, 13962, 13968, 13986, 13996,
   14006, 14012, 14021, 14033, 14039, 14045, 14055, 14056, 14065, 14064,
   14083, 14084, 14089, 14090, 14097, 14095, 14121, 14122, 14128, 14133,
   14142, 14157, 14158, 14162, 14171, 14186, 14190, 14241, 14245, 14262,
   14266, 14338, 14362, 14392, 14393, 14403, 14410, 14414, 14420, 14426,
   14436, 14442, 14451, 14461, 14462, 14487, 14501, 14515, 14530, 14531,
   14541, 14542, 14552, 14553, 14563, 14564, 14565, 14569, 14582, 14612,
   14622, 14622, 14624, 14634, 14635, 14636, 14637, 14638, 14639, 14640,
   14641, 14642, 14643, 14644, 14645, 14646, 14647, 14648, 14649, 14650,
   14651, 14652, 14653, 14654, 14655, 14656, 14657, 14658, 14659, 14660,
   14661, 14662, 14663, 14664, 14665, 14666, 14667, 14668, 14669, 14670,
   14671, 14672, 14673, 14674, 14675, 14676, 14677, 14678, 14679, 14680,
   14681, 14682, 14683, 14684, 14685, 14686, 14687, 14688, 14689, 14690,
   14691, 14692, 14693, 14694, 14695, 14696, 14697, 14698, 14699, 14700,
   14701, 14702, 14703, 14704, 14709, 14709, 14718, 14719, 14720, 14721,
   14722, 14723, 14724, 14725, 14726, 14727, 14728, 14729, 14730, 14731,
   14732, 14733, 14734, 14735, 14736, 14737, 14738, 14739, 14740, 14741,
   14742, 14743, 14744, 14745, 14746, 14747, 14748, 14749, 14750, 14751,
   14752, 14753, 14754, 14755, 14756, 14757, 14758, 14759, 14760, 14761,
   14762, 14763, 14764, 14765, 14766, 14771, 14772, 14773, 14774, 14775,
   14776, 14777, 14778, 14779, 14780, 14781, 14782, 14783, 14784, 14785,
   14786, 14787, 14788, 14789, 14790, 14791, 14792, 14793, 14794, 14795,
   14796, 14797, 14798, 14799, 14800, 14801, 14802, 14803, 14804, 14805,
   14806, 14807, 14808, 14809, 14810, 14811, 14812, 14813, 14814, 14815,
   14816, 14817, 14818, 14819, 14820, 14821, 14822, 14823, 14824, 14825,
   14826, 14827, 14828, 14829, 14830, 14831, 14832, 14833, 14834, 14835,
   14836, 14837, 14838, 14839, 14840, 14841, 14842, 14843, 14844, 14845,
   14846, 14847, 14848, 14849, 14850, 14851, 14852, 14853, 14854, 14855,
   14856, 14857, 14858, 14859, 14860, 14861, 14862, 14863, 14864, 14865,
   14866, 14867, 14868, 14869, 14870, 14871, 14872, 14873, 14874, 14875,
   14876, 14877, 14878, 14879, 14880, 14881, 14882, 14883, 14884, 14885,
   14886, 14887, 14888, 14889, 14890, 14891, 14892, 14893, 14894, 14895,
   14896, 14897, 14898, 14899, 14900, 14901, 14902, 14903, 14904, 14905,
   14906, 14907, 14908, 14909, 14910, 14911, 14912, 14913, 14914, 14915,
   14916, 14917, 14918, 14919, 14920, 14921, 14922, 14923, 14924, 14925,
   14926, 14927, 14928, 14929, 14930, 14931, 14932, 14933, 14934, 14935,
   14936, 14937, 14938, 14939, 14940, 14941, 14942, 14943, 14944, 14945,
   14946, 14947, 14948, 14949, 14950, 14951, 14952, 14953, 14954, 14955,
   14956, 14957, 14958, 14959, 14960, 14961, 14962, 14963, 14964, 14965,
   14966, 14967, 14968, 14969, 14970, 14971, 14972, 14973, 14974, 14975,
   14976, 14977, 14978, 14979, 14980, 14981, 14982, 14983, 14984, 14985,
   14986, 14987, 14988, 14989, 14990, 14991, 14992, 14993, 14994, 14995,
   14996, 14997, 14998, 14999, 15000, 15001, 15002, 15003, 15004, 15005,
   15006, 15007, 15008, 15009, 15010, 15011, 15012, 15013, 15014, 15015,
   15016, 15017, 15018, 15019, 15020, 15021, 15022, 15023, 15024, 15025,
   15026, 15027, 15028, 15029, 15030, 15031, 15043, 15042, 15055, 15063,
   15054, 15080, 15081, 15087, 15086, 15093, 15092, 15102, 15101, 15112,
   15111, 15117, 15125, 15127, 15132, 15132, 15141, 15140, 15154, 15153,
   15158, 15162, 15163, 15164, 15168, 15169, 15170, 15171, 15175, 15176,
   15177, 15178, 15183, 15207, 15233, 15244, 15261, 15275, 15290, 15309,
   15326, 15338, 15346, 15362, 15388, 15425, 15439, 15440, 15441, 15442,
   15446, 15464, 15482, 15483, 15487, 15488, 15489, 15490, 15494, 15508,
   15512, 15513, 15514, 15524, 15525, 15526, 15532, 15538, 15550, 15549,
   15562, 15563, 15567, 15568, 15572, 15590, 15591, 15592, 15597, 15598,
   15603, 15602, 15619, 15628, 15638, 15637, 15668, 15669, 15673, 15674,
   15678, 15679, 15680, 15681, 15683, 15682, 15695, 15696, 15697, 15698,
   15699, 15705, 15710, 15716, 15727, 15738, 15742, 15749, 15758, 15760,
   15765, 15770, 15777, 15789, 15801, 15808, 15820, 15821, 15825, 15826,
   15830, 15835, 15843, 15853, 15872, 15875, 15877, 15881, 15882, 15889,
   15891, 15895, 15896, 15901, 15900, 15904, 15903, 15907, 15906, 15910,
   15909, 15912, 15913, 15914, 15915, 15916, 15917, 15918, 15919, 15920,
   15921, 15922, 15923, 15924, 15925, 15926, 15927, 15928, 15929, 15930,
   15931, 15932, 15933, 15934, 15935, 15936, 15937, 15941, 15942, 15946,
   15947, 15951, 15958, 15965, 15975, 15986, 15995, 16004, 16016, 16021,
   16029, 16034, 16042, 16047, 16054, 16054, 16055, 16055, 16058, 16065,
   16070, 16076, 16082, 16088, 16092, 16096, 16097, 16101, 16129, 16131,
   16135, 16139, 16143, 16150, 16156, 16162, 16168, 16174, 16183, 16184,
   16188, 16189, 16194, 16195, 16199, 16200, 16204, 16205, 16209, 16210,
   16215, 16214, 16224, 16233, 16234, 16238, 16239, 16244, 16245, 16246,
   16251, 16252, 16253, 16257, 16258, 16262, 16274, 16283, 16293, 16302,
   16316, 16317, 16322, 16321, 16338, 16337, 16349, 16349, 16370, 16371,
   16378, 16386, 16387, 16388, 16401, 16408, 16409, 16413, 16414, 16418,
   16419, 16420, 16425, 16433, 16454, 16480, 16482, 16486, 16487, 16491,
   16492, 16500, 16501, 16502, 16503, 16509, 16515, 16525, 16527, 16529,
   16534, 16535, 16536, 16537, 16538, 16542, 16543, 16544, 16545, 16546,
   16547, 16557, 16558, 16563, 16576, 16592, 16594, 16596, 16602, 16603,
   16605, 16611, 16610, 16629, 16630, 16634, 16640, 16649, 16649, 16674,
   16675, 16676, 16677, 16682, 16683, 16685, 16687, 16698, 16700, 16706,
   16712, 16723, 16732, 16738, 16743, 16747, 16720, 16799, 16800, 16804,
   16824, 16845, 16849, 16855, 16860, 16820, 16919, 16931, 16940, 16944,
   16918, 16961, 16965, 16969, 16973, 16977, 16981, 16988, 16995, 17002,
   17012, 17013, 17017, 17018, 17019, 17023, 17024, 17029, 17031, 17030,
   17036, 17037, 17041, 17048, 17058, 17064, 17075
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "ATOMIC_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_ADD_SYM",
  "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM",
  "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONSTRAINT_CATALOG_SYM",
  "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM",
  "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CUME_DIST_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE",
  "CURRENT_POS_SYM", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM",
  "DELETE_DOMAIN_ID_SYM", "DELETE_SYM", "DENSE_RANK_SYM", "DESC",
  "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIAGNOSTICS_SYM",
  "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT",
  "DIV_SYM", "DOUBLE_SYM", "DO_DOMAIN_IDS_SYM", "DO_SYM", "DROP",
  "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM",
  "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXAMINED_SYM", "EXCLUDE_SYM",
  "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM", "EXPORT_SYM",
  "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM",
  "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM", "FIRST_VALUE_SYM",
  "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM",
  "FOLLOWS_SYM", "FOLLOWING_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM",
  "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "LAG_SYM", "LEAD_SYM", "HANDLER_SYM",
  "HARD_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM", "HEX_STRING",
  "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM",
  "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM", "ID_SYM", "IDENT",
  "IDENTIFIED_SYM", "IDENT_QUOTED", "IF_SYM", "IGNORE_DOMAIN_IDS_SYM",
  "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMMEDIATE_SYM", "IMPORT",
  "INDEXES", "INDEX_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "JSON_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM",
  "LANGUAGE_SYM", "LAST_SYM", "LAST_VALUE", "LE", "LEADING", "LEAVES",
  "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE",
  "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM",
  "MASTER_GTID_POS_SYM", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM",
  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM",
  "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_STATEMENT_TIME_SYM", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NTILE_SYM", "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM",
  "NTH_VALUE_SYM", "NVARCHAR_SYM", "OFFSET_SYM", "OLD_PASSWORD_SYM", "ON",
  "ONE_SYM", "ONLY_SYM", "ONLINE_SYM", "OPEN_SYM", "OPTIMIZE",
  "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM", "ORDER_SYM",
  "OR_OR_SYM", "OR_SYM", "OTHERS_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OVER_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PAGE_CHECKSUM_SYM", "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD_SYM", "PERCENT_RANK_SYM", "PERSISTENT_SYM", "PHASE_SYM",
  "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM", "POLYGON", "PORT_SYM",
  "POSITION_SYM", "PRECEDES_SYM", "PRECEDING_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "RANK_SYM", "READS_SYM", "READ_ONLY_SYM",
  "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM",
  "RECURSIVE_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLE_SYM", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROW_SYM", "ROWS_SYM", "ROW_COUNT_SYM",
  "ROW_FORMAT_SYM", "ROW_NUMBER_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM",
  "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM",
  "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM",
  "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM",
  "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLAVES", "SLAVE_POS_SYM", "SLOW",
  "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM",
  "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM",
  "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT",
  "SQL_BUFFER_RESULT", "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS",
  "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD",
  "REF_SYSTEM_ID_SYM", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATEMENT_SYM", "STATS_AUTO_RECALC_SYM", "STATS_PERSISTENT_SYM",
  "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STORED_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_CHECKSUM_SYM",
  "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIES_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM",
  "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM",
  "ULONGLONG_NUM", "UNBOUNDED_SYM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER_SYM", "USE_FRM", "USE_SYM", "USING", "UTC_DATE_SYM",
  "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES", "VALUE_SYM", "VARBINARY",
  "VARCHAR", "VARIABLES", "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM",
  "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM", "WAIT_SYM", "WARNINGS", "WEEK_SYM",
  "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE", "WINDOW_SYM", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "CONDITIONLESS_JOIN",
  "ON_SYM", "'='", "'>'", "'<'", "'|'", "'&'", "'-'", "'+'", "'*'", "'/'",
  "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'", "'}'", "';'",
  "'.'", "'@'", "':'", "$accept", "query", "$@1", "opt_end_of_input",
  "verb_clause", "statement", "deallocate", "deallocate_or_drop",
  "prepare", "prepare_src", "$@2", "execute", "$@3", "$@4",
  "execute_using", "$@5", "execute_var_list", "execute_var_ident", "help",
  "$@6", "change", "$@7", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "do_domain_id_list",
  "do_domain_id", "ignore_domain_id_list", "ignore_domain_id",
  "master_file_def", "optional_connection_name", "connection_name",
  "create", "$@8", "$@9", "$@10", "$@11", "$@12", "$@13", "$@14",
  "server_def", "$@15", "server_options_list", "server_option",
  "event_tail", "$@16", "ev_schedule_time", "$@17", "opt_ev_status",
  "ev_starts", "ev_ends", "opt_ev_on_completion", "ev_on_completion",
  "opt_ev_comment", "ev_sql_stmt", "$@18", "clear_privileges", "sp_name",
  "sp_a_chistics", "sp_c_chistics", "sp_chistic", "sp_c_chistic",
  "sp_suid", "call", "$@19", "opt_sp_cparam_list", "opt_sp_cparams",
  "sp_cparams", "sp_fdparam_list", "sp_fdparams", "sp_param_name_and_type",
  "@20", "sp_pdparam_list", "sp_pdparams", "sp_pdparam", "sp_opt_inout",
  "sp_proc_stmts", "sp_proc_stmts1", "sp_decls", "sp_decl", "$@21", "$@22",
  "sp_cursor_stmt", "$@23", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt_in_returns_clause", "sp_proc_stmt",
  "sp_proc_stmt_compound_ok", "sp_proc_stmt_if", "$@24",
  "sp_proc_stmt_statement", "$@25", "sp_proc_stmt_return", "$@26",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@27", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@28", "$@29", "$@30", "sp_elseifs",
  "case_stmt_specification", "$@31", "case_stmt_body", "$@32", "$@33",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@34", "$@35", "searched_when_clause", "$@36",
  "$@37", "else_clause_opt", "sp_opt_label", "sp_labeled_block", "$@38",
  "sp_unlabeled_block", "$@39", "sp_unlabeled_block_not_atomic", "$@40",
  "sp_block_content", "$@41", "loop_body", "while_body", "$@42",
  "repeat_body", "$@43", "pop_sp_label", "pop_sp_empty_label",
  "sp_labeled_control", "$@44", "$@45", "$@46", "sp_unlabeled_control",
  "$@47", "$@48", "$@49", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@50", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@51", "$@52", "$@53", "create_like", "opt_create_select",
  "create_select_query_expression", "$@54", "$@55", "$@56",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@57",
  "have_partitioning", "partition_entry", "$@58", "partition", "$@59",
  "part_type_def", "$@60", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@61",
  "$@62", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@63", "part_name", "opt_part_values", "$@64", "$@65", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@66", "$@67",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@68", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select_query_specification", "create_select_part2", "$@69",
  "create_select_part3", "create_select_part3_union_not_ready",
  "create_select_part4", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option",
  "opt_if_not_exists_table_element", "opt_if_not_exists",
  "create_or_replace", "opt_create_table_options",
  "create_table_options_space_separated", "create_table_options",
  "create_table_option", "$@70", "default_charset", "default_collation",
  "storage_engines", "known_storage_engines", "row_types",
  "merge_insert_types", "udf_type", "create_field_list", "field_list",
  "field_list_item", "column_def", "key_def", "$@71", "$@72", "$@73",
  "$@74", "$@75", "$@76", "$@77", "constraint_def", "opt_check_constraint",
  "check_constraint", "opt_constraint_no_id", "opt_constraint",
  "constraint", "field_spec", "@78", "field_type_or_serial", "$@79",
  "$@80", "opt_serial_attribute", "opt_serial_attribute_list", "field_def",
  "$@81", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "$@82", "parenthesized_expr", "virtual_column_func",
  "expr_or_literal", "column_default_expr", "field_type", "spatial_type",
  "char", "nchar", "varchar", "nvarchar", "int_type", "real_type",
  "srid_option", "float_options", "precision", "field_options",
  "field_length", "opt_field_length", "opt_field_length_default_1",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "serial_attribute", "type_with_opt_collate", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "charset_or_alias", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@83", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "constraint_key_type", "key_or_index", "opt_key_or_index",
  "keys_or_index", "opt_unique", "fulltext", "spatial",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "opt_USING_key_algorithm", "opt_key_algorithm_clause", "key_using_alg",
  "all_key_opt", "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@84", "$@85", "$@86", "$@87", "$@88", "$@89",
  "$@90", "$@91", "$@92", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@93", "$@94", "$@95", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@96",
  "add_part_extra", "reorg_partition_rule", "$@97", "reorg_parts_rule",
  "$@98", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "opt_index_lock_algorithm",
  "alter_algorithm_option", "alter_lock_option", "opt_column",
  "opt_ignore", "alter_options", "$@99", "alter_options_part2",
  "alter_option_list", "alter_option", "opt_restrict", "opt_place",
  "opt_to", "slave", "$@100", "$@101", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@102",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@103", "opt_checksum_type",
  "repair_table_or_view", "$@104", "repair", "$@105", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "opt_view_repair_type", "analyze",
  "$@106", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@107", "persistent_index_stat_spec",
  "$@108", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check_view_or_table", "$@109", "check", "$@110",
  "opt_mi_check_type", "mi_check_types", "mi_check_type",
  "opt_view_check_type", "optimize", "$@111", "opt_no_write_to_binlog",
  "rename", "$@112", "rename_list", "table_to_table_list",
  "table_to_table", "keycache", "$@113", "keycache_list_or_parts",
  "keycache_list", "assign_to_keycache", "assign_to_keycache_parts",
  "key_cache_name", "preload", "$@114", "preload_list_or_parts",
  "preload_list", "preload_keys", "preload_keys_parts", "adm_partition",
  "$@115", "cache_keys_spec", "$@116", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "union_list_part2",
  "select_paren", "$@117", "select_paren_union_query_term", "$@118",
  "select_paren_view", "$@119", "select_paren_derived", "$@120",
  "select_init3", "$@121", "select_init3_union_query_term", "$@122",
  "select_init3_view", "$@123", "select_part3",
  "select_part3_union_query_term", "select_part3_view",
  "select_part3_union_not_ready", "select_part3_union_not_ready_noproc",
  "select_options_and_item_list", "$@124", "table_expression",
  "opt_table_expression", "from_clause", "table_reference_list",
  "select_options", "select_option_list", "select_option",
  "opt_select_lock_type", "select_item_list", "select_item",
  "remember_tok_start", "remember_tok_end", "remember_name",
  "remember_end", "select_alias", "opt_default_time_precision",
  "opt_time_precision", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "opt_dyncol_type", "dyncol_type", "numeric_dyncol_type",
  "temporal_dyncol_type", "string_dyncol_type", "$@125",
  "dyncall_create_element", "dyncall_create_list",
  "column_default_non_parenthesized_expr", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@126", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@127", "$@128", "$@129", "window_func_expr", "window_func",
  "simple_window_func", "window_name", "variable", "$@130", "variable_aux",
  "opt_distinct", "opt_gconcat_separator", "opt_gorder_clause",
  "gorder_list", "in_sum_expr", "$@131", "cast_type", "$@132",
  "cast_type_numeric", "cast_type_temporal", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@133", "$@134", "$@135", "$@136", "$@137", "$@138",
  "inner_join", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "table_primary_ident", "$@139", "table_primary_derived",
  "select_derived_union", "$@140", "union_list_derived_part2", "$@141",
  "union_list_derived", "select_init2_derived", "select_part2_derived",
  "$@142", "select_derived", "derived_query_specification",
  "select_derived2", "$@143", "$@144", "get_select_lex",
  "get_select_lex_derived", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@145",
  "$@146", "index_hints_list", "opt_index_hints_list", "$@147",
  "opt_key_definition", "$@148", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "opt_where_clause", "$@149", "opt_having_clause", "$@150", "opt_escape",
  "opt_group_clause", "group_list", "olap_opt", "opt_window_clause",
  "window_def_list", "window_def", "window_spec", "$@151",
  "opt_window_ref", "opt_window_partition_clause",
  "opt_window_order_clause", "opt_window_frame_clause",
  "window_frame_units", "window_frame_extent", "window_frame_start",
  "window_frame_bound", "opt_window_frame_exclusion", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@152", "order_list", "order_dir", "opt_limit_clause",
  "limit_clause_init", "limit_clause", "limit_options", "limit_option",
  "limit_rows_option", "delete_limit_clause", "int_num", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "choice", "procedure_clause", "$@153", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@154",
  "select_var_list", "select_var_ident", "select_outvar", "into",
  "into_destination", "$@155", "$@156", "do", "$@157", "drop", "$@158",
  "$@159", "$@160", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists_table_element", "opt_if_exists",
  "opt_temporary", "insert", "$@161", "$@162", "replace", "$@163", "$@164",
  "insert_lock_option", "replace_lock_option", "insert2", "insert_table",
  "insert_field_spec", "$@165", "fields", "insert_values", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@166", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@167", "update", "$@168", "$@169", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@170", "single_multi", "$@171", "$@172", "$@173", "$@174",
  "opt_select_expressions", "table_wild_list", "table_wild_one",
  "opt_wild", "opt_delete_options", "opt_delete_option", "truncate",
  "$@175", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@176", "show_param",
  "$@177", "$@178", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@179", "$@180", "explainable_command",
  "describe_command", "analyze_stmt_command", "opt_extended_describe",
  "opt_format_json", "opt_describe_column", "flush", "$@181",
  "flush_options", "$@182", "opt_flush_lock", "flush_lock", "$@183",
  "flush_options_list", "flush_option", "opt_table_list",
  "opt_delete_gtid_domain", "delete_domain_id_list", "delete_domain_id",
  "optional_flush_tables_arguments", "reset", "$@184", "reset_options",
  "reset_option", "$@185", "$@186", "slave_reset_options",
  "master_reset_options", "purge", "$@187", "purge_options",
  "purge_option", "kill", "$@188", "kill_type", "kill_option", "kill_expr",
  "shutdown", "use", "load", "$@189", "$@190", "$@191", "$@192",
  "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "hex_or_bin_String", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "opt_with_clause",
  "with_clause", "$@193", "opt_recursive", "with_list",
  "with_list_element", "$@194", "opt_with_column_list", "with_column_list",
  "query_name", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident_table_alias", "ident", "label_ident", "ident_or_text",
  "user_maybe_role", "user_or_role", "user", "keyword_alias", "keyword",
  "keyword_sp", "set", "$@195", "$@196", "$@197",
  "set_stmt_option_value_following_option_type_list",
  "start_option_value_list", "$@198", "$@199", "$@200",
  "start_option_value_list_following_option_type", "$@201",
  "option_value_list_continued", "option_value_list", "$@202", "$@203",
  "option_value", "$@204", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "opt_for_user", "text_or_password", "set_expr_or_default", "lock",
  "$@205", "table_or_tables", "table_lock_list", "table_lock",
  "lock_option", "unlock", "$@206", "handler", "$@207",
  "handler_read_or_scan", "handler_scan_function", "handler_rkey_function",
  "$@208", "handler_rkey_mode", "revoke", "revoke_command",
  "admin_option_for_role", "grant", "grant_command", "opt_with_admin",
  "opt_with_admin_option", "role_list", "current_role", "grant_role",
  "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@209", "$@210", "$@211",
  "$@212", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "user_and_role_list",
  "via_or_with", "using_or_as", "grant_user", "opt_column_list",
  "column_list", "column_list_id", "opt_require_clause", "resource_option",
  "resource_option_list", "opt_resource_options", "opt_grant_options",
  "opt_grant_option", "grant_option_list", "grant_option", "begin",
  "$@213", "compound_statement", "opt_not", "opt_work", "opt_chain",
  "opt_release", "opt_savepoint", "commit", "rollback", "savepoint",
  "release", "union_clause", "union_list", "$@214", "union_list_view",
  "$@215", "union_order_or_limit", "$@216", "order_or_limit",
  "union_head_non_top", "union_option", "query_specification",
  "query_term_union_not_ready", "query_term_union_ready",
  "query_expression_body", "subselect", "subselect_start", "subselect_end",
  "opt_query_expression_options", "query_expression_option_list",
  "query_expression_option", "view_or_trigger_or_sp_or_event",
  "definer_tail", "no_definer_tail", "definer_opt", "no_definer",
  "definer", "view_algorithm", "view_suid", "view_tail", "$@217",
  "view_list_opt", "view_list", "view_select", "$@218",
  "query_expression_body_view", "view_check_option",
  "trigger_action_order", "trigger_follows_precedes_clause",
  "trigger_tail", "$@219", "$@220", "$@221", "$@222", "$@223", "udf_tail",
  "udf_tail2", "sf_tail", "$@224", "$@225", "$@226", "$@227", "$@228",
  "sp_tail", "$@229", "$@230", "$@231", "$@232", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@233", "opt_migrate", "install", "uninstall", "keep_gcc_happy", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   899,   900,   901,   902,   903,   904,
     905,   906,   907,   908,   909,   910,   911,   912,   913,   914,
     915,   916,   917,   918,   919,   920,   921,   922,   923,   924,
     925,   926,    61,    62,    60,   124,    38,    45,    43,    42,
      47,    37,    94,   126,    40,    41,    44,    33,   123,   125,
      59,    46,    64,    58
};
# endif

#define YYPACT_NINF -4618

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-4618)))

#define YYTABLE_NINF -2969

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    5446,  3420,  1645,   103,   556,   243, 63047, -4618,   862,  1255,
   -4618,   535,   949, -4618, -4618, -4618, -4618, -4618,  4529, -4618,
   63708,   874,  1188, -4618, 33928, -4618, -4618, -4618,   -19, -4618,
      82,  1255, -4618,   874, -4618, -4618, 63047, -4618,   729,  1581,
     874, -4618, -4618, -4618, 55776, -4618,   535, 63047,   771, -4618,
   -4618, 55776,   230,   316,   781,   785, -4618, -4618, 63047, -4618,
     941,  1304, -4618,  1436,  1262, -4618, -4618,  1041, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618,  3501, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, 34596, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618,   805, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618,   879, 63047,   940, 63047,  1418, 63047,
   53793, 63047,  1484, -4618,  1594, -4618, -4618,  1598,  1134, -4618,
   -4618,  1255,  1064, -4618, -4618,  1857,   535, -4618, 53793, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618,  1219, -4618, -4618, -4618,
    1250,  1350, -4618, -4618, -4618,  1389, -4618,  1967,  1793,  1543,
   63047,  1156, 14315,  1484,  1484,  1484,  1787,  1803,  1484,  1484,
    1484, 63047, -4618,  1484,  1484,  1484,  1255,   335, -4618, -4618,
   -4618,  1890, 41895, 63047,  1655,   222,   -32, 53793, -4618,  1677,
   63047,  1350,   110, -4618,  1798, -4618, -4618, -4618, 70979,  1255,
   14315,  2039,  1902,   297, 63047, -4618, -4618, -4618, 70979,   250,
     995,  1479, -4618, -4618,  1634, -4618, 42556,   158, -4618, -4618,
   22554,  5579,  1634,  1627,  1350,   -82,  1631,  1350, -4618, -4618,
   63047,  1350,  1255,  1856, -4618, 14315, -4618, -4618, -4618,   213,
     213,   213, -4618,   213, -4618,   213, -4618, -4618,  1497, 63047,
    1948, -4618,  1948, -4618, -4618,  1948,   379,  1689,  1957,  1981,
    1994,  1672,  1135,  1134,  2384, -4618, -4618, -4618,  1591, -4618,
    1577, -4618,  1164, -4618,  1660, 47183, -4618, 63047, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618,  1269, -4618,  2113, -4618,
    1721,   850,  1762,  2131, -4618, 53793, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618,  1629, 33928,  1636, 63047, -4618,
    2162, 14315,  1250, -4618,  1726, -4618, -4618, 33928, -4618, -4618,
   33928,   248,  1351, 63047, -4618, -4618,  2336, -4618, -4618, -4618,
   56437,  1156,  1649,  1669,  1673, 19131, -4618,  1678,  1692,  1704,
   14315,  1710,  1712,  1747,  1749,  1764,  1766,  1770,  1776,  1784,
    1789,  1791,  1799,  1802,  1808,  1810,  1810,  1810,  1821,  1825,
    1829,  1835,  1059,  1846, -4618,  1861,  1867,  1873,  1877, -4618,
    1881, -4618,  1884,  1891,  1900,  1903,  1908,  1917, -4618, -4618,
    1926,  1930,  1933, 15003,  1943,  1946,  1952, -4618, 30583,  1955,
    1964,  1975,  1979,  1995,  2001,  2009,  2012,  2026, -4618, -4618,
   14315,  1821,  2035, -4618, -4618,  2059,  2067, -4618,  2084,  2089,
    2092,  2094,  2107,  2112,  2118,  2135,  2155,  2157,  2163,  2165,
    2168,  2171,  2173,  2176,  2181,  2187,  2193,  2200,  1821, -4618,
    1106,  2204,  2218,  1163,  2232, -4618,  2234, -4618,   239,  2236,
    1810,  1821,  1821,  2245,  2254,  2259,  2279,  2297,  2303, 19131,
   19131, 19131, 14315, -4618, 63047, 63047, -4618,  1199,  2869, -4618,
    4006, 19131, -4618,   236, -4618, -4618, -4618, -4618, -4618,  2058,
   -4618,  2072, -4618, -4618,  1742,  1759, -4618, -4618, -4618, -4618,
   -4618, -4618,  2305,  1657, 63047, 63047, 63047,  2469, 63047, 63047,
   63047, -4618, 53793,  2028, 63047, -4618, -4618,  1484, -4618, 14315,
    2056,  5414, 26570,  2287,  2069,  1521,  1810, -4618, -4618,   -38,
     615,   623,  2330, -4618, -4618,  2233,   631,  2601, -4618,   668,
     198, -4618,   120,   704,   710, -4618, -4618, -4618, -4618, -4618,
   -4618,  2403,  2618,  2324, -4618, -4618,   185, -4618, -4618, 63047,
   -4618,  2862, 14315, -4618, -4618, -4618,  2783,  2500, -4618, -4618,
   -4618,   232,  2990,   955, 33928,   103, 63047,  1121, 72962, 72962,
   63047, -4618, 67674, -4618,  2354, -4618, -4618,  7076, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,  2371,
   -4618, -4618,  1199, -4618, -4618, -4618, -4618, -4618,  2758, -4618,
   -4618, 50488, 33928,  1462, 71640, -4618, -4618, -4618, 31251, -4618,
   -4618,  3018, -4618,  2386, -4618, -4618,  1759,  4491, -4618,  2681,
    2287,  2695, -4618,  2891, -4618,  2714,  2609,  1351, 57098,  1176,
    2599,   577,  1231,  1257, 41229,   115, 53793,  1263,  1031, 23223,
   47844,  2427, -4618, -4618, -4618,  -146,  2597, -4618,  2955, -4618,
     -15, -4618,  2458,  3308,   -15, 51149,  2857,   228, -4618,   327,
   -4618,  2947, -4618, -4618, -4618, -4618,  2595,  2587,  2625, -4618,
     336,  3141, -4618,  1350, -4618,   109, -4618,  2624,  2857,   -15,
     228, -4618,  2868,  3009,   525,  2974, -4618,  1332, -4618, -4618,
   -4618,   -59,  3092, -4618,  2499, -4618, -4618, -4618, 33928, -4618,
   -4618, -4618,  2783, -4618,   384, 63047, -4618, -4618, -4618, -4618,
    2501, -4618, -4618,  2804,  2623, -4618, -4618,    84,  3037, -4618,
     103, 63047, -4618, -4618, -4618,   475,  1170,  1598,  1948, -4618,
    1948,  1948,  1948,  1948,  1064, 48505,  1768,  2472,  1577,  2519,
    2708, -4618, -4618, -4618,  3072,  3099,  1810,  2529, -4618, -4618,
   -4618, -4618, -4618,  3216, -4618, -4618,  2827,  3108,  3108,  3108,
    3225, -4618, -4618, -4618, -4618, 47183, 33928, -4618, -4618, -4618,
     850, -4618,  2724,  2588, -4618, 63047,  1762, -4618, 33928, -4618,
    2543,  2973,  2554, -4618, -4618,  2826, 14315, -4618, -4618, 14315,
   70979,  3088,  1199, -4618, -4618,   195, -4618, -4618, 33928,   244,
   -4618,  3195,  2789, -4618, -4618, -4618,  3216,  3108, 33928, -4618,
    2571, -4618,  2570, -4618, 14315, 14315,  1211,  3189,  3250,  3250,
    3250,  1199,  2613, 14315, 14315, 14315, 14315, 14315, 14315, 14315,
   14315, 14315, 14315, 14315, 14315,  1595,  2584,  2585, -4618, -4618,
   -4618,  1690, -4618,  2586, 14315, 14315, -4618, 14315, 14315, 35264,
    2591, -4618,  4027, 14315, 14315, 14315,  1111,  3126, 14315, 14315,
   14315, 14315, 14315, 14315,  3566, 14315, 14315, 14315, 35264,  3267,
    2592, -4618,  2589,  1758, 14315, 14315,  1794, 14315, 14315, 14315,
   14315, 14315, -4618, -4618, 14315, 14315, 14315, 14315,  2608, 14315,
   14315, 19131, 14315,  2614, 14315, 14315, 14315, 14315, 14315,  2616,
    2619, 14315,  3250,  3250, 14315, 14315,  1811, -4618, -4618, 14315,
    3123,  3123, -4618, 14315, 10187, 14315, -4618, -4618,  2621, -4618,
   -4618, -4618, 35264,  3250,  3250, 14315, 14315, 14315,  3189,  3189,
    3189,  2622,   354, -4618,  2647, 14315,  2626, 23892, -4618, -4618,
   -4618, -4618, 14315, 14315, 14315, 19131, -4618,  1326, -4618, -4618,
   -4618, -4618, -4618, 15691, 19131, 19131,  2627, 19131, 19131, 19131,
   19131, 19131,  3022, 19131, 19131, 19819, 20507, 19131, 19131, 19131,
   19131,  1373,  3189, 53793, 19131, 37924, 14315, -4618, -4618, 63047,
   -4618, -4618,  2630, -4618,  2915,  2028, -4618, 51810, -4618,   608,
    3142, -4618, 50488, 33928, -4618,  2056,  1199, -4618, -4618,  3013,
   -4618,  3014,  3016,  3023, -4618, -4618, -4618, -4618,  3271,  3025,
   -4618,  1350,  3028, -4618, -4618,  2642, -4618, -4618, -4618, 21883,
   53793, -4618,  2648, -4618,  2667, -4618, -4618, -4618, -4618, -4618,
   -4618,  2762, -4618, -4618, -4618, -4618,  2660, -4618, 50488,  2660,
   -4618, -4618,  2660, -4618, -4618,  2660, 47183,   101,  3926, -4618,
   -4618, 65030, -4618, 64369, -4618,  3104,   341, -4618, 31251,  1350,
   -4618,  3110, 16379, -4618, -4618, -4618,  3056,   288,  2669, -4618,
   -4618, -4618, -4618,  3146, 63047, -4618, -4618, -4618, 14315,  3053,
    2668, -4618, -4618, -4618,   252, 33928,  1406, -4618,   177,  2674,
   -4618,  2764,  2680, -4618,  2773, -4618, -4618, 33928,  2683, -4618,
   33928, -4618, -4618, -4618,  2961,  2780, -4618,  1350,   995, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618,  2697,  2712,  3186,  2706, 50488, 47183,  1025, -4618,
   63047, -4618,  2704,  2713, -4618,  -146, -4618, 51810, 63047, -4618,
   -4618, -4618, -4618, -4618,  3328, 14315, -4618, 50488, -4618,   905,
   -4618,  1140,   174,  -146, -4618, -4618, -4618, -4618, -4618, 63047,
   57759,  2716, 10875,  2845,  3144, -4618, -4618, -4618,  2736,  1948,
   63047, 63047, 63047, 33928, 63047, 50488, 33928, -4618,   749,   749,
   -4618, -4618, -4618, 45861, -4618, -4618, -4618,   -15, 63047, 63047,
     -15, 47183, -4618,   228,     8, 63047,   -15, -4618,  3153,  2846,
   -4618, -4618, -4618,  3237, -4618, -4618,  3227,  2744, -4618,  3260,
   -4618, -4618,  2878,   228, -4618, -4618, 33928, -4618, -4618,   228,
   -4618,   228,   228, 14315,   -15,   -15,   -15, -4618,   -28, -4618,
   -4618, -4618,  2909,   -82, -4618, -4618, -4618,  -223, -4618, -4618,
    2756, -4618,  2759, -4618,   213,  3027, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618,  3258, -4618, 51810, 47183,  3234,  1948,
    1948, -4618, -4618,  3274, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618,  1948, -4618, -4618, -4618, -4618, -4618, -4618,  1762, 53793,
   63047, 63047, 63047, 33928, -4618, -4618, -4618, -4618,   166,   973,
    3397, -4618,  1207, -4618,   127,  1207,  2800,  2857, -4618,  3251,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618,  2781,  2472, -4618, -4618,  2774,    12, -4618, -4618,    91,
   -4618, -4618, -4618,  2255,  3319, -4618, 53793,  3510,   630,  1183,
    3510,  2786,  1350,   277, -4618,   277, -4618,  3228, -4618,  3232,
     590, -4618, -4618, -4618,   280,  1948, -4618, -4618,  2788, -4618,
    3060, -4618, -4618, 53793, 58420, 33928, -4618, -4618, -4618,   206,
    2797,  2803,  1199,  1199, 68335,  3430,  2838,  5836, -4618, -4618,
   33928, -4618,   269, -4618, -4618, -4618,  2863, -4618, -4618, -4618,
   -4618,  1253, -4618, -4618,  2258,  2861,  2808, -4618,  2961, -4618,
    -184, 63047,  3288, 38585, -4618,   415,   441, -4618,  3250,  2811,
   -4618,  2813,  2817,  2820, 14315,    68,  1100,   514,  1312,  1399,
     993,   470,  1039,   518, -4618,  1556,   522,   572,   599,   276,
   -4618,  2821,  2828, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618,  2830, -4618, -4618, -4618,   909,   911,  1356,  1519,
    2831, -4618,  2832, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618,  3304, -4618,  1553,   966,  1614, -4618, -4618,
   -4618, -4618,  2833, -4618, -4618,   258,   281,  1575,  1019,  1081,
    1096,  2834,  1602,  2835,  1098,  1725,  1728,  2829, 35264, 63047,
    3250,  2840,  1606,  1651,  3250,  2841,  1107,  1664,  1731,  1733,
    1795,  1670,  1136,  1771,  1781, -4618,  1248,  1805,  3082,  1786,
   -4618,  1252,  1271,  1797,  1275,  1298, -4618, -4618,  1822,  2842,
    2844,  1313,   308,  3250,  2850,   330,  2837,  2851,  1879, 11563,
   12251, 12939,   202,  1324, -4618,  2855, -4618,  2589,  2865,  2867,
     343,   209,  1906, -4618, 14315,   965,   173, 63047,   174, -4618,
    3030,  2385,   194, -4618, -4618, -4618, -4618, -4618, -4618,  1158,
   -4618,  2872, -4618,  2874,  2532,  2848, 14315,   257,  2848,  3576,
    2343,  2343, 19131,  3647,  2893, 15003,   353, 15003,   353,  2848,
    2848,  2848, -4618, 19131,  2875, 19131, 19131, -4618,  3189, -4618,
   -4618, -4618, -4618,  1199,  2876,   999, 63047, 33928,   608,  2879,
   -4618, -4618, -4618, -4618, -4618,  -146, -4618,  2892,   184, 33928,
   -4618, 13627,  3412, -4618, -4618, -4618, -4618,  1350, -4618, -4618,
    4586, -4618, 33928,  2966,  2977,  2993, -4618, 27910, -4618, -4618,
   -4618, -4618, 27910,    27, -4618, 63047, -4618,  2988, -4618, -4618,
   -4618,  -205, 31919, 31919, -4618, 31919, -4618, -4618, -4618, -4618,
   -4618,   198, -4618, -4618, -4618, -4618, -4618, -4618,   393,   822,
    3594,  2800, -4618, -4618, -4618, -4618, -4618, -4618, 37263,  1199,
   -4618, 33928, -4618,  3309,    23, 33928, -4618, -4618,  3334,  1199,
   -4618, -4618, -4618, -4618, -4618, -4618,  2902, -4618,   160,   160,
    3178,  1567, 14315,  1350, -4618, 50488, 50488, 33928, 33928, 33928,
     793, 14315, -4618,  2590,  2913, -4618, -4618,  2202, -4618,  3585,
   -4618,  4491, 21883, 51810,  3383,  3396, -4618,  2918, 31919, 31919,
   31919, -4618, 57098,  3406, 10875,  3407, -4618, 52471, -4618,  1199,
    -146,  2929,  2930, -4618, -4618,  3331,   673, -4618,  2934,  2937,
   -4618,  2933,  2938,  2943, 57098, 14315, -4618,  1140, -4618, -4618,
   -4618, -4618, -4618, 19131,  1861, -4618,  1199, -4618, -4618,  1350,
    3432,  1350, 14315,  2942, 63047, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,  3458,
   -4618,  3148,   -66, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
     -15, -4618, -4618, -4618, -4618, -4618, -4618, -4618,  3197,  2857,
    3141,  3144, -4618,   -15,   228, 33928,   -15,   -15,  1199, -4618,
   -4618, -4618, -4618, -4618, -4618,  2954, -4618,  3024, -4618, -4618,
   -4618, 63047,  4007,  3136, -4618,  2967, -4618, -4618, -4618, 33928,
   -4618, 70979, 63047, 63047, -4618,  2968, -4618,  3448, -4618,   107,
    -203,   590,  1948, -4618, 63047, 63047,  1948,  1948, 63047, -4618,
   -4618,   994,  3265,  3268, -4618, -4618, -4618, -4618,  3070,  3070,
   -4618, 24561, -4618, -4618,  3033,  3399, -4618, 63047, -4618, -4618,
     930, -4618, -4618,  3442, -4618, -4618,  3269, -4618,  2984, -4618,
   14315, -4618, -4618,  1815, -4618, -4618,   116,  1768, -4618,  -146,
    -146,  3311, -4618,  1350,  3133,  3137,  3139,  3140,  3149,  3167,
   -4618, -4618,  1350,  1350, -4618, -4618,  -146, -4618,  1264, -4618,
   -4618, -4618, -4618,  1402, -4618,  -146,  -146, -4618,  2256, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618,   340, -4618,   289,  1192,
   47183,  3039,  4039, -4618, -4618, 33928,  3293, 33928,  3485, -4618,
    3565, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618,  3015, -4618, -4618, 14315,  3112, -4618, -4618,  2838, -4618,
    3026,  3032,  3034,  3035,  3036,  3041,  3042,  3048,  3050,  3057,
    3061,  3062,  3066,  3069,  3071,  3074,  3077,  3080,  3093,  3095,
    3096,  3097,  3098,  3107,  3105, -4618, -4618, -4618,  3100, -4618,
   -4618, -4618,  -146,  -146,  -146,  -146, -4618,  2273, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618,  3402,  2698, 63047,  3094,
   -4618, 38585, -4618, -4618,  -223, -4618,  3091, 17067, -4618,  3109,
   -4618, 14315, -4618, -4618, -4618,  1871, 14315, 14315,  3619,  3231,
   -4618, 53132, -4618, -4618, -4618, 14315, -4618, 14315, -4618, 14315,
   14315, 14315, 14315, 53132,  3231, 14315, -4618,  3115, -4618,  3548,
    3549, -4618, -4618, -4618, -4618, 14315, -4618, 14315, -4618, 14315,
   14315, -4618, 14315, -4618, 14315, -4618, 14315, 14315, 14315, 14315,
    3411, 14315, 14315, -4618, -4618, 19131, -4618,  3121,  3134, -4618,
   -4618, -4618,  3135, -4618, 14315, -4618, -4618, -4618, -4618, -4618,
   14315, -4618, -4618, 14315, -4618, 14315, -4618, 14315, 14315, -4618,
   14315, 14315, -4618, -4618, -4618, 17755, 14315, 14315,  3138, -4618,
   -4618, 14315, 14315, 14315, -4618, 14315,  2404, 14315,  2484, 14315,
    2515, 14315, -4618, 14315, -4618, -4618, -4618, -4618, 14315,  1931,
    2995,  2202,  3145, -4618,  1742, -4618,  3147,  1425, -4618,  3201,
   -4618, -4618, -4618, 53793, 14315, -4618, -4618, -4618, -4618, -4618,
   19131,   365,  3150, 19131, -4618,  3576,  3566,  3566,  2610, 14315,
     257,  3576, 63047, 14315,  3160,  3166, -4618, 14315, 63047, -4618,
   -4618, -4618, 51810, -4618, 53793, 50488, -4618, -4618, -4618,   184,
    1861, -4618,  3168, -4618,  1199, -4618,  3152, -4618, -4618, -4618,
    2902,    75,  3161,  3169, -4618, -4618, -4618, -4618, -4618, -4618,
    1812, -4618, 47183,  3839, -4618,  3162, -4618,  3170,  3275,  3276,
    3277, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618,  2857, 70979,  2590, -4618, -4618,  3173, -4618, -4618,
    2826,  3070,  3203,  3573,  3789, -4618, -4618, -4618, -4618, 70979,
   70979, 14315,  3196, -4618, -4618, -4618, -4618, -4618,  2995,  3312,
   -4618,  3871,  1199, -4618,  3287, -4618, -4618, -4618,   275, -4618,
   -4618, -4618, -4618, -4618,   794,  1570, -4618,  3209,  3209, 29915,
   -4618, -4618, -4618,  3380, 63047, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618,  3222, -4618, -4618,  3498, 50488, 47183,
    3689,  3690,  3693, -4618,  6721, -4618, 50488, -4618, -4618, -4618,
   -4618, -4618,  3314,  3315,  1619, -4618, -4618,  3638,  3456, -4618,
   -4618, -4618,  -146,  1199, -4618,  2716,  3223, 25230, -4618,  1335,
   -4618, -4618,  1199,    92, -4618, 49166,  3729, 49166, 49166, -4618,
   -4618,  3536, -4618, -4618,  3432, -4618,  2800,   228, -4618, -4618,
     -28,  3083, -4618,  -128,  3245,  3651,  3664, -4618,  3531,  1004,
    3531, -4618, -4618,  3245, 35264,  -223,  2961, 68996, -4618,  1814,
   -4618,  3916,  2202,  3591, -4618, -4618,   125,  3932, -4618,  3039,
   63047,  3259,  -100, -4618, -4618, 63047,  3739,   476,   476,  3554,
   33928, 33928,  5290, -4618, -4618, -4618, 53793,  3262, -4618, -4618,
   -4618, 14315, -4618,  3433, -4618, -4618, -4618,  3330, 14315,  3899,
    3728,  2857, -4618, -4618,  1199, -4618,  3270, -4618, -4618, -4618,
   -4618,  1207, -4618, -4618, 52471, 49827, -4618, -4618, -4618, -4618,
    3843, -4618,  3844,   286, -4618, -4618,  3475,  1183, -4618,  1350,
    1350,  1350,  1350,  2202,  1350,  1350,  1849, -4618,  3475,  3475,
     277, -4618,   212, -4618, -4618, -4618, -4618,   -30, -4618, -4618,
   53793,  3384,  3385, -4618, -4618,  3386, -4618, -4618,   178, -4618,
    2864, -4618,  3305,  -146,  3893,  3559,  -146,  -146,  3893,  -146,
    3560,  3562,  -146,  -146,  3381,  3834,  -146,  3709,  3403,  2785,
    3711,  -146,  3570, -4618,  3408,  3846,  -146,  -146,  -146,  -146,
    -146,  3893,  3577,  3939,  -146,  -146, -4618,  -146,  3579,  3578,
     221,  3581,  3582,  -146,  -146,  -146,  -146,   859, 63047,  -146,
    -146,  3584,  -146, -4618, -4618,  5455, -4618, -4618, -4618, -4618,
   -4618, -4618,   672, 32592, -4618, -4618, -4618, -4618,  -146, -4618,
     223, -4618,  3533, -4618,   433, 54454, 69657,  3316,  3317, 59081,
    1199, 70979, 14315, -4618,  3321,  3324,  3332,  2202,  2202,  1350,
    1350,  1335,  1350,  2202,  1350,  1350,  1350,  1350,  1350,  1350,
    1350,  2202,  2202,  1350,   902,  1626,  1350,  2202,  5836, -4618,
    1350,  2995,  3475,  3475,  2258, -4618,  3794,  -146, -4618,   187,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
    3326,  -223,  2800,  1444,  2800,  3339, -4618, 15003,  1924, -4618,
    1199, 14315,  1199,  2408, -4618,  3336,  3336,  3336, -4618,  3338,
    3340, -4618,  3336,  3762,  3336,  3764,  3341, -4618, -4618,  3344,
    1852,  2552, -4618,  1854,  2580,  1941,  3346,  3349,  1742, -4618,
   14315, 14315,  1969,   378,  2005,   -50,  2021,  2043,  1331,  1381,
     389, -4618,  2104,  2115,  4191, -4618, -4618,  2119,  2127,  2129,
    2197,  2216,  1409,  2230,  1888, 15003,  2248,   419,   405, -4618,
    2262,  1428,  1433,  2267, 14315,  2272, 14315,  2293, 14315,  2295,
    2327,  2334,  3348,  3348,   200, -4618,  3350, -4618, -4618, -4618,
    3352, -4618,  3251, -4618,  2754,  3147,  3354,  3528, -4618,  1207,
    1815, -4618,   965, -4618,  3351,  1199,  3355, -4618, -4618, 14315,
   -4618,   236, -4618, -4618, 19131,   407,  3358, -4618,  3628, -4618,
    1199, -4618, -4618,  3361,  1742, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, 13627,  3363, -4618,  3597, -4618, -4618,  4177, 27910,
   -4618, 63047,  -202,  3652,  3373, 39246, 47183, 47183, 47183,  3370,
   -4618, 65691,  3666, 33928, -4618,  3815, -4618, -4618, -4618, -4618,
   63047, 72962, 72962, 72962, 72962, 63047, 19131, -4618,  4011,  3379,
    3388,  3415,  3391, 50488,  3707, -4618, -4618,  3604, 35264, -4618,
    3393, -4618,  3393,  1502,  3398,  1895,  3586, -4618, -4618, -4618,
    3400, -4618,  1897, -4618, 21883,  3877,  2892, -4618, 47183, 47183,
   47183, -4618, -4618,  3404,  3413,   162,  3641, -4618, -4618, -4618,
   -4618, 10875, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618,  2857, -4618, -4618, -4618, -4618, 49166, -4618,
   -4618, -4618, -4618, -4618,   -15, -4618,  3424, -4618,  3414, -4618,
    3416,  -193,  1425, -4618,  -223,  2647,   157, -4618, -4618, -4618,
    3836,  3531,  3531,  3245,  3838,  2700,  3425, -4618,  -146, -4618,
    2936,  3461, -4618, 63047,  3429, -4618, -4618, 47183, -4618,  3639,
   -4618,  1021,  3445, 63047, -4618,  4013, -4618, -4618, -4618, -4618,
   -4618, 33928, -4618, -4618, 33928, 28579, -4618, -4618,  3718, -4618,
    4400,  2381, -4618, 24561,  1199,  3449,  1348,  3784,  3453, -4618,
   -4618,  1199, 14315, -4618,  3484, -4618, -4618, 55115, -4618, 39907,
     978, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618,  1402, -4618, -4618, -4618,   340,
   -4618,  3552, -4618,   186, -4618, -4618, -4618, -4618,   429,  2202,
    2202,  2202,  1626,   -42, -4618,  2864, -4618, 33260,  1948, -4618,
   -4618,   360, -4618,  1948,   206,   206,  3898, 59742, 35932,   874,
    1335,  2202,  1787,  2202, 60403,   874,  1350,  1350,  2381,  -146,
    2202, -4618, -4618,   842,  3869,  1484,  3712,  1787,  1787, -4618,
   53793, 63047, -4618,  -146,  1171,  2202, 61064,  1335,  1335,  1787,
     874, 35264,  2620,  3199, -4618,  1350,   874, -4618, -4618, -4618,
   -4618, 33928,   874,   874,  3366,  3226,  3347,  3602, -4618, -4618,
   -4618,  2202,  3199, 60403, -4618, -4618,  8384, -4618, -4618, -4618,
   29247, 63047,   357,  3684, -4618,  3459, 43878,  3473,   103,   374,
    3561,  1833, -4618,   172, -4618, -4618, -4618,  3934,  3478,  1761,
   -4618,  3477, -4618, 60403, -4618,  3483, -4618,  3487, -4618, 66352,
    1199,  2202,  2202,  2202, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, 63047,  3475,  2698, -4618, 38585,  2800,  3269,
   -4618, -4618,  3566, -4618,  1199, 14315,  1048, -4618, -4618, -4618,
   -4618,  1142, -4618, -4618, -4618,  3788, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618,  2914, -4618, -4618,  3231, -4618,
   -4618, -4618,  3489,  3566,  3566, -4618, -4618, 14315, -4618,  4127,
    3669, -4618, -4618, 14315, 14315, -4618, 14315, -4618, -4618,   285,
    3494,  3524, -4618, -4618, -4618, -4618, -4618, 14315, -4618, -4618,
    3566, -4618, 14315, -4618, -4618, 14315, -4618, 14315, 14315, -4618,
    2342, -4618,  2364, -4618,  2373, -4618, -4618, -4618,  2995,  3496,
    3902, -4618, -4618, -4618,  2995,  3695, -4618, -4618,  2995,  2202,
   -4618,  2781,  2754, -4618,  3499,  -179, -4618, -4618, -4618, -4618,
   -4618,  3567, 63047, -4618, -4618,  1918, -4618, -4618, 14315, -4618,
    4139,  3790, 55115, -4618, -4618, -4618,  1335,  4010,  3894, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618,  3973, -4618, -4618, -4618, -4618,
     590,   590,   590, 13627,  2447,  4040, -4618, -4618, -4618,  3815,
    3915, -4618,   111,  3512, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618,  3514,  3516, -4618, -4618, -4618,  3576,  3911,  3787, -4618,
   -4618,  2995, 63047, -4618, -4618, -4618,  3518, -4618,  -146, 13627,
    3209,  2647, -4618,    85,  1502, 35264, -4618, 39907,  1397,  2472,
   -4618, 63047, -4618, 47183,  2918,  2918,  2918, -4618, -4618, -4618,
   -4618, -4618, -4618, 25230, 57098, -4618, -4618,  2857, -4618,  1350,
    2520, -4618,  3724, -4618, -4618,  3201,  1207,  2967,   965, -4618,
    3245,  3936,  3938, -4618,  3245, -4618, -4618, 35264,  2800, 13627,
   -4618, -4618, -4618, -4618, -4618, 63047, -4618, -4618, -4618, -4618,
    3677, -4618,  1804,  3821,  3555, -4618,  3534,  3535, -4618, 35932,
   33928,  3527,  3539,  3540, -4618, -4618, -4618, -4618,    70, -4618,
    6826, -4618, 49827, -4618, -4618, 14315, -4618, -4618, -4618, -4618,
    3542,  1611,  1348, 14315, 63047, -4618, 61725, -4618, -4618, -4618,
   -4618,  1447, -4618,  3541, -4618, -4618, -4618, -4618, -4618, -4618,
    1350, -4618, -4618, -4618, -4618, -4618, -4618,   820, -4618, -4618,
     103, -4618, -4618,   874,  3544,  3955,  3956,   206, -4618,  1948,
   35932, -4618,  1948,  1948,   103, -4618, -4618, -4618,   131, 60403,
   -4618, -4618, 35932, -4618, -4618, -4618,  3550, -4618, -4618,  2995,
   -4618, -4618, 49827,  1350, -4618, 35932,  1787, 63047,  3964, 35932,
   35932, -4618,  3587,  1350, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, 35932, 60403,  3556, -4618,  1348, -4618, -4618,
   -4618, -4618, -4618,  2039, -4618, 60403, -4618, -4618, 60403, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618,  3563,  3382,  2246, -4618,
    3564, -4618, 63047, -4618, -4618, 33928, -4618,  7894, 63047, -4618,
   -4618, -4618, -4618, 63047,  4220, -4618,  3813, 14315, 14315,  3860,
   63047,  3880, -4618,  4178, -4618, -4618,  4025,  4071, 63047,  7918,
    4072,  4074, -4618,  3595, -4618, 59081,  3692,  1939, -4618, -4618,
    1971, -4618, -4618,  1982, -4618, -4618, -4618, -4618, -4618,  3091,
   -4618,  3995,  1515,  1199,  3599,  3600,  3601,  3607,   226,  1990,
    3608, -4618,  3336, -4618,  3338, -4618, -4618, -4618,  4232, -4618,
   -4618,  3336,  4036, -4618, -4618, -4618, -4618, -4618, -4618,  3613,
   -4618,  3614,  3615,  2391, 14315,   213,  3617,  2441,  1469,  2014,
    3951,  4028, -4618,  3861, -4618,  2446,  1542,  2452,  2459,  2471,
    2494, -4618, -4618, -4618, -4618, -4618,  3622, -4618, -4618,   578,
   -4618,  3623,  2984, -4618, -4618, -4618,  3251,  3201, -4618, -4618,
    2032, 14315,  4258,  1087, -4618, -4618,  2054, -4618, -4618,  4293,
    3917,  3657,  3657,  3657,  2060, -4618, 70979, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618,  4055, 63047, -4618, 63047,  3631,  1717,
   -4618,  2063, -4618, -4618,  3632, 35264, 13627,  3633,  3634, -4618,
    3330, -4618, -4618, -4618,  1397,  3630,  1207,   116,  1207, -4618,
    2781, -4618, -4618,  2918, -4618, -4618, -4618, -4618, -4618, -4618,
    2472, -4618,   965, -4618, -4618, -4618,  3055,  3686,  3245,  3245,
    3598,  3697, 14315,  3648, -4618,  3269, -4618, -4618,    67, -4618,
    3646,  3649, -4618, -4618,  1350,  1242, -4618, -4618,   338,  3831,
   53793,  3650, 63047, 63047,  3653,   788, -4618, 29247, -4618,  4320,
   -4618, -4618,  4269,  1348, 14315,  3661,  3662, -4618, -4618, -4618,
   14315, -4618, -4618,  1199,  4327,  3663, -4618, -4618, -4618, 40568,
    1768,  3541,  3665,  3847, -4618, -4618, -4618,  4169, -4618, 14315,
    1948, -4618, -4618, 35932,  3720,   861, 35932, 35932,  4173,  4223,
    4225, -4618, 35932,  1253, 63047, -4618,  3328, -4618, -4618, 35932,
    3550, -4618, -4618,   227,  3779, -4618,   357, -4618, 35264, -4618,
   -4618, -4618, 63047, -4618, 33928, -4618, -4618,  3678, -4618,  3336,
    3336,  3336, -4618, -4618,  3336, -4618,  3338,  3935,  3679,  3338,
    3338, -4618, -4618, -4618, -4618, -4618, -4618,   226,   774, -4618,
   -4618,   226, -4618, -4618, -4618,   190,  1475,  3338, -4618, -4618,
   -4618, -4618, -4618,  3681, -4618,  3336,  3336,  3336, -4618, -4618,
     226,  3336, -4618,  3336,  4301, -4618,  3338,  -180,  3336,  3336,
    3336,  3336,  3340,  3694, -4618,  2076, -4618, -4618,  1199,  3566,
    4281, -4618, -4618,  3859,  1350,  4216, 63047,   176, -4618, -4618,
    3328,  4254,  3451, -4618, -4618, -4618, 70979, -4618,  2202, -4618,
    2202, -4618,  2202, 46522, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618,   234, -4618, -4618, 53132,  4353, -4618,  4012, -4618, -4618,
   -4618, -4618, -4618,   226, -4618, -4618, -4618, -4618,  3713,  1348,
   -4618, -4618, -4618, 14315, -4618, -4618,  4045,  4214, -4618, -4618,
   -4618, -4618, -4618, -4618,  3715, -4618,  2202,  3269, -4618, -4618,
    3719, 14315, -4618, -4618,  3716,  4418, -4618,  1335,  4260, -4618,
   -4618,  2605, -4618, -4618, -4618, -4618, 13627, 70318, -4618,  4133,
    3830, -4618, -4618, -4618,  3731,  3871, 63047, -4618,  3787, -4618,
   -4618, -4618, -4618, -4618, -4618,  1207, -4618, -4618, -4618, -4618,
   -4618, -4618,  2984,  2781, -4618,  3727, -4618,  3785, -4618, -4618,
   -4618,  3791,  1199, 63047,  3995, -4618,    69, -4618, -4618, 63047,
    7918, -4618, -4618, -4618, -4618,  3732,  3734, -4618, 63047, -4618,
   -4618, -4618,  4032,   374,  4029, 63047,  2097,  1348,  3742,  2102,
   -4618,  3330, -4618,  5455, -4618, -4618,  -209,  1180,  4137, -4618,
    1199, -4618, -4618,  1348,  3745, 63047, -4618, -4618,  1207,   153,
    1207,  3738,    12, -4618, 35932,   583,  2498, 35932,  3720,  1321,
     476, -4618,   476, -4618, -4618, -4618, -4618, 21195,   357, -4618,
   -4618, -4618, -4618, -4618, 33928, -4618,   874, -4618, -4618,  3550,
     794,  3746, 63047,  4104, -4618, -4618, -4618, -4618, -4618,  1294,
   -4618,   213,  1294,  1294, -4618,  2599, -4618,  3792,   226, -4618,
   -4618,  3793, -4618, -4618, -4618,  1294,  2555,   213,   226, -4618,
   -4618, -4618, -4618,  1294, -4618, -4618,  3405,  3888, -4618,   226,
    4353,   226,  4353,  1294,  1294, 63047, -4618, 63047, -4618,  2647,
   -4618, -4618, -4618, -4618, -4618,  2130, -4618, -4618, -4618, -4618,
   43217, -4618, 14315, -4618, -4618, -4618, -4618, -4618,  2647, 67013,
   -4618, -4618, -4618,  4259,  3944,  3958, -4618, -4618, -4618, -4618,
    3760, -4618, 14315, -4618,  2506, -4618, -4618, -4618,  3766,  2857,
    3449, -4618,  4467,  3954,  2966,  2977,  2993,  4022,  4276, -4618,
    4030, -4618,  4402,  4067, -4618,  2605, -4618, -4618,  3841, 33928,
   -4618, -4618,  3786,   121, -4618, -4618, -4618,  3330,  2984,  3724,
   14315,  3795, 14315,  3796,  2147, -4618, -4618, -4618,   206,   206,
   -4618,    69,  3797,  3986, -4618, -4618, -4618,  1662, -4618, -4618,
    3860,  3800,  2194,   307, 63047, -4618,  4092,  1760, -4618, -4618,
    3718, -4618,  4426,  4427,  4318,  4435,  1180, -4618,   545, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618,  4226, -4618, -4618, -4618,
   -4618,  1768,  4301,  2995,  3787, -4618, -4618, -4618, -4618,   476,
   -4618,  3803, -4618,  3804,  3805,  3806,  1626,  1626, 14315, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618,  4234, -4618, -4618,
    2213, -4618,   167,  4102, -4618,  3827,  3873, -4618,  2224, -4618,
   -4618, -4618, -4618, -4618, -4618,  1350, -4618,  4222, -4618,  2555,
   -4618, -4618,  4227,  4118,  -146,  2226, -4618, -4618, -4618, 53793,
   21195,  4487, -4618,  3876,  4371, -4618,  4485, -4618,  3683, -4618,
   -4618,  3840, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618,  1010,  3961, -4618, 70979, -4618, 63047, 62386, -4618, -4618,
   36600, -4618, -4618, -4618,  4308, -4618,  1199, -4618, -4618,  4337,
    2781, -4618, -4618,  1348, -4618, -4618,  1207,   141, -4618,  4499,
     175, -4618, -4618,  1123, -4618, -4618, -4618, -4618, -4618, 35264,
    2961, 19131,  3949, 63047, -4618,  1582,  2310, -4618,  3251, -4618,
    1199, 63047,  1199, 63047, -4618,  4316,  4316, -4618, -4618, -4618,
   -4618, -4618, -4618,  1833, -4618,  1402,  2125,  1350,  -146,  4113,
    1005,   307, -4618, -4618,  -146,  1348,  3849,  1005,  1760, -4618,
   -4618,    70,   213,   213,  4478,   213, -4618,  4479,  4488,   545,
   -4618,  3330,  1207, -4618, -4618, -4618, -4618,  2239,  3851,  3858,
   -4618, 63047,  3863, 63047, 63047, 14315, -4618, -4618,  3865, -4618,
    3867, -4618, 63047, -4618, -4618, -4618,   262, -4618, -4618, -4618,
     226,   213, -4618, -4618, -4618, -4618, -4618, 44539,   226, -4618,
   -4618, -4618,  4167,  3907,  3868, -4618,  4171, -4618,  3872,  3901,
   14315,  4395, -4618, -4618, -4618,  2260, -4618, -4618, 43217, -4618,
   -4618, -4618,  2984, -4618, -4618, -4618,  4467, -4618,  4068, -4618,
    4158, -4618,  3878, -4618,  -146, -4618, -4618,  2995, -4618,  2263,
   -4618, -4618, -4618,  3976,  -146,  -146,  4417,  4422,  -146,  -146,
    -146,  -146,  3885,  2310, -4618,  4404, -4618,  2276,  2288,  1238,
   -4618, -4618,  7918,  4066, 33928,  4178,  2290,   476,   476,  1005,
    2125, -4618, -4618, -4618, -4618,  2202,  1859, -4618,  4273,  4562,
   -4618, 45200, -4618, -4618, -4618, -4618, -4618, -4618, -4618,   213,
   -4618,   213,   213, -4618, -4618, -4618, -4618, 63047, 63047,  3891,
    2308, 63047,  2311,  2315,  1512, -4618,  3787, -4618,   683,   683,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618,  3896, -4618, -4618,
   -4618,  1397,  3872,  3892,  4075,   302, -4618,  1199, 14315, -4618,
   -4618, 62386, -4618, -4618, -4618, -4618, 35264, 13627,  2381,  3903,
   -4618, -4618, 63047,  3908, -4618,  1350,  1350,  -146,  -146,  3558,
    3558,  2995, 53793,  4008, -4618, -4618,  -146, -4618, -4618,  4533,
   -4618,  4541,  3909,  3914, -4618, -4618, -4618,  4456, 70979,  4396,
    4450, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618,  2320,  2346, 63047,
    2125,  2361,   307,  1760, 14315,  2367, -4618,  4599, -4618,  1085,
    4218,  4219,  2022, -4618,   763, -4618,   116,  1207,  1207,  3921,
     903, -4618,  4544,  4217,  4545,  1199, -4618, -4618, -4618, -4618,
   -4618,  3949, -4618,  3933, -4618, -4618,   -10, -4618, -4618,  1350,
    1350, -4618, -4618, -4618, -4618, -4618,  2369, -4618, 53793, -4618,
   -4618, 59081, 59081, -4618, -4618, -4618, -4618, -4618,  3684,  2125,
    2375, -4618,  2125, -4618, -4618,   389, -4618, -4618, -4618, -4618,
    3992,  4482, -4618,  3937, -4618, -4618, -4618,   132,  1207,  4003,
   -4618, -4618,  1815, -4618, -4618,  1397,  4228, -4618,  4229,  4131,
   -4618, -4618,  2389, -4618, 18443, -4618, -4618, -4618, -4618, -4618,
   53793, -4618,  4008, -4618,  3943,  2396,  4066, -4618, -4618, -4618,
   -4618,  2125, -4618,   683,   683, -4618, -4618,   132, -4618, -4618,
    4009, -4618,  1207,   116, -4618, -4618, -4618, -4618,  4388,  4269,
   -4618,  3933, -4618,  3945, -4618,  3576,  2310, -4618, -4618, -4618,
   -4618, 72301,  4473, -4618, -4618, -4618, -4618, -4618,  1010, -4618,
   -4618,  4583,  4137, -4618, 18443,  3950, -4618, -4618,  4141, -4618,
     213,  4389, -4618, -4618, -4618, -4618,  4255,  3953,   852,    73,
   25899,  4124, -4618, -4618, 53793, -4618, -4618, -4618, -4618, -4618,
   53793,  2398, -4618, -4618, 35264, -4618, -4618, 70979, -4618, -4618,
   27239,  3965, -4618,  -146, -4618, -4618, 35264, -4618, -4618, 13627,
   -4618, -4618
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    2226,   967,  2075,  2890,     0,     0,     0,   348,     0,     0,
    1167,  2895,   610,    68,  1942,  2069,  2070,  1853,  1883,     2,
       0,  1183,   276,   180,     0,    83,   324,  1885,     0,  2136,
       0,     0,   389,  1183,   731,   508,     0,  2131,     0,     0,
    1183,   393,  1888,  2118,   253,   180,  2895,     0,  2666,  1983,
    2147,     0,     0,     0,  1966,     0,  2750,  1931,     0,   391,
    2230,     0,  3036,     0,     3,     8,    21,     0,    43,    26,
      31,    16,    20,    15,    56,    50,    28,  2892,   320,   321,
     322,   323,    41,   141,    40,    11,    59,    60,    18,    47,
      12,    14,    17,    39,    46,    35,    42,    54,    24,    25,
      32,    48,    64,    22,    61,    57,    23,  2075,    13,    27,
      49,    44,    36,    58,    65,    37,     0,  2227,    55,    38,
      63,    30,    51,    29,     9,    10,    19,    52,    53,    45,
      66,    33,    62,    34,     0,   998,     0,     0,     0,     0,
       0,     0,  1881,  1076,   979,  2961,  2962,  2963,     0,  1185,
    1184,     0,  2226,  1358,  1357,     0,  2895,  2265,     0,  1162,
    1194,  2356,  2358,  2357,  2359,  2360,  2361,  2362,  2363,  2364,
    2284,  2365,  2366,  2367,  2369,  2368,  2370,  2371,  2372,  2285,
    2286,  2287,  2373,  2374,  2376,  2375,  2377,  2288,  2289,  2378,
    2379,  2380,  2381,  2290,  2292,  2291,  2382,  2384,  2383,  2293,
    2385,  2386,  2387,  2389,  2294,  2295,  2296,  2297,  2298,  2388,
    2299,  2390,  2300,  2391,  2392,  2393,  2394,  2395,  2396,  2397,
    2399,  2398,  2301,  2400,  2401,  2403,  2404,  2405,  2402,  2406,
    2408,  2407,  2409,  2410,  2411,  2302,  2412,  2413,  2414,  2415,
    2416,  2417,  2418,  2419,  2303,  2420,  2421,  2422,  2441,  2304,
    2423,  2426,  2425,  2424,  2427,  2428,  2429,  2431,  2430,  2432,
    2433,  2305,  2306,  2307,  2434,  2435,  2436,  2437,  2439,  2438,
    2443,  2444,  2445,  2308,  2309,  2310,  2311,  2440,  2442,  2644,
    2446,  2447,  2449,  2448,  2450,  2312,  2452,  2451,  2313,  2454,
    2453,  2314,  2315,  2455,  2456,  2457,  2263,  2458,  2264,  2459,
    2460,  2462,  2463,  2464,  2470,  2316,  2461,  2465,  2466,  2467,
    2468,  2469,  2471,  2317,  2473,  2472,  2474,  2475,  2476,  2477,
    2478,  2479,  2480,  2481,  2482,  2495,  2496,  2486,  2487,  2489,
    2490,  2493,  2488,  2494,  2499,  2498,  2500,  2501,  2502,  2503,
    2504,  2497,  2484,  2491,  2492,  2485,  2505,  2506,  2483,  2507,
    2509,  2508,  2510,  2511,  2512,  2513,  2514,  2515,  2516,  2517,
    2518,  2520,  2519,  2521,  2522,  2523,  2524,  2525,  2526,  2527,
    2529,  2528,  2530,  2531,  2533,  2532,  2535,  2536,  2318,  2534,
    2537,  2538,  2539,  2540,  2541,  2543,  2542,  2319,  2321,  2320,
    2322,  2323,  2544,  2545,  2324,  2546,  2548,  2547,  2549,  2550,
    2551,  2553,  2552,  2554,  2555,  2325,  2326,  2327,  2328,  2556,
    2557,  2558,  2559,  2560,  2561,  2562,  2563,  2564,  2565,  2566,
    2567,  2568,  2569,  2571,  2570,  2572,  2573,  2574,  2575,  2576,
    2577,  2578,  2329,  2579,  2330,  2580,  2581,  2331,  2582,  2332,
    2583,  2584,  2585,  2586,  2587,  2333,  2588,  2589,  2592,  2590,
    2591,  2593,  2334,  2594,  2595,  2596,  2335,  2598,  2597,  2599,
    2336,  2601,  2337,  2338,  2600,  2340,  2341,  2602,  2603,  2604,
    2339,  2605,  2342,  2606,  2607,  2609,  2608,  2610,  2611,  2612,
    2343,  2613,  2614,  2344,  2615,  2345,  2616,  2617,  2618,  2619,
    2621,  2620,  2622,  2623,  2624,  2625,  2627,  2629,  2628,  2626,
    2630,  2631,  2632,  2633,  2346,  2637,  2638,  2639,  2640,  2634,
    2635,  2636,  2347,  2641,  2642,  2643,  2350,  2645,  2646,  2648,
    2647,  2348,  2349,  2649,  2650,  2353,  2651,  2652,  2656,  2653,
    2665,  2654,  2655,  2658,  2657,  2659,  2660,  2355,  2661,  2351,
    2662,  2352,  2663,  2664,   198,  2270,   182,  2354,  2271,  2283,
     350,   128,  2741,  2740,  1120,     0,  2896,  2897,     0,     0,
       0,  1959,     0,  1881,  1881,  1881,  1879,     0,  1881,  1881,
    1881,     0,  1884,  1881,  1881,  1881,     0,    71,    73,  2080,
     277,     0,     0,     0,     0,     0,  2262,     0,   341,  1891,
       0,     0,  2138,  2154,     0,  2155,  2149,  2738,   326,     0,
       0,     0,     0,     0,     0,   180,  1186,  1128,   326,  1940,
       0,   243,   252,   254,   255,   251,     0,  2897,  2908,  2668,
       0,  2049,   255,     0,   128,  1101,     0,   128,  1967,  1964,
       0,     0,     0,  1940,  2148,     0,  2231,  2228,  3020,     0,
       0,     0,  3016,     0,  3021,     0,     1,     5,     0,     0,
     608,   922,   608,   923,   921,   608,  2963,     0,     0,     0,
       0,     0,  2436,  2311,  2548,  2062,  2074,  2060,  2257,  1267,
    1229,  1220,     0,   970,   999,     0,   975,     0,   973,  2276,
    2275,  2274,   987,   986,   985,   983,     0,   461,     0,   180,
       0,  1078,  2968,     0,   977,     0,  1139,  2064,  2065,  2066,
    2067,  2068,  2071,   372,  2891,     0,     0,   200,     0,   361,
     364,     0,   353,   356,     0,   129,   130,     0,  1165,  1168,
       0,     0,  2900,     0,   611,   146,     0,  1963,  1962,  1961,
       0,  1959,  2357,  2284,  2372,     0,  2216,     0,     0,     0,
    1602,     0,  2290,     0,  2385,  2387,  2294,  2295,  2296,  2297,
    2298,  2301,     0,     0,     0,  1305,  1305,  1305,  1302,     0,
       0,     0,  2410,  2411,  2221,     0,     0,     0,     0,  2212,
       0,  2222,  2311,  2449,  2450,     0,     0,     0,  2214,  2215,
    2456,     0,     0,     0,  2472,     0,  2477,  2219,     0,     0,
    2515,  2517,     0,     0,  2521,  2522,  2523,  2524,  2197,  1360,
       0,  1302,     0,  2211,  2218,     0,  2540,  2205,  2549,     0,
    2554,  2555,     0,  2564,     0,     0,     0,  2586,     0,  2592,
    2590,     0,  2596,     0,     0,  2618,     0,     0,  1302,  2196,
    2637,  2638,  2639,  2640,     0,  2213,  2347,  2220,     0,  2651,
    1305,  1302,  1302,     0,     0,     0,  2659,  2660,  2664,     0,
       0,     0,  2933,  1359,     0,     0,  1563,  1596,  1317,  1323,
    1337,     0,  1409,  1352,  1390,  1391,  1393,  1500,  1392,  1397,
    1398,     0,  1547,  1396,  1854,  2208,  1395,  1394,  2209,  2210,
    1389,  2247,  2270,  2246,     0,     0,     0,     0,     0,     0,
       0,   180,     0,  2045,     0,   180,  1865,  1881,    75,     0,
      77,     0,     0,  2799,  2814,  2815,  1305,  2811,  2816,  2430,
    2307,  2443,     0,  2813,  2805,     0,  2559,  2563,  2809,  2578,
    2581,  2803,     0,  2337,  2622,  2835,  2807,  2812,  2793,  2780,
    2794,     0,     0,  2797,  2801,  2259,  1720,  2753,  2754,     0,
      84,     0,     0,  1893,  1894,  1892,  1074,     0,  3033,  2139,
    2140,  2141,     0,  2158,     0,   370,     0,   336,     0,     0,
       0,   328,   326,   313,     0,   312,   314,  2226,   308,   315,
     316,   317,   318,   319,   309,   310,   382,   311,  2272,     0,
    2273,  1181,   732,   510,   509,    71,  2044,  2043,     0,  2132,
    2909,     0,     0,     0,   326,   382,  1896,  1941,     0,  1895,
    2124,     0,  2122,  2119,  2121,   244,     0,     0,   274,  2358,
    2799,  2563,  2771,     0,  2779,     0,  2903,  2900,     0,   844,
       0,     0,  2691,  2692,  2529,  2549,  2587,  2693,  2634,     0,
       0,  2713,  2667,  2677,  2673,     0,     0,  2005,     0,   844,
    2057,  2006,     0,     0,  2057,     0,  1785,  2047,  2050,     0,
    2695,  2019,   919,   918,   917,  2696,  2043,     0,  1991,  2007,
       0,  1968,  2012,   128,  2697,     0,  2046,     0,  1785,  2057,
       0,  1984,     0,     0,     0,     0,  1290,     0,   250,  1108,
    1108,     0,     0,  1100,  1102,  1103,  1108,  1108,     0,  3034,
    3035,  2751,  1074,   382,     0,     0,  2204,  2202,  2203,  2266,
    3017,  2201,  2200,  3025,  3027,  3013,  3015,  3022,     6,    67,
       0,     0,   180,   180,   142,  1292,  1292,  2963,   608,   148,
     608,   608,   608,   608,  2226,  2077,  1270,  1275,  1229,     0,
       0,  2966,  2967,  2965,   860,     0,  1305,  2277,  2280,  2964,
    2281,   183,   984,     0,   462,   183,     0,     0,     0,     0,
       0,   463,   464,   400,  1882,     0,     0,  1082,  1083,  1077,
    1079,  1081,     0,     0,   980,     0,  2968,  2076,     0,   374,
       0,     0,  1196,  1198,  1197,  1214,   202,   199,   181,     0,
     326,     0,   351,   357,    85,  1122,  1872,  1874,     0,  1169,
    2899,     0,     0,  2901,  2905,   145,     0,     0,     0,  1943,
    1947,  1953,  1957,  1960,     0,     0,  1725,  1412,  1725,  1725,
    1725,  1603,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1725,     0,     0,  1449,  1421,
    1422,     0,  1450,     0,     0,     0,  2223,     0,     0,     0,
       0,  2933,     0,     0,     0,     0,     0,  1568,     0,     0,
       0,     0,     0,  2933,     0,     0,     0,     0,     0,     0,
    1598,  1600,  2246,  1725,     0,     0,  1725,     0,     0,     0,
       0,     0,  1310,  1455,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1725,  1725,     0,     0,  1725,  1463,  2225,     0,
       0,     0,  2224,     0,     0,     0,  2198,  2217,     0,  1466,
    1468,  1467,     0,  1725,  1725,     0,     0,     0,  1415,  1414,
    1416,     0,   734,   733,  2226,     0,     0,     0,  1356,  1355,
    1354,  1353,     0,     0,     0,     0,  1362,     0,  1364,  1366,
    1361,  1363,  1365,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1417,     0,     0,     0,     0,  2199,  1509,     0,
    1859,  1867,  1861,  1880,     0,  2045,  1862,     0,  1871,   475,
       0,  1868,     0,     0,  1855,    77,    72,    78,    74,     0,
    2105,     0,     0,     0,  2099,  2101,  2104,  2100,     0,     0,
    2106,   128,     0,  2102,  2081,  2084,  2091,  1290,  2082,     0,
       0,   275,   278,   280,     0,   283,  2800,  2798,  2832,  2831,
    2836,     0,  2833,  2829,  2792,  2822,  2863,  2826,     0,  2863,
    2828,  2827,  2863,  2823,  2830,  2863,     0,  2795,     0,  1721,
    1722,     0,  2752,     0,  2258,     0,     0,  1075,     0,     0,
    2142,  2143,     0,  1204,  2159,  2160,  2156,  1720,  2739,  2742,
     374,   335,   338,     0,     0,   331,   330,   332,     0,     0,
       0,   223,   327,   390,     0,     0,   519,    70,     0,  1188,
    2282,     0,  1187,  1191,     0,  1126,  1129,     0,   379,   394,
       0,  1899,  1889,  1898,  1636,  2129,  2126,   128,     0,   242,
     267,   262,   270,   264,   266,   265,   271,   272,   273,   268,
     263,   269,   256,     0,     0,  2798,     0,     0,  2795,  2904,
       0,  2906,     0,  2669,  2671,     0,   843,     0,     0,   846,
     848,  1916,  1915,   847,   856,     0,   845,     0,  2728,     0,
    2711,     0,  2698,     0,   852,   854,   853,  2706,   851,     0,
       0,  2682,     0,     0,  2053,  1290,  1290,  2018,     0,   608,
       0,     0,     0,     0,     0,  2031,     0,  1985,     0,     0,
     659,  1787,  2011,     0,  1786,  2051,  2052,  2057,     0,     0,
    2057,     0,  2024,  2047,  2057,     0,  2057,  1980,     0,     0,
    1972,  1977,  1973,     0,  1979,  1978,  1981,  1969,  1970,     0,
    1998,  2026,     0,  2047,  2010,  2017,     0,  1997,  2004,     0,
    2015,  2047,  2047,     0,  2057,  2057,  2057,  1096,  1112,  1094,
    1106,  1107,     0,     0,  1099,  1098,  1965,  1641,   392,   377,
    2229,  2232,  2236,  2240,     0,     0,  3014,  3028,  3012,  3023,
    3024,  3011,     7,     4,     0,   139,     0,     0,     0,   608,
     608,  1292,  2960,     0,  2948,  2955,  2956,  2959,  2998,  2958,
    2957,   608,  2954,  2947,  2950,  2951,  2953,  2952,  2968,     0,
       0,     0,     0,     0,  2063,  2061,  2078,  2079,  1641,  1840,
       0,  1221,  1282,  1259,  1271,  1282,  1727,  1785,  2919,  1270,
    1262,  2946,  2941,  2940,  2943,  2944,  1281,  2945,  1280,  2942,
    2939,  1292,  1276,  1278,  1279,     0,  1222,  1267,   861,   860,
     602,   605,   604,     0,     0,  2279,     0,   976,     0,  2045,
     974,     0,     0,  2045,   411,  2045,   465,  2280,  2862,     0,
    2868,  2850,   968,  1080,     0,   608,   981,   978,  1140,  1141,
    1144,   373,   225,     0,     0,     0,   507,  1214,  1200,  1216,
       0,   203,   205,   362,   326,     0,     0,     0,  1124,  1123,
       0,  1121,  1179,  1177,  1176,  1174,     0,  1175,  1173,  1164,
    1170,  1171,  2898,  2902,  2045,   403,  1949,  1876,  1636,  1878,
    2257,     0,     0,     0,  1955,     0,     0,  1726,  1725,     0,
    1576,     0,     0,     0,     0,  1604,     0,     0,     0,     0,
       0,     0,     0,     0,  1387,     0,     0,     0,     0,     0,
    1530,     0,  1576,  1553,  1306,  1829,  1830,  1814,  1815,  1813,
    1816,  1303,     0,  1817,  1828,  1478,     0,     0,     0,     0,
       0,  1551,     0,  1696,  1697,  1698,  1699,  1707,  1700,  1701,
    1702,  1709,  1714,  1703,  1704,  1710,  1711,  1712,  1705,  1713,
    1708,  1706,  1715,     0,  1695,     0,     0,     0,  1718,  1716,
    1719,  1717,     0,  1569,  1543,     0,     0,     0,     0,     0,
     734,     0,  1596,     0,     0,     0,     0,     0,     0,     0,
    1725,     0,     0,     0,  1725,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1552,     0,     0,     0,     0,
    1550,     0,     0,     0,     0,     0,  1492,  1549,     0,     0,
       0,     0,     0,  1725,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1445,     0,  2249,  2248,     0,     0,
       0,   888,     0,  1411,     0,     0,     0,     0,  2698,  1564,
    1566,  1308,  1307,  1309,  1320,  1313,  1318,  1311,  1315,     0,
    1367,  2364,  1321,     0,     0,  1349,  2933,  1734,  1350,  1335,
    1340,  1341,     0,  1338,  1339,     0,  1343,     0,  1342,  1346,
    1347,  1348,  1351,     0,     0,     0,     0,  1410,  1413,  1747,
    1545,  1546,  1562,  1597,  1292,  2250,     0,     0,   475,  1864,
    2790,   478,   477,  1869,   476,  1917,  2848,  1863,  1084,     0,
      76,     0,  2110,  2093,  2092,  2094,  2098,   128,  2103,  2095,
       0,  2107,  2108,  2410,  2637,  2640,   287,     0,   260,   259,
     261,   284,     0,     0,  2825,     0,  2806,     0,  2810,  2804,
    2808,  2788,     0,     0,  2796,     0,  2834,  2817,  2821,  2820,
    2818,     0,  2819,  2824,  2802,  2268,  1724,  2269,  2444,  2532,
       0,  1727,  2756,   325,   342,  1886,  3032,  2144,  2651,  2145,
    2137,     0,  2157,     0,     0,     0,   371,   337,     0,   329,
     376,   224,   368,   383,   387,   385,  1182,   520,     0,     0,
     531,     0,     0,     0,  2133,     0,     0,     0,     0,     0,
    1130,     0,  1897,  2226,     0,  1875,  1637,     0,  2125,  2127,
    2120,     0,     0,     0,     0,     0,  2852,  2777,     0,     0,
       0,  2907,     0,     0,     0,  2709,  2715,     0,  2708,  2707,
       0,     0,     0,  2730,  2712,     0,     0,  2676,  2716,  2717,
    2720,     0,     0,     0,     0,     0,  2714,  2634,  2678,  2679,
    2684,  2674,  2736,  2737,  2734,  2735,  2733,  2703,  2025,     0,
    2055,     0,     0,     0,     0,  2037,  2029,  2028,  2022,  2030,
    2032,  2023,  2042,  2041,  2040,  1995,  1994,  1797,  1798,     0,
    1796,  1788,  1791,  1795,  1794,  1988,  2048,  2036,  2034,   180,
    2057,  1993,  1992,  2035,  2033,  1974,  1975,  1976,     0,  1785,
       0,  2053,  2027,  2057,  2047,     0,  2057,  2057,  2038,  2039,
    2014,  2016,  1097,  1114,  1113,  1109,  1110,  1115,  1105,  1104,
    1665,     0,  1611,     0,  1613,  1610,  1609,  1608,  1639,     0,
    1640,   326,     0,     0,  2234,  3018,  3026,  3030,   609,   860,
    2786,  2868,   608,  2997,     0,     0,   608,   608,     0,  2949,
     149,   938,     0,     0,   131,  1274,  1272,  1273,     0,     0,
    1852,     0,  1847,  1778,     0,     0,  1243,     0,  1260,  1264,
    1265,  1241,  1728,  1735,  2918,  1271,  1776,  1287,  1268,  1286,
       0,  1277,  1231,  2921,  1223,  1224,     0,  1270,   603,  1917,
    1917,     0,  2278,     0,     0,     0,     0,     0,     0,     0,
     184,   193,     0,     0,   409,   410,  1917,   408,   451,   452,
     455,   456,   457,     0,   458,  1917,  1917,   405,   431,   432,
     435,   436,   437,   438,   439,   401,     0,   406,     0,     0,
       0,  2880,   860,  2969,  2970,     0,   990,     0,     0,  1143,
     221,  1163,  1203,  1195,  1202,  1199,  1214,  1212,  1201,   914,
     913,     0,  1215,   201,     0,     0,   349,   358,   352,   354,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    86,    87,   108,  1873,     0,  1166,
    1178,  1172,  1917,  1917,  1917,  1917,   407,   440,   441,   444,
     445,   446,   447,   450,   448,   449,     0,  2045,     0,     0,
    1944,     0,  2260,  1954,  1641,  1958,  1957,     0,  1474,     0,
    1523,     0,  1525,  1526,  1527,     0,     0,     0,     0,     0,
    1475,     0,  1419,  1476,  1477,     0,  1471,     0,  1472,     0,
       0,     0,     0,     0,     0,     0,  1529,     0,  1304,     0,
       0,  1423,  1424,  1407,  1400,     0,  1555,     0,  1502,     0,
       0,  1560,     0,  1558,     0,  1425,     0,     0,     0,     0,
    1482,     0,     0,  1503,  1599,     0,  1601,  2250,     0,  1535,
    1484,  1430,     0,  1533,     0,  1431,  1504,  1505,  1506,  1554,
       0,  1486,  1487,     0,  1508,     0,  1488,     0,     0,  1491,
       0,     0,  1433,  1539,  1537,     0,     0,     0,     0,  1541,
    1435,     0,     0,     0,  1434,     0,     0,     0,     0,     0,
       0,     0,  1437,     0,  1408,  1538,  1540,  1494,     0,     0,
       0,     0,     0,  1446,   735,  1658,  1238,  1282,  2929,  2930,
    2934,  1401,  2251,     0,     0,  1314,  1319,  1312,  1316,  2933,
       0,     0,     0,     0,  1333,  1332,     0,     0,     0,  2933,
    1734,  1336,  1749,     0,     0,  1519,  1520,  1594,     0,  1860,
    1857,  1870,     0,  1918,     0,     0,  1086,  1085,  1866,  1084,
    1926,  1927,    79,    81,  1925,    82,     0,  2096,  2097,  2090,
    2109,  2085,     0,   279,   288,   281,   285,   286,   282,  2867,
       0,  2866,     0,     0,  2785,  2844,  2847,  2257,     0,     0,
       0,  2760,  2767,  2763,  2768,  2761,  2762,  2766,  2769,  2770,
    2757,  2764,  1785,   326,  2226,  2146,  1205,  1207,  1208,  1206,
    1214,     0,     0,  2745,  2746,  2744,  2743,   333,   374,   326,
     326,     0,     0,  1292,   518,   517,   516,   515,     0,   533,
     513,   521,  2135,  2134,     0,  1189,  1192,  1193,  1137,  1135,
    1134,  1136,  1125,  1131,  1132,     0,  1903,     0,     0,  2226,
    1909,  1890,  1900,     0,     0,  1811,  1812,  1808,  1809,  1807,
    1810,  2130,  2128,  2123,     0,   257,  2778,     0,     0,     0,
       0,     0,     0,  2672,  2226,  2702,     0,   859,   858,   857,
     855,  2729,     0,     0,     0,  2722,  2723,     0,     0,  2699,
    2700,  2701,     0,  2704,  2681,  2682,  2683,     0,  2054,     0,
    1999,  2058,  2059,     0,  2021,     0,     0,     0,     0,  2020,
    1990,     0,  2013,  1971,  2055,  1989,  1727,  2047,  1986,  1987,
    1112,     0,  1095,  1665,  1641,     0,     0,  1631,  1668,     0,
    1668,  1633,  1634,  1641,     0,  1641,  1636,   326,  2233,     0,
    2238,     0,     0,     0,  3029,   140,   860,     0,   144,  2880,
       0,     0,   182,  3006,  2991,     0,     0,     0,     0,     0,
       0,     0,   612,  2267,  1851,  1848,     0,  1841,  1843,  1844,
    1846,     0,  1283,     0,  1833,  1261,  1266,  2910,     0,     0,
    1730,  1785,  1777,  1292,  1293,  1293,  2246,  2923,  2922,  2912,
    2917,  1282,  1253,  1252,     0,     0,   972,   187,   190,   188,
       0,   189,     0,     0,   460,   459,     0,  2045,   453,     0,
       0,     0,     0,     0,     0,     0,     0,   151,     0,     0,
    2045,   433,   412,   413,   416,   417,   418,     0,  2854,  2855,
       0,     0,     0,  2872,  2870,     0,  2871,  2869,  2837,  2851,
       0,   989,  1072,  1917,  1072,     0,  1917,  1917,  1072,  1917,
       0,     0,  1917,  1917,     0,     0,  1917,     0,     0,  1072,
       0,  1917,     0,  1059,     0,     0,  1917,  1917,  1917,  1917,
    1917,  1072,     0,     0,  1917,  1917,   507,  1917,     0,     0,
    1090,     0,     0,  1917,  1917,  1917,  1917,     0,     0,  1917,
    1917,     0,  1917,  1006,  1058,   614,   641,   642,   969,  1005,
    1007,  1019,   503,     0,  1037,  1061,  1062,  1060,     0,  2971,
       0,   992,   994,  1142,     0,     0,   326,     0,     0,  1687,
     204,   326,     0,   355,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1180,
       0,     0,     0,     0,  2045,   442,     0,  1917,   402,   419,
     420,   423,   424,   425,   426,   427,   430,   428,   429,  1877,
    1957,  1641,  1727,  2258,  1727,     0,  1956,     0,     0,  1524,
    1577,     0,  1605,     0,  1404,   818,   818,   818,  1591,   804,
     822,  1584,   818,  1585,   818,  1587,     0,  1582,  1583,     0,
       0,  1369,  1388,     0,     0,     0,     0,     0,  1531,  1528,
       0,     0,     0,     0,     0,  1572,     0,     0,     0,     0,
       0,  1418,  1597,     0,  1514,  1536,  1534,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1542,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   877,   883,   886,   887,   889,   881,
       0,  1496,  1270,  1657,  2935,  1238,     0,     0,  2927,  1282,
    2921,  2931,     0,  2932,   963,  1565,     0,  1330,  1326,     0,
    1324,  1733,  1345,  1344,     0,     0,     0,  1334,  1751,  1750,
    1293,  1510,  1292,     0,  1595,  2252,  1858,  2791,   474,   658,
    2849,  1856,     0,     0,  2088,     0,  2083,  2086,     0,     0,
    2864,     0,  2884,     0,     0,     0,     0,     0,     0,     0,
    2755,   326,  1928,     0,  1214,  1218,  2150,  2748,  2749,  2747,
       0,   366,   366,   366,   366,   523,     0,   532,     0,   544,
       0,     0,     0,     0,     0,  1127,  1133,     0,     0,  1919,
    1907,  1911,  1908,  2226,     0,     0,     0,  1906,  2242,  2241,
    2248,   591,     0,  1693,     0,     0,  2776,  2853,     0,     0,
       0,  2670,  2710,     0,     0,     0,     0,  2727,  2721,  2718,
    2719,     0,  2680,  2686,  2685,  2688,  2690,  1821,  1822,  1820,
    1818,  1819,  2056,  1785,  2009,  2008,  1799,  1790,     0,  1793,
    1792,  1982,  2001,  2003,  2057,  1111,     0,  1118,  1116,  1667,
       0,  2916,  1282,  1666,  1641,     0,     0,  1635,  1632,  1669,
       0,  1668,  1668,  1641,     0,  1615,  1932,  1935,     0,  1614,
    1720,     0,  2237,     0,     0,  3019,  3031,     0,   143,     0,
    3000,     0,     0,     0,   160,     0,   954,   956,   955,   940,
     939,     0,   135,   137,     0,   702,   132,   489,   503,   613,
     616,   849,  1845,     0,  2245,  1779,  1782,     0,     0,  1242,
    2911,  1729,     0,  1731,  1742,  1263,  1285,  1294,  1288,     0,
       0,  1230,   657,   656,   192,   191,   196,   197,  1825,  1826,
    1823,  1824,   466,   479,  1827,   480,   454,   155,   154,   156,
     157,   159,   158,   153,   988,     0,   467,   468,   434,     0,
     414,     0,  2858,  2860,  2843,  2842,  2841,  2838,     0,     0,
       0,     0,     0,     0,  2879,  2881,  1073,   961,   608,  1041,
    1043,     0,   703,   608,   915,   915,   606,     0,     0,  1183,
       0,     0,  1879,     0,     0,  1183,     0,     0,     0,  1917,
       0,  1052,  1001,  1879,     0,  1881,     0,  1879,  1879,  1053,
       0,     0,  1002,  1917,     0,     0,     0,     0,     0,  1879,
    1183,     0,     0,     0,   505,     0,  1183,  1021,  1093,  1091,
    1092,     0,  1183,  1183,     0,     0,     0,     0,   647,   648,
     646,     0,     0,     0,   639,   615,   860,  1003,   504,  1004,
     702,     0,  1087,   680,   705,  2253,     0,  2973,  2893,     0,
       0,   165,  1146,     0,  1145,   236,   235,     0,   227,   304,
     375,     0,   226,     0,  1690,     0,  1691,  1688,  1689,   326,
     359,   113,   117,   109,    93,    94,    89,   121,   122,    91,
      92,    97,    96,    98,    99,   102,   103,   100,    95,   101,
      90,   125,   127,   126,   104,   123,   124,    88,   473,   472,
     471,   470,   443,     0,     0,  2045,   421,     0,  1727,  1776,
    2261,  1948,     0,  1447,  1606,     0,     0,   819,  1578,  1579,
    1593,     0,  1589,   806,   805,     0,   823,  1590,  1581,  1586,
    1592,  1588,  1403,  1420,  1469,     0,  1386,  1470,     0,  1501,
    1406,  1405,     0,     0,     0,  1453,  1480,     0,  1454,     0,
    1570,  1561,  1559,     0,     0,  1427,     0,  1483,  1429,     0,
       0,  1516,  1485,  1557,  1507,  1456,  1489,     0,  1432,  1399,
       0,  1457,     0,  1462,  1460,     0,  1436,     0,     0,  1443,
       0,  1441,     0,  1442,     0,  1444,  1493,  1495,     0,     0,
     888,   874,   875,   876,     0,   878,   880,   882,     0,     0,
    2924,  1292,  2936,  2938,     0,  2916,  1658,  2925,  2920,  1656,
    1652,  1653,     0,  1567,  1322,     0,  1331,  1328,     0,  1325,
       0,  1753,  1294,  1521,  1511,    80,  2112,     0,     0,   296,
     291,   299,   293,   295,   294,   300,   301,   302,   303,   297,
     292,   298,   290,   289,  2865,     0,  2784,  2789,  2846,  2845,
    2868,  2868,  2868,     0,   345,     0,  1887,  1209,  1214,  1218,
       0,  1210,  2161,   334,   339,   369,   367,   381,   384,   388,
     386,     0,   524,   525,   527,  1293,   541,   519,     0,   511,
     514,     0,   523,  1190,  1138,   380,  1904,  1913,     0,  1921,
       0,  2226,  1901,   497,  2226,     0,   591,     0,  1270,  1275,
     507,     0,   258,     0,  2773,  2774,  2772,  2732,  2731,  2725,
    2724,  2726,  2705,     0,     0,  2000,  1789,  1785,  1996,     0,
       0,  1662,  1720,  1646,  1647,  1649,  1282,  1660,     0,  1612,
    1641,     0,     0,  1620,  1641,  1616,  1618,     0,  1727,     0,
    1685,   378,  2239,  1290,  2787,   206,   672,   673,   671,   670,
       0,  3007,     0,     0,     0,   133,     0,     0,   490,   961,
       0,     0,     0,   674,   675,   677,   678,   679,  2161,   502,
     860,   617,     0,  1849,  1842,     0,  1783,  1784,  1781,  1284,
    1292,  1739,  1782,     0,     0,  1269,     0,  1289,  1298,  1297,
    2243,  2250,  1267,  1232,  2913,   152,   415,  2859,  2857,  2856,
       0,  2839,  2875,  2873,  2874,  2877,  1804,     0,  2876,  2878,
       0,   704,   962,  1183,     0,     0,     0,   915,   696,   608,
     961,   916,   608,   608,     0,  1039,  1068,  1069,     0,     0,
     625,   622,     0,   634,  1022,  1013,  1023,  1034,  1036,     0,
     624,   649,     0,     0,   637,     0,  1879,     0,     0,     0,
       0,   619,     0,     0,   668,   669,   667,   643,   650,  1070,
    1071,   620,   621,     0,     0,  1772,  1774,  1782,   627,   626,
    1832,  1831,   636,     0,   623,     0,  1056,  1029,     0,   665,
     663,   660,   662,   661,   666,   664,   638,   629,   628,   631,
     630,   633,   632,   635,   651,  1018,     0,  1072,  1072,  1038,
       0,  2256,     0,  1089,  1040,     0,   681,     0,     0,   655,
     654,   652,   653,     0,     0,  2894,     0,     0,     0,   991,
       0,   168,   166,   176,  1148,  1149,     0,     0,     0,     0,
       0,     0,   222,     0,  1217,     0,     0,     0,   114,   116,
       0,   118,   120,     0,   110,   112,   404,   469,   422,  1957,
    1950,  1800,     0,  1607,     0,     0,     0,     0,   865,     0,
       0,   784,   818,  1380,   804,  1376,  1378,  1374,     0,   785,
    1377,   818,     0,  1383,  1385,  1370,  1371,  1372,  1373,     0,
    1532,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1402,     0,  1512,     0,     0,     0,     0,     0,
       0,  1440,  1438,  1439,   872,  1498,     0,   885,   879,   877,
     884,     0,  1659,  2937,  1240,  2926,  1270,     0,   964,  1327,
       0,     0,     0,  1755,  1522,  2115,     0,  2113,  2089,  2116,
       0,  2882,  2882,  2882,     0,  1924,   326,   341,   344,  1929,
    1211,  1219,  2163,  2162,     0,     0,   528,     0,     0,     0,
     548,     0,   546,   522,     0,     0,     0,     0,  1922,  1910,
       0,  2916,  1902,  1905,  1270,  2250,  1282,  1271,  1282,   596,
    1292,  1638,  1694,  2775,  2687,  2689,  2002,  1117,  1119,  1661,
    1275,  1643,     0,  1651,  1650,  2934,     0,  1608,  1641,  1641,
       0,  1608,     0,     0,  1934,  1776,  1936,  1642,  1682,  2933,
       0,   207,   209,   210,     0,   217,   396,   395,     0,     0,
       0,     0,     0,     0,     0,   484,   481,   702,   483,   598,
     618,   850,  2164,  1782,     0,     0,  1836,  1838,  1740,  1741,
       0,  1736,  1738,  1732,     0,  1743,  1745,  1296,  1295,     0,
    1270,  1232,     0,     0,  2861,  1806,  1805,     0,  1024,     0,
     608,   911,   912,   961,   936,  2253,   961,   961,     0,     0,
       0,  1012,     0,  1169,     0,  1017,   856,   644,  1048,     0,
    1008,  1050,  1051,  1084,     0,   645,  1087,  1010,     0,  1775,
     506,  1009,  1031,  1015,  2108,  1042,  1088,   893,   798,   820,
     820,   818,   746,   745,   818,   754,   804,   800,     0,   804,
     804,   777,   776,   794,   775,   780,   762,   865,   865,   761,
     797,   865,   781,   779,   783,     0,   785,   804,   790,   778,
     782,   799,   709,     0,   796,   818,   818,   818,   758,   795,
     865,     0,   788,   818,   697,   707,   804,   820,   820,     0,
       0,   818,   822,  2255,  2975,     0,  2977,   175,   164,     0,
       0,   993,   995,     0,     0,   996,  1154,     0,   230,   305,
     856,   306,     0,   233,  1213,  1692,   326,   106,     0,   107,
       0,   105,     0,     0,  1945,  1448,   816,   814,   817,   815,
     863,   868,   866,   864,     0,   870,  1580,     0,  1382,  1379,
     786,  1381,  1375,   865,  1473,  1451,  1452,  1481,  1573,  1782,
    1571,  1544,  1479,     0,  1428,  1513,     0,     0,  1490,  1458,
    1461,  1459,  1464,  1465,     0,  1497,     0,  1776,  1655,  1329,
    1752,     0,  1758,  1757,     0,     0,  2111,     0,     0,  2087,
    2885,     0,  2782,  2783,  2781,  2765,     0,   326,   346,     0,
       0,   340,   526,   529,     0,   521,     0,   545,     0,   512,
    1912,  1914,  1920,   499,   501,  1282,   594,   593,   496,   597,
     595,   494,   592,  1292,  1648,     0,  1621,     0,  1625,  1630,
    1626,     0,  1617,     0,  1800,  1686,     0,  1291,  3001,     0,
       0,  2999,   220,   218,   219,     0,   213,   215,     0,   399,
     397,   398,     0,     0,     0,     0,     0,  1782,   959,     0,
     491,     0,  2916,   612,   676,   599,  2226,     0,  2172,  1780,
    1293,  1834,  1292,  1782,     0,     0,  2244,  1225,  1282,  1271,
    1282,     0,  1226,  1267,     0,  1026,     0,   961,   936,  2253,
       0,   682,     0,   686,   688,   607,  1055,     0,  1087,  1014,
    1035,  1057,  1049,  1047,     0,  1046,  1183,  1773,  1030,  1032,
    1130,     0,     0,   897,   821,   749,   744,   759,   757,   808,
     801,     0,   808,   808,   768,   784,   763,     0,   865,   774,
     767,   786,   789,   791,   793,   808,   711,     0,   865,   756,
     755,   765,   752,   808,   706,   698,   824,   802,   787,   865,
     870,   865,   870,   808,   808,     0,  2974,     0,  2972,  2226,
     162,   167,   177,   178,   982,     0,  1155,  1151,  1152,  1147,
       0,   842,     0,   228,   229,   241,   240,   232,  2226,   326,
     115,   119,   111,     0,  1801,  1951,   869,   862,   871,   867,
       0,  1384,     0,  1575,     0,  1515,  1517,   873,     0,  1785,
    1754,  1748,     0,     0,     0,     0,     0,     0,  1767,  1759,
       0,  2114,     0,     0,  2889,  2883,  2887,  1923,     0,     0,
    1292,   534,     0,   551,   550,   547,   590,  2910,  1663,  1720,
       0,     0,     0,     0,     0,  1933,  1674,  1675,     0,     0,
    1680,  1684,     0,     0,   208,   211,  3008,   217,   216,  1292,
     173,     0,     0,   926,     0,   958,     0,   928,   486,   488,
     503,   493,     0,     0,     0,     0,  2165,  2167,     0,  1850,
    1839,  1837,  1737,  1746,  1744,  1246,  1265,  1244,  1234,  1227,
    1228,  1270,     0,     0,     0,  1025,   699,   694,   690,     0,
     937,     0,   684,     0,     0,     0,     0,     0,  2933,   739,
     740,  1054,   737,   738,  1045,   507,  1011,     0,  1016,   640,
       0,   896,     0,   901,   809,   810,   811,   769,     0,   965,
     771,   743,   764,   792,   770,     0,   891,   728,   710,   712,
     837,   714,     0,     0,     0,     0,   766,   753,   831,     0,
       0,     0,   828,     0,     0,   708,     0,   715,   825,   827,
     834,     0,   760,   747,   748,   750,   751,   741,   742,  2254,
    2976,     0,   169,   997,   326,  1150,     0,  1157,   249,   247,
     326,   237,   245,   239,     0,   246,   307,   234,  1802,     0,
    1292,  1946,   807,  1782,  1426,  1499,  1282,     0,  1764,     0,
       0,  1762,  1761,     0,  1756,  1763,  2117,  2888,  2886,     0,
    1636,     0,   542,     0,   556,     0,   577,   495,  1270,  1644,
    1622,     0,  1627,     0,  1619,  1670,  1670,  1681,  2235,  3002,
     185,   214,  2992,   165,   174,     0,   924,     0,  1917,     0,
    1063,   927,   952,   934,     0,  1782,     0,  1063,   929,   951,
     932,  2161,     0,     0,     0,     0,  2166,     0,     0,  2173,
    2175,  2910,  1282,  1255,  1254,  1044,  1028,     0,     0,     0,
     692,     0,     0,     0,     0,     0,  2207,  2206,     0,  1020,
       0,   894,     0,   898,   899,   900,     0,   892,   812,   813,
     865,     0,   730,   729,   713,   836,   835,     0,   865,   833,
     829,   719,     0,     0,     0,   826,     0,  1267,  1235,  2983,
       0,   171,   179,  1156,  1161,     0,  1158,  1160,     0,   231,
     248,  1803,  1952,  1574,  1239,  1765,     0,  1766,     0,  1769,
       0,  1770,  1930,  1938,     0,  2151,  1293,     0,   535,     0,
     538,   540,   554,     0,  1917,  1917,     0,     0,  1917,  1917,
    1917,  1917,   570,   578,   580,     0,  1664,     0,     0,     0,
    1678,  1676,     0,  3009,     0,   176,     0,     0,     0,  1063,
     925,   950,   949,   930,   944,     0,     0,   136,  1065,  1064,
     935,     0,   957,   960,   138,   933,   482,  2170,  2171,     0,
    2168,     0,     0,  2174,  1245,  1233,  1027,     0,     0,     0,
       0,     0,     0,     0,     0,   736,     0,   895,     0,     0,
     772,   966,   841,   840,   838,   839,   773,  1299,   832,   716,
     803,  1270,  1235,     0,     0,     0,  2978,   170,     0,   163,
    1153,     0,   238,  1760,  1768,  1771,     0,     0,   849,     0,
     543,   536,     0,     0,   552,     0,     0,  1917,  1917,     0,
       0,     0,     0,     0,   549,   579,  1917,  1624,  1629,     0,
    1671,     0,     0,     0,  3003,   194,   186,     0,   326,     0,
       0,   150,   942,   941,   134,   931,   943,   953,  1067,  1066,
     948,   947,   945,   946,  2169,  2177,  2176,     0,     0,     0,
     924,     0,   926,   928,     0,     0,   907,     0,   906,     0,
     903,   902,     0,   830,   720,  2979,  1271,  1282,  1282,     0,
    2980,  1267,     0,     0,     0,   172,  1159,  1937,  1939,  2152,
     530,   542,   539,   563,   555,   559,     0,   589,   583,     0,
       0,   585,   586,   584,   581,   574,     0,   572,     0,  1673,
    1672,  1687,     0,   185,   195,  3010,  1292,   178,     0,   924,
       0,   683,   924,   687,   689,     0,  1033,   909,   910,   908,
       0,     0,  1300,     0,   722,   723,   721,   724,  1282,  1247,
    1250,  1237,  2921,  2982,  2981,  1270,     0,  2984,     0,  2178,
     537,   563,     0,   561,     0,   557,   553,   558,   587,   588,
       0,   571,     0,   582,     0,     0,  3004,  2993,   161,   695,
     691,   924,   685,     0,     0,  1301,   717,   725,   727,  1251,
       0,  2914,  1282,  1271,  1256,  1257,  2985,  2986,     0,  2164,
     560,     0,   568,   564,   566,   569,   577,   576,   573,  1679,
    1677,     0,     0,   693,   905,   904,   726,  1249,     0,  1236,
    1258,     0,  2172,   562,     0,     0,   575,  3005,     0,  2915,
       0,  2180,   567,   565,  2994,  2179,     0,  2184,  2989,     0,
       0,  2191,  2987,  2988,     0,  2995,  2182,  2183,  2181,  2186,
       0,     0,  2188,  2189,     0,  2153,  2990,   326,  2190,  2185,
       0,  2192,  2194,     0,  2996,  2187,     0,  1292,  2193,     0,
    1293,  2195
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4618, -4618, -4618, -4618,  1960,  3680, -4618, -4618, -4618,  3667,
   -4618, -4618, -4618, -4618,  3273, -4618, -4618,  1541, -4618, -4618,
   -4618, -4618, -4618,  1696, -4618,   413, -4618,   421, -4618,   422,
   -2557,  -466,  3603, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618,   -72,  1352,  3553, -4618,   303, -4618,   -68,
   -4618, -4618, -4618, -3689,  -191,  -375, -4618,    24,    20,  3530,
    -367, -4517, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -3887, -4618, -4618, -4618,   122, -4618, -4618,  -593, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618,  -140,   457,  2195,
   -4618, -4618, -4618,  4639, -4618,  4069, -4618, -1954,  2594, -4618,
   -4618, -4618, -4618, -4618,  2677, -1893, -4618, -4618, -4618,  1583,
   -4618, -4618, -4618,  -435,  -955,    53, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
     693, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618,  2353, -4618, -4618,  3994, -4618, -4618, -4618,  1563,
   -4618, -4618, -4618, -4618, -4618, -4618, -1337, -4618,  2079,  2080,
   -4618,  2082, -4618,   -35,   582, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618,  3517, -4618, -4618, -4618, -2567, -4618, -4618, -2727,
    2989, -4618, -2057, -4618, -4618, -2137, -4618, -4618, -2015,   711,
   -4618, -4618,  1476,  -339, -4618, -1594, -2179, -2153, -4618, -4618,
   -4618, -2254, -2250,  -772,  2730, -1253, -2598, -4618, -4618, -4618,
   -4618, -4618,   -29,   347, -4618, -4618, -4618,   149,  1813,  2402,
   -4618, -2806, -4618, -4618,   883, -4618, -4618, -4618,  1080,   417,
    1078, -4618,   716,  2655, -1923, -4618, -4618, -4618, -4618, -4618,
   -4618,  -207,    25,  -284, -4618, -4276,   420, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -3070, -4618, -4618, -4618,  -404,
   -4618, -4618,  -351, -4618, -4618,  -384, -4618,  -109,  1480,  1082,
   -4618, -4618,   712, -3039, -4618, -4618,  2518, -1559, -4618,  -623,
   -4618,   376,  1847, -3004, -2177, -4618, -1016, -1015,  -287, -4618,
   -4618, -4618, -4618,  1343, -4618,   669,  1842, -2703, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -2698, -4618, -3924, -4618, -4618,
   -4618, -3520, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4617, -4618, -4618,   150,   -45, -4618,
     112,   884, -4618, -3326,  1258,   588, -4618, -4618, -4618, -4618,
   -1482, -2873, -1045, -2754, -2809, -2082,   558, -4618, -4618,   113,
   -3368, -4103,  -616, -2339, -2640,  -166, -4618, -4618,   124, -3684,
    1970, -4618,   524,  -928, -2899,  1714, -4618, -4618,  1213, -4618,
   -1942,  1212, -4618, -4618, -4618,  1223, -4618,  -264, -4618, -4618,
   -4618, -4618, -3771, -4618, -1712, -2835, -4618, -4618,  4703,  4704,
   -2715,  -204,  -201, -4618, -4618, -4618,   391, -4618, -4618, -2129,
     -80,    45,    54, -2693, -3908,   233, -3565, -4618,   349, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618,  1882, -1232, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -3533, -3194, -4618, -4618,
    1393, -4326, -2259, -2255, -2687,  3710, -4618, -4618, -4618, -4618,
    3643, -2472, -3801, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
    3181,  1206, -4618, -4618,  2075, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618,   386,  2153, -4618, -4618, -4618, -4618,
   -4618,  2481, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
    -121, -4618, -4618, -4618, -4618, -4618,   680,  3043, -4618, -4618,
   -4618, -4618,   -12, -4618, -4618, -4618, -4618,  2728, -4618, -4618,
   -4618, -4618,  3073, -4618, -4618, -4618, -4618, -4618, -4618,  1684,
   -4618,  2201, -4618, -1663, -4618, -4618,  1193,  -149, -4618, -4618,
    3696, -4618,   718, -4618,   -99, -4618,  1763, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618,  2559, -3691, -1691,
   -4618, -1106, -1655, -4618, -4618, -3345, -4618,  3143, -1546, -3427,
    2044, -1339, -4618,  -138, -2723,  1247, -4618,  1435,   790,  5400,
   -4618, -1250, -1246, -4618, -4618,    -2, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618,  2411,  2416, -4072,  -652, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
    1741, -4618, -4618, -4618, -4618, -4618, -4618, -4618,  3479, -1332,
   -4618, -4618, -4618, -4618, -4618, -4618,  -976, -4618, -2293, -4618,
   -4618, -4618, -4618,  -447, -4618,  3588, -4618, -4618, -4618, -2530,
   -1562,  2103,  1623, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
    2116, -4618, -1755, -4618, -3055, -4618, -4618, -4618, -4618, -4618,
     799, -4618, -3317, -4618,  1276, -4618, -4618, -4618, -4618, -4618,
   -4618,  2121, -4618, -4618, -2273,   130, -4618,   306, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618,  -182,   957,  -178, -3257, -1210,
    1832, -4618, -4618, -1438,  3635, -1913, -4618, -4618, -4618,  2313,
   -4618,   885, -4618, -4618, -4618,   480,   490, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618,   584,    51, -4618, -4618, -4618,   730,
   -3315, -2180, -4618,   592, -3582, -1043, -4618, -1022, -4618, -1511,
    1679,   537, -4618,  -574, -1204, -2408, -3270, -2740, -4618,  1486,
    2629, -4618, -4618, -4618,   504, -4618, -4618, -4618,  1617, -4618,
   -1642, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
    -536,  -966, -4618, -4618,  2495, -1173,  -509,  4811,     3, -4618,
   -4618,    21, -4618, -4618, -4618, -4618,  3452,  3409,  2282, -4618,
   -4618, -2902,  2243, -4618,   872, -1013, -1001,  1243, -4618, -4618,
    1245, -3517, -4618, -4618,    31, -4618, -4618, -4618,  1195, -4618,
     -31,  4274,    34, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618,  3125, -1145,  4181, -4618, -4618, -4618, -4618, -4618, -4618,
    2719, -4618, -4618, -4618, -4618, -4618, -4618,  3345,  4292,  -619,
   -1443, -4618,  -862,  2725,  2191,  -952, -4618, -4618, -4618,  3798,
    4296, -4618, -4618,  4813, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618,  2908,   767, -4618, -4618,   627, -4618, -4618,
   -4618, -4618,  3428, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618,  1295,  -190, -4618,   352,
    -211, -4618,   179, -4618, -4618, -4618, -4618, -4618,  -248, -4618,
   -4618,  -253, -4618, -1117,  4096, -1522, -4618, -1369, -2855, -4618,
   -1314,  1716, -4618, -4618, -4618,  2715, -4618, -4618, -4618, -4618,
    1270,  2672, -3162,  -717, -1254, -1295, -2760,    55, -4618, -4618,
    3981,   147,  -472, -1967, -4618,    -6,  -885,  -127,  -585,  -625,
    -910,  3504, -4618,  -565, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618,  2242, -4618, -4618, -4618,  1265,
   -4618,  4329, -4618,  3012, -1472,  4331,  -584,  2815,  2261,  2257,
   -4618, -4618, -4618, -4618, -1986, -4618, -4618,   229, -4618,  2888,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618,
   -4618, -4618, -4618, -4618, -4618, -4618, -4618,  3318,  -486,  -450,
    3440,  4344,  3957, -4618,  3532, -4618, -4618, -4618, -4618, -4618,
    1637, -4618,   439,  2291, -1341, -2762, -4618, -4618,  2651,   737,
   -4618,  1851, -2144, -2591, -4618,  2209,  -841, -4618, -4618,   448,
   -4618, -4618, -4618,  1558,  1093,  4357,  3960, -4618, -4618, -4618,
   -4618, -4618, -4188, -1657, -4618,  -132, -4618, -3130, -4618, -1637,
    1765, -3010, -4618, -2910, -2879,  1282, -1193,  2251,   926, -4618,
   -4618, -2800, -4618, -4618, -4618,    60,  4332,  4333,  4334, -4618,
    -813, -4618, -4618, -4618, -4618, -4618,  -153, -4618, -4618, -4618,
    3875, -4618, -4618, -4618, -4618, -4618, -4618,  3353,  3879, -4618,
   -4618, -4618, -4618, -4618,  3881, -4618, -4618, -4618, -4618, -4618,
    1744, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618, -4618
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    63,   648,  1643,    64,    65,    66,    67,    68,   898,
     899,    69,   900,  1385,  1388,  2001,  2572,  2573,    70,   587,
      71,  1757,  2374,  2375,  3913,  3914,  3907,  3908,  3910,  3911,
    2376,   714,   715,    72,  2772,  4081,  3726,  3727,  2229,   656,
     657,  1119,  2766,  2826,  2827,  1652,  3723,  3889,  4672,  3893,
    4811,  4929,  4733,  2921,  4225,  4673,  4674,   582,  2761,  1717,
    4863,  2290,  4966,  2291,    73,   707,  1177,  1750,  1751,  4070,
    4071,  4072,  4350,  4355,  4356,  4357,  4358,  2926,   962,  2330,
    2927,  3899,  4480,  4487,  4488,  3427,  4680,  4681,  4682,  4485,
    1006,  4683,    74,   613,   614,  1008,  1512,  2016,  1513,    75,
      76,   581,  1411,  1412,  1413,  1414,  2588,  2017,  2583,  2584,
    3612,  3428,  4483,   963,   964,   965,    78,   588,   966,   967,
     968,  1468,   969,   970,   971,   972,  3140,   973,  1464,  3633,
     941,   942,  2613,  3624,  4008,    79,   550,   710,   711,  1756,
    2348,   712,  2349,  2932,  3906,   713,  1179,  2345,  1181,  3637,
     974,  2628,   975,  1460,    80,  1169,  1741,  1742,   976,  1093,
    2221,   995,  2091,  3638,  1473,   977,  2629,  2631,  2630,    81,
     598,   635,   608,  4078,  4362,   683,   684,   725,  2397,   685,
    1195,  1142,  1719,  2315,  2316,  2832,  2833,  2968,  2969,  2970,
    2307,  2308,  2309,  2386,  2387,  2388,  2297,  2298,  2299,  1723,
    2294,  2295,   686,  1143,  1153,  2310,  2311,  2312,  2974,  2390,
    2391,  2392,  2393,  2313,  1993,  2314,  3302,  3266,  4373,  4371,
    4372,  3267,  4088,  2660,  4537,  4030,  4031,  3738,  3739,  3408,
    3843,  2337,    82,   601,   984,  1476,  2080,  3150,  2081,  3152,
    3641,  3642,  3643,  2634,  2635,  4531,  2639,  3149,  4712,  5021,
    4839,  4840,  3645,  4838,  3649,  4021,  4022,  4316,  4533,  4716,
    5026,  4943,  5086,  5024,  5082,  5025,  5084,  5145,  5123,  5124,
    4954,  5036,  5037,  5090,  5126,  4852,  4853,  4854,  3164,  3668,
    3669,  4325,  4036,  4328,  4376,  2755,  1709,  1710,  3795,  1111,
      83,  3268,  2904,  3269,  3270,  3866,  2906,  2907,  3108,  1569,
    3856,  3827,  3720,  3732,  3733,  3734,  3735,  3736,  4601,  4772,
    4603,  4604,  4769,  4899,  4768,  3737,  4454,  3788,  3366,  3341,
    3342,  3413,  3877,  4204,  4456,  4446,  4638,  4639,  4655,  5004,
    4656,  5067,  5106,  5107,  4640,    84,   600,  1321,  4609,  4610,
    4611,  4230,  4206,  4207,  4208,  4209,  4210,  4211,  4212,  4662,
    3492,  3493,  4627,  3487,  3488,  4425,  3497,  4657,  4658,  4659,
    4660,  4231,  4254,  1533,  1534,  3743,  1546,  1547,  2688,  2118,
    2689,  1713,  4255,  4256,  4499,  3559,  4284,  3565,  3566,  3567,
    3064,  3065,  3066,  3067,  3068,  2522,  4642,  3876,  4423,  4620,
    4623,  4787,  5000,  3789,  3343,  3792,  1070,   658,  3344,  3345,
    4869,  4740,  4747,  4870,  4748,  4741,  4401,  2769,  4871,  4872,
    4873,  4750,  4743,  3259,  4366,  4367,  3781,  3583,  4628,    85,
     143,  2322,  1134,  1145,  1141,  1166,   692,  2326,  1146,  2922,
    3421,  4474,   673,  2908,  4416,  4133,  4420,  2909,  3805,  2910,
    4395,  4595,  2911,  4152,  4418,  4617,  3806,  3807,  2912,  2913,
    2914,  4877,  4878,  4879,  3346,  1448,   690,   691,  1159,  1160,
    1161,  2568,  3874,  3391,    86,  2207,  2202,    87,  1083,  1084,
    1085,  1617,  1618,  2205,  2206,  2732,  3218,    88,   717,  1761,
    1486,  2089,    89,   993,  2652,  2653,  2654,  3155,    90,  1168,
    1738,  1739,  2329,  3424,  3896,  4226,  4479,  4677,  4475,  4815,
    4816,    91,   719,  1188,    92,   555,  1769,  1770,  1771,  2379,
      93,  1475,   151,    94,   992,  1479,  1482,  1483,    95,   706,
    1171,  1172,  1173,  1174,  2333,    96,  2061,  2616,  2617,  2618,
    2619,  1747,  2928,  1748,  1749,  2342,  3631,    97,   671,  3764,
    1129,  1130,  4112,  4113,  4923,  4924,  3076,  3077,  1681,  2787,
    4387,  4761,  5005,  5110,  2801,  4762,  5112,  1682,  1683,  1126,
    1127,  2265,  1685,  1686,  2246,  1701,  1702,  1703,  4329,  2268,
    2269,  1614,  4552,  2270,  3287,  3757,  5003,  1232,  1228,   857,
     858,   859,   860,  1333,  1334,  4643,   861,  1343,  1953,  3506,
    3945,  3946,  3947,  3948,  4263,  1804,  1805,   862,   863,   864,
     865,   866,   867,   868,  1984,  3530,  3531,  3964,  2554,  2555,
    2556,   869,  2435,  3512,  2450,   870,   871,   872,  4104,   873,
    1327,  1939,  1864,  3956,  3520,  4268,  1789,  2411,  3006,  3928,
    3007,  3008,  3103,  2524,  1259,  1260,  1212,  2418,  1795,  2212,
    2213,  2214,  2215,  2216,  4062,  4063,  4540,  4337,  4542,  4341,
    2742,  2743,  2095,  2096,  2217,  2218,  2219,  2220,  3220,  4052,
    3579,  3987,  3081,  3072,  3073,  3074,  3221,  3222,  4049,  4050,
    4718,  2733,  3224,  3691,  3230,  4860,  4549,  4550,  4963,  4962,
    4551,  4345,  4346,  4067,  4068,  3435,  3436,  3437,  3172,  1853,
    1854,  1862,  1441,  1442,  1790,  2263,  2788,  3284,  3753,  2544,
    2790,  3751,  4101,  3755,  4105,  4106,  1981,  2552,  3098,  3591,
    3993,  4294,  4295,  4518,  4698,  4699,  4704,  2917,  3835,  3836,
    2791,  1687,  2781,  3275,  3748,  1572,  1573,  1688,  2171,  3206,
    3207,  4244,  3778,  4486,  3069,  3995,  3303,  1823,  1824,  3842,
    2258,  3278,  4095,  4096,  4097,  2250,  2251,  2777,  2778,  2779,
    1689,  2252,  3271,  4092,    98,   562,    99,  1999,  3106,  1383,
    2580,  1186,  1491,  1776,  1777,   888,   689,   576,   100,   589,
    2614,   101,   609,  2093,   946,   998,  1492,  1493,  2661,  3158,
    3165,  2662,  3160,  3656,  3657,  2563,  2564,  3161,  3659,  4027,
    4004,  2575,  3626,  4309,   102,   633,  3708,  3236,  3237,  4832,
    4833,   999,   103,   561,  1199,  2982,  4495,  1782,  2399,  4691,
    1200,  1201,  2402,   730,   731,   104,  1088,   629,  1596,  1597,
    1598,  2189,   105,   621,  1071,  3203,  3687,  2165,   988,  1380,
    1577,  1074,  1578,  2150,  2710,  1557,   106,  1125,  1124,   702,
     107,   108,   665,   152,  1675,   109,   901,  1404,  2012,  3116,
    3117,  3597,  1405,  1406,  2581,  2577,  3996,  3997,  4299,   110,
     610,  1003,  1004,  1497,  1495,  2673,  2098,   111,   603,   989,
    2084,   112,   592,   951,  1452,  2060,   113,   114,   115,   953,
    3632,  4938,  5079,   596,  2063,  1456,  4089,  4378,  4576,  4577,
    4579,  4759,  4760,  5119,  5157,  5168,  5161,  5171,  5172,  5175,
    5181,  5182,   875,  1100,  1101,   876,  4613,   877,   878,   879,
     116,   117,  1095,   637,  1630,  1631,  2751,  2224,  2749,  1632,
    3167,  3168,  3276,   880,  3169,   881,  3782,  1187,  1779,   585,
     545,   680,  1102,  2774,  2046,   883,   979,  1137,  1480,  1728,
    1729,   547,   548,   549,   118,   620,  1018,  2113,  1523,  1032,
    1551,  1541,  1550,  2138,  2705,  2141,  2706,  2707,  3683,  3194,
    3684,  3195,  1077,  2134,  1524,  3196,  1525,  2127,  2128,  2129,
    2130,  3188,  1539,  2124,  2147,   119,   954,   554,  1458,  1459,
    2625,   120,   632,   121,  1443,  2051,  2052,  2610,  3129,  2611,
     122,  1012,  1013,   123,   929,  2758,  2594,  1989,  1140,  1990,
    2035,   932,  1417,   933,   934,  1432,  1426,  1435,  1429,  3328,
    2847,  2848,  2598,  1997,  1730,  2107,  2840,  3770,  1731,  2026,
    2590,  2591,  2321,  4524,  3335,  2851,  4302,  3616,  4525,  4526,
     124,   156,   125,  4967,   557,   722,  1194,  1520,   126,   127,
     128,   129,  3279,  3280,  3290,  5073,  5138,  2275,  2276,  1690,
    3082,  2799,  2527,  2528,  2529,  2530,  1323,  1324,  3083,  3571,
    3572,  1704,  1114,  1663,  1654,   144,   145,   146,   147,  1163,
    1164,  3417,  3884,  4215,  4468,  4469,  4809,  4926,  5164,  5165,
    1656,  3253,  4864,  5132,  5158,  5177,  1657,  1658,  1659,  3715,
    4553,  4862,  5043,  5131,  1660,  3252,  4075,  4730,  4968,   130,
    1103,   645,  1641,  1636,  1638,  2227,  2754,   131,   132,   133
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     546,   155,  1073,   697,  1030,  1069,   693,  1470,  1676,   579,
    1935,  1535,  1538,   682,   578,   994,  2277,  1926,   586,  2064,
    1684,   599,  1552,  2400,  1574,  1604,   544,  1822,   607,  1112,
     602,   705,  1113,   980,  2266,  1898,  1035,  2341,   615,  1470,
    2019,   618,  2259,   980,  1871,   615,  1574,  2260,  1832,  2274,
    1139,  2173,   634,    77,   884,   885,   886,  1784,  1925,   890,
     891,   892,  2172,  2915,   894,   895,   896,  2916,  2011,   616,
    3578,  1261,  3288,  1465,  1466,  3260,  3304,  2018,  2139,   584,
    3384,  1481,  3009,  1207,  2338,  1944,  2792,  2759,  3304,  3304,
    1138,  3693,  1567,  1952,  3016,  2031,   930,  3111,  1954,  1955,
    3464,   668,  1958,  1959,  1960,  1961,  4005,  1963,  1964,  1966,
    1968,  1969,  1970,  1971,  1972,   874,  2247,  1605,  1711,  1712,
    3752,  1379,  1626,  2066,  2582,  2300,  1994,  3496,  2685,   674,
     930,   546,   931,   546,   681,   687,  2256,  2835,  2612,  2261,
    2180,  3017,  4005,  2975,  3982,  2905,  3880,  2976,  2675,  3339,
    2278,   159,   681,  3414,  3340,   698,  2637,   676,  1080,   678,
    2193,  1087,   667,  2836,  3921,  3293,  1014,  3348,  2196,  2197,
    4102,  3352,  3580,   699,  3217,  4369,   721,  3822,  3703,  3943,
    2389,  1185,  3368,   700,  1189,  3894,   701,  3489,  3490,  4477,
    1328,  1329,  4066,  3498,  3379,  3500,  3327,  1318,  1319,  1320,
    4221,   593,  1740,  3581,  3226,  1439,  3768,   694,  1606,  1362,
    2082,  1328,  1329,  3235,  2305,  4635,  2151,  2152,  2972,  1328,
    1329,  3561,  3304,  3304,  1708,  4124,  1328,  1329,  2416,  2519,
    3316,  3317,  1791,  1792,  1793,  2632,  -492,  1433,  2566,  2305,
    1708,  3388,  3476,   623,  2973,  3494,  3679,  4555,  4250,  1811,
    2965,  2831,  1096,  4441,  4714,  4149,  4250,  -971,  1708,  3334,
     597,  3662,  2735,  4251,  3204,  3320,  3741,  1430,   606, -1683,
    2382,  4546,  1555,  -600,  3573,  1328,  1329,  4252,  1096,  3114,
    4455,  2566,  2775,  2818,  4140,  4129,  2072,  1881,  1039,  1020,
    1885,  -601,   937,  1328,  1329,  1555,  1039,  1020,  1328,  1329,
   -2916,  3202,  1655,  1664,  2305,  1763,  2231,  1190,  1439,  1363,
    3418,  2032, -1683,  4146,  4547,  4012,  1909,  1910,  4767,  1537,
    1914,  2245,  2717,  1450,  4040,  1328,  1329,  5085,  2622,   626,
    1363,  3960,   594,  1620,   986,  4612,   949,  1928,  1929,  2837,
    3562,  3776,  4825,  1600, -2840,  4415,  4965,  1328,  1329,  4717,
    3519, -1723, -2834,  1737,  1639, -2045,  4012,  5012,  1328,  1329,
    1328,  1329, -2257,  5166,  3470,  3471,  3872,  2305,  5013,  1081,
    1531,  1328,  1329,  -500,  2967,  4783,  4827,  3592,  4053,  3219,
     696,  1758,  1328,  1329,  1196,   996,  3251,  1679,  1384,  3321,
    4737,   134,  2131,   980,   980,  1328,  1329,   980,  3887,  1579,
    4908,  1328,  1329,  1367,  1571,   590,  1328,  1329,  1585,  2511,
    2736,  2586, -2916,  1679,  2323,  1571,  3674,  3675,  3676,  4388,
    3296,  4884,  1328,  1329,  1328,  1329,  3784,  2737,  3080,   980,
    1764,  2543,  1328,  1329,  1765,  1575,  1328,  1329,  2203,  2296,
    2738,  1571, -2928,  1097,  1098,  3985,  3422,    60,  1766, -1957,
    5108,  2593,  4411,  2757,  3615,   928,  2339,  4562,  1328,  1329,
     940,  2210,  4554,  4458,  2296,  2211,  2302,  3234,  2132,  1097,
    1098,  4558,  1996,  2378,  2623,  3661,  4359,  3775,   153,   154,
    2340,  2320,  3154,  2562,  2320,  -500,  1648,  1328,  1329,   928,
    5136,  1576, -1645,   160,  2520,  1669,  2841,  1670,  1671,  1672,
    1673, -2460, -1957,  1345,  3486,  3414, -2928,  2401,  3423,  4321,
    3793,  4379,  2114,   136,   591,  2496,  1680,  2225,  2027,  2306,
    2204,  2395,  1830,  2739,  2587,  3256,  1532,  1680, -2933,  2296,
    2135,  1328,  1329,  3448,  1499,  1328,  1329,  1629,  2033,  1328,
    1329,  1261,  2324,  4974,  2306,  4013,  4481,   296,  3297,   298,
    1375,  3888,  3873,  1680,   687,   997,  2073,  3322,  4398, -2758,
    2383,  4403,  4404,  3785,  2257,   687,  1991,  1640,  1167,  5167,
    1727,  4702,  1330,  4894,  1082,  1331,   681,   935,  4612,  4965,
    4738,   681,  4784,  4093,   947,  1767,  4013,  1754,  3798,  1328,
    1329,   708,  2296, -1723,  4360,   157,  5014,  1599,   990,  3561,
    1609,  1330,  1621,  1988,  1331,  4705,  2105,  4614,  1330,  2306,
     681,  1331,  4408,  4332,  1031,   980,  1328,  1329,  2786,  4419,
    2718,   987,  2803,  3542,  1089,  2175,  1191,  2120,  2178,   991,
    4995,  1531,  2181,  2273,  2184,  3777,  1366,  1364,  1556,  2800,
    2683,  1759,   950,  1109,  2264,  4057,  4130,  2740, -2834,  4061,
    3414,  3961,  1762,  2835,  3136,  2160,  1991,  1330,  1364,   939,
    1331,  1556,  2199,  2200,  2201,  1574,  2567,  1601,  4765,   681,
    4288,  1144,  2306,   938,  5081,  1330,  3304,  1451,  1331,  2836,
    1330, -2758,  2034,  1331,  2624,  1649,  2133,  4503,  3563,   681,
    1768,  4785,  2020,  1711,  1712,  1957,   157,  2842,   716, -1683,
     668,  4548,  1178,  3257,  2300,  4333,  -498,  1330,  1348,  2567,
    1331,   668,  1978,  1155,   668,  2975,  2545,  1144,  3562,  2976,
    2417,  2741,  2834,  1431,  1202,  3419,  2074,  2548,  2905,  1330,
    2551,  3115,  1331,  2019,  3304,  1994,  4090,  4996,   948, -1723,
    1330,  3205,  1330,  1331,  3779,  1331,   595,  2195,  3918,  1066,
    4344,  2726,  3766,  1330,  4637,   624,  1331,  1016,  4715,  4964,
    -492,  1175,  4032,  2542,  1330,  1378,  1434,  1331,  1798,  1799,
    2018,   716,  3983,  3318,   716,  3680,  2083,  1330,  1090,  2663,
    1331,  -971,  1262,  1330,   720,  4565,  1331,  1532,  1330,  4527,
    2972,  1331,  4269,  2389,  2377,  3786,  4250,  -600,  1857,  1470,
    1099,  4582,  3306,  2971,  1330,   897,  1330,  1331,  1873,  1331,
    1875,  4251,  2409,  3213,  1330,  -601,  2973,  1331,  1330,  3769,
    3389,  1331,  1888,  1889,  1890,  4252,  1306,  3472,   981,  3752,
    4442,   625,  4597,  1897, -2840,  1992,  1039,  4435,  1332,  1066,
    1330,   627,  2984,  1331,  2633,  4253,  3699,  1998,  1325,  1326,
    2210,  1727,  4437,  4253,  2211,  2239,  3895,  1440,  1361,  1332,
    4478,  1091,  2531,  4900,  4041,  4902,  4903,  1332, -2840,  1330,
    1760,  4734,  1331,  3475,  1332, -1723,  3917,  3564,  1370,   546,
    1372,  1760,  1374,  1144,   546,  1580,   681,  2512,   546,  4909,
    3079,   930,  2106,  3390,  1586,  2521,  1415,  1536,  3319,  1540,
    4763,  4324,  1543,  1548,  2468,  1371,  4538,  2075,  2472,  2433,
    1376,  4043,  1650,  1330,  1381,  1377,  1331,  1330,  1570,  1382,
    1331,  1330,  4018,  1332,  1331,  1992,  1328,  1329,  1328,  1329,
    1760,  2054,  1138,  1444,  2838,  2008,  2154,  2498,  4383,  2076,
    4410,  1332,  3800,  2451,  2452,  2839,  1332,  2301,   668, -1723,
    1461,  2090,  4122,   155,  1467,  1760,  2179,  3135,  3701,  3702,
    1440,  1760,  2434,  4739,  1610,  4361,  2453,  2454, -2460,  3831,
    3832,  1330,  4509,  1332,  1331,   697,  3258,  1653,  1653,  2649,
    2649,  3078,  3787,  1328,  1329,   681,   668,  1991, -2759,  4987,
    4988,  3240,   668,  4991,  2497,  1332,  1138,  2845,  1330,  4331,
    4593,  1331,  2394,  4338,  4339, -2817,  1332,  3398,  1332,  1457,
    1328,  1329,  1031, -2821,  3461,  2500,  2501,  2853,   681,  1332,
     681, -2820,  1162,   681,   681, -2460,  2234,  2235,  2517,  2518,
    1332,  2099,  1357,  1358,  1359,  1360,  1328,  1329,  2238,   681,
    1934,   930,  4132,  1332,  1454,  2302, -2758,  1484,  2162,  1332,
    3088,  3089,  5162,  1494,  1332,  4138,  1328,  1329, -2818,  4142,
    4143,  4997,  1727,  3516,  3517,  2695,  3563,  2319,  1527,  3479,
    1332,  3481,  1332,  3414,  3525,  3526,  -487,  2115,  4641,  1651,
    1332,  5050,   668, -2758,  1332,   887,  4544,  2292,  2886,  1633,
    3544,  3545,  3587,  3588, -2819,  1157,  4757,  2280,  1328,  1329,
   -2824,  2407,  4091,  1611,  3543,  1645,  1332,  2691,  1644,  2163,
   -2759,  4823,  2325,  1328,  1329,  1328,  1329,  1328,  1329,  1677,
    2419, -2968,  4115,  4258,  1328,  1329,  2408,   698,  1612,  2248,
    1408,  4758,  4261,  4048,  2395,  1332,  1646,  1647,  5001,   617,
    2835,  2889,  3580,   157,  2978,   699,  2722,  2915,  2615,   681,
     668,  2916,  3716,  1328,  1329,   700,  2425,  3367,   701,   546,
     930,  2466,   668,  4882,  3339,  4998,  2836,  1574,   149,  3340,
    4056,  1684,  4136,  3581,  4060,  2644,  2645,  1668,  3924,  1332,
    3494,  3368,   668,  1332,  5064,  1736,   551,  1332,  -487,   980,
    1679, -2916,  1780,  2173,   556,  2173,  2173,  2278,  4999,  2420,
    1940,  3399,    14,  4116,  2427,  3682,  3209,  3210,  2430,   630,
     716,  1732,   716,  1711,  1712,  3949,  1328,  1329,  5058,  3034,
    3672,  2975,  1487,  2300,  1787,  2976,  2582,  3650,  2720,  2905,
     604,  1858,  4828,  1262,  1859,  2108,  1977,  1332,  2834,  2650,
    2650,  2725,  4569,  1158,  2728,  2729,  2293,   558,   158,   704,
     928,  3122,  1262,  1778,   150,  3291,  1992,  2736,  2431,  2841,
    1455,  2986,  4590,  4822,  1332,  1328,  1329,  4594,  1528,  1328,
    1329,  4794,  3924, -2072,  2737,  1147,  2320,  -701,  2804,  2805,
    3462,  5163,  3717,  2021,  3214,  2432,  4536,  3231,  1328,  1329,
    3087,  3141,  1328,  1329,  2121,  2816,  2972,   580, -2675,  2792,
    2663, -2817,  2878, -2916,  2828,  2829,  1927,  2164,  1330, -2821,
    1330,  1331,   669,  1331,  1763,  1328,  1329, -2820,   631,  1000,
      27,   681,  2973,  2550,  2122,   619,  5065,  3414,  1462,  1148,
    1328,  1329,  5134,  5135,  2696,  1949,  3092,  3093,   638,  3496,
    4693,  1328,  1329,  4572,  4829,  3166,  3086,  2535,  1328,  1329,
    3925,   559,  4427,  4573, -2818,  4428,  3096,   681,  3406,  1982,
    1788,  1740,   628,  1985,  1926,  1330,  3824,  2257,  1331,  3746,
    2389,   681,  3414,  1328,  1329,  2971,   681,   668,  2249,  4412,
    1661,  2960,  2961,  2962,  2963,  2020,  4448,  4449,  4450,   639,
   -2819, -2072,  1330,  4253,  4453,  1331, -2824,   636,  1328,  1329,
     928,   727,  4463,  1262,   681,  4424,  4424,  2125,  1973,  -485,
    5066,  2254,  3494,  4436,  4202,  3494,  3494,  3570,  1330,  3478,
    5018,  1331,   681,  1149,  2651,  2651,  1328,  1329,   647,  3463,
     681,  3926, -2045,  3494,  3147,  2296,   646,  2050,  1330,  1764,
    1001,  1331,   668,  1765,  3925,  1328,  1329,  4452,  3825,  1926,
    1328,  1329,  3494,  4424,  4424,  4461,  4462,  1766,  2068,  4959,
    2842,   728,  2109,  2569,  4857,  3197,  4858,  5059,   640,   668,
    4402,  3629,  2525,   649,  3718, -2759,  4001,  4002,  4003,  1760,
    1330,   668, -2675,  1331,   668,  3762,  1328,  1329,  3747,   670,
    3238,  1207,  2123,  1463,  3232,  1330,  4352,  1330,  1331,  1330,
    1331,  4830,  1331,  1494,  2255,  4353,  1330,  1131,  4960,  1331,
     681,   681, -2759,  2236,  2111,  1945,  2296,  4807,  2819,   928,
    1002,   681,  2116,  2671,  5072,  3929,  2301,  4913,   560,  1328,
    1329,   681,  3198,  3577,  4292,  1330,  1328,  1329,  1331,    42,
    2536,  2578,  2240,  2136,  1031,  1494,  1229,  1230,   716,  3826,
    2702,   672,  3878,  2648,   546,   546,   546,   668,   546,   681,
     668,  4664,  1991,  4666,  2302,  3920,  2843,  2174,  2741,  3130,
    1328,  1329,  2176,   546,  1332,   681,  1332,  1489,  4574,   546,
    2155,  2156,  2157,  4293,  2159,  3696,  3719,  1328,  1329,  2282,
    1574,  2126,  1328,  1329,  1767,  2439,  2056,  2440,  1330,  2177,
     668,  1331,   729,  2767,  1678,  2183,  2034,  1650,  1787,  2760,
   -2072,  4981,   675,  2764,  2765,  2394,  2331,   930,  2158,  1328,
    1329,  2161,  3977,  1328,  1329,  2977,  3979,  2768,  2747,  2254,
    1309,  1332,  3791,  3791,  4592,  2820,  1974,  3199,  4961,   677,
     681,   681, -2072,  1991,   716,  1150,  1236,  1330,  4354,  2526,
    1331,  1330,  2447,  2676,  1331,  3110,   980,  4580,  1332,  3927,
    1975,  2194,  3763,   681,  2241,  2242,  2243,   668,  1328,  1329,
    1330,  4413,  5190,  1331,  1330,  1628,  3695,  1331,  2424,  5031,
    5032,  1328,  1329,  2557,  1332,  1571,  2173,  1328,  1329,  3191,
    2558,    57, -2290,  1298,  4808,  2077,  1424,  1330,  2078,  1768,
    1331,   153,   154,  1860,  1332,  2456,  1861,  4600,  1946,  4602,
     681,  2395,  1330,  1571,  4831,  1331,  2978,  1162,  3200,  1151,
      60,  1152,  2255,  1330,  2426,  2834,  1331,   688,  2244,  1192,
    1330,  2182,   136,  1331,  3157,  1727,   641,   681,  2334,   668,
    1711,  1712,  2844,  1237,  1810,  1066,  1332, -2452,  3285,  1132,
    1302,  4776,  4777,  3927,   668,  1330,   764,  3469,  1331,   642,
    2845,  1332, -2072,  1332,  2537,  1332,  4575,  2457,  1996,  1574,
   -1292,  1787,  1332, -2479,  1651,  1202,  3182,  2406,  1133, -2599,
    1330,  2538,  2458,  1331,  2462,  3620,  3621,  3622,  1328,  1329,
    1299, -2072,  1470,  2474,  2640,  4065,   643,  1680,  1328,  1329,
    2336,  1332,  3710,  1328,  1329,  2019,   695,  1787,  1330,  4779,
    2821,  1331,   943,  4076,  1328,  1329, -2968,  4624,  1193, -2072,
    1815,  2822,  2480,   771,  1787,  1680,  1066,  1330,  2797,  2823,
    1331,  1992,  1330,   552,  1976,  1331,   553,  4077,  3480,  1328,
    1329,  2641,  2018,  4737,  3586,  4842,  2553,  1303, -2290,  2663,
     148,  3900,  3347,  2079,  2846,  3350,  3351,   644,  3353,  1724,
    1725,  3356,  3357,  1926,  1332,  3360,  4843, -2290,  1330,  2304,
    3370,  1331,  1262,  2467,  3901,  3374,  3375,  3376,  3377,  3378,
    5074,  2971,   703,  3382,  3383,  2792,  3385,  1816,  1328,  1329,
    1615,  3091,  3394,  3395,  3396,  3397,  1328,  1329,  3401,  3402,
    3646,  3404,   709, -2452,  3658,  3416,  4770,  1880,  1775,   944,
     708,  1330,  1992,  1332,  1331,  4497,  4352,  1332,  1330,  4625,
    1817,  1331, -2452,  1328,  1329,  4353,  1715,  -212,   787, -2479,
    4599,  2532,  1947,  2824,  2483, -2599,  1332,   157,  2487,   149,
    1332,  1328,  1329,  1884,  4314,  2421,  3201,  3070, -2479,  1948,
    2817,  3166,  1330,  5083, -2599,  1331,  5087,  2488,  1328,  1329,
    1913,  2490,  4626,  1332,  2798,  3135,  3474,   552,  3062,  1330,
     553,  3431,  1331,  1616,  1330,  1678,   928,  1331,  1332,  3891,
    2559,   668,   945,  3013,  2491,   721,  1328,  1329,  3018,  1332,
    2690,  4315,  1818,   668,  3063,  3892,  1332,  2422,  1366,  2495,
     296,  1330,   298,  3025,  1331,  1330,   668,  1727,  1331,   804,
    2513,  1415,  3878,  4038,   723,  1419,  1415,  3523,   724,  2589,
    3131,  1332,  1328,  1329,   889,   150,  2597,  2597,  1679,  2597,
     887,  4039,  2825,  4738,   902,   718,   726,   994,  1328,  1329,
     552,  2441,  2560,   553,  3044,  2301,  1332,   893,   980,   936,
    1330,  5143,   681,  1331,  3177,   668,  1571,  3304,   952,   668,
    1328,  1329,  5111,  1330,   980,   980,  1331,  3524,  4354,  1330,
    3185,  4110,  1331,  1819,  1332,  3791,   930, -1957,  4426,   681,
     681,   668,   668,   668,  2423,  1366,  1926,  2596,  2596,   983,
    2596,  1030,  3186,  1332,  1138,  3537,  1262,   681,  1332,   296,
    1420,   298,  2597,  2597,  2597,  1421,  1031,  2792,  1485,   985,
    3104,   681,  3107,  4939,  3547,  4443,  2620,  1005,  4444,  3548,
    1457,  1328,  1329,  1035,  2780,  4459,  4460,  3837,  1031,  3187,
   -1957,  2557,  1328,  1329,  1332,  2985,  1328,  1329,  4109,  2657,
    2658,  3304,  1484,  2647,  1328,  1329,  1328,  1329,  2714,  1007,
    4054,  1422,  1815,  1079,   716,  4273,  3367,  1086,    60,   552,
    3685,   997,   553,  2596,  2596,  2596,  2028,  1423,  1680,  2029,
    1330,  3865,  2030,  1331,  4972,  4973,  1470,  1332,  3245,  3802,
    1330,  1574,   980,  1331,  1332,  1330,  3661,  1108,  1331,   668,
    3815,  1110,  2394,  2459,  3819,  3820,  1330,  2977,  4994,  1331,
    4245,  3903,  1118,  2719,  2442,  2734,  3833,  1120,  4737,  3304,
    3304,   605,  4045,   668,  1328,  1329,  1633,  2750,  1332,  1816,
    2459,  1330,  2978, -1183,  1331,  3709, -1183,  4279,  2762,   546,
    2643,  1121,   546,  1328,  1329,  1332,  1273,   837,  2446,   612,
    1332,  2428,  2429,  3653,  1122,   681,   612,  1328,  1329,  3311,
    2727,  2784,  1817,  1123,  4051,  2763,  3636,  3636,  3636,  3636,
    2455,  1128,  3688,  1297,  2796,  1328,  1329,  1332,  4098,  4099,
    1330,  1332,  3922,  1331,  2746,  5051,  1310,  1311,  1330,  1328,
    1329,  1331,   939,  2305,  1328,  1329,  1619,  2460,  1135,  1328,
    1329,  2470,  1624,  1625,  1536,  1154,  2708,  4100,  2711,  2448,
    1366,  1820,  1156,  3951,  3952,  1330,  1536,  1165,  1331,  1162,
    1328,  1329,  1328,  1329,   681,  1170,  1332,  1039,  1020,   668,
    1176,   668,  1180,  1330,  1818,  1184,  1331,  3336,  2279,  1332,
    3966,  4287,  2665,  1204,  5100,  1332,  2471,  5102,  3439,  3363,
    1330,  2382,  1197,  1331,  1328,  1329,  1099,  3166,  1369,  2475,
    2663,  1328,  1329,  1205,  3974,  2479,  2382,  1206,  3813,  1328,
    1329,   980,  1208,  3444,  3445,   296,   980,   298,  1330,  3450,
    1926,  1331,  3823,  4323,  4069,  1821,  1209,  3458,  3459,  4327,
    2919,  1328,  1329,  3466,  1104,  1105,  5133,  1106,  1210,  1107,
    1328,  1329,  2980,  4844,  1213,  2983,  1214,  4039,  4738,  2666,
    4330,  4845,  1328,  1329,  1330,  1819,  3084,  1331,  1328,  1329,
    2463,  1366,  1926,  2464,  1878,   681,  2476,  1366,  2477,  1366,
    1330,  1328,  1329,  1331, -2045,  1328,  1329,   681,  1366,  4846,
    2807,  1215,  2667,  1216,  4742,   928,  1332,  3109,  4749,  2814,
    2815, -2045,  1330,  1039,  1020,  1331,  1332,  4023,  1217,  3364,
    1218,  1332,  4259,  3238,  1219,  4390,  2481,  2020,  1328,  1329,
    1220,  2991,  1332,  1328,  1329, -1548,  2482,  5191,  1221,  1328,
    1329,  2486,  2599,  1222,  2600,  1223,  1328,  1329, -2045,  1365,
    2478,  1366,  2489,  1224,  1470,  1691,  1225,  1332,  1328,  1329,
    2484,  1366,  1226,  1345,  1227,  3146,  2339,  3120,  3121,  3242,
    3243,  1328,  1329,  1330,  2668,  1231,  1331,  2492,  2296,  1233,
    2296,  1328,  1329,  1234,  1330,  1328,  1329,  1331,  1330,  1235,
    2340,  1331, -2073,  1328,  1329,  2296,  1330,   681,  1330,  1331,
    1238,  1331,  1328,  1329,  3314,  3315,  1332,  3504,  2429,  3507,
    1366,  1727,  1727,  1727,  1332,  1239,  3099,  2680,  2681,  2682,
    2540,  1240,  3105,  2106,  2106,  2106,   681,  1241,   681,   681,
    4847,  1242,  4037,  1418,  2504,  1243,   980,  4131,  1244,  1328,
    1329,  1332,  3505,  3539,  1366,  1245,   980,   980,   980,   980,
    3664,  3665,  3670,  3671,  1246,  2669,   681,  1247,  2306,  1332,
    1066,  2523,  1248,  1138,  1138,  1138,  1330,  1328,  1329,  1331,
    3508,  1249,  4147,  3989,  1366,  4135,  1332,  4006,  4007,  3483,
    1250,  3054,  4742,  4151,  1251,  1330,  4153,  1252,  1331,  4749,
    4979,  1692,  3714,  4978,  4237,  4238,  3509,  1255,  3094,  1330,
    1256,  2383,  1331,  1820,  1332,  1991,  1257,  1991,  4635,  1263,
   -2073,  4848,  3585,  4139,  4046,  4026,  2383,  1330,  1264,  3272,
    1331,  1373,  1991,  3170,  3515,  3742,  4239,  4240,  3173,  1265,
    4849,  1330,  1138,  1266,  1331,  1574,  1330,  4241,  4242,  1331,
    1332,  1330,   681,   681,  1331,  4248,  4257,  2690,  1536,  1267,
     681,  -700,  1345,  4850,  4429,  1268,  1332,  4432,  4433,  1387,
    3518,  3056,  1330,  1269,  1330,  1331,  1270,  1331,  1348,  4274,
    1366,  1031,  4591,  2977,  1693,  4445,  3521,  5062,  1332,  2174,
    1271,  2174,  2174,  3323,  4568,  3783,  2384,  4289,  1366,  1274,
    3790,  2173,  3058,  1416,  4457,  2305,  1330,  1425,  3522,  1331,
    1926,  2384,  4494,  1330,  4867,  4589,  1331,    77,  1927,  4296,
    4297,  1330,  3812,  1275,  1331,  4305,  4306,  2259,  4317,  4318,
    2665,  1276,  4586,  3838,  3249,  3772,  3773,  3774,  4868,   546,
    1345,  4466,  4467,  1330,   668,   668,  1331,  1691,  1277,  1332,
     681,  3658,  1330,  1278,  3480,  1331,  1279,  3801,  1280,  3803,
    1332,  2382,  4563,  4564,  1332,  3254,  3814,  4567,  4564,  3527,
    1330,  1281,  1332,  1331,  1332,   296,  1282,   298,   681,   681,
    3528,  3828,  1283,  1330,  3532,  2735,  1331,  1330,  3839,  3841,
    1331,  1427,  3533,  2670,  3534,  4675,  4676,  2666,  1066,  1284,
    1066,  3858,  3860,  3862,  4523,  3262,  3263,  3863,  3841,  -890,
    2356,  2357,  4724,  3671,   681,  1066,  4725,  4726,  4270,  1285,
    1330,  1286,  4585,  1331,  4587,  1330,  2370,  1287,  1331,  1288,
    2667,  1330,  1289,  1926,  1331,  1290,  3817,  1291,  1330, -2073,
    1292,  1331,  1332,  4742,  4749,  1293,  3336,  3909,  3912,  3915,
    1330,  1294,  1066,  1331,   980,  2385,  4347,  1295,  3363,  4736,
    4564,  1332,  3535,  1330,  1296,  2967,  1331,  1348,  1300,  4851,
    2385, -2073,  3400,  1330,  3837,  1332,  1331,  1330,  4781,  4782,
    1331,  3536,  1301,  1692,  1992,  1330,  1992,  3415,  1331,  4790,
    4791,  4798,  4791,  1332,  1330,  3538,  1304,  1331,  1305,  3429,
    1308,  1992,  2668,  3438,  4896,  4318,  4520,  1332,  4037,  1312,
     153,   154,  1332,  3541,  3329,  3330,  4764,  1332,  1313,  3331,
    3332,  3333,  2830,  1314,  2786,  4930,  4931,  3546,  4941,  4942,
    2296,  1330,  3549,  2736,  1331,  4835,  1439,  3551,  1332,  2964,
    1332,  4957,  3671,  1315,  2553,  1348,  3307,  3308,  3309,  3310,
    2737,  3312,  3313,  4958,  3671,  4971,  3315,  3931,  3553,  1330,
    3555,  1316,  1331,  2738,  2372,  2373,  1693,  1317,  3364,  1368,
    4636,  1428,  1332,  4990,  4564,  3981,  4992,  4564,  3485,  1332,
    4993,  4564,  1436,  2669,  4389,  5048,  4564,  1332,  1437,  4470,
    1438, -2073,  3556,  1694,  1695,  1696,  1697,  1698,  1699,  3557,
    1355,  1356,  1357,  1358,  1359,  1360,  1445,  3971,  1447,  1332,
    2306,  5049,  4564,  1449,  3932,  2339,  1700,  3933,  1332,  1335,
   -2073, -1723,  1453,  1345,  1471,  3934,  5052,  4564,  2106,  3972,
    1350,  1351,  5056,  4318,  5091,  5092,  1332,  1478,  3973,  2340,
    5101,  4564,  2663,  4856,  1474,  3935,  2739,  1030, -2073,  1332,
    1496,  2383,  1498,  1332,  5120,  5121,  4267,  1991,  1514,  3959,
    1336,  5130,  3905,  5179,  5180,  1516,  3446,  3447,  1138,  3449,
    3705,  3451,  3452,  3453,  3454,  3455,  3456,  3457,  1517,  1035,
    3460,  4719, -1723,  3465,  1518,  2656,  1332,  3468,  3639,  3640,
    1519,  1332,  3936,  1415,  1526,  2589,  4921,  1332,  1549,  1444,
     681,   681,   681,  1553,  1332,  1815,  4272,   668,  1350,  1351,
    1554,  4278,  1916,  1917,  3634,  1337,  1332,  4280, -1723,  3644,
   -1723,  3990,  1558,  4700,  4281,  1571,  2780,   681,  1338,  1332,
    4824,  1581,  1927,  1582,  1587,  4671,  4282, -1723,  1584,  1332,
    2735,  4303,  4304,  1332, -1723,  1583,  4123,  1607,  1262,  4126,
    4127,  1332,   681,   681,   681,  3937,  1608,  4637,  1613,  4283,
    1332, -1723,  1603,  4596,  1622,  1623,  1588,  1634,  3628, -1723,
    2740,  4694,  1816,  3329,  3330,  1635, -1723,  1637,  3331,  3332,
    3333,  3365,  2174,  1642,  1706,  1708, -1723,  1353,  1354,  1355,
    1356,  1357,  1358,  1359,  1360,  1707,  4895,  1332,  1714, -1723,
    -700,  1716,  1718,  1721, -1723,  1817,  1722,  2657,  2658,  1726,
    1734,  2670,  1345, -1723,  1735,  1743,  1744,  3712,  1339,  1589,
    1745,   681,  1746,  3821,  1590,  1332,    60,   546,  1348,  4434,
    4439,  1837,  1755,  4440,  1772,   668,  1773,  1781,   668,  3415,
    1066,  1783,  1363,  1787,  2741,  1794,  5007,   681,  2995,  1813,
    1814,  1825,  4451,  3722,  2659,  1863,  1831,  1877,  1878,  3938,
    1879,  3759,  3939,  3761,  5008,  1353,  1354,  1355,  1356,  1357,
    1358,  1359,  1360,  1895,  2996,  1694,  1695,  1818,  1697,  1900,
    1699,  1906, -1723,    60,  1907,  1987,  1924,  1933,  2736,  1962,
    1995,  1956,  2002,  2003,  4629,  2004,  3725,  1937,  1700,  3728,
    5075,  1986,  2005,  2006,  2007,  2737, -1723,  2009,  2010,  2665,
    4629,  3415,  3840,  3706,  2022,  4501, -1723,  3799,  2738,  2023,
    2024,  3797,  3415,  3809,  2025,  2485,  1992,  2053,  3808,  2057,
    2062,  2997,  1470,  2067,  2998,  2065,  2665,  2070,  2071,  3857,
    2085,  1841,  2999,  2086,   681,  3808,  2087,  3940,  3834,  5068,
    3830,  -702,  2088, -1723,  3845,  1927, -2650,  2094,  1819,  2097,
    3847,  3848,  3000,  2101,  2102,   668,  3336,  4630,  4631,  4766,
    2103,  3216,  2104,  2356,  2357,  1528,  2666,  3808,  3337,  2112,
    4634,  2117,  2140,  2148,  3415,  3871,  1591,  2149,  4647,  2370,
    3882,  1350,  1351,  4307,  1926,  2153,  3885,  2185,  4667,  4668,
    5114,  2739,  2186,  2666,  1559,  -718, -1723,  3808,  2187,  2667,
    2190,  2188,   134,  4648,  3758,  2191,  2192,  1348,  5115,  2208,
    2228,   980,  2222,  2223,  2232,  4336,  3846,  2253,  -702,  2226,
    2237, -1723,  3849,  2262,  3850,  4834,  2667,  4700,  1678,  2272,
    2267,  5069,  5070,  3336,  2281,  3646,  4696,  3916,  1842, -2282,
    2303,  3919,  1845,  2318,  2327,  3337,  5140,  2665,  4649,  1846,
    3859,  2328,  2343,  1592,  1560,  4389,  2346,  1574,  4635,  2344,
    2347,  2380,  3001,  2396,  2398,  2404,  2410,  4397,  2412,  3851,
   -1723,  2668,  2413,  3810,  3811,  2414,  2436,  2437,  -702,  3941,
    4632,  2445,  2459,  2465,   651,  2438,  2443,  2444,  1561,  2449,
    4646,  2461,  5109,  2502,  3852,  2469,  2473,  2493,  2668,  2494,
    1360,  4663,  3844,  4665,  1470,  2499,   135,  2503,  4650,  3942,
    2514,  1340,  1341,  1342,  2666,  2740,  2534,  2372,  2373,  2576,
    2515,  1593,  2516,  1236,   136,  2339, -1368, -1723,  2539,  2549,
    2621, -1518,  3853,  3881,  1298,  2562,  5139,  1847, -1723, -1723,
    1355,  1356,  1357,  1358,  1359,  1360,  3988,  2667,  2565,  2340,
    1302,  2665,  2669,  1328,  1329,  -702,  3759,  2592,  1760, -1723,
   -1723,   651, -1723,  2283,  2627,  2638, -2963,  2664,  2672,  3002,
    1350,  1351,  2677,  2678,  2679,  1815,  1820,  2284,  1440,  2669,
    2684,  2686,  4094,  2692,  2693,  1536,  2694,   650,  4651,  2741,
    2697, -1723, -1723,  2698,  2699, -1723, -1723,  2713,  1849,  2700,
     137,  4797,  2339,  4940,  2701,  4887,  4888,  2715,  4890,  2709,
    2730,  1926,  2721,  4489,  2716,   296,  3644,   298,  2666,  2668,
    2731,  2744,  2753,  2745,  2752,  2770,  2340,  2773,  2771,  3170,
    2782,  4035,  2783,  2789,  3909,  4042,  3912,   681,  3915,  1680,
    2793,   980,  1816,  2813,  4911,  2806,  1594,  1031,  1031,  -890,
    2808,  2667,  4834,  2920,  2809,  1536,  2810,  2811,  1815,  2924,
    1833,  1834,  1835,  1836,  1837,  2850,  2812,  2925,  2934,  2929,
    2966,  1927,  2931,  2735,  2935,  3298,  2936,  2937,  2938,  4073,
     651,  4648,  4508,  2939,  2940,   296,  1595,   298,   138,  4812,
    2941,  3338,  2942,  3415,   668,  4819,  1345,  2981,  2959,  2943,
    2669,  4881,  2665,  2944,  2945,  3861,   681,  4875,  2946,  3758,
    -702,  2947,   980,  2948,  1439,  1562,  2949,  5033,  1982,  2950,
    4108,  -920,  2951,  2668,  3003,  1816,  4649,  1353,  1354,  1355,
    1356,  1357,  1358,  1359,  1360,  2952,  4635,  2953,  2954,  2955,
    2956,  4118,  4984,  1850,  4985,  4986,  3854,  3299,  4117,  2957,
     153,   154,  2985,  2994,  4125,  4084,  2285,  4652,  3298,  2601,
    1852,  2958,  4128,  3808,  2989,  4653,  3415,  1345,  5063,  2666,
    3019,  1838,  1839,  1840,  1841,  2602,   681,  3020,  3021,  3415,
    2670,  3808,  2558,  3415,  3415,  5006,  4650,  -702, -1556,  3035,
    3036,  4937,  3080,  3049,  3113,  3855,  3004,  3415,  3808, -1723,
    3071,  3075,  2667,  3118,  2669,  3090,  4047,  2670,  5125,  3808,
    4636,   653,  3808,  4945,  4946,  3101,  3123,  4949,  4950,  4951,
    4952,  2736,  3102,  3124,  3112,  3119,  3005,   139,  3300,  3133,
    3299,  3125,  4910,  2286,  3137,  1926,  4156,  3138,  2737,   668,
    4916,  2603,  4213,  2604,  3126,  3127,  3128,  4214,  3139,  1926,
    3145,  2738,  3148,  3151,   546,  1926,  3153,  3171,  2287,  1563,
   -1723,  1926,  4229,  3159,  3174,  3175,  3178,  3179,  5125,  3438,
    3180,  3183,  3184,  4107,  2668,  2125,  5173,  2126,  3208,  3193,
    4222,  1842,  1564,  1843,  1844,  1845,  4654,  4114,   653,  3211,
    5183,  3227,  1846,   296,   980,   298,  5173,  -702, -1723,  2210,
    4157,  1348,  5183,   140,  3228,  3229,  3244,  3246,  1565,  3247,
     904,  3300,  3255,  3250,  3261, -1723,  5029,  5030,  3273,  3282,
    3277,  2273, -1723,  4364,  1566,  5038,  3283,  -890,  2670,  2288,
    4137,  3289,  3294,  3295,  2739,  1330,  2605, -2963,  1331,  5113,
    4145,  3324,  3325,  3326,  3336,  3349,  3354, -1723,  3355,  3359,
    3358,  3361,  3362,  3369, -1723,  2669,  3371,  3372,  4340,  3381,
     611,  3373,   652,  3380, -1723,  3386,  3387,  3392,  3393,   141,
    3403,  3433,  1348,  3420,  -702,  3441,  3432, -1723,  3442,  4311,
    1847,  3644, -1723,  5045,  -147,  3473,  3443,  3477,  2405,  1927,
    3486, -1723,  3491,  3499,  3495,  3501,  3502,  4637,  2606,  3503,
     905,  3510,  3558,  5155,  3511,  3576,  3568,   653,  3569,  3575,
    3584,  1344,  3582,  3589,  3590,  2852,  3594,  3596,  3598,  3617,
     142,  2853,  3618,  2854,  3623,  2855,  3625,  2289,   153,   154,
    3630,  3647,  2670,  3648,   907,  4652, -2963,  2856,  3654,  2857,
    1848,  1849,  2633,  4653,   681,  3652,  4368,  4368,  3655,  3660,
     908,  3415, -1883,  3663,  3673,   572,  3301,  3651,  2740,  3677,
   -1723,  3667,  3681,  3666,  1350,  1351,  3689,  4855,  3678,  2858,
    3690,  3692,  2036,  3105,  2859,  2860,  3700,  2037,  3704,   980,
    2861,  3707,  2735,  3713, -1723,   980,  3711,  4399,  4636,  2038,
    3415,  3415,  2862,   654, -1723,  3251,  3415,  1536,  3808,  3721,
    2863,   655,  3724,  3415,  2886,  3745,  3749,  3750,  3754,  3767,
    2864,  3794,  1927,  3816,  3875,   912,  3808,  3818,   668,  2283,
    3878,  1833,  1834,  1835,  1836,  1837,  1345,  3883,  2865,  3897,
    3890, -1723,  2741,  2284,  3898,  1350,  1351,  3902,  3904,  3301,
    5187,  3930,  1708,  3905,  3950,  2866,   913,  3954,  3955,  3962,
    3963,  3975,   914,  3563,  3984,  2867,  2868,  2520, -1654,  3991,
    3992,  3999,  4000,  2869,  4654,  3998,  4011,  4009,  4015,  4016,
    2077,  2870,  4017,  4020,  4025, -1000,  4058,  2871,  4059, -2893,
    4074,  4079,  4085,  2670, -1723,  4080,  1850,  2872,  4082,  4083,
    4476,  4351,  5184,   915,  4086,  4111,  4087, -1835,  4119,  4120,
    4121,  1332,  1851,  1852,  4855,  3599,  4134,  2174,  4141, -1723,
    4216,  2873,  4148,  4144,  4094,  3600,  4217,  4154,   681,  4155,
    4220,  1353,  1354,  1355,  1356,  1357,  1358,  1359,  1360,  3601,
    2736,  4224,  1838,  1839,  1840,  1841,  2607,  2608,  2609,  1346,
    4223,  3602,  3603,  3604,  4227,  4228,  4232,  2737,  4233,   296,
    4234,   298,  4236,  4243,  4246,  4247,  4248,  2874, -1723,  2875,
    2738,  3605,  4249,  1347,  4257,  4260,  2876,  4262,  4264,  4265,
    4266,  4976,  4271,  4275,  4276,  4637,  4277,  4285,  4291,  4286,
    4534,  4298,  2877,  4301,  4300,  4310,  4313,  4319,  4322, -1623,
    4306,  4109,  3742,  1354,  1355,  1356,  1357,  1358,  1359,  1360,
   -1628,  4348,  4343,  4363,  4365,  4349,  2878,  3173,  4370,  4687,
    4375,  1345,  2285,  4073,  4377, -1723,  4381,  4384,  4382,  4385,
    4392,  4394,  4073,  4400,  4393,  4405,  4406, -1723,  4407,  4368,
    4414,  1348,  4422,  4431,  2039,  4447,  4430,  3784,  3418,  4473,
    2879,  4472,  1842,  2739,  1843,  1844,  1845, -1723, -1723,  1982,
   -1723,   153,   154,  1846,  4471,  4465,   918,  4482,  3415,  2880,
    4498,  3415,  4711,  2881,  2040,  4500,  1440,  4505,  4506,  4502,
    4507,  4511,  2041,   980,  4616,  4100,  4522,  4528,   668, -1723,
   -1723,  4529,  4539, -1723, -1723,  4530,  4621,  4556,  4541,  2286,
    4557,  4732,  4559,  4588,  4543,  4561,  4566,  4578,  2856,  1979,
    2857,  4619,  4622,   921,  2882,  4458,  4633,  4661,  4688,  2883,
    4689,   153,   154,  4690,  2287,  4692,   922,  2042,  2884,  4701,
    2885,  4695,  4702,  4512,  3529,  2886,  4703,   736,  2887,  4669,
    4705,  4670,  -860,  -860,  4707,  2859,  4706,  1349,  4709,  4615,
    4713,  1847,  4729,  -860,  4685,  4746,  4752,  4753,  4684,  4721,
    4723,  4754,  4728,  2862,  4735,  4755,  1679,  4771,  4773,  4774,
    4775,  2863,  4786,  2888,  4780,  4788,  4793,  2740,  4789,  2043,
    4796,  4795,  4801,  4802,  4803,  4804,   736,  4855,  2889,  2890,
    2891,  2892,  4806,  4810,  4820,  2288,  4821,  4826,  4837,  2865,
    4859,  3606,  2690,   668,  1350,  1351,  4876,  4513,  4889,  4891,
     925,  1848,  1849,  1708,  4883,  4897,  2866,  2893,  4892,  3607,
    1352,  4514,  4898,   882,  4917,  4918,  1348,  4901,   764,  1500,
    4905,  4906,  4608,   926,  4920,   927,  4922,  4925,  4368,  1501,
    4928,  4935,  4947,  4934,  4936,  4944,   980,  4948,  2871,  4953,
    2878,  2741,  4956,  1502,  2853,  4989,  4513,  5010,  5035,   978,
    5002,   882,  5011,  5039,  4710,  1503,  1504,  1505,  5020,   978,
    4514,  5040,  5023,  5041,  2894,  2895,  2896,   764,  5042,  5044,
    5046,  2897,  1076,  5047,  5057,  1506,  5071,   769,  5060,  5061,
    5076,  5078,   980,  2289,  5077,   771,   882,  5081,  2898,  5103,
    5104,  2899,  5105,  1389, -1248,  5116,  5117,  5118,  5129,  5141,
    5072,  5144,  5148,  5150,  5156,  5153,  5154,  5160,  5159,  5174,
     296,  2900,   298,   681,  3181,   563,  2901,  1472,   778,   779,
    2875,  5186,  1477,  3595,  3467,  4492,   769,  2876,  2000,  4490,
    2902,  3608,  4491,  4866,   771,  4865,  4560,  3765,  1602,  1662,
    4813,  4817,  5098,  2877,  4970,  1720,  5096,  1850,  4932,  4731,
    3609,  1353,  1354,  1355,  1356,  1357,  1358,  1359,  1360,  4484,
     622,  1078,   882,  1851,  1852,  2674,  5147,   778,   779,  2585,
    4308,  2933,  3613,  1927,  3635,   564,  1183,  4841,  3142,  1350,
    1351,  3144,  3143,  1774,  2317,  3173,   882,  3173,  2561,  4751,
     787,   882,  4886,  4571,  2903,  3407,  4150,  4019,  1390, -1000,
    4024,  2879,  4532,  4312,  2636,  5022,  4836,  5080,  4535,   565,
    5152,  5128,  5146,  3610,  4955,  3731,  4326,  2756,  4034,  4570,
    2880,  5093,  3405,  3870,  1391,  3412,  4374,  1392,  4778,  4919,
    3611,  4205,  4800,  3944,   882,  4368,  4438,  4368,  4368,   787,
    4464,  4805,  5019,  4799,  3292,  4496,  4907,  3560,  3978,   566,
    3980,   882,  4792,  3976,  5099,   798,   659,   660,  5053,  4598,
    4975,  4915,  5054,  4885,  3409,  4880,  4645,  4745,  1393,  3869,
     803,   804,  1627,  1733,  2209,  3215,  4618,  3156,  2923,  2884,
    5016,  2885,  4685,  4409,  2381,  2646,  4684,  3627,  2335,  2887,
    1394,  3134,  4010,  5009,  1705,  5034,   296,   567,   298,  4391,
     882,   882,   882,   882,   798,  1507,  2802,  3286,  3574,  3994,
    3012,  3010,   882,  3593,  1980,  2271,  1876,  3697,  3239,   803,
     804,  4334,  3986,  1508,  3223,  3233,  4861,  4727,   668,  5094,
    1812,  3885,  4235,  3097,  5095,  4584,  1353,  1354,  1355,  1356,
    1357,  1358,  1359,  1360,  4583,  4983,  4290,  4933,  4417,  4519,
     882,  4545,  1407,  4510,  4874,  1395,  4581,  3686,  3864,  2785,
    3744,  4368,  4368,  2979,   661,  4368,  3132,  4320,  2893,  2092,
    2055,  3162,  4064,  4029,  4028,  5017,  2403,  1092,  5097,  2723,
    1396,  3109,  1203,  1072,  2166,  3212,  2724,  1075,  2579,  4969,
     666,  4421,  1674,   882,  4521,  4817,  2100,  4014,  4756,  5142,
    1927,  5151,  5185,  5188,  1307,  4033,  4841,  2748,  4893,   978,
     978,  3698,  2795,   978,  4914,  2047,   681,  3192,  4044,  1033,
    2533,  1034,  2704,  2626,  3189,  2894,  2895,  2896,  2110,  3190,
    1015,   -69,  2897,  5127,  2230,  3771,   568,  1515,  3248,  3176,
    2044,  2849,  3614,  4708,  1017,   978,  3886,  1521,  5137,  2898,
    4055,  4335,  2899,  4368,  3225,  5149,  3694,     0,  1115,  1116,
    1117,  1665,     0,     0,  1509,  1666,     0,  1667,     0,     0,
       0,  2233,  2900,     0,     0,   829,     0,     0,     0,     0,
    4515,     0,     0,  4516,     0,     0,     0,     0,     0,     0,
     569,  2902,  1397,     0,   835,     0,     0,     0,  4982,   837,
    4517,  1398,   681,   838,     0,  3438,  3438,  5176,     0,     0,
       0,     0,   570,  5178,     0,     0,     0,     0,  1399,  5189,
       0,     0,     0,     0,   829,     0,     0,  1510,     0,  4515,
       0,     0,  4516,     0,     0,     0,  1400,     0,     0,     0,
       0,     0,     0,   835,  1511,     0,     0,     0,   837,  4697,
       0,     0,   838,     0,   681,     0,  3740,     0,     0,     0,
       0,     0,  5027,  5028,  3885,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   571,     0,
       0,  1401,     0,   572,  1402,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1403,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1927,     0,     0,   882,   681,   574,
     882,   978,     0,     0,   681,     0,     0,     0,  1927,     0,
       0,     0,     0,     0,  1927,   575,  5088,  5089,     0,     0,
    1927,     0,     0,     0,     0,   882,   882,     0,     0,     0,
       0,     0,     0,     0,   882,   882,   882,   882,   882,   882,
     882,   882,   882,   882,   882,   882,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   882,   882,     0,   882,   882,
       0,     0,     0,     0,   882,   882,   882,     0,     0,   882,
     882,   882,   882,   882,   882,     0,   882,   882,   882,     0,
       0,     0,     0,     0,     0,   882,   882,     0,   882,   882,
     882,   882,   882,     0,     0,   882,   882,   882,   882,     0,
     882,   882,   882,   882,     0,   882,   882,   882,   882,   882,
       0,     0,   882,     0,     0,   882,   882,     0,     0,     0,
     882,     0,     0,     0,   882,   882,   882,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   882,   882,   882,     0,
       0,     0,     0,     0,     0,     0,   882,     0,     0,     0,
       0,     0,     0,   882,   882,   882,   882,     0,  2856,     0,
    2857,     0,     0,     0,   882,   882,   882,     0,   882,   882,
     882,   882,   882,     0,   882,   882,   882,   882,   882,   882,
     882,   882,     0,     0,     0,   882,     0,   882,     0,     0,
       0,     0,  -860,  -860,     0,  2859,     0,     0,     0,     0,
       0,     0,     0,  -860,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2862,     0,     0,     0,     0,     0,     0,
       0,  2863,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2865,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2045,  1708,     0,     0,  2866,     0,     0,     0,
       0,     0,     0,   882,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   882,
       0,  1389,     0,     0,     0,     0,     0,     0,  2871,     0,
       1,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       3,     0,     0,  2856,     4,  2857,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     5,     6,
       0,     0,     7,     0,     0,     0,     8,     0,     0,     0,
       0,     9,    10,     0,     0,     0,   882,  -860,  -860,     0,
    2859,     0,     0,     0,     0,     0,     0,     0,  -860,     0,
     296,    11,   298,   882,     0,     0,     0,     0,  2862,     0,
    2875,     0,     0,     0,     0,     0,  2863,  2876,     0,     0,
      12,     0,     0,     0,     0,     0,  1390,     0,     0,     0,
       0,     0,     0,  2877,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2865,    13,     0,  3264,     0,     0,
       0,     0,  1391,     0,    14,  1392,    15,    16,  1708,     0,
       0,  2866,  1036,     0,   882,     0,     0,     0,     0,    17,
      18,     0,     0,     0,     0,  1037,     0,     0,     0,     0,
       0,     0,    19,     0,     0,     0,   986,  1038,     0,     0,
       0,  2879,     0,  2871,     0,     0,  1393,    20,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2880,  1039,  1020,     0,     0,    21,     0,     0,  1394,     0,
       0,     0,     0,  1040,   296,     0,   298,     0,     0,     0,
       0,     0,     0,    22,     0,    23,     0,     0,     0,     0,
       0,    24,     0,     0,     0,    25,     0,     0,     0,  1041,
       0,  1042,     0,  1043,     0,     0,     0,     0,     0,    26,
       0,     0,     0,     0,     0,   296,  1044,   298,     0,  2884,
       0,  2885,    27,     0,    28,  2875,     0,     0,     0,  2887,
       0,     0,  2876,  1395,     0,     0,     0,     0,     0,    15,
      16,    29,     0,     0,     0,     0,     0,     0,  2877,     0,
       0,     0,     0,     0,     0,   978,     0,     0,  1396,    30,
       0,     0,     0,    31,     0,     0, -2045,  1045,     0,     0,
      32,  1046,     0,     0,  1047,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   882,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2879,  1048,  2893,  1049,
       0,     0,     0,     0,     0,     0,     0,  1050,     0,  1051,
       0,     0,     0,     0,     0,  2880,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   296,
       0,   298,     0,     0,     0,     0,     0,     0,  1052,  1053,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    33,     0,     0,     0,  2894,  2895,  2896,     0,     0,
    1397,  1054,  2897,     0,     0,     0,     0,     0,     0,  1398,
      34,     0,    35,     0,  2884,     0,  2885,     0,     0,  2898,
       0,     0,  2899,  1055,  2887,     0,  1399,     0,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,  2900,     0,  1400,     0,     0,     0,     0,     0,
     882,   882,   882,  1056,     0,     0,     0,     0,     0,     0,
       0,  2902,     0,    38,     0,   882,    39,     0,    40,     0,
      41,    42,     0,     0,    43,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,     0,   882,    46,  1401,
       0,     0,  1402,   882,     0,     0,   882,    47,   882,     0,
       0,     0,     0,  2893,   882,     0,   882,   882,     0,     0,
       0,    48,     0,     0,     0,     0,    49,    50,    51,     0,
       0,     0,  1403,  1057,  3265,     0,     0,     0,     0,     0,
       0,     0,   882,     0,     0,     0,     0,     0,  2350,     0,
       0,  1407,   552,     0,     0,   553,     0,     0,     0,    52,
     982,     0,  1058,     0,     0,     0,     0,    53,     0,     0,
    2894,  2895,  2896,     0,     0,  1059,  1060,  2897,     0,  1061,
    1062,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2898,  1094,     0,  2899,     0,     0,
       0,     0,  1063,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    54,     0,     0,     0,  2900,     0,     0,
       0,     0,     0,   882,     0,     0,    55,     0,     0,     0,
      56,     0,   882,    57,     0,     0,  2902,     0,    58,     0,
    2351,     0,  2352,     0,     0,     0,     0,     0,     0,     0,
       0,  1064,     0,     0,     0,   882,     0,     0,     0,     0,
       0,    59,    60,     0,  1065,     0,     0,     0,     0,    61,
       0,  1182,     0,     0,     0,    62,   882,     0,     0,     0,
       0,     0,     0,     0,   882,     0,     0,     0,     0,     0,
       0,     0,     0,   882,     0,     0,     0, -2694,     0,     0,
    1211,  1066,  2353,  2354,     0,  2355,  2356,  2357,  2358,  2359,
       0,  2360,  2361,  2362,  2363,  2364,  2365,  2366,  2367,  2368,
    1067,  2369,  2370,  2371,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1254,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1272,     0,   978,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2694,     0,     0,     0,     0,     0,     0,     0,  1068,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   882,  1322,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1386,
    2372,  2373,     0,  2918,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   882,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1446,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   882,     0,
       0,     0,   882,     0,     0,     0,     0,   882,   882,     0,
       0,     0,     0,     0,     0,     0,   882,     0,   882,     0,
     882,   882,   882,   882,     0,     0,   882,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   882,     0,   882,     0,
     882,   882,     0,   882,     0,   882,     0,   882,   882,   882,
     882,     0,   882,   882,     0,     0,   882,     0,     0,     0,
       0,     0,     0,     0,     0,   882,     0,     0,     0,     0,
       0,   882,     0,     0,   882,     0,   882,     0,   882,   882,
       0,   882,   882,     0,     0,     0,   882,   882,   882,     0,
       0,     0,   882,   882,   882,     0,   882,     0,   882,     0,
     882,     0,   882,     0,   882,     0,     0,     0,     0,   882,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   882,     0,     0,     0,     0,
       0,   882,     0,     0,   882,     0,     0,     0,     0,     0,
     882,     0,     0,     0,   882,     0,     0,     0,   882,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1752,     0,     0,  1753,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   978,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1785,  1786,     0,     0,     0,     0,
     978,   978,   882,  1796,  1797,     0,     0,  1800,  1801,  1802,
    1803,  1806,  1807,  1808,  1809,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1826,  1827,     0,  1828,  1829,     0,
       0,     0,     0,  1855,  1856,     0,     0,     0,  1865,  1866,
    1867,  1868,  1869,  1870,     0,  1872,  1874,     0,     0,     0,
       0,     0,     0,     0,  1882,  1883,     0,  1886,  1887,     0,
       0,     0,     0,     0,  1891,  1892,  1893,  1894,     0,  1896,
       0,     0,  1899,     0,  1901,  1902,  1903,  1904,  1905,     0,
       0,  1908,     0,     0,  1911,  1912,     0,     0,     0,  1915,
       0,     0,     0,  1918,  1922,  1923,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1930,  1931,  1932,     0,     0,
       0,     0,     0,     0,     0,  1936,     0,     0,   978,     0,
       0,     0,  1941,  1942,  1943,     1,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2918,     0,     3,     0,     0,     0,     4,
       0,     0,   882,     0,     0,     0,  1983,     0,     0,   882,
       0,     0,     0,     5,     6,     0,     0,     7,     0,     0,
       0,     8,     0,     0,     0,     0,     9,    10,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3305,     0,     0,
       0,     0,     0,     0,     0,     0,    11,     0,     0,  3305,
    3305,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,     0,  2059,     0,  2856,     0,  2857,     0,     0,    14,
       0,    15,    16,     0,     0,     0,     0,     0,  2069,     0,
       0,     0,     0,     0,    17,    18,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2918,     0,     0,     0,
       0,  2859,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    20,     0,     0,     0,     0,   978,     0,  2862,
       0,     0,   978,   882,     0,     0,     0,  2863,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2119,     0,     0,    22,     0,
      23,     0,     0,  3305,  3305,  2865,    24,     0,     0,     0,
      25,     0,  2146,     0,     0,     0,     0,     0,     0,  1708,
       0,     0,  2866,     0,    26,     0,     0,     0,   882,     0,
       0,     0,   882,     0,     0,     0,     0,    27,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2871,     0,    29,     0,     0,     0,
       0,   882,   882,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2198,    30,     0,     0,     0,    31,     0,
       0,     0,     0,     0,     0,    32,   882,     0,     0,     0,
       0,     0,     0,     0,     0,   882,     0,   882,     0,   882,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   296,     0,   298,     0,
     882,     0,     0,     0,     0,   882,  2875,     0,     0,     0,
       0,     0,     0,  2876,     0,     0,     0,     0,     0,     0,
       1,     0,     2,   882,     0,     0,     0,     0,     0,  2877,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   978,     0,     4,     0,    33,     0,     0,     0,
       0,     0,   978,   978,   978,   978,     0,   882,     5,     6,
       0,     0,     0,     0,     0,    34,     8,    35,     0,     0,
       0,     9,    10,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,  2879,     0,     0,
       0,    11,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,   882,     0,     0,     0,  2880,     0,     0,     0,
      12,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,    39,     0,    40,  2415,    41,    42,     0,     0,    43,
      44,     0,     0,     0,     0,    13,     0,     0,     0,     0,
      45,     0,     0,    46,    14,     0,    15,    16,     0,     0,
       0,     0,    47,     0,     0,     0,     0,     0,     0,    17,
      18,     0,     0,     0,     0,  2884,    48,  2885,     0,     0,
       0,    49,    50,    51,     0,  2887,     0,     0,     0,     0,
       0,  2918,     0,     0,     0,     0,     0,    20,     0,     0,
       0,     0,     0,   882,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    52,    21,     0,     0,     0,     0,
       0,     0,    53,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    22,     0,    23,     0,     0,     0,     0,
       0,    24,     0,     0,     0,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2506,
    2508,  2510,     0,     0,  2893,     0,     0,     0,    54,     0,
       0,     0,    27,     0,    28,     0,     0,     0,     0,     0,
       0,    55,     0,     0,     0,    56,     0,     0,    57,     0,
       0,    29,     0,    58,     0,     0,  2541,     0,     0,     0,
       0,     0,     0,     0,     0,  2546,     0,  2547,     0,    30,
       0,     0,     0,    31,     0,     0,    59,    60,     0,     0,
       0,  2894,  2895,  2896,    61,     0,     0,  2918,  2897,     0,
      62,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2574,     0,     0,     0,  2898,     0,     0,  2899,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     978,     0,     0,     0,     0,     0,     0,     0,  2900,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2902,     0,     0,
       0,     0,     0,     0,     0,  3305,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   882,     0,     0,     0,
       0,    33,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2642,     0,     0,     0,     0,     0,     0,     0,
      34,  2655,    35,     0,     0,     0,     0,     0,   882,     0,
       0,     0,     0,     0,   882,   882,     0,   882,    36,     0,
       0,     0,     0,     0,  2146,     0,     0,     0,   882,    37,
       0,     0,     0,   882,     0,     0,   882,     0,   882,   882,
       0,     0,     0,     0,     0,  2703,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,    39,     0,    40,     0,
       0,    42,  2712,     0,    43,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,     0,     0,    46,   882,
       0,     0,     0,     0,     0,     0,     0,    47,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    48,     0,     0,     0,     0,    49,    50,    51,     0,
       0,     0,     0,     0,   882,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    52,
       0,     0,     0,     0,     0,     0,     0,    53,     0,     0,
     882,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2794,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    54,     0,     0,     0,     0,     0,     0,
     882,     0,     0,     0,     0,     0,    55,     0,     0,     0,
      56,     0,     0,    57,     0,     0,     0,     0,    58,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2918,     0,     0,     0,     0,   882,     0,     0,     0,
       0,     0,    60,     0,   882,     0,     0,     0,     0,    61,
       0,     0,     0,     0,  2930,    62,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2988,     0,     0,
       0,  2990,     0,     0,     0,     0,  2992,  2993,     0,     0,
       0,     0,     0,     0,     0,  1803,     0,  3011,     0,  1803,
       0,  3014,  3015,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3022,     0,  3023,     0,  3024,
       0,     0,  3026,     0,  3027,     0,  3028,  3029,  3030,  3031,
       0,  3032,  3033,     0,     0,     0,     0,     0,   882,   882,
       0,     0,     0,     0,  3037,     0,     0,     0,     0,     0,
    3038,     0,     0,  3039,     0,  3040,     0,  3041,  3042,     0,
    3043,     0,     0,     0,     0,  3046,  3047,  3048,     0,     0,
       0,  3050,  3051,  3052,     0,  3053,     0,  3055,     0,  3057,
       0,  3059,     0,  3060,     0,     0,     0,     0,  3061,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4158,  4159,     0,     0,  3085,   882,  4160,     0,  4161,     0,
    4162,  4163,     0,     0,     0,     0,     0,     0,     0,  3095,
       0,     0,     0,  3100,  4158,  4159,     0,  3931,     0,     0,
    4160,     0,  4161,     0,  4162,  4163,     0,     0,     0,     0,
       0,     0,   882,     0,     0,     0,     0,     0,     0,     0,
       0,  3931,     0,     0,     0,     0,     0,   978,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   882,     0,     0,
       0,     0,     0,     0,  4164,     0,     0,  4165,     0,     0,
       0,     0,     0,     0,     0,  4166,     0,     0,     0,     0,
       0,  1094,     0,     0,     0,     0,     0,     0,  4164,     0,
       0,  4165,     0,   882,     0,  4167,     0,     0,     0,  4166,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4168,     0,     0,     0,     0,     0,  4167,
       0,     0,     0,     0,     0,   882,     0,     0,     0,     0,
       0,   882,     0,     0,     0,     0,     0,  4168,     0,     0,
    4169,     0,  4170,     0,     0,     0,     0,     0,     0,     0,
     882,     0,     0,     0,     0,     0,     0,     0,  4171,  4172,
       0,     0,     0,     0,  4169,     0,  4170,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4171,  4172,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4173,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4174,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4173,
       0,  3274,     0,     0,     0,  4175,     0,     0,  3281,  4174,
       0,     0,     0,     0,  4176,  4177,     0,  4178,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4175,
       0,     0,     0,     0,     0,     0,     0,   978,  4176,  4177,
       0,  4178,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4179,  4180,  4181,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4182,  4183,  4184,   882,     0,  4179,  4180,  4181,  4185,
       0,     0,  4186,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   882,     0,     0,  4182,  4183,  4184,     0,  4187,
       0,  4188,     0,  4185,     0,     0,  4186,   882,   978,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4187,     0,  4188,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4189,
    4190,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3440,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4189,  4190,     0,     0,  4191,     0,     0,
       0,     0,     0,     0,  2918,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4191,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3482,   882,     0,
    3867,  3484,     0,     0,     0,     0,  2853,     0,  2854,     0,
       0,     0,     0,     0,     0,  4192,     0,     0,     0,  4193,
       0,     0,  2856,     0,  2857,     0,     0,     0,     0,     0,
    3513,  3514,     0,  4194,     0,     0,     0,  4644,     0,     0,
       0,     0,     0,  4193,     0,     0,     0,  4644,     0,     0,
       0,     0,     0,     0,  2858,  3540,     0,  4194,     0,  2859,
       0,     0,     0,     0,  3550,     0,  3552,     0,  3554,     0,
       0,     0,     0,   882,     0,     0,     0,  2862,     0,     0,
     978,     0,     0,     0,     0,  2863,     0,     0,     0,     0,
       0,     0,  4195,   882,     0,  2864,  4196,     0,     0,  4197,
    4198,  4199,  4200,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2865,     0,     0,  4195,     0,     0,     0,
    4196,     0,  2574,  4197,  4198,  4199,  4200,  1708,     0,     0,
    2866,   882,     0,   882,     0,     0,     0,     0,     0,     0,
    2867,     0,     0,  4201,  4202,     0,     0,     0,  3868,     0,
       0,     0,     0,     0,  4744,     0,  2870,     0,  4744,     0,
       0,     0,  2871,     0,     0,     0,     0,  4201,  4202,     0,
       0,  4203,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4203,  2873,     0,     0,   882,
       0,  2146,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4644,     0,     0,     0,   296,     0,   298,     0,     0,     0,
       0,   882,     0,     0,  2875,     0,     0,     0,     0,  4644,
       0,  2876,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   978,     0,  2877,     0,     0,
       0,   978,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2878,  3274,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   882,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2879,     0,  4744,     0,     0,
       0,     0,  4744,     0,     0,     0,     0,     0,     0,  4744,
       0,     0,     0,     0,  2880,     0,     0,     0,  2881,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   882,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2883,     0,     0,     0,     0,     0,
       0,   882,     0,  2884,     0,  2885,     0,     0,     0,     0,
       0,     0,     0,  2887,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4744,     0,     0,  2890,     0,     0,  4977,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2893,     0,     0,  3923,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   882,
       0,     0,     0,     0,     0,     0,     0,  3953,   882,     0,
       0,     0,     0,  3957,  3958,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3965,     0,  2894,
    2895,  2896,  3967,     0,     0,  3968,  2897,  3969,  3970,   978,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2898,     0,     0,  2899,     0,     0,     0,
       0,  4744,     0,  4744,  4744,   882,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2900,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2902,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2574,     0,     0,     0,     0,     0,     0,
    4744,     0,     0,  4744,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2574,
       0,     0,     0,     0,     0,   882,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4744,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2574,
       0,     0,   978,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   882,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3274,     0,     0,     0,     0,
       0,     0,     0,  4103,     0,     0,     0,     0,   978,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     882,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4218,  4219,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3274,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3274,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2574,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4380,     0,     0,     0,     0,     0,
    3274,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4396,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4504,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3274,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2574,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4686,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3274,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4720,     0,  4722,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1322,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4904,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   161,     0,   162,   732,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   733,
    4927,   171,   172,   173,   174,   175,   176,   177,   734,   179,
       0,   180,     0,     0,   735,   181,   736,   737,   738,   182,
     739,     0,   183,   184,   185,  1919,   186,     0,   187,   188,
       0,     0,   189,   740,   741,   190,   191,     0,   192,   742,
     743,   194,   195,     0,   196,   197,   198,   199,   744,   201,
       0,   745,   203,   746,   747,   748,   749,   750,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   751,   223,     0,   224,   752,   753,
     225,     0,     0,   226,   754,   755,   227,   756,   757,   228,
       0,   229,   758,   759,     0,   230,   231,   232,   760,   761,
     762,     0,     0,     0,     0,   763,   235,   764,     0,     0,
     765,   236,     0,   237,     0,     0,   766,     0,  5015,   238,
       0,   239,   240,   241,   242,   243,     0,  2574,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,   767,
       0,   264,   265,   266,   267,   768,   769,   268,   269,     0,
     270,   770,   271,   272,   771,     0,   273,   274,   275,     0,
       0,     0,   772,   277,  5055,   278,     0,   279,     0,   280,
     281,   773,   283,   774,   285,   286,     0,   287,     0,   775,
     776,   777,   288,   289,   290,     0,   291,   778,   779,     0,
     292,   293,     0,     0,     0,   780,   295,   296,   297,   298,
     781,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,   782,   304,   305,   783,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   784,     0,  1920,   316,     0,
     785,   317,   318,     0,     0,     0,     0,     0,   786,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,   787,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   788,   346,   347,   348,   349,
     789,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   790,   358,     0,     0,   791,   360,   792,   361,
       0,   362,   793,   794,   795,   796,   797,   367,   368,   369,
     370,   371,   372,     0,   798,   373,     0,     0,   374,   375,
     376,   377,   799,   800,   801,   378,   379,     0,   802,   803,
     804,   380,     0,   805,   381,   382,   806,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,  2574,
     390,     0,     0,     0,     0,   391,   392,   393,     0,   807,
     394,     0,   395,     0,   396,   397,   808,   809,   399,   400,
     401,   402,   810,   811,   405,   812,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   813,   418,   419,     0,   814,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,   815,   816,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   817,     0,   818,   444,   445,
     446,   447,   819,     0,   820,   450,   821,   451,   452,   453,
     454,     0,   822,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,   823,   824,   483,   484,
     485,     0,   486,   487,   825,   489,   490,   491,   826,   827,
     492,   493,   494,   495,   828,   496,   497,     0,     0,   498,
     499,   500,   501,     0,   829,   502,   503,     0,   504,   830,
     831,   832,   833,     0,     0,     0,     0,  1921,   509,   510,
     511,     0,   834,   835,   836,   513,   514,   515,   837,   516,
     517,   518,   838,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   839,   527,     0,
       0,   840,   841,   842,   843,   528,     0,     0,   529,   844,
       0,   845,   530,   531,   532,   533,   534,   846,   847,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,     0,   848,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   849,   850,     0,     0,     0,     0,
     851,   852,     0,     0,   853,   854,     0,     0,   855,   856,
     161,     0,   162,   732,   164,   165,   166,   167,  2142,     0,
     168,     0,     0,     0,   169,     0,     0,   733,     0,   171,
     172,   173,   174,   175,   176,   177,   734,   179,     0,   180,
       0,     0,  2143,   181,   736,   737,   738,   182,   739,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,   740,   741,   190,   191,     0,   192,   742,   743,   194,
     195,     0,   196,   197,   198,   199,   744,   201,     0,   745,
     203,   746,   747,   748,   749,   750,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   751,   223,     0,   224,   752,   753,   225,     0,
       0,   226,   754,   755,   227,   756,   757,   228,     0,   229,
     758,   759,     0,   230,   231,   232,   760,   761,   762,     0,
       0,     0,     0,   763,   235,   764,     0,     0,  2144,   236,
       0,   237,     0,     0,   766,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   767,     0,   264,
     265,   266,   267,   768,   769,   268,   269,     0,   270,   770,
     271,   272,   771,     0,   273,   274,   275,     0,     0,     0,
     772,   277,     0,   278,     0,   279,     0,   280,   281,   773,
     283,   774,   285,   286,     0,   287,     0,   775,   776,   777,
     288,   289,   290,     0,   291,   778,   779,     0,   292,   293,
       0,     0,     0,   780,   295,   296,   297,   298,   781,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   782,   304,   305,   783,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   784,     0,     0,   316,     0,   785,   317,
     318,     0,     0,     0,     0,     0,   786,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   787,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   788,   346,   347,   348,   349,   789,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     790,   358,     0,     0,   791,   360,   792,   361,     0,   362,
     793,   794,   795,   796,   797,   367,   368,   369,   370,   371,
     372,     0,   798,   373,     0,     0,   374,   375,   376,   377,
     799,   800,   801,   378,   379,     0,   802,   803,   804,   380,
       0,   805,   381,   382,   806,  2145,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   807,   394,     0,
     395,     0,   396,   397,   808,   809,   399,   400,   401,   402,
     810,   811,   405,   812,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   813,
     418,   419,     0,   814,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   815,
     816,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   817,     0,   818,   444,   445,   446,   447,
     819,     0,   820,   450,   821,   451,   452,   453,   454,     0,
     822,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   823,   824,   483,   484,   485,     0,
     486,   487,   825,   489,   490,   491,   826,   827,   492,   493,
     494,   495,   828,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   829,   502,   503,     0,   504,   830,   831,   832,
     833,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     834,   835,   836,   513,   514,   515,   837,   516,   517,   518,
     838,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   839,   527,     0,     0,   840,
     841,   842,   843,   528,     0,     0,   529,   844,     0,   845,
     530,   531,   532,   533,   534,   846,   847,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,     0,   848,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   849,   850,     0,     0,     0,     0,   851,   852,
       0,     0,   853,   854,     0,     0,   855,   856,   161,     0,
     162,   732,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   733,     0,   171,   172,   173,
     174,   175,   176,   177,   734,   179,     0,   180,     0,     0,
     735,   181,   736,   737,   738,   182,   739,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,   740,
     741,   190,   191,     0,   192,   742,   743,   194,   195,     0,
     196,   197,   198,   199,   744,   201,     0,   745,   203,   746,
     747,   748,   749,   750,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     751,   223,     0,   224,   752,   753,   225,     0,     0,   226,
     754,   755,   227,   756,   757,   228,     0,   229,   758,   759,
       0,   230,   231,   232,   760,   761,   762,     0,     0,     0,
       0,   763,   235,   764,     0,     0,   765,   236,     0,   237,
       0,     0,   766,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,   767,     0,   264,   265,   266,
     267,   768,   769,   268,   269,     0,   270,   770,   271,   272,
     771,     0,   273,   274,   275,     0,     0,     0,   772,   277,
    2505,   278,     0,   279,     0,   280,   281,   773,   283,   774,
     285,   286,     0,   287,     0,   775,   776,   777,   288,   289,
     290,     0,   291,   778,   779,     0,   292,   293,     0,     0,
       0,   780,   295,   296,   297,   298,   781,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,   782,
     304,   305,   783,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   784,     0,     0,   316,     0,   785,   317,   318,     0,
       0,     0,     0,     0,   786,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,   787,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   788,   346,   347,   348,   349,   789,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   790,   358,
       0,     0,   791,   360,   792,   361,     0,   362,   793,   794,
     795,   796,   797,   367,   368,   369,   370,   371,   372,     0,
     798,   373,     0,     0,   374,   375,   376,   377,   799,   800,
     801,   378,   379,     0,   802,   803,   804,   380,     0,   805,
     381,   382,   806,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,   807,   394,     0,   395,     0,
     396,   397,   808,   809,   399,   400,   401,   402,   810,   811,
     405,   812,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   813,   418,   419,
       0,   814,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,   815,   816,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   817,     0,   818,   444,   445,   446,   447,   819,     0,
     820,   450,   821,   451,   452,   453,   454,     0,   822,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,   823,   824,   483,   484,   485,     0,   486,   487,
     825,   489,   490,   491,   826,   827,   492,   493,   494,   495,
     828,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     829,   502,   503,     0,   504,   830,   831,   832,   833,     0,
       0,     0,     0,     0,   509,   510,   511,     0,   834,   835,
     836,   513,   514,   515,   837,   516,   517,   518,   838,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   839,   527,     0,     0,   840,   841,   842,
     843,   528,     0,     0,   529,   844,     0,   845,   530,   531,
     532,   533,   534,   846,   847,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,     0,
     848,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     849,   850,     0,     0,     0,     0,   851,   852,     0,     0,
     853,   854,     0,     0,   855,   856,   161,     0,   162,   732,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   733,     0,   171,   172,   173,   174,   175,
     176,   177,   734,   179,     0,   180,     0,     0,   735,   181,
     736,   737,   738,   182,   739,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   740,   741,   190,
     191,     0,   192,   742,   743,   194,   195,     0,   196,   197,
     198,   199,   744,   201,     0,   745,   203,   746,   747,   748,
     749,   750,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   751,   223,
       0,   224,   752,   753,   225,     0,     0,   226,   754,   755,
     227,   756,   757,   228,     0,   229,   758,   759,     0,   230,
     231,   232,   760,   761,   762,     0,     0,     0,     0,   763,
     235,   764,     0,     0,   765,   236,     0,   237,     0,     0,
     766,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,   767,     0,   264,   265,   266,   267,   768,
     769,   268,   269,     0,   270,   770,   271,   272,   771,     0,
     273,   274,   275,     0,     0,     0,   772,   277,  2507,   278,
       0,   279,     0,   280,   281,   773,   283,   774,   285,   286,
       0,   287,     0,   775,   776,   777,   288,   289,   290,     0,
     291,   778,   779,     0,   292,   293,     0,     0,     0,   780,
     295,   296,   297,   298,   781,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,   782,   304,   305,
     783,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   784,
       0,     0,   316,     0,   785,   317,   318,     0,     0,     0,
       0,     0,   786,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,   787,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   788,
     346,   347,   348,   349,   789,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   790,   358,     0,     0,
     791,   360,   792,   361,     0,   362,   793,   794,   795,   796,
     797,   367,   368,   369,   370,   371,   372,     0,   798,   373,
       0,     0,   374,   375,   376,   377,   799,   800,   801,   378,
     379,     0,   802,   803,   804,   380,     0,   805,   381,   382,
     806,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,   807,   394,     0,   395,     0,   396,   397,
     808,   809,   399,   400,   401,   402,   810,   811,   405,   812,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   813,   418,   419,     0,   814,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,   815,   816,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   817,
       0,   818,   444,   445,   446,   447,   819,     0,   820,   450,
     821,   451,   452,   453,   454,     0,   822,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
     823,   824,   483,   484,   485,     0,   486,   487,   825,   489,
     490,   491,   826,   827,   492,   493,   494,   495,   828,   496,
     497,     0,     0,   498,   499,   500,   501,     0,   829,   502,
     503,     0,   504,   830,   831,   832,   833,     0,     0,     0,
       0,     0,   509,   510,   511,     0,   834,   835,   836,   513,
     514,   515,   837,   516,   517,   518,   838,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   839,   527,     0,     0,   840,   841,   842,   843,   528,
       0,     0,   529,   844,     0,   845,   530,   531,   532,   533,
     534,   846,   847,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,     0,   848,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   849,   850,
       0,     0,     0,     0,   851,   852,     0,     0,   853,   854,
       0,     0,   855,   856,   161,     0,   162,   732,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   733,     0,   171,   172,   173,   174,   175,   176,   177,
     734,   179,     0,   180,     0,     0,   735,   181,   736,   737,
     738,   182,   739,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,   740,   741,   190,   191,     0,
     192,   742,   743,   194,   195,     0,   196,   197,   198,   199,
     744,   201,     0,   745,   203,   746,   747,   748,   749,   750,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   751,   223,     0,   224,
     752,   753,   225,     0,     0,   226,   754,   755,   227,   756,
     757,   228,     0,   229,   758,   759,     0,   230,   231,   232,
     760,   761,   762,     0,     0,     0,     0,   763,   235,   764,
       0,     0,   765,   236,     0,   237,     0,     0,   766,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,   767,     0,   264,   265,   266,   267,   768,   769,   268,
     269,     0,   270,   770,   271,   272,   771,     0,   273,   274,
     275,     0,     0,     0,   772,   277,  2509,   278,     0,   279,
       0,   280,   281,   773,   283,   774,   285,   286,     0,   287,
       0,   775,   776,   777,   288,   289,   290,     0,   291,   778,
     779,     0,   292,   293,     0,     0,     0,   780,   295,   296,
     297,   298,   781,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,   782,   304,   305,   783,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   784,     0,     0,
     316,     0,   785,   317,   318,     0,     0,     0,     0,     0,
     786,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,   787,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   788,   346,   347,
     348,   349,   789,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   790,   358,     0,     0,   791,   360,
     792,   361,     0,   362,   793,   794,   795,   796,   797,   367,
     368,   369,   370,   371,   372,     0,   798,   373,     0,     0,
     374,   375,   376,   377,   799,   800,   801,   378,   379,     0,
     802,   803,   804,   380,     0,   805,   381,   382,   806,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,   807,   394,     0,   395,     0,   396,   397,   808,   809,
     399,   400,   401,   402,   810,   811,   405,   812,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   813,   418,   419,     0,   814,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,   815,   816,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   817,     0,   818,
     444,   445,   446,   447,   819,     0,   820,   450,   821,   451,
     452,   453,   454,     0,   822,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   823,   824,
     483,   484,   485,     0,   486,   487,   825,   489,   490,   491,
     826,   827,   492,   493,   494,   495,   828,   496,   497,     0,
       0,   498,   499,   500,   501,     0,   829,   502,   503,     0,
     504,   830,   831,   832,   833,     0,     0,     0,     0,     0,
     509,   510,   511,     0,   834,   835,   836,   513,   514,   515,
     837,   516,   517,   518,   838,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   839,
     527,     0,     0,   840,   841,   842,   843,   528,     0,     0,
     529,   844,     0,   845,   530,   531,   532,   533,   534,   846,
     847,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,     0,   848,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   849,   850,     0,     0,
       0,     0,   851,   852,     0,     0,   853,   854,     0,     0,
     855,   856,   161,     0,   162,   732,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   733,
       0,   171,   172,   173,   174,   175,   176,   177,   734,   179,
       0,   180,     0,     0,   735,   181,   736,   737,   738,   182,
     739,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,   740,   741,   190,   191,     0,   192,   742,
     743,   194,   195,     0,   196,   197,   198,   199,   744,   201,
       0,   745,   203,   746,   747,   748,   749,   750,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   751,   223,     0,   224,   752,   753,
     225,     0,     0,   226,   754,   755,   227,   756,   757,   228,
       0,   229,   758,   759,     0,   230,   231,   232,   760,   761,
     762,     0,     0,     0,     0,   763,   235,   764,     0,     0,
    2570,   236,     0,   237,     0,     0,   766,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,   767,
       0,   264,   265,   266,   267,   768,   769,   268,   269,     0,
     270,   770,   271,   272,   771,     0,   273,   274,   275,     0,
       0,     0,   772,   277,     0,   278,     0,   279,     0,   280,
     281,   773,   283,   774,   285,   286,     0,   287,     0,   775,
     776,   777,   288,   289,   290,     0,   291,   778,   779,     0,
     292,   293,     0,     0,     0,   780,   295,   296,   297,   298,
     781,     0,  2571,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,   782,   304,   305,   783,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   784,     0,     0,   316,     0,
     785,   317,   318,     0,     0,     0,     0,     0,   786,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,   787,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   788,   346,   347,   348,   349,
     789,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   790,   358,     0,     0,   791,   360,   792,   361,
       0,   362,   793,   794,   795,   796,   797,   367,   368,   369,
     370,   371,   372,     0,   798,   373,     0,     0,   374,   375,
     376,   377,   799,   800,   801,   378,   379,     0,   802,   803,
     804,   380,     0,   805,   381,   382,   806,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,   807,
     394,     0,   395,     0,   396,   397,   808,   809,   399,   400,
     401,   402,   810,   811,   405,   812,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   813,   418,   419,     0,   814,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,   815,   816,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   817,     0,   818,   444,   445,
     446,   447,   819,     0,   820,   450,   821,   451,   452,   453,
     454,     0,   822,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,   823,   824,   483,   484,
     485,     0,   486,   487,   825,   489,   490,   491,   826,   827,
     492,   493,   494,   495,   828,   496,   497,     0,     0,   498,
     499,   500,   501,     0,   829,   502,   503,     0,   504,   830,
     831,   832,   833,     0,     0,     0,     0,     0,   509,   510,
     511,     0,   834,   835,   836,   513,   514,   515,   837,   516,
     517,   518,   838,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   839,   527,     0,
       0,   840,   841,   842,   843,   528,     0,     0,   529,   844,
       0,   845,   530,   531,   532,   533,   534,   846,   847,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,     0,   848,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   849,   850,     0,     0,     0,     0,
     851,   852,     0,     0,   853,   854,     0,     0,   855,   856,
     161,     0,   162,   732,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   733,     0,   171,
     172,   173,   174,   175,   176,   177,   734,   179,     0,   180,
       0,     0,   735,   181,   736,   737,   738,   182,   739,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,   740,   741,   190,   191,     0,   192,   742,   743,   194,
     195,     0,   196,   197,   198,   199,   744,   201,     0,   745,
     203,   746,   747,   748,   749,   750,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   751,   223,     0,   224,   752,   753,   225,     0,
       0,   226,   754,   755,   227,   756,   757,   228,     0,   229,
     758,   759,     0,   230,   231,   232,   760,   761,   762,     0,
       0,     0,     0,   763,   235,   764,     0,     0,   765,   236,
       0,   237,     0,     0,   766,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   767,     0,   264,
     265,   266,   267,   768,   769,   268,   269,     0,   270,   770,
     271,   272,   771,     0,   273,   274,   275,     0,     0,     0,
     772,   277,     0,   278,     0,   279,     0,   280,   281,   773,
     283,   774,   285,   286,     0,   287,     0,   775,   776,   777,
     288,   289,   290,     0,   291,   778,   779,     0,   292,   293,
       0,     0,     0,   780,   295,   296,   297,   298,   781,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   782,   304,   305,   783,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   784,     0,     0,   316,     0,   785,   317,
     318,     0,     0,     0,     0,     0,   786,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   787,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   788,   346,   347,   348,   349,   789,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     790,   358,     0,     0,   791,   360,   792,   361,     0,   362,
     793,   794,   795,   796,   797,   367,   368,   369,   370,   371,
     372,     0,   798,   373,     0,     0,   374,   375,   376,   377,
     799,   800,   801,   378,   379,     0,   802,   803,   804,   380,
       0,   805,   381,   382,   806,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   807,   394,     0,
     395,     0,   396,   397,   808,   809,   399,   400,   401,   402,
     810,   811,   405,   812,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   813,
     418,   419,     0,   814,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   815,
     816,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   817,     0,   818,   444,   445,   446,   447,
     819,     0,   820,   450,   821,   451,   452,   453,   454,     0,
     822,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   823,   824,   483,   484,   485,     0,
     486,   487,   825,   489,   490,   491,   826,   827,   492,   493,
     494,   495,   828,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   829,   502,   503,     0,   504,   830,   831,   832,
     833,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     834,   835,   836,   513,   514,   515,   837,   516,   517,   518,
     838,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   839,   527,     0,     0,   840,
     841,   842,   843,   528,     0,     0,   529,   844,     0,   845,
     530,   531,   532,   533,   534,   846,   847,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,     0,   848,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   849,   850,     0,     0,     0,     0,   851,   852,
       0,     0,   853,   854,     0,     0,   855,   856,   161,     0,
     162,   732,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   733,     0,   171,   172,   173,
     174,   175,   176,   177,   734,   179,     0,   180,     0,     0,
     735,   181,   736,   737,   738,   182,   739,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,   740,
     741,   190,   191,     0,   192,   742,   743,   194,   195,     0,
     196,   197,   198,   199,   744,   201,     0,   745,   203,   746,
     747,   748,   749,   750,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     751,   223,     0,   224,   752,   753,   225,     0,     0,   226,
     754,   755,   227,   756,   757,   228,     0,   229,   758,   759,
       0,   230,   231,   232,   760,   761,   762,     0,     0,     0,
       0,   763,   235,   764,     0,     0,   765,   236,     0,   237,
       0,     0,   766,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,   767,     0,   264,   265,   266,
     267,   768,   769,   268,   269,     0,   270,   770,   271,   272,
     771,     0,   273,   274,   275,     0,     0,     0,   772,   277,
       0,   278,     0,   279,     0,   280,   281,   773,   283,   774,
     285,   286,     0,   287,     0,   775,   776,   777,   288,   289,
     290,     0,   291,   778,   779,     0,   292,   293,     0,     0,
       0,   780,   295,   296,   297,   298,   781,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,   782,
     304,   305,   783,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   784,     0,     0,   316,     0,   785,   317,   318,     0,
       0,     0,     0,     0,   786,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,   787,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   788,   346,   347,   348,   349,   789,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   790,   358,
       0,     0,   791,   360,   792,   361,     0,   362,   793,   794,
     795,   796,   797,   367,   368,   369,   370,   371,   372,     0,
     798,   373,     0,     0,   374,   375,   376,   377,   799,   800,
     801,   378,   379,     0,   802,   803,   804,   380,     0,   805,
     381,   382,   806,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,   807,   394,     0,   395,     0,
     396,   397,   808,   809,   399,   400,   401,   402,   810,   811,
     405,   812,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   813,   418,   419,
       0,   814,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,   815,   816,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   817,     0,   818,   444,   445,   446,   447,   819,     0,
     820,   450,   821,   451,   452,   453,   454,     0,   822,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,   823,   824,   483,   484,   485,     0,   486,   487,
     825,   489,   490,   491,   826,   827,   492,   493,   494,   495,
     828,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     829,   502,   503,     0,   504,   830,   831,   832,   833,     0,
       0,     0,     0,     0,   509,   510,   511,     0,   834,   835,
     836,   513,   514,   515,   837,   516,   517,   518,   838,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   839,   527,     0,     0,   840,   841,   842,
     843,   528,     0,     0,   529,   844,     0,   845,   530,   531,
     532,   533,   534,   846,   847,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,     0,
     848,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     849,   850,     0,     0,     0,     0,   851,  1253,     0,     0,
     853,   854,     0,     0,   855,   856,   161,     0,   162,   732,
     164,   165,   166,   167,  1950,     0,   168,     0,     0,     0,
    1951,     0,     0,   733,     0,   171,   172,   173,   174,   175,
     176,   177,   734,   179,     0,   180,     0,     0,   735,   181,
     736,   737,   738,   182,   739,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   740,   741,   190,
     191,     0,   192,   742,   743,   194,   195,     0,   196,   197,
     198,   199,   744,   201,     0,   745,   203,   746,   747,   748,
     749,   750,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   751,   223,
       0,   224,   752,   753,   225,     0,     0,   226,   754,   755,
     227,   756,   757,   228,     0,   229,   758,   759,     0,   230,
     231,   232,   760,   761,   762,     0,     0,     0,     0,   763,
     235,   764,     0,     0,   765,   236,     0,   237,     0,     0,
     766,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,   767,     0,   264,   265,   266,   267,   768,
     769,   268,   269,     0,   270,   770,   271,   272,   771,     0,
     273,   274,   275,     0,     0,     0,   772,   277,     0,   278,
       0,   279,     0,   280,   281,   773,   283,   774,   285,   286,
       0,   287,     0,   775,   776,   777,   288,   289,   290,     0,
     291,   778,   779,     0,   292,   293,     0,     0,     0,   780,
     295,   296,   297,   298,   781,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,   782,   304,   305,
     783,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   784,
       0,     0,   316,     0,   785,   317,   318,     0,     0,     0,
       0,     0,   786,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,   787,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   788,
     346,   347,   348,   349,   789,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   790,   358,     0,     0,
     791,   360,   792,   361,     0,   362,   793,   794,   795,   796,
     797,   367,   368,   369,   370,   371,   372,     0,   798,   373,
       0,     0,   374,   375,   376,   377,   799,     0,   801,   378,
     379,     0,   802,   803,   804,   380,     0,   805,   381,   382,
     806,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,   807,   394,     0,   395,     0,   396,   397,
     808,   809,   399,   400,   401,   402,   810,   811,   405,   812,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   813,   418,   419,     0,   814,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,   815,   816,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   817,
       0,   818,   444,   445,   446,   447,   819,     0,   820,   450,
     821,   451,   452,   453,   454,     0,   822,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
     823,   824,   483,   484,   485,     0,   486,   487,   825,   489,
     490,   491,   826,   827,   492,   493,   494,   495,   828,   496,
     497,     0,     0,   498,   499,   500,   501,     0,   829,   502,
     503,     0,   504,   830,   831,   832,   833,     0,     0,     0,
       0,     0,   509,   510,   511,     0,   834,   835,   836,   513,
     514,   515,   837,   516,   517,   518,   838,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   839,   527,     0,     0,   840,   841,   842,   843,   528,
       0,     0,   529,   844,     0,   845,   530,   531,   532,   533,
     534,   846,   847,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,     0,   848,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   849,   850,
       0,     0,     0,     0,   851,   852,     0,     0,   853,   854,
       0,     0,   855,   856,   161,     0,   162,   732,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   733,     0,   171,   172,   173,   174,   175,   176,   177,
     734,   179,     0,   180,     0,     0,   735,   181,   736,   737,
     738,   182,   739,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,   740,   741,   190,   191,     0,
     192,   742,   743,   194,   195,     0,   196,   197,   198,   199,
     744,   201,     0,   745,   203,   746,   747,   748,   749,   750,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   751,   223,     0,   224,
     752,   753,   225,     0,     0,   226,   754,   755,   227,   756,
     757,   228,     0,   229,   758,   759,     0,   230,   231,   232,
     760,   761,   762,     0,     0,     0,     0,   763,   235,   764,
       0,     0,   765,   236,     0,   237,     0,     0,   766,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,   767,     0,   264,   265,   266,   267,   768,   769,   268,
     269,     0,   270,   770,   271,   272,   771,     0,   273,   274,
     275,     0,     0,     0,   772,   277,     0,   278,     0,   279,
       0,   280,   281,   773,   283,   774,   285,   286,     0,   287,
       0,   775,   776,   777,   288,   289,   290,     0,   291,   778,
     779,     0,   292,   293,     0,     0,     0,   780,   295,   296,
     297,   298,   781,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,   782,   304,   305,   783,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   784,     0,     0,
     316,     0,   785,   317,   318,     0,     0,     0,     0,     0,
     786,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,   787,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   788,   346,   347,
     348,   349,   789,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   790,   358,     0,     0,   791,   360,
     792,   361,     0,   362,   793,   794,   795,   796,   797,   367,
     368,   369,   370,   371,   372,     0,   798,   373,     0,     0,
     374,   375,   376,   377,   799,   800,   801,   378,   379,     0,
     802,   803,   804,   380,     0,   805,   381,   382,   806,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,   807,   394,     0,   395,     0,   396,   397,   808,   809,
     399,   400,   401,   402,   810,   811,   405,   812,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   813,   418,   419,     0,   814,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,   815,   816,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   817,     0,   818,
     444,   445,   446,   447,   819,     0,   820,   450,   821,   451,
     452,   453,   454,     0,   822,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   823,   824,
     483,   484,   485,     0,   486,   487,   825,   489,   490,   491,
     826,   827,   492,   493,   494,   495,   828,   496,   497,     0,
       0,   498,   499,   500,   501,     0,   829,   502,   503,     0,
     504,   830,   831,   832,   833,     0,     0,     0,     0,     0,
     509,   510,   511,     0,   834,   835,   836,   513,   514,   515,
     837,   516,   517,   518,   838,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,  2058,
     527,     0,     0,   840,   841,   842,   843,   528,     0,     0,
     529,   844,     0,   845,   530,   531,   532,   533,   534,   846,
     847,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,     0,   848,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   849,   850,     0,     0,
       0,     0,   851,   852,     0,     0,   853,   854,     0,     0,
     855,   856,   161,     0,   162,   732,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   733,
       0,   171,   172,   173,   174,   175,   176,   177,   734,   179,
       0,   180,     0,     0,   735,   181,   736,   737,   738,   182,
     739,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,   740,   741,   190,   191,     0,   192,   742,
     743,   194,   195,     0,   196,   197,   198,   199,   744,   201,
       0,   745,   203,   746,   747,   748,   749,   750,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   751,   223,     0,   224,   752,   753,
     225,     0,     0,   226,   754,   755,   227,   756,   757,   228,
       0,   229,   758,   759,     0,   230,   231,   232,   760,   761,
     762,     0,     0,     0,     0,   763,   235,   764,     0,     0,
     765,   236,     0,   237,     0,     0,   766,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,   767,
       0,   264,   265,   266,   267,   768,   769,   268,   269,     0,
     270,   770,   271,   272,   771,     0,   273,   274,   275,     0,
       0,     0,   772,   277,     0,   278,     0,   279,     0,   280,
     281,   773,   283,   774,   285,   286,     0,   287,     0,   775,
     776,   777,   288,   289,   290,     0,   291,   778,   779,     0,
     292,   293,     0,     0,     0,   780,   295,   296,   297,   298,
     781,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,   782,   304,   305,  2987,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   784,     0,     0,   316,     0,
     785,   317,   318,     0,     0,     0,     0,     0,   786,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,   787,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   788,   346,   347,   348,   349,
     789,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   790,   358,     0,     0,   791,   360,   792,   361,
       0,   362,   793,   794,   795,   796,   797,   367,   368,   369,
     370,   371,   372,     0,   798,   373,     0,     0,   374,   375,
     376,   377,   799,   800,   801,   378,   379,     0,   802,   803,
     804,   380,     0,   805,   381,   382,   806,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,   807,
     394,     0,   395,     0,   396,   397,   808,   809,   399,   400,
     401,   402,   810,   811,   405,   812,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   813,   418,   419,     0,   814,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,   815,   816,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   817,     0,   818,   444,   445,
     446,   447,   819,     0,   820,   450,   821,   451,   452,   453,
     454,     0,   822,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,   823,   824,   483,   484,
     485,     0,   486,   487,   825,   489,   490,   491,   826,   827,
     492,   493,   494,   495,   828,   496,   497,     0,     0,   498,
     499,   500,   501,     0,   829,   502,   503,     0,   504,   830,
     831,   832,   833,     0,     0,     0,     0,     0,   509,   510,
     511,     0,   834,   835,   836,   513,   514,   515,   837,   516,
     517,   518,   838,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   839,   527,     0,
       0,   840,   841,   842,   843,   528,     0,     0,   529,   844,
       0,   845,   530,   531,   532,   533,   534,   846,   847,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,     0,   848,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   849,   850,     0,     0,     0,     0,
     851,   852,     0,     0,   853,   854,     0,     0,   855,   856,
     161,     0,   162,   732,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   733,     0,   171,
     172,   173,   174,   175,   176,   177,   734,   179,     0,   180,
       0,     0,   735,   181,   736,   737,   738,   182,   739,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,   740,   741,   190,   191,     0,   192,   742,   743,   194,
     195,     0,   196,   197,   198,   199,   744,   201,     0,   745,
     203,   746,   747,   748,   749,   750,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   751,   223,     0,   224,   752,   753,   225,     0,
       0,   226,   754,   755,   227,   756,   757,   228,     0,   229,
     758,   759,     0,   230,   231,   232,   760,   761,   762,     0,
       0,     0,     0,   763,   235,   764,     0,     0,   765,   236,
       0,   237,     0,     0,   766,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   767,     0,   264,
     265,   266,   267,   768,   769,   268,   269,     0,   270,   770,
     271,   272,   771,     0,   273,   274,   275,     0,     0,     0,
     772,   277,     0,   278,     0,   279,     0,   280,   281,   773,
     283,   774,   285,   286,     0,   287,     0,   775,   776,   777,
     288,   289,   290,     0,   291,   778,   779,     0,   292,   293,
       0,     0,     0,   780,   295,   296,   297,   298,   781,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   782,   304,   305,  3045,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   784,     0,     0,   316,     0,   785,   317,
     318,     0,     0,     0,     0,     0,   786,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   787,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   788,   346,   347,   348,   349,   789,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     790,   358,     0,     0,   791,   360,   792,   361,     0,   362,
     793,   794,   795,   796,   797,   367,   368,   369,   370,   371,
     372,     0,   798,   373,     0,     0,   374,   375,   376,   377,
     799,   800,   801,   378,   379,     0,   802,   803,   804,   380,
       0,   805,   381,   382,   806,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   807,   394,     0,
     395,     0,   396,   397,   808,   809,   399,   400,   401,   402,
     810,   811,   405,   812,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   813,
     418,   419,     0,   814,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   815,
     816,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   817,     0,   818,   444,   445,   446,   447,
     819,     0,   820,   450,   821,   451,   452,   453,   454,     0,
     822,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   823,   824,   483,   484,   485,     0,
     486,   487,   825,   489,   490,   491,   826,   827,   492,   493,
     494,   495,   828,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   829,   502,   503,     0,   504,   830,   831,   832,
     833,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     834,   835,   836,   513,   514,   515,   837,   516,   517,   518,
     838,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   839,   527,     0,     0,   840,
     841,   842,   843,   528,     0,     0,   529,   844,     0,   845,
     530,   531,   532,   533,   534,   846,   847,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,     0,   848,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   849,   850,     0,     0,     0,     0,   851,   852,
       0,     0,   853,   854,     0,     0,   855,   856,   161,     0,
     162,   732,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   733,     0,   171,   172,   173,
     174,   175,   176,   177,   734,   179,     0,   180,     0,     0,
     735,   181,   736,   737,   738,   182,   739,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,   740,
     741,   190,   191,     0,   192,   742,   743,   194,   195,     0,
     196,   197,   198,   199,   744,   201,     0,   745,   203,   746,
     747,   748,   749,   750,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     751,   223,     0,   224,   752,   753,   225,     0,     0,   226,
     754,   755,   227,   756,   757,   228,     0,   229,   758,   759,
       0,   230,   231,   232,   760,   761,   762,     0,     0,     0,
       0,   763,   235,   764,     0,     0,   765,   236,     0,   237,
       0,     0,   766,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,   767,     0,   264,   265,   266,
     267,   768,   769,   268,   269,     0,   270,   770,   271,   272,
     771,     0,   273,   274,   275,     0,     0,     0,   772,   277,
       0,   278,     0,   279,     0,   280,   281,   773,   283,   774,
     285,   286,     0,   287,     0,   775,   776,   777,   288,   289,
     290,     0,   291,   778,   779,     0,   292,   293,     0,     0,
       0,   780,   295,   296,   297,   298,   781,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,   782,
     304,   305,   783,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   784,     0,     0,   316,     0,   785,   317,   318,     0,
       0,     0,     0,     0,   786,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,   787,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   788,   346,   347,   348,   349,   789,   350,   351,   352,
    5122,     0,     0,     0,   353,   354,   355,   356,   790,   358,
       0,     0,   791,   360,   792,   361,     0,   362,   793,   794,
     795,   796,   797,   367,   368,   369,   370,   371,   372,     0,
     798,   373,     0,     0,   374,   375,   376,   377,   799,     0,
     801,   378,   379,     0,   802,   803,   804,   380,     0,   805,
     381,   382,   806,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,   807,   394,     0,   395,     0,
     396,   397,   808,   809,   399,   400,   401,   402,   810,   811,
     405,   812,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   813,   418,   419,
       0,   814,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,   815,   816,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   817,     0,   818,   444,   445,   446,   447,   819,     0,
     820,   450,   821,   451,   452,   453,   454,     0,   822,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,   823,   824,   483,   484,   485,     0,   486,   487,
     825,   489,   490,   491,   826,   827,   492,   493,   494,   495,
     828,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     829,   502,   503,     0,   504,   830,   831,   832,   833,     0,
       0,     0,     0,     0,   509,   510,   511,     0,   834,   835,
     836,   513,   514,   515,   837,   516,   517,   518,   838,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   839,   527,     0,     0,   840,   841,   842,
     843,   528,     0,     0,   529,   844,     0,   845,   530,   531,
     532,   533,   534,   846,   847,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,     0,
     848,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     849,   850,     0,     0,     0,     0,   851,   852,     0,     0,
     853,   854,     0,     0,   855,   856,   161,     0,   162,   732,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   733,     0,   171,   172,   173,   174,   175,
     176,   177,   734,   179,     0,   180,     0,     0,   735,   181,
     736,   737,   738,   182,   739,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   740,   741,   190,
     191,     0,   192,   742,   743,   194,   195,     0,   196,   197,
     198,   199,   744,   201,     0,   745,   203,   746,   747,   748,
     749,   750,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   751,   223,
       0,   224,   752,   753,   225,     0,     0,   226,   754,   755,
     227,   756,   757,   228,     0,   229,   758,   759,     0,   230,
     231,   232,   760,   761,   762,     0,     0,     0,     0,   763,
     235,   764,     0,     0,   765,   236,     0,   237,     0,     0,
     766,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,   767,     0,   264,   265,   266,   267,   768,
     769,   268,   269,     0,   270,   770,   271,   272,   771,     0,
     273,   274,   275,     0,     0,     0,   772,   277,     0,   278,
       0,   279,     0,   280,   281,   773,   283,   774,   285,   286,
       0,   287,     0,   775,   776,   777,   288,   289,   290,     0,
     291,   778,   779,     0,   292,   293,     0,     0,     0,   780,
     295,   296,   297,   298,   781,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,   782,   304,   305,
     783,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   784,
       0,     0,   316,     0,   785,   317,   318,     0,     0,     0,
       0,     0,   786,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,   787,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   788,
     346,   347,   348,   349,   789,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   790,   358,     0,     0,
     791,   360,   792,   361,     0,   362,   793,   794,   795,   796,
     797,   367,   368,   369,   370,   371,   372,     0,   798,   373,
       0,     0,   374,   375,   376,   377,   799,     0,   801,   378,
     379,     0,   802,   803,   804,   380,     0,   805,   381,   382,
     806,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,   807,   394,     0,   395,     0,   396,   397,
     808,   809,   399,   400,   401,   402,   810,   811,   405,   812,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   813,   418,   419,     0,   814,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,   815,   816,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   817,
       0,   818,   444,   445,   446,   447,   819,     0,   820,   450,
     821,   451,   452,   453,   454,     0,   822,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
     823,   824,   483,   484,   485,     0,   486,   487,   825,   489,
     490,   491,   826,   827,   492,   493,   494,   495,   828,   496,
     497,     0,     0,   498,   499,   500,   501,     0,   829,   502,
     503,     0,   504,   830,   831,   832,   833,     0,     0,     0,
       0,     0,   509,   510,   511,     0,   834,   835,   836,   513,
     514,   515,   837,   516,   517,   518,   838,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   839,   527,     0,     0,   840,   841,   842,   843,   528,
       0,     0,   529,   844,     0,   845,   530,   531,   532,   533,
     534,   846,   847,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,     0,   848,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   849,   850,
       0,     0,     0,     0,   851,   852,     0,     0,   853,   854,
       0,     0,   855,   856,   161,     0,   162,   732,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   733,     0,   171,   172,   173,   174,   175,   176,   177,
     734,   179,     0,   180,     0,     0,   735,   181,   736,   737,
     738,   182,   739,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,   740,   741,   190,   191,     0,
     192,   742,   743,   194,   195,     0,   196,   197,   198,   199,
     744,   201,     0,   745,   203,   746,   747,   748,   749,   750,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   751,   223,     0,   224,
     752,   753,   225,     0,     0,   226,   754,   755,   227,   756,
     757,   228,     0,   229,   758,   759,     0,   230,   231,   232,
     760,   761,   762,     0,     0,     0,     0,   763,   235,   764,
       0,     0,   765,   236,     0,   237,     0,     0,   766,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,   767,     0,   264,   265,   266,   267,   768,   769,   268,
     269,     0,   270,   770,   271,   272,   771,     0,   273,   274,
     275,     0,     0,     0,   772,   277,     0,   278,     0,   279,
       0,   280,   281,   773,   283,   774,   285,   286,     0,   287,
       0,   775,   776,   777,   288,   289,   290,     0,   291,   778,
     779,     0,   292,   293,     0,     0,     0,   780,   295,   296,
     297,   298,   781,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,   782,   304,   305,  1965,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   784,     0,     0,
     316,     0,   785,   317,   318,     0,     0,     0,     0,     0,
     786,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,   787,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   788,   346,   347,
     348,   349,   789,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   790,   358,     0,     0,   791,   360,
     792,   361,     0,   362,   793,   794,   795,   796,   797,   367,
     368,   369,   370,   371,   372,     0,   798,   373,     0,     0,
     374,   375,   376,   377,   799,     0,   801,   378,   379,     0,
     802,   803,   804,   380,     0,   805,   381,   382,   806,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,   807,   394,     0,   395,     0,   396,   397,   808,   809,
     399,   400,   401,   402,   810,   811,   405,   812,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   813,   418,   419,     0,   814,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,   815,   816,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   817,     0,   818,
     444,   445,   446,   447,   819,     0,   820,   450,   821,   451,
     452,   453,   454,     0,   822,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   823,   824,
     483,   484,   485,     0,   486,   487,   825,   489,   490,   491,
     826,   827,   492,   493,   494,   495,   828,   496,   497,     0,
       0,   498,   499,   500,   501,     0,   829,   502,   503,     0,
     504,   830,   831,   832,   833,     0,     0,     0,     0,     0,
     509,   510,   511,     0,   834,   835,   836,   513,   514,   515,
     837,   516,   517,   518,   838,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   839,
     527,     0,     0,   840,   841,   842,   843,   528,     0,     0,
     529,   844,     0,   845,   530,   531,   532,   533,   534,   846,
     847,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,     0,   848,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   849,   850,     0,     0,
       0,     0,   851,   852,     0,     0,   853,   854,     0,     0,
     855,   856,   161,     0,   162,   732,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   733,
       0,   171,   172,   173,   174,   175,   176,   177,   734,   179,
       0,   180,     0,     0,   735,   181,   736,   737,   738,   182,
     739,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,   740,   741,   190,   191,     0,   192,   742,
     743,   194,   195,     0,   196,   197,   198,   199,   744,   201,
       0,   745,   203,   746,   747,   748,   749,   750,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   751,   223,     0,   224,   752,   753,
     225,     0,     0,   226,   754,   755,   227,   756,   757,   228,
       0,   229,   758,   759,     0,   230,   231,   232,   760,   761,
     762,     0,     0,     0,     0,   763,   235,   764,     0,     0,
     765,   236,     0,   237,     0,     0,   766,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,   767,
       0,   264,   265,   266,   267,   768,   769,   268,   269,     0,
     270,   770,   271,   272,   771,     0,   273,   274,   275,     0,
       0,     0,   772,   277,     0,   278,     0,   279,     0,   280,
     281,   773,   283,   774,   285,   286,     0,   287,     0,   775,
     776,   777,   288,   289,   290,     0,   291,   778,   779,     0,
     292,   293,     0,     0,     0,   780,   295,   296,   297,   298,
     781,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,   782,   304,   305,  1967,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   784,     0,     0,   316,     0,
     785,   317,   318,     0,     0,     0,     0,     0,   786,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,   787,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   788,   346,   347,   348,   349,
     789,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   790,   358,     0,     0,   791,   360,   792,   361,
       0,   362,   793,   794,   795,   796,   797,   367,   368,   369,
     370,   371,   372,     0,   798,   373,     0,     0,   374,   375,
     376,   377,   799,     0,   801,   378,   379,     0,   802,   803,
     804,   380,     0,   805,   381,   382,   806,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,   807,
     394,     0,   395,     0,   396,   397,   808,   809,   399,   400,
     401,   402,   810,   811,   405,   812,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   813,   418,   419,     0,   814,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,   815,   816,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   817,     0,   818,   444,   445,
     446,   447,   819,     0,   820,   450,   821,   451,   452,   453,
     454,     0,   822,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,   823,   824,   483,   484,
     485,     0,   486,   487,   825,   489,   490,   491,   826,   827,
     492,   493,   494,   495,   828,   496,   497,     0,     0,   498,
     499,   500,   501,     0,   829,   502,   503,     0,   504,   830,
     831,   832,   833,     0,     0,     0,     0,     0,   509,   510,
     511,     0,   834,   835,   836,   513,   514,   515,   837,   516,
     517,   518,   838,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   839,   527,     0,
       0,   840,   841,   842,   843,   528,     0,     0,   529,   844,
       0,   845,   530,   531,   532,   533,   534,   846,   847,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,     0,   848,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   849,   850,     0,     0,     0,     0,
     851,   852,     0,     0,   853,   854,     0,     0,   855,   856,
     161,     0,   162,   732,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   733,     0,   171,
     172,   173,   174,   175,   176,   177,   734,   179,     0,   180,
       0,     0,     0,   181,   736,   737,   738,   182,   739,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,   740,   741,   190,   191,     0,   192,   742,   743,   194,
     195,     0,   196,   197,   198,   199,   744,   201,     0,   745,
     203,   746,   747,   748,   749,   750,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   751,   223,     0,   224,   752,   753,   225,     0,
       0,   226,   754,   755,   227,   756,   757,   228,     0,   229,
     758,   759,     0,   230,   231,   232,   760,   761,   762,     0,
       0,     0,     0,   763,   235,   764,     0,     0,   765,   236,
       0,   237,     0,     0,   766,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   767,     0,   264,
     265,   266,   267,   768,   769,   268,   269,     0,   270,   770,
     271,   272,   771,     0,   273,   274,   275,     0,     0,     0,
     772,   277,     0,   278,     0,   279,     0,   280,   281,   773,
     283,   774,   285,   286,     0,   287,     0,   775,   776,   777,
     288,   289,   290,     0,   291,   778,   779,     0,   292,   293,
       0,     0,     0,   780,   295,   296,   297,   298,   781,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   782,   304,   305,  4605,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   784,     0,     0,   316,     0,   785,   317,
     318,     0,     0,     0,     0,     0,   786,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   787,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   788,   346,   347,   348,   349,   789,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     790,   358,     0,     0,   791,   360,   792,   361,     0,   362,
     793,   794,   795,   796,   797,   367,   368,   369,   370,   371,
     372,     0,   798,   373,     0,     0,   374,   375,   376,   377,
       0,     0,   801,   378,   379,     0,   802,   803,   804,   380,
       0,   805,   381,   382,   806,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   807,   394,     0,
     395,     0,   396,   397,   808,   809,   399,   400,   401,   402,
     810,   811,   405,   812,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   813,
     418,   419,     0,   814,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   815,
     816,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   817,     0,   818,   444,   445,   446,   447,
     819,     0,   820,   450,   821,   451,   452,   453,   454,     0,
     822,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   823,   824,   483,   484,   485,     0,
     486,   487,   825,   489,   490,   491,   826,   827,   492,   493,
     494,   495,   828,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   829,   502,   503,     0,   504,   830,   831,   832,
     833,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     834,   835,   836,   513,   514,   515,   837,   516,   517,   518,
     838,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   839,   527,     0,     0,   840,
     841,   842,   843,   528,     0,     0,   529,   844,     0,   845,
     530,   531,   532,   533,   534,   846,   847,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,     0,   848,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4606,  4607,     0,     0,     0,     0,     0,  4608,
       0,     0,     0,   854,     0,     0,   855,   856,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,   736,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,  2013,     0,     0,     0,
       0,   234,   235,   764,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,   769,   268,   269,     0,   270,     0,   271,   272,
     771,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,   778,   779,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,     0,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,   787,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     798,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,   803,   804,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     829,   502,   503,     0,   504,  2014,   506,   507,  2015,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,   835,
     512,   513,   514,   515,   837,   516,   517,   518,   838,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,     0,
     543,     0,     0,     0,     0,     0,     0,     0,     0,   161,
       0,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,   855,   856,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,  1019,  1020,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,   235,     0,     0,     0,  1021,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,  1022,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,  1023,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,  1024,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,  1025,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,  1026,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,  1027,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,     0,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,  1028,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
       0,   543,     0,     0,     0,     0,     0,     0,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,  1029,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,     0,   270,     0,   271,   272,
       0,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,     0,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,   679,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     157,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
     512,   513,   514,   515,     0,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,     0,
     543,     0,     0,     0,     0,     0,     0,   161,     0,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,  1542,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,   679,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,   157,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,     0,   543,
       0,     0,     0,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,  1938,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
     273,   274,   275,     0,     0,     0,   276,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,     0,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,   679,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,   378,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,   157,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,   512,   513,
     514,   515,     0,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,     0,   543,     0,
       0,     0,     0,     0,     0,   161,     0,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,  2776,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,  1019,  1020,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,  1021,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,  1022,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,  1023,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,  1024,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,  1025,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,  1026,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,  1027,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,     0,   543,     0,     0,
       0,     0,     0,     0,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,  1029,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,     0,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,     0,   543,     0,     0,     0,
       0,     0,     0,     0,     0,   161,     0,   162,   163,   164,
     165,   166,   167,     0,  5169,   168,     0,     0,     0,   169,
     855,  5170,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
    1409,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,     0,   543,     0,     0,
       0,     0,     0,     0,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,  1410,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,     0,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,     0,   543,     0,     0,     0,
       0,     0,     0,     0,     0,   161,     0,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
     855,  5170,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,     0,   543,     0,     0,
       0,     0,     0,     0,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,  1410,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,  3729,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,   651,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,  2339,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,  2340,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,  3730,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456, -2226,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,   653,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,     0,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,    60,     0,     0,   538,   539,
       0,   540,   541,   542,     0,     0,   543,     0,     0,     0,
       0,     0,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
    3411,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
    3729,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,   651,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,  2339,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,  2340,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,   653,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,     0,   543,     0,     0,     0,     0,     0,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,  3411,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,   537,
       0,    60,     0,     0,   538,   539,     0,   540,   541,   542,
       0,     0,   543,     0,     0,     0,     0,     0,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
    3163,     0,   169,     0,     0,   170,   855,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,     0,   270,     0,   271,   272,
       0,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,     0,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,     0,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
       0,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
     512,   513,   514,   515,     0,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,     0,
     543,     0,     0,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,  1258,     0,     0,
     169,     0,     0,   170,   855,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
     273,   274,   275,     0,     0,     0,   276,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,     0,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,  1490,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,   378,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,   512,   513,
     514,   515,     0,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,     0,   543,     0,
       0,     0,     0,     0,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,   583,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,     0,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,     0,   543,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   161,  2595,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
     583,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,     0,   543,
       0,     0,     0,     0,     0,   161,     0,   162,   163,   164,
     165,   166,   167,     0,     0,   168,  3410,     0,     0,   169,
       0,     0,   170,  3411,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,  3780,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,     0,   543,     0,     0,
       0,     0,     0,   161,     0,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,  3411,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,     0,     0,
       0,     0,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,     0,   543,     0,     0,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,   583,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   662,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   663,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   664,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,     0,   543,     0,     0,     0,     0,     0,   161,
       0,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,   583,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,   235,     0,     0,     0,     0,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,     0,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
       0,   543,     0,     0,     0,     0,     0,   161,     0,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,   855,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,     0,   543,
       0,     0,     0,     0,     0,   161,     0,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,     0,  3411,   171,   172,   173,   174,   175,   176,
     177,   178,     0,     0,   955,     0,     0,     0,     0,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,     0,     0,     0,     0,   189,     7,     0,   190,   191,
       0,   192,     0,     0,     0,     0,     0,   196,   197,   198,
     956,   200,   201,     0,   202,   203,     0,     0,     0,     0,
       0,     0,   209,     0,   211,     0,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,     0,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,     0,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,     0,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,     0,
       0,     0,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,   957,   270,     0,   271,   272,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,     0,   286,     0,
     287,     0,     0,     0,     0,     0,   289,   290,     0,     0,
       0,     0,     0,     0,   293,     0,     0,     0,   294,   295,
     296,   297,   298,    26,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,     0,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,   958,
       0,   311,     0,   312,     0,     0,     0,   314,   315,     0,
       0,   316,   959,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,    32,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,     0,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   960,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   392,
     393,     0,     0,     0,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,     0,
       0,     0,     0,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,     0,
       0,   433,     0,   435,    41,     0,   436,     0,     0,     0,
     438,     0,     0,   440,   441,     0,   442,   961,   443,     0,
       0,   444,     0,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,     0,   455,     0,     0,     0,     0,
     457,   458,   459,     0,     0,     0,     0,   461,     0,     0,
       0,     0,     0,     0,   464,     0,     0,   467,   468,     0,
     469,     0,   471,     0,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,     0,   481,     0,     0,     0,   482,     0,
       0,     0,   484,     0,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,     0,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,     0,   513,   514,
     515,     0,     0,   517,   518,     0,   519,   520,     0,     0,
       0,     0,     0,   523,     0,     0,   524,     0,     0,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,    59,     0,     0,     0,   538,
       0,     0,   540,     0,   542,     0,     0,   543,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,  4818,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,  1136,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,     0,   270,     0,   271,   272,
       0,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,     0,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,   679,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     157,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
     512,   513,   514,   515,     0,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,   161,
     543,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,  1308,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,   235,     0,     0,     0,     0,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,     0,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
     161,   543,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,  1979,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,   161,   543,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,  2405,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,   161,   543,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,  3619,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,   161,   543,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,  3760,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,     0,     0,
       0,     0,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,   161,   543,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,  4386,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,  1529,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,  1530,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,   679,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,  1531,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,   157,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,     0,   543,     0,     0,     0,
     161,  1532,   162,   163,   164,   165,   166,   167,   903,   904,
     168,     0,     0,     0,   169,     0,     0,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,   905,
       0,   226,     0,     0,   227,     0,   906,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,     0,   236,
       0,   237,     0,   907,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,   908,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   909,   259,   260,   261,   262,   910,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   911,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,   912,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,   913,     0,   303,     0,     0,
       0,   914,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,   679,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,   915,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   916,   413,   414,   415,   917,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,   918,     0,   426,   427,   428,
     429,   430,     0,   919,   432,     0,   433,   434,   435,     0,
       0,   920,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,   921,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,   922,   923,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   924,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   157,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,   925,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,   926,   525,   927,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,   161,   543,  1009,   163,   164,   165,   166,   167,  1010,
     904,   168,     0,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
     905,     0,   226,     0,     0,   227,     0,   906,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,   907,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
     908,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   909,   259,   260,   261,   262,   910,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   911,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,   912,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,   913,     0,   303,     0,
       0,     0,   914,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,   679,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,   915,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   916,   413,   414,   415,  1011,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,   918,     0,   426,   427,
     428,   429,   430,     0,   919,   432,     0,   433,   434,   435,
       0,     0,   920,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,   921,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,   922,   923,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   924,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,   157,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
     925,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,   926,   525,   927,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,   161,   543,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,  2665,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,  2666,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,  2667,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,  2668,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,   153,   154,     0,   378,   379,     0,     0,     0,
    2669,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,  4678,   611,  4679,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,  2670,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,   161,   543,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,  1815,     0,
       0,  3879,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,  1816,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,  3298,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
    3299,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,  3300,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   157,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,  3301,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,   161,   543,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,  1815,
       0,     0,  4912,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,  1816,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,  3298,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,  3299,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,  3300,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,   157,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
    3301,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,   161,   543,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
    1815,     0,     0,  4980,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,  1816,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
    3298,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,  3299,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,  3300,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   157,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,  3301,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,   161,   543,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
     273,   274,   275,     0,     0,     0,   276,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,     0,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,  2167,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,   378,
     379,     0,     0,     0,  2168,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,   807,   394,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,   444,   445,   446,   447,   448,  2169,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,   512,   513,
     514,   515,  2170,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,   161,   543,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,  2167,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,  2168,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,   807,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,  4493,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,  2170,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,   161,   543,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,  1136,   906,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,     0,   270,     0,   271,   272,
       0,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,     0,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,   679,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     157,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
     512,   513,   514,   515,     0,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,   161,
     543,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,  1544,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,   235,     0,     0,     0,  1545,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
     679,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,   157,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
     161,   543,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,  1096,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,  1097,  1098,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,  1099,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,   161,   543,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,  2167,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,  2168,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,   807,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,  2170,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,   161,   543,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,  1529,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
    1530,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,   679,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,   157,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,   161,   543,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,  1136,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,     0,     0,
       0,     0,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   679,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   157,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,   161,   543,   162,   163,   164,   165,
     166,   167,  1568,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,   679,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,   157,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,   161,   543,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,   906,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,   679,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   157,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,   161,   543,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,  2687,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
     273,   274,   275,     0,     0,     0,   276,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,     0,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,   679,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,   378,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,   157,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,   512,   513,
     514,   515,     0,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,   161,   543,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,  1529,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,   679,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,   157,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,   161,   543,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,     0,   270,     0,   271,   272,
       0,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,     0,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,   679,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     157,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
     512,   513,   514,   515,     0,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,   161,
     543,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   222,   223,  3425,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,   235,     0,     0,     0,     0,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,  3426,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,     0,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
     161,   543,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,  3756,     0,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   157,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,   161,   543,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,   611,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,   161,   543,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,  1198,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,   161,   543,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,     0,     0,
       0,  1522,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,   161,   543,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,  1522,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,     0,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
    2137,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,   161,   543,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,  2332,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,   161,   543,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
     273,   274,   275,     0,     0,     0,   276,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,     0,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,   378,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,  3434,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,   512,   513,
     514,   515,     0,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,   161,   543,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,     0,     0,     0,  3796,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,   161,   543,
     162,   163,   164,   165,   166,   167,  3804,     0,   168,     0,
       0,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,     0,   270,     0,   271,   272,
       0,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,     0,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,     0,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
       0,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
     512,   513,   514,   515,     0,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,   161,
     543,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,   235,     0,     0,     0,  3829,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,     0,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
     161,   543,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   157,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,   161,   543,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,  4814,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,   161,   543,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,   161,   543,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,     0,     0,
       0,     0,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   577,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,   161,   543,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,  2048,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,  2049,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,     0,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,   161,   543,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,   161,   543,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,     0,     0,   955,     0,     0,     0,     0,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,     0,     0,     0,     0,   189,     7,     0,   190,
     191,     0,   192,     0,     0,     0,     0,     0,   196,   197,
     198,   956,   200,   201,     0,   202,   203,     0,     0,     0,
       0,     0,     0,   209,     0,   211,     0,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,     0,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
       0,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,     0,     0,     0,   245,   246,   247,
       0,  -343,  -343,   248,     0,  -343,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
       0,     0,     0,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,   957,   270,     0,   271,   272,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,     0,   286,
       0,   287,     0,     0,     0,     0,     0,   289,   290,     0,
       0,     0,     0,     0,     0,   293,     0,     0,     0,   294,
     295,   296,   297,   298,    26,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,     0,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
     958,     0,   311,     0,   312,     0,     0,     0,   314,   315,
       0,     0,   316,   959,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,    32,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,     0,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   960,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     392,   393,     0,     0,     0,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,     0,     0,
       0,     0,     0,     0,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
       0,     0,   433,     0,   435,    41,     0,   436,     0,     0,
       0,   438,     0,     0,   440,   441,     0,   442,   961,   443,
       0,     0,   444,     0,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   453,   454,     0,   455,     0,     0,     0,
       0,   457,   458,   459,     0,     0,     0,     0,   461,     0,
       0,     0,     0,     0,     0,   464,     0,     0,   467,   468,
       0,   469,     0,   471,     0,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,     0,   481,     0,     0,     0,   482,
       0,     0,     0,   484,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,     0,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,     0,   513,
     514,   515,     0,     0,   517,   518,     0,   519,   520,     0,
       0,     0,     0,     0,   523,     0,     0,   524,     0,     0,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,     0,    59,     0,     0,     0,
     538,     0,     0,   540,     0,   542,     0,   161,   543,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,     0,     0,   955,     0,     0,     0,
       0,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,     0,     0,     0,     0,   189,     7,     0,
     190,   191,     0,   192,     0,     0,     0,     0,     0,   196,
     197,   198,   956,   200,   201,     0,   202,   203,     0,     0,
       0,     0,     0,     0,   209,     0,   211,     0,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,     0,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,     0,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,     0,     0,     0,   245,   246,
     247,     0,  -363,     0,   248,     0,  -363,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,     0,     0,     0,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,   957,   270,     0,   271,   272,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,     0,
     286,     0,   287,     0,     0,     0,     0,     0,   289,   290,
       0,     0,     0,     0,     0,     0,   293,     0,     0,     0,
     294,   295,   296,   297,   298,    26,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
       0,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,   958,     0,   311,     0,   312,     0,     0,     0,   314,
     315,     0,     0,   316,   959,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,    32,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
       0,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   960,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   392,   393,     0,     0,     0,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,     0,
       0,     0,     0,     0,     0,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,     0,     0,   433,     0,   435,    41,     0,   436,     0,
       0,     0,   438,     0,     0,   440,   441,     0,   442,   961,
     443,     0,     0,   444,     0,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,     0,   455,     0,     0,
       0,     0,   457,   458,   459,     0,     0,     0,     0,   461,
       0,     0,     0,     0,     0,     0,   464,     0,     0,   467,
     468,     0,   469,     0,   471,     0,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,     0,   481,     0,     0,     0,
     482,     0,     0,     0,   484,     0,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,     0,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,     0,
     513,   514,   515,     0,     0,   517,   518,     0,   519,   520,
       0,     0,     0,     0,     0,   523,     0,     0,   524,     0,
       0,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,  -363,     0,     0,    59,     0,     0,
       0,   538,     0,     0,   540,     0,   542,     0,   161,   543,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,     0,     0,   955,     0,     0,
       0,     0,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,     0,     0,     0,     0,   189,     7,
       0,   190,   191,     0,   192,     0,     0,     0,     0,     0,
     196,   197,   198,   956,   200,   201,     0,   202,   203,     0,
       0,     0,     0,     0,     0,   209,     0,   211,     0,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
       0,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,     0,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,     0,     0,     0,   245,
     246,   247,     0,  -360,     0,   248,     0,  -360,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,     0,     0,     0,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,   957,   270,     0,   271,   272,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
       0,   286,     0,   287,     0,     0,     0,     0,     0,   289,
     290,     0,     0,     0,     0,     0,     0,   293,     0,     0,
       0,   294,   295,   296,   297,   298,    26,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,     0,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,   958,     0,   311,     0,   312,     0,     0,     0,
     314,   315,     0,     0,   316,   959,     0,   317,   318,     0,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,    32,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,     0,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   960,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   392,   393,     0,     0,     0,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
       0,     0,     0,     0,     0,     0,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,     0,     0,   433,     0,   435,    41,     0,   436,
       0,     0,     0,   438,     0,     0,   440,   441,     0,   442,
     961,   443,     0,     0,   444,     0,   446,   447,   448,     0,
     449,   450,     0,   451,     0,   453,   454,     0,   455,     0,
       0,     0,     0,   457,   458,   459,     0,     0,     0,     0,
     461,     0,     0,     0,     0,     0,     0,   464,     0,     0,
     467,   468,     0,   469,     0,   471,     0,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,     0,   481,     0,     0,
       0,   482,     0,     0,     0,   484,     0,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
       0,   502,   503,     0,     0,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
       0,   513,   514,   515,     0,     0,   517,   518,     0,   519,
     520,     0,     0,     0,     0,     0,   523,     0,     0,   524,
       0,     0,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,  -360,     0,     0,    59,     0,
       0,     0,   538,     0,     0,   540,     0,   542,     0,   161,
     543,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,     0,   955,     0,
       0,     0,     0,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,     0,     0,     0,     0,   189,
       7,     0,   190,   191,     0,   192,     0,     0,     0,     0,
       0,   196,   197,   198,   956,   200,   201,     0,   202,   203,
       0,     0,     0,     0,     0,     0,   209,     0,   211,     0,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,     0,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,     0,     0,     0,     0,     0,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,     0,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,  1469,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,     0,     0,     0,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,   957,   270,     0,   271,
     272,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,     0,   286,     0,   287,     0,     0,     0,     0,     0,
     289,   290,     0,     0,     0,     0,     0,     0,   293,     0,
       0,     0,   294,   295,   296,   297,   298,    26,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,     0,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,   958,     0,   311,     0,   312,     0,     0,
       0,   314,   315,     0,     0,   316,   959,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,    32,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,     0,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   960,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   392,   393,     0,     0,     0,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,     0,     0,     0,     0,     0,     0,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,     0,     0,   433,     0,   435,    41,     0,
     436,     0,     0,     0,   438,     0,     0,   440,   441,     0,
     442,   961,   443,     0,     0,   444,     0,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,     0,   455,
       0,     0,     0,     0,   457,   458,   459,     0,     0,     0,
       0,   461,     0,     0,     0,     0,     0,     0,   464,     0,
       0,   467,   468,     0,   469,     0,   471,     0,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,     0,   481,     0,
       0,     0,   482,     0,     0,     0,   484,     0,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,     0,   502,   503,     0,     0,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,     0,   513,   514,   515,     0,     0,   517,   518,     0,
     519,   520,     0,     0,     0,     0,     0,   523,     0,     0,
     524,     0,     0,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,     0,    59,
       0,     0,     0,   538,     0,     0,   540,     0,   542,     0,
     161,   543,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,     0,     0,   955,
       0,     0,     0,     0,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,     0,     0,     0,     0,
     189,     7,     0,   190,   191,     0,   192,     0,     0,     0,
       0,     0,   196,   197,   198,   956,   200,   201,     0,   202,
     203,     0,     0,     0,     0,     0,     0,   209,     0,   211,
       0,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,     0,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,     0,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,  -365,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,     0,     0,     0,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,   957,   270,     0,
     271,   272,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,     0,   286,     0,   287,     0,     0,     0,     0,
       0,   289,   290,     0,     0,     0,     0,     0,     0,   293,
       0,     0,     0,   294,   295,   296,   297,   298,    26,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,     0,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,   958,     0,   311,     0,   312,     0,
       0,     0,   314,   315,     0,     0,   316,   959,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,    32,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,     0,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   960,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   392,   393,     0,     0,     0,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,     0,     0,     0,     0,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,     0,     0,   433,     0,   435,    41,
       0,   436,     0,     0,     0,   438,     0,     0,   440,   441,
       0,   442,   961,   443,     0,     0,   444,     0,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   453,   454,     0,
     455,     0,     0,     0,     0,   457,   458,   459,     0,     0,
       0,     0,   461,     0,     0,     0,     0,     0,     0,   464,
       0,     0,   467,   468,     0,   469,     0,   471,     0,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,     0,   481,
       0,     0,     0,   482,     0,     0,     0,   484,     0,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,     0,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,     0,   513,   514,   515,     0,     0,   517,   518,
       0,   519,   520,     0,     0,     0,     0,     0,   523,     0,
       0,   524,     0,     0,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
      59,     0,     0,     0,   538,     0,     0,   540,     0,   542,
       0,   161,   543,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
     955,     0,     0,     0,     0,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,     0,     0,     0,
       0,   189,     7,     0,   190,   191,     0,   192,     0,     0,
       0,     0,     0,   196,   197,   198,   956,   200,   201,     0,
     202,   203,     0,     0,     0,     0,     0,     0,   209,     0,
     211,     0,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,     0,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,     0,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,     0,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
    3241,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,     0,     0,     0,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,   957,   270,
       0,   271,   272,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,     0,   286,     0,   287,     0,     0,     0,
       0,     0,   289,   290,     0,     0,     0,     0,     0,     0,
     293,     0,     0,     0,   294,   295,   296,   297,   298,    26,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,     0,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,   958,     0,   311,     0,   312,
       0,     0,     0,   314,   315,     0,     0,   316,   959,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
      32,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,     0,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     960,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   392,   393,     0,     0,     0,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,     0,     0,     0,     0,     0,     0,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,     0,     0,   433,     0,   435,
      41,     0,   436,     0,     0,     0,   438,     0,     0,   440,
     441,     0,   442,   961,   443,     0,     0,   444,     0,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
       0,   455,     0,     0,     0,     0,   457,   458,   459,     0,
       0,     0,     0,   461,     0,     0,     0,     0,     0,     0,
     464,     0,     0,   467,   468,     0,   469,     0,   471,     0,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,     0,
     481,     0,     0,     0,   482,     0,     0,     0,   484,     0,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,     0,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,     0,   513,   514,   515,     0,     0,   517,
     518,     0,   519,   520,     0,     0,     0,     0,     0,   523,
       0,     0,   524,     0,     0,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
       0,    59,     0,     0,     0,   538,     0,     0,   540,     0,
     542,     0,   161,   543,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,     0,
       0,   955,     0,     0,     0,     0,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,     0,     0,
       0,     0,   189,     7,     0,   190,   191,     0,   192,     0,
       0,     0,     0,     0,   196,   197,   198,   956,   200,   201,
       0,   202,   203,     0,     0,     0,     0,     0,     0,   209,
       0,   211,     0,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,     0,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,     0,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
       0,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,  3430,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,     0,     0,     0,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,   957,
     270,     0,   271,   272,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,     0,   286,     0,   287,     0,     0,
       0,     0,     0,   289,   290,     0,     0,     0,     0,     0,
       0,   293,     0,     0,     0,   294,   295,   296,   297,   298,
      26,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,     0,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,   958,     0,   311,     0,
     312,     0,     0,     0,   314,   315,     0,     0,   316,   959,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,    32,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,     0,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   960,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   392,   393,     0,     0,
       0,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,     0,     0,     0,     0,     0,     0,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,     0,     0,   433,     0,
     435,    41,     0,   436,     0,     0,     0,   438,     0,     0,
     440,   441,     0,   442,   961,   443,     0,     0,   444,     0,
     446,   447,   448,     0,   449,   450,     0,   451,     0,   453,
     454,     0,   455,     0,     0,     0,     0,   457,   458,   459,
       0,     0,     0,     0,   461,     0,     0,     0,     0,     0,
       0,   464,     0,     0,   467,   468,     0,   469,     0,   471,
       0,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
       0,   481,     0,     0,     0,   482,     0,     0,     0,   484,
       0,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,     0,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,     0,   513,   514,   515,     0,     0,
     517,   518,     0,   519,   520,     0,     0,     0,     0,     0,
     523,     0,     0,   524,     0,     0,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,     0,    59,     0,     0,     0,   538,     0,     0,   540,
       0,   542,     0,   161,   543,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
       0,     0,   955,     0,     0,     0,     0,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,     0,
       0,     0,     0,   189,     7,     0,   190,   191,     0,   192,
       0,     0,     0,     0,     0,   196,   197,   198,   956,   200,
     201,     0,   202,   203,     0,     0,     0,     0,     0,     0,
     209,     0,   211,     0,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,     0,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,     0,     0,     0,
       0,     0,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,  -347,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     957,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   958,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     959,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   960,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   961,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,    59,     0,     0,     0,   538,     0,     0,
     540,     0,   542,     0,   161,   543,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   955,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   956,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,     0,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,     0,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,     0,     0,
       0,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,   957,   270,     0,   271,   272,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,     0,   286,     0,   287,
       0,     0,     0,     0,     0,   289,   290,     0,     0,     0,
       0,     0,     0,   293,     0,     0,     0,   294,   295,   296,
     297,   298,    26,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,     0,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,   958,     0,
     311,     0,   312,     0,     0,     0,   314,   315,     0,     0,
     316,   959,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,    32,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,     0,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   960,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   392,   393,
       0,     0,     0,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,     0,     0,     0,     0,
       0,     0,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,     0,     0,
     433,     0,   435,    41,     0,   436,     0,     0,     0,   438,
       0,     0,   440,   441,     0,   442,   961,   443,     0,     0,
     444,     0,   446,   447,   448,     0,   449,   450,     0,   451,
       0,   453,   454,     0,   455,     0,     0,     0,     0,   457,
     458,   459,     0,     0,     0,     0,   461,     0,     0,     0,
       0,     0,     0,   464,     0,     0,   467,   468,     0,   469,
       0,   471,     0,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,     0,   481,     0,     0,     0,   482,     0,     0,
       0,   484,     0,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,     0,   502,   503,     0,
       0,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,     0,   513,   514,   515,
       0,     0,   517,   518,     0,   519,   520,     0,     0,     0,
       0,     0,   523,     0,     0,   524,     0,     0,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,     0,    59,     0,     0,     0,   538,     0,
       0,   540,     0,   542,     0,   161,   543,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,     0,     0,   955,     0,     0,     0,     0,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,     0,     0,     0,     0,   189,     7,     0,   190,   191,
       0,   192,     0,     0,     0,     0,     0,   196,   197,   198,
     956,   200,   201,     0,   202,   203,     0,     0,     0,     0,
       0,     0,   209,     0,   211,     0,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,     0,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,     0,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,     0,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,     0,
       0,     0,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,   957,   270,     0,   271,   272,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,     0,   286,     0,
     287,     0,     0,     0,     0,     0,   289,   290,     0,     0,
       0,     0,     0,     0,   293,     0,     0,     0,   294,   295,
     296,   297,   298,    26,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,     0,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,   958,
       0,   311,     0,   312,     0,     0,     0,   314,   315,     0,
       0,   316,   959,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,    32,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,     0,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   960,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   392,
     393,     0,     0,     0,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,     0,
       0,     0,     0,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,     0,
       0,   433,     0,   435,    41,     0,   436,     0,     0,     0,
     438,     0,     0,   440,   441,     0,   442,   961,   443,     0,
       0,   444,     0,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,     0,   455,     0,     0,     0,     0,
     457,   458,   459,     0,     0,     0,     0,   461,     0,     0,
       0,     0,     0,     0,   464,     0,     0,   467,   468,     0,
     469,     0,   471,     0,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,     0,   481,     0,     0,     0,   482,     0,
       0,     0,   484,     0,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,     0,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,     0,   513,   514,
     515,     0,     0,   517,   518,     0,   519,   520,     0,     0,
       0,     0,     0,   523,     0,     0,  1488,     0,     0,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,    59,     0,     0,     0,   538,
       0,     0,   540,     0,   542,     0,   161,   543,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,     0,     0,   955,     0,     0,     0,     0,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,     0,     0,     0,     0,   189,     7,     0,   190,
     191,     0,   192,     0,     0,     0,     0,     0,   196,   197,
     198,     0,   200,   201,     0,   202,   203,     0,     0,     0,
       0,     0,     0,   209,     0,   211,     0,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,     0,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
       0,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,     0,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,     0,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
       0,     0,     0,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,     0,   286,
       0,   287,     0,     0,     0,     0,     0,   289,   290,     0,
       0,     0,     0,     0,     0,   293,     0,     0,     0,   294,
     295,   296,   297,   298,    26,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,     0,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,     0,   314,   315,
       0,     0,   316,     0,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,    32,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,     0,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     392,   393,     0,     0,     0,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,     0,     0,
       0,     0,     0,     0,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
       0,     0,   433,     0,   435,    41,     0,   436,     0,     0,
       0,   438,     0,     0,   440,   441,     0,   442,   961,   443,
       0,     0,   444,     0,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   453,   454,     0,   455,     0,     0,     0,
       0,   457,   458,   459,     0,     0,     0,     0,   461,     0,
       0,     0,     0,     0,     0,   464,     0,     0,   467,   468,
       0,   469,     0,   471,     0,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,     0,   481,     0,     0,     0,   482,
       0,     0,     0,   484,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,     0,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,     0,   513,
     514,   515,     0,     0,   517,   518,     0,   519,   520,     0,
       0,     0,     0,     0,   523,     0,     0,   524,     0,     0,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,     0,    59,     0,     0,     0,
     538,     0,     0,   540,     0,   542,     0,   161,   543,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,     0,     0,     0,     0,   189,     0,     0,
     190,   191,     0,   192,     0,     0,     0,     0,     0,   196,
     197,   198,     0,   200,   201,     0,   202,   203,     0,     0,
       0,     0,     0,     0,   209,     0,   211,     0,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,     0,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,     0,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,     0,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,     0,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,     0,     0,     0,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,     0,
     286,     0,   287,     0,     0,     0,     0,     0,   289,   290,
       0,     0,     0,     0,     0,     0,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
       0,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,     0,   314,
     315,     0,     0,   316,     0,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
       0,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   392,   393,     0,     0,     0,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,     0,
       0,     0,     0,     0,     0,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,     0,     0,   433,     0,   435,     0,     0,   436,     0,
       0,     0,   438,     0,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,     0,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,     0,   455,     0,     0,
       0,     0,   457,   458,   459,     0,     0,     0,     0,   461,
       0,     0,     0,     0,     0,     0,   464,     0,     0,   467,
     468,     0,   469,     0,   471,     0,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,     0,   481,     0,     0,     0,
     482,     0,     0,     0,   484,     0,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,     0,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,     0,
     513,   514,   515,     0,     0,   517,   518,     0,   519,   520,
       0,     0,     0,     0,     0,   523,     0,     0,   524,     0,
       0,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,     0,     0,     0,     0,
       0,   538,     0,     0,   540,     0,   542,     0,     0,   543
};

static const yytype_int16 yycheck[] =
{
       6,     3,   621,   152,   620,   621,   144,   962,  1125,    21,
    1324,  1024,  1025,   140,    20,   608,  1707,  1312,    24,  1457,
    1126,    33,  1035,  1778,  1046,  1068,     6,  1231,    40,   652,
      36,   158,   655,   598,  1689,  1281,   620,  1749,    44,   994,
    1409,    47,  1684,   608,  1254,    51,  1068,  1684,  1241,  1706,
     675,  1573,    58,     0,   563,   564,   565,  1202,  1312,   568,
     569,   570,  1573,  2322,   573,   574,   575,  2322,  1407,    45,
    3080,   788,  2795,   958,   959,  2768,  2816,  1409,  1550,    24,
    2886,   991,  2421,   735,  1747,  1335,  2266,  2231,  2828,  2829,
     675,  3221,  1044,  1343,  2433,  1436,   582,  2569,  1344,  1345,
    2955,   107,  1348,  1349,  1350,  1351,  3623,  1353,  1354,  1355,
    1356,  1357,  1358,  1359,  1360,   562,  1678,  1069,  1134,  1134,
    3282,   893,  1088,  1460,  2017,  1719,  1379,  3000,  2114,   135,
     616,   137,   582,   139,   140,   141,  1682,  2316,  2051,  1685,
    1583,  2434,  3659,  2397,  3571,  2322,  3416,  2397,  2102,  2852,
    1709,     4,   158,  2913,  2852,   152,  2079,   137,   624,   139,
    1603,   627,   107,  2316,  3479,  2805,   616,  2854,  1611,  1612,
    3752,  2858,  3082,   152,  2731,  4083,    18,  3371,  3233,  3505,
    1774,   717,  2869,   152,   720,    13,   152,  2996,  2997,    13,
      17,    18,  3709,  3002,  2881,  3004,    18,   849,   850,   851,
    3889,   119,  1168,  3082,  2734,    20,    20,   147,  1070,   861,
      33,    17,    18,  2743,    27,    83,  1555,  1556,  2397,    17,
      18,    21,  2962,  2963,   133,  3790,    17,    18,   160,    20,
    2828,  2829,  1208,  1209,  1210,    75,   166,   117,    54,    27,
     133,    20,  2969,    13,  2397,  2999,    84,  4350,    22,  1225,
    2387,  2308,    39,    63,   133,  3837,    22,   166,   133,  2850,
      31,  3163,   105,    37,   172,  2832,  3270,    69,    39,   202,
      83,   202,   287,   166,  3074,    17,    18,    51,    39,   204,
    4204,    54,  2249,  2298,  3817,   154,    34,  1263,    62,    63,
    1266,   166,    70,    17,    18,   287,    62,    63,    17,    18,
     288,  2709,  1115,  1116,    27,    61,  1647,    59,    20,    73,
      87,   210,   245,  3833,   245,   245,  1292,  1293,  4594,   204,
    1296,   155,   388,    91,  3669,    17,    18,   337,   305,    13,
      73,    46,   250,   392,    37,  4407,   226,  1313,  1314,    50,
     140,   383,   201,   234,   166,  4146,  4863,    17,    18,  4537,
     400,   166,   390,  1166,   270,   168,   245,    55,    17,    18,
      17,    18,   394,   290,  2962,  2963,     9,    27,    66,   451,
     516,    17,    18,   288,   187,   208,   201,  3100,  3695,   507,
     151,   186,    17,    18,   723,   135,   486,   260,   897,   419,
      83,    12,   218,   958,   959,    17,    18,   962,    24,    72,
     138,    17,    18,   875,   288,   424,    17,    18,    72,   207,
     253,   384,   400,   260,   134,   288,  3178,  3179,  3180,  4110,
     134,  4747,    17,    18,    17,    18,    66,   270,   621,   994,
     186,   174,    17,    18,   190,   207,    17,    18,   466,   252,
     283,   288,   621,   230,   231,  3575,    13,   656,   204,   633,
    5067,   656,  4136,   656,   656,   582,   250,  4365,    17,    18,
     587,   684,  4349,   643,   252,   688,  1719,  2740,   294,   230,
     231,  4358,  1382,   204,   451,   684,   138,  3332,   375,   376,
     274,   686,   207,   686,   686,   400,    11,    17,    18,   616,
    5107,   263,   685,   250,   285,  1118,    67,  1120,  1121,  1122,
    1123,   166,   686,   150,   684,  3265,   685,   691,    75,  4026,
    3345,  4093,  1525,   134,   533,   207,   400,  1634,  1428,   332,
     548,  1774,  1239,   366,   497,    49,   672,   400,   656,   252,
    1543,    17,    18,  2941,  1006,    17,    18,   153,   437,    17,
      18,  1258,   262,  4869,   332,   475,  4230,   240,   262,   242,
     889,   177,   195,   400,   560,   305,   304,   587,  4123,   166,
     373,  4126,  4127,   203,   437,   571,   379,   483,   695,   496,
    1155,   430,   399,  4761,   656,   402,   582,   583,  4650,  5096,
     273,   587,   415,  3745,   590,   341,   475,  1180,  3348,    17,
      18,   691,   252,   305,   256,   587,   294,  1063,   604,    21,
      75,   399,   661,  1375,   402,   430,  1516,  4408,   399,   332,
     616,   402,  4132,  4040,   620,  1180,    17,    18,  2260,  4152,
     686,   324,  2277,   204,   630,  1577,   378,  1537,  1580,   605,
    4906,   516,  1584,   621,  1586,   677,   686,   401,   653,  2276,
    2112,   446,   532,   649,  1687,  3700,   515,   490,   686,  3704,
    3410,   366,  1188,  2832,  2621,  1565,   379,   399,   401,   691,
     402,   653,  1614,  1615,  1616,  1687,   482,   558,  4592,   675,
    3987,   677,   332,   451,   684,   399,  3416,   445,   402,  2832,
     399,   288,   581,   402,   661,   210,   512,  4269,   488,   695,
     446,   524,  1409,  1709,  1709,  1347,   587,   268,   551,   632,
     706,   632,   708,   227,  2298,  4050,   621,   399,   355,   482,
     402,   717,  1364,   689,   720,  2969,  1962,   723,   140,  2969,
     652,   564,  2316,   525,   730,   502,   474,  1973,  2905,   399,
    1976,   656,   402,  2102,  3474,  1988,  3740,    54,   591,   451,
     399,   649,   399,   402,  3335,   402,   664,  1609,  3475,   562,
    4065,  2194,  3319,   399,   622,   525,   402,   599,   637,  4862,
     690,   706,  3664,  1956,   399,   892,   646,   402,  1215,  1216,
    2102,   624,  3572,  2830,   627,   613,   599,   399,   631,  2093,
     402,   690,   788,   399,   555,  4367,   402,   672,   399,  4306,
    2969,   402,  3954,  2387,  1760,   435,    22,   690,  1245,  1754,
     587,  4383,  2817,  2397,   399,   576,   399,   402,  1255,   402,
    1257,    37,  1788,  2726,   399,   690,  2969,   402,   399,   633,
     599,   402,  1269,  1270,  1271,    51,   587,  2964,   599,  3991,
     640,   601,  4397,  1280,   656,   648,    62,    63,   665,   562,
     399,   525,  2404,   402,   684,   619,   689,  1383,   854,   855,
     684,  1436,  4178,   619,   688,  1668,   684,   672,   860,   665,
     684,   632,   689,  4771,  3670,  4773,  4774,   665,   690,   399,
     686,  4560,   402,   686,   665,   690,  3474,   677,   884,   885,
     886,   686,   888,   889,   890,   558,   892,   685,   894,   627,
    2527,  1377,  1517,   672,   558,   686,   902,  1024,   686,  1026,
    4591,  4031,  1029,  1030,  1880,   885,  4333,   655,  1884,   633,
     890,  3673,   437,   399,   894,   891,   402,   399,  1045,   895,
     402,   399,  3645,   665,   402,   648,    17,    18,    17,    18,
     686,   590,  1517,   939,   645,  1401,  1559,  1913,  4100,  1475,
    4134,   665,  3350,   685,   686,   656,   665,  1719,   954,   661,
     956,  1487,  3787,   955,   960,   686,  1581,  2620,  3231,  3232,
     672,   686,   686,   656,   439,   627,   685,   686,   633,  3377,
    3378,   399,  4287,   665,   402,  1124,   500,  1115,  1116,   186,
     186,  2527,   622,    17,    18,   991,   992,   379,   166,  4897,
    4898,  2746,   998,  4901,   686,   665,  1581,   568,   399,  4038,
     417,   402,  1774,  4058,  4059,   390,   665,   148,   665,   954,
      17,    18,  1018,   390,   112,   685,   686,    12,  1024,   665,
    1026,   390,   547,  1029,  1030,   690,  1649,  1650,   685,   686,
     665,  1497,   679,   680,   681,   682,    17,    18,  1661,  1045,
     686,  1527,  3802,   665,    89,  2298,   653,   992,   299,   665,
     685,   686,   200,   998,   665,  3815,    17,    18,   390,  3819,
    3820,   378,  1647,   685,   686,   392,   488,   477,   491,  2982,
     665,  2984,   665,  3833,   685,   686,   288,  1527,  4446,   604,
     665,  4989,  1088,   690,   665,   243,  4343,   457,   416,  1095,
     685,   686,   685,   686,   390,   245,   551,  1713,    17,    18,
     390,   686,  3742,   578,   685,  1111,   665,  2120,  1110,   360,
     288,  4693,  1735,    17,    18,    17,    18,    17,    18,  1125,
      20,   646,   302,  3932,    17,    18,   685,  1124,   603,   156,
     901,   586,  3941,  3690,  2387,   665,  1112,  1113,  4909,    46,
    3319,   469,  4052,   587,  2397,  1124,  2189,  3406,  2058,  1155,
    1156,  3406,   131,    17,    18,  1124,   686,  2869,  1124,  1165,
    1646,  1878,  1168,  4745,  3867,   482,  3319,  2189,   294,  3867,
    3700,  2277,  3812,  4052,  3704,  2085,  2086,  1117,   130,   665,
    3934,  3868,  1188,   665,   421,  1165,   324,   665,   400,  1754,
     260,   288,  1198,  2715,   659,  2717,  2718,  2756,   515,   685,
    1327,   342,   138,   383,   686,  3191,  2717,  2718,   686,   424,
    1063,  1156,  1065,  2229,  2229,  3508,    17,    18,   133,  2465,
    3174,  3475,   993,  2817,    13,  3475,  3119,  3150,  2180,  3406,
     501,   120,   109,  1239,   123,   210,  1363,   665,  2832,   446,
     446,  2193,  4372,   393,  2196,  2197,   616,   298,   692,   156,
    1377,  2592,  1258,  1198,   380,  2801,   648,   253,   686,    67,
     305,  2406,  4392,  4690,   665,    17,    18,   684,   691,    17,
      18,  4639,   130,   138,   270,     6,   686,   435,  2279,  2280,
     378,   429,   261,  1410,  2727,   686,  4325,   283,    17,    18,
    2540,  2628,    17,    18,   389,  2296,  3475,   109,   267,  3479,
    2614,   686,   297,   400,  2305,  2306,  1312,   558,   399,   686,
     399,   402,   507,   402,    61,    17,    18,   686,   533,   324,
     256,  1327,  3475,  1975,   419,   554,   563,  4087,   207,    60,
      17,    18,  5103,  5104,   661,  1337,  2546,  2547,    34,  4212,
    4502,    17,    18,   163,   221,  2659,  2539,   189,    17,    18,
     302,   402,  4161,   173,   686,  4164,  2549,  1363,   686,  1365,
     149,  2327,   581,  1369,  2659,   399,   195,   437,   402,    21,
    2964,  1377,  4132,    17,    18,  2969,  1382,  1383,   405,  4139,
     210,  2382,  2383,  2384,  2385,  2102,  4195,  4196,  4197,    85,
     686,   256,   399,   619,  4203,   402,   686,   456,    17,    18,
    1527,   245,  4211,  1409,  1410,  4159,  4160,   267,    35,   621,
     647,   204,  4166,   639,   640,  4169,  4170,  3072,   399,  2981,
    4937,   402,  1428,   154,   631,   631,    17,    18,   166,   527,
    1436,   383,   168,  4187,  2638,   252,     0,  1443,   399,   186,
     445,   402,  1448,   190,   302,    17,    18,  4201,   277,  2744,
      17,    18,  4206,  4207,  4208,  4209,  4210,   204,  1464,   221,
     268,   305,   437,  1999,  4721,   130,  4723,   382,   164,  1475,
     609,  3134,   507,   432,   453,   653,  3620,  3621,  3622,   686,
     399,  1487,   451,   402,  1490,   507,    17,    18,   140,   684,
    2744,  2143,   587,   372,   490,   399,   254,   399,   402,   399,
     402,   378,   402,  1448,   297,   263,   399,   343,   270,   402,
    1516,  1517,   690,  1651,  1520,   189,   252,   507,   116,  1646,
     525,  1527,  1528,  2097,   621,   383,  2298,  4797,   579,    17,
      18,  1537,   197,  3079,   447,   399,    17,    18,   402,   475,
     382,  2007,  1669,  1549,  1550,  1490,   756,   757,  1401,   378,
    2134,   672,   691,  2089,  1560,  1561,  1562,  1563,  1564,  1565,
    1566,  4460,   379,  4462,  2817,  3478,   374,  1573,   564,  2612,
      17,    18,  1578,  1579,   665,  1581,   665,   995,   398,  1585,
    1560,  1561,  1562,   496,  1564,  3222,   565,    17,    18,  1716,
    2612,   451,    17,    18,   341,   686,  1449,   686,   399,  1579,
    1606,   402,   446,   609,   207,  1585,   581,   437,    13,  2232,
     475,  4881,   672,  2236,  2237,  2387,  1743,  2103,  1563,    17,
      18,  1566,  3564,    17,    18,  2397,  3568,   633,  2221,   204,
     840,   665,  3344,  3345,  4394,   233,   263,   302,   400,   221,
    1646,  1647,   507,   379,  1497,   376,   587,   399,   406,   684,
     402,   399,   686,  2103,   402,  2565,  2221,  4380,   665,   611,
     287,  1606,   684,  1669,  1670,  1671,  1672,  1673,    17,    18,
     399,  4143,  5189,   402,   399,  1093,  3222,   402,   685,  4949,
    4950,    17,    18,   684,   665,   288,  3208,    17,    18,  2702,
     691,   627,   516,   587,   684,   289,   906,   399,   292,   446,
     402,   375,   376,   592,   665,   686,   595,  4400,   382,  4402,
    1716,  2964,   399,   288,   591,   402,  2969,   547,   383,   450,
     656,   452,   297,   399,   685,  3319,   402,   243,  1673,   378,
     399,  1584,   134,   402,   164,  2320,   432,  1743,  1744,  1745,
    2756,  2756,   550,   684,   149,   562,   665,   516,  2791,   585,
     587,  4606,  4607,   611,  1760,   399,   130,  2961,   402,   455,
     568,   665,   627,   665,   606,   665,   586,   686,  2678,  2791,
     176,    13,   665,   516,   604,  1781,  2686,  1783,   614,   516,
     399,   623,   686,   402,   686,  3126,  3127,  3128,    17,    18,
     684,   656,  2747,   686,   227,  3708,   492,   400,    17,    18,
    1745,   665,  3240,    17,    18,  3174,   672,    13,   399,  4615,
     408,   402,   135,     9,    17,    18,   646,   523,   467,   684,
     130,   419,   686,   197,    13,   400,   562,   399,    13,   427,
     402,   648,   399,   578,   461,   402,   581,    33,  2983,    17,
      18,   274,  3174,    83,  3094,   263,  1984,   684,   672,  3163,
     205,    90,  2853,   447,   662,  2856,  2857,   553,  2859,  1148,
    1149,  2862,  2863,  3158,   665,  2866,   284,   691,   399,  1722,
    2871,   402,  1878,  1879,   113,  2876,  2877,  2878,  2879,  2880,
    5010,  3475,    25,  2884,  2885,  4065,  2887,   197,    17,    18,
     558,  2543,  2893,  2894,  2895,  2896,    17,    18,  2899,  2900,
    3146,  2902,   652,   672,  3158,  2918,  4599,   149,  1197,   232,
     691,   399,   648,   665,   402,  4254,   254,   665,   399,   625,
     230,   402,   691,    17,    18,   263,  1136,   685,   302,   672,
     609,  1937,   606,   531,   686,   672,   665,   587,   686,   294,
     665,    17,    18,   149,   227,   633,   611,  2521,   691,   623,
     686,  3265,   399,  5023,   691,   402,  5026,   686,    17,    18,
     149,   686,   668,   665,   149,  3628,  2967,   578,    37,   399,
     581,  2926,   402,   641,   399,   207,  2103,   402,   665,   146,
    1986,  1987,   305,  2430,   686,    18,    17,    18,  2435,   665,
    2117,   274,   302,  1999,    63,   162,   665,   685,   686,   686,
     240,   399,   242,  2450,   402,   399,  2012,  2592,   402,   383,
     686,  2017,   691,  3668,   221,   494,  2022,   686,   475,  2025,
    2613,   665,    17,    18,   221,   380,  2032,  2033,   260,  2035,
     243,  3668,   630,   273,   144,   646,   560,  2630,    17,    18,
     578,   685,  1987,   581,  2491,  2817,   665,   571,  2613,   394,
     399,  5121,  2058,   402,  2679,  2061,   288,  4797,   260,  2065,
      17,    18,  5072,   399,  2629,  2630,   402,   686,   406,   399,
     451,  3762,   402,   383,   665,  3787,  2562,   633,  4160,  2085,
    2086,  2087,  2088,  2089,   685,   686,  3381,  2032,  2033,    50,
    2035,  2707,   473,   665,  2679,   686,  2102,  2103,   665,   240,
     579,   242,  2108,  2109,  2110,   584,  2112,  4287,   646,   207,
    2557,  2117,  2562,  4836,   686,   640,  2061,   638,   643,   686,
    2065,    17,    18,  2707,  2251,  4207,  4208,  3381,  2134,   510,
     686,   684,    17,    18,   665,   691,    17,    18,   691,   637,
     638,  4881,  2087,  2088,    17,    18,    17,    18,  2154,   515,
    3696,   630,   130,   526,  2007,   686,  3868,   526,   656,   578,
    3203,   305,   581,  2108,  2109,  2110,  1429,   646,   400,  1432,
     399,  3403,  1435,   402,  4867,  4868,  3131,   665,  2752,  3352,
     399,  3203,  2747,   402,   665,   399,   684,   690,   402,  2195,
    3363,   243,  2964,   678,  3367,  3368,   399,  2969,   686,   402,
     685,  3433,   513,  2179,   685,  2211,  3379,   250,    83,  4949,
    4950,   630,  3684,  2219,    17,    18,  2222,  2223,   665,   197,
     678,   399,  3475,   578,   402,  3238,   581,   685,  2234,  2235,
    2083,   250,  2238,    17,    18,   665,   801,   611,   685,    44,
     665,   685,   686,  3153,   250,  2251,    51,    17,    18,  2823,
    2195,  2257,   230,   581,  3692,  2235,  3141,  3142,  3143,  3144,
     685,   684,  3214,   828,  2270,    17,    18,   665,   657,   658,
     399,   665,  3482,   402,  2219,  4990,   841,   842,   399,    17,
      18,   402,   691,    27,    17,    18,  1080,   685,   628,    17,
      18,   685,  1086,  1087,  2421,   182,  2149,   686,  2151,   685,
     686,   611,   581,  3513,  3514,   399,  2433,   176,   402,   547,
      17,    18,    17,    18,  2320,   686,   665,    62,    63,  2325,
     684,  2327,   160,   399,   302,   599,   402,    81,    73,   665,
    3540,  3986,   130,   684,  5049,   665,   685,  5052,  2931,    93,
     399,    83,     6,   402,    17,    18,   587,  3661,   691,   685,
    3664,    17,    18,   684,  3558,   685,    83,   684,  3359,    17,
      18,  2926,   684,  2937,  2938,   240,  2931,   242,   399,  2943,
    3665,   402,  3373,  4030,  3713,   685,   684,  2951,  2952,  4034,
    2325,    17,    18,  2957,   640,   641,  5101,   643,   684,   645,
      17,    18,  2398,    83,   684,  2401,   684,  4034,   273,   197,
    4037,    91,    17,    18,   399,   383,  2533,   402,    17,    18,
     685,   686,  3707,   685,   686,  2421,   685,   686,   685,   686,
     399,    17,    18,   402,   168,    17,    18,  2433,   686,   119,
    2283,   684,   230,   684,  4563,  2562,   665,  2564,  4567,  2292,
    2293,   168,   399,    62,    63,   402,   665,  3651,   684,   203,
     684,   665,  3934,  3707,   684,  4110,   685,  3174,    17,    18,
     684,   590,   665,    17,    18,   407,   685,  5190,   684,    17,
      18,   685,  2033,   684,  2035,   684,    17,    18,   168,   407,
     685,   686,   685,   684,  3439,    13,   684,   665,    17,    18,
     685,   686,   684,   150,   684,  2633,   250,   685,   686,   685,
     686,    17,    18,   399,   302,   684,   402,   685,   252,   684,
     252,    17,    18,   684,   399,    17,    18,   402,   399,   684,
     274,   402,   138,    17,    18,   252,   399,  2533,   399,   402,
     684,   402,    17,    18,   685,   686,   665,   685,   686,   685,
     686,  3126,  3127,  3128,   665,   684,  2552,  2108,  2109,  2110,
      18,   684,  2558,  3178,  3179,  3180,  2562,   684,  2564,  2565,
     250,   684,  3668,   494,   685,   684,  3131,  3799,   684,    17,
      18,   665,    20,   685,   686,   684,  3141,  3142,  3143,  3144,
     685,   686,   685,   686,   684,   383,  2592,   684,   332,   665,
     562,   685,   684,  3178,  3179,  3180,   399,    17,    18,   402,
      20,   684,  3834,   685,   686,  3809,   665,   160,   161,   685,
     684,   207,  4741,  3845,   684,   399,  3848,   684,   402,  4748,
    4879,   149,  3247,  4878,   685,   686,   685,   684,    18,   399,
     684,   373,   402,   611,   665,   379,   684,   379,    83,   684,
     256,   331,  3089,  3816,  3687,  3658,   373,   399,   684,  2776,
     402,   182,   379,  2659,   685,  3271,   685,   686,  2664,   684,
     350,   399,  3247,   684,   402,  3687,   399,   685,   686,   402,
     665,   399,  2678,  2679,   402,   685,   686,  2804,  2805,   684,
    2686,   435,   150,   373,  4166,   684,   665,  4169,  4170,   633,
     685,   207,   399,   684,   399,   402,   684,   402,   355,   685,
     686,  2707,  4393,  3475,   232,  4187,   685,   685,   665,  2715,
     684,  2717,  2718,  2840,  4371,  3338,   458,   685,   686,   684,
    3343,  4243,   207,   436,  4206,    27,   399,   397,   685,   402,
    4025,   458,  4243,   399,   609,  4392,   402,  2684,  2744,   685,
     686,   399,  3358,   684,   402,   685,   686,  4389,   685,   686,
     130,   684,  4389,   133,  2760,  3329,  3330,  3331,   633,  2765,
     150,   685,   686,   399,  2770,  2771,   402,    13,   684,   665,
    2776,  4025,   399,   684,  3919,   402,   684,  3351,   684,  3353,
     665,    83,   685,   686,   665,  2765,  3360,   685,   686,   685,
     399,   684,   665,   402,   665,   240,   684,   242,  2804,  2805,
     685,  3375,   684,   399,   685,   105,   402,   399,  3382,  3383,
     402,   578,   685,   611,   685,   685,   686,   197,   562,   684,
     562,  3395,  3396,  3397,   219,  2770,  2771,  3401,  3402,   274,
     310,   311,   685,   686,  2840,   562,  4548,  4549,  3955,   684,
     399,   684,  4388,   402,  4390,   399,   326,   684,   402,   684,
     230,   399,   684,  4148,   402,   684,  3365,   684,   399,   475,
     684,   402,   665,  4992,  4993,   684,    81,  3441,  3442,  3443,
     399,   684,   562,   402,  3439,   617,  4069,   684,    93,   685,
     686,   665,   685,   399,   684,   187,   402,   355,   684,   579,
     617,   507,  2898,   399,  4148,   665,   402,   399,   685,   686,
     402,   685,   684,   149,   648,   399,   648,  2913,   402,   685,
     686,   685,   686,   665,   399,   685,   684,   402,   684,  2925,
     684,   648,   302,  2929,   685,   686,  4295,   665,  4034,   684,
     375,   376,   665,   685,   329,   330,  4591,   665,   684,   334,
     335,   336,   686,   684,  4586,   685,   686,   685,   685,   686,
     252,   399,   685,   253,   402,  4710,    20,   685,   665,   686,
     665,   685,   686,   684,  3102,   355,  2819,  2820,  2821,  2822,
     270,  2824,  2825,   685,   686,   685,   686,    63,   685,   399,
     685,   684,   402,   283,   464,   465,   232,   684,   203,   684,
     435,   390,   665,   685,   686,  3569,   685,   686,   590,   665,
     685,   686,   599,   383,  4110,   685,   686,   665,   390,  4219,
     686,   627,   685,   541,   542,   543,   544,   545,   546,   685,
     677,   678,   679,   680,   681,   682,   164,   685,   245,   665,
     332,   685,   686,   533,   120,   250,   564,   123,   665,   170,
     656,   105,    52,   150,   690,   131,   685,   686,  3673,   685,
     518,   519,   685,   686,   685,   686,   665,   299,   685,   274,
     685,   686,  4376,  4718,   693,   151,   366,  3683,   684,   665,
      52,   373,   686,   665,   685,   686,   685,   379,   397,  3526,
     211,   685,   686,   685,   686,   390,  2939,  2940,  3673,  2942,
     390,  2944,  2945,  2946,  2947,  2948,  2949,  2950,   207,  3683,
    2953,  4539,   166,  2956,   390,   515,   665,  2960,  3143,  3144,
     501,   665,   198,  3119,   515,  3121,  4807,   665,   691,  3125,
    3126,  3127,  3128,   526,   665,   130,   685,  3133,   518,   519,
     175,   685,  1300,  1301,  3140,   266,   665,   685,   202,  3145,
     204,  3588,   684,  4512,   685,   288,  3273,  3153,   279,   665,
    4696,   204,  3158,   558,    13,  4469,   685,   221,   533,   665,
     105,  4002,  4003,   665,   228,   578,  3789,   299,  3174,  3792,
    3793,   665,  3178,  3179,  3180,   261,   167,   622,   204,   685,
     665,   245,   558,   685,    92,   686,    45,   686,  3133,   253,
     490,   685,   197,   329,   330,   391,   260,   574,   334,   335,
     336,   416,  3208,   166,   685,   133,   270,   675,   676,   677,
     678,   679,   680,   681,   682,   507,  4762,   665,   119,   283,
     435,   692,     6,   396,   288,   230,   118,   637,   638,     4,
     506,   611,   150,   297,   646,   692,   263,  3243,   369,    98,
     686,  3247,   416,  3370,   103,   665,   656,  3253,   355,  4177,
    4178,   128,   164,  4181,    59,  3261,   467,   686,  3264,  3265,
     562,   691,    73,    13,   564,   652,  4921,  3273,    37,   685,
     685,   685,  4200,  3253,   684,   149,   685,    10,   686,   365,
     691,  3287,   368,  3289,  4921,   675,   676,   677,   678,   679,
     680,   681,   682,   685,    63,   541,   542,   302,   544,   685,
     546,   685,   366,   656,   685,   390,   685,   685,   253,   287,
     168,   684,   299,   299,  4431,   299,  3261,   691,   564,  3264,
    5011,   691,   299,    52,   299,   270,   390,   299,   686,   130,
    4447,  3337,   133,   633,   686,  4263,   400,  3349,   283,   672,
     578,  3347,  3348,  3355,   684,   263,   648,   243,  3354,   239,
     294,   120,  4307,   207,   123,   686,   130,   304,   690,   133,
     686,   238,   131,   599,  3370,  3371,   686,   453,  3380,  5006,
    3376,    66,   599,   437,  3386,  3381,   693,   416,   383,   599,
    3392,  3393,   151,   686,   672,  3391,    81,  4432,  4433,  4593,
     204,   308,   686,   310,   311,   691,   197,  3403,    93,   686,
    4445,    73,   686,   558,  3410,  3411,   265,   263,  4453,   326,
    3416,   518,   519,  4006,  4709,   679,  3418,   264,  4463,  4464,
    5075,   366,   576,   197,   116,    20,   490,  3433,   191,   230,
     686,   204,    12,    28,  3287,   175,   558,   355,  5075,   530,
     182,  4006,   686,   684,   210,   390,  3391,    50,    66,   422,
     176,   515,    86,   653,    88,  4709,   230,  4826,   207,   685,
     679,  5007,  5008,    81,   145,  4711,  4509,  3473,   345,   241,
     684,  3477,   349,   241,   686,    93,  5113,   130,    73,   356,
     133,   421,   685,   342,   176,  4591,    56,  4509,    83,   686,
     652,   628,   261,   632,   686,   207,   685,  4120,   685,   133,
     564,   302,   685,  3356,  3357,   685,   685,   679,   203,   595,
    4438,   207,   678,   684,   209,   685,   685,   685,   210,   686,
    4448,   686,  5068,   686,   158,   685,   685,   685,   302,   685,
     682,  4459,  3385,  4461,  4489,   685,   116,   686,   133,   625,
     685,   672,   673,   674,   197,   490,   516,   464,   465,   137,
     685,   410,   685,   587,   134,   250,   684,   621,   684,   684,
     251,   685,   196,  3416,   587,   686,  5112,   444,   632,   633,
     677,   678,   679,   680,   681,   682,  3582,   230,   686,   274,
     587,   130,   383,    17,    18,   203,  3592,   599,   686,   653,
     654,   209,   656,    83,   260,   417,   176,   684,    13,   368,
     518,   519,   219,   207,   686,   130,   611,    97,   672,   383,
     204,   204,  3750,   684,   684,  3742,   285,   116,   213,   564,
     686,   685,   686,   686,   691,   689,   690,   685,   505,   691,
     210,  4644,   250,  4837,   691,  4752,  4753,   179,  4755,   207,
     686,  4936,   445,  4236,   496,   240,  3652,   242,   197,   302,
     626,   515,   204,   686,   686,   390,   274,   587,   390,  3665,
     627,  3667,   263,   221,  4238,  3671,  4240,  3673,  4242,   400,
     686,  4236,   197,   506,  4791,   364,   535,  3683,  3684,   274,
     547,   230,  4936,   390,   547,  3812,   547,   547,   130,   204,
     124,   125,   126,   127,   128,   656,   547,   132,   672,   684,
     298,  3707,   590,   105,   672,   230,   672,   672,   672,  3715,
     209,    28,  4286,   672,   672,   240,   575,   242,   298,  4674,
     672,   416,   672,  3729,  3730,  4680,   150,   633,   628,   672,
     383,  4744,   130,   672,   672,   133,  3742,  4738,   672,  3592,
     435,   672,  4307,   672,    20,   437,   672,  4951,  3754,   672,
    3756,   250,   672,   302,   523,   197,    73,   675,   676,   677,
     678,   679,   680,   681,   682,   672,    83,   672,   672,   672,
     672,  3783,  4889,   650,  4891,  4892,   410,   302,  3780,   672,
     375,   376,   691,   164,  3790,  3730,   276,   382,   230,   195,
     667,   686,  3794,  3799,   685,   390,  3802,   150,  5002,   197,
     685,   235,   236,   237,   238,   211,  3812,   259,   259,  3815,
     611,  3817,   691,  3819,  3820,  4921,   133,   435,   407,   685,
     685,  4834,   621,   685,   672,   459,   595,  3833,  3834,   105,
     685,   684,   230,   672,   383,   685,  3689,   611,  5084,  3845,
     435,   536,  3848,  4844,  4845,   685,     7,  4848,  4849,  4850,
    4851,   253,   686,   691,   686,   686,   625,   437,   383,   686,
     302,   691,  4790,   353,   661,  5160,  3872,   294,   270,  3875,
    4798,   277,  3878,   279,   599,   599,   599,  3883,    89,  5174,
     684,   283,   570,    12,  3890,  5180,   599,   507,   378,   581,
     166,  5186,  3898,   684,   672,   397,   207,   207,  5144,  3905,
     207,   587,   587,  3756,   302,   267,  5160,   451,   179,   686,
    3890,   345,   604,   347,   348,   349,   511,  3770,   536,   383,
    5174,   270,   356,   240,  4489,   242,  5180,   622,   204,   684,
    3875,   355,  5186,   513,   270,   404,    20,   346,   630,     7,
      14,   383,   203,   684,   390,   221,  4947,  4948,   686,    50,
     517,   621,   228,  4080,   646,  4956,   228,   274,   611,   449,
    3813,   691,   119,   119,   366,   399,   372,   547,   402,  5075,
    3823,   587,   587,   587,    81,   416,   416,   253,   416,   145,
     599,   272,   579,   272,   260,   383,   416,   579,   390,    50,
     539,   145,   491,   416,   270,   416,   418,   416,   416,   579,
     416,   684,   355,   470,   622,   684,   690,   283,   684,  4015,
     444,  4017,   288,  4968,   513,   221,   684,   691,   679,  4025,
     684,   297,   684,   261,   684,   261,   685,   622,   434,   685,
     104,   685,   684,  5150,   685,   507,   686,   536,   686,   685,
     685,    35,   691,   685,   416,     6,   685,   684,   451,   397,
     630,    12,   679,    14,   684,    16,   390,   547,   375,   376,
     245,    50,   611,   684,   138,   382,   646,    28,   361,    30,
     504,   505,   684,   390,  4080,   684,  4082,  4083,   474,   686,
     154,  4087,   581,   685,   207,   584,   611,   672,   490,   685,
     366,   691,   451,   507,   518,   519,   672,  4716,   685,    60,
     686,   685,   176,  4109,    65,    66,   270,   181,   270,  4674,
      71,   686,   105,   684,   390,  4680,   655,  4123,   435,   193,
    4126,  4127,    83,   622,   400,   486,  4132,  4254,  4134,   684,
      91,   630,   119,  4139,   416,   686,   352,   684,   654,   587,
     101,   243,  4148,   274,   460,   219,  4152,   435,  4154,    83,
     691,   124,   125,   126,   127,   128,   150,   684,   119,   225,
     599,   437,   564,    97,   686,   518,   519,   690,   685,   611,
    5183,   383,   133,   686,   685,   136,   250,    50,   509,   685,
     656,   685,   256,   488,   685,   146,   147,   285,   621,    50,
     400,   297,   219,   154,   511,   185,   281,   157,   686,   685,
     289,   162,   686,   416,   686,   166,   270,   168,   270,   143,
     533,   390,   685,   611,   490,   660,   650,   178,   684,   684,
    4226,  4074,  5177,   297,   685,   684,   686,   685,   684,   274,
     274,   665,   666,   667,  4853,    58,   686,  4243,   274,   515,
      20,   202,   686,   656,  4382,    68,   433,   684,  4254,   685,
     390,   675,   676,   677,   678,   679,   680,   681,   682,    82,
     253,    83,   235,   236,   237,   238,   672,   673,   674,   263,
     390,    94,    95,    96,   249,   204,   204,   270,   204,   240,
     685,   242,   590,   288,   685,   685,   685,   248,   564,   250,
     283,   114,   685,   287,   686,    63,   257,   261,   685,   685,
     685,  4875,   685,   352,   276,   622,   445,   685,    50,   686,
    4316,    18,   273,   656,   397,   260,   685,   685,   685,   633,
     686,   691,  4938,   676,   677,   678,   679,   680,   681,   682,
     633,   685,   684,   502,   684,   686,   297,  4343,   685,  4488,
      20,   150,   276,  4349,    75,   621,   685,    20,   686,   686,
     685,   182,  4358,   633,   507,   182,   133,   633,   133,  4365,
     581,   355,   684,   684,   438,   684,   431,    66,    87,   153,
     331,  4224,   345,   366,   347,   348,   349,   653,   654,  4385,
     656,   375,   376,   356,   525,   691,   460,   133,  4394,   350,
      37,  4397,  4530,   354,   468,   383,   672,   352,   184,   686,
     685,   685,   476,  4968,  4416,   686,   146,   274,  4414,   685,
     686,   581,   685,   689,   690,   684,  4422,   685,   633,   353,
     686,  4559,   390,   685,   633,   396,   684,   290,    28,   684,
      30,   685,   328,   507,   395,   643,   643,   549,   179,   400,
     496,   375,   376,   485,   378,   685,   520,   521,   409,   495,
     411,   685,   430,    35,   263,   416,   180,    39,   419,  4465,
     430,  4467,    62,    63,   397,    65,    64,   461,   627,  4414,
     684,   444,   486,    73,  4480,   383,    50,    50,  4480,   684,
     684,   163,   685,    83,   684,    50,   260,   684,   684,   684,
     684,    91,   390,   454,   260,   668,   274,   490,   625,   573,
     382,   274,    15,   627,   133,    20,    39,  5126,   469,   470,
     471,   472,   672,   552,   206,   449,   179,    18,   569,   119,
     204,   344,  4649,  4529,   518,   519,   413,   109,    50,    50,
     604,   504,   505,   133,   685,   684,   136,   498,    50,   362,
     534,   123,   684,   562,   377,   638,   355,   684,   130,    58,
     685,   684,   684,   627,   383,   629,   684,   656,  4564,    68,
     165,   403,   145,   495,   686,   589,  5131,   145,   168,   684,
     297,   564,   168,    82,    12,   684,   109,   685,   570,   598,
     684,   600,   507,    50,  4529,    94,    95,    96,   685,   608,
     123,    50,   684,   684,   555,   556,   557,   130,   684,   143,
     204,   562,   621,   153,     5,   114,   685,   189,   390,   390,
      66,    66,  5177,   547,   397,   197,   635,   684,   579,   627,
     138,   582,   685,    37,   621,   397,   397,   496,   685,   241,
     621,   686,   159,    50,   245,   685,   495,   684,   383,   515,
     240,   602,   242,  4649,  2684,   116,   607,   967,   230,   231,
     250,   686,   985,  3112,  2958,  4242,   189,   257,  1385,  4238,
     621,   484,  4240,  4735,   197,  4733,  4363,  3315,  1065,  1116,
    4676,  4677,  5047,   273,  4865,  1145,  5043,   650,  4818,  4557,
     503,   675,   676,   677,   678,   679,   680,   681,   682,  4232,
      51,   622,   711,   666,   667,  2101,  5131,   230,   231,  2022,
    4007,  2348,  3119,  4709,  3141,   176,   712,  4713,  2629,   518,
     519,  2631,  2630,  1196,  1725,  4721,   735,  4723,  1988,  4570,
     302,   740,  4751,  4376,  2322,  2912,  3843,  3647,   142,   690,
    3652,   331,  4315,  4017,  2079,  4942,  4711,  5021,  4318,   210,
    5144,  5092,  5126,   566,  4853,  3265,  4034,  2229,  3666,  4373,
     350,  5038,  2905,  3410,   168,  2913,  4087,   171,  4608,  4804,
     583,  3877,  4650,  3505,   783,  4771,  4178,  4773,  4774,   302,
    4212,  4658,  4938,  4649,  2804,  4251,  4782,  3063,  3565,   250,
    3568,   800,  4635,  3560,  5048,   367,    83,    83,  4992,  4398,
    4870,  4797,  4993,  4748,  2912,  4741,  4447,  4564,   212,  3406,
     382,   383,  1092,  1160,  1623,  2730,  4420,  2654,  2327,   409,
    4931,   411,  4818,  4133,  1771,  2087,  4818,  3133,  1745,   419,
     234,  2620,  3629,  4922,  1128,  4952,   240,   298,   242,  4111,
     849,   850,   851,   852,   367,   344,  2277,  2793,  3075,  3592,
    2429,  2425,   861,  3102,  1365,  1702,  1258,  3224,  2745,   382,
     383,  4052,  3576,   362,  2733,  2739,  4726,  4551,  4864,  5041,
    1225,  4863,  3905,  2550,  5042,  4385,   675,   676,   677,   678,
     679,   680,   681,   682,  4384,  4881,  3991,  4826,  4148,  4295,
     899,  4344,   901,  4291,  4737,   299,  4382,  3208,  3402,  2260,
    3273,  4897,  4898,  2398,    83,  4901,  2614,  4025,   498,  1490,
    1448,  2658,  3707,  3660,  3659,  4936,  1781,   633,  5046,  2190,
     324,  5038,   731,   621,  1569,  2724,  2191,   621,  2010,  4864,
     107,  4154,  1124,   942,  4297,  4931,  1498,  3632,  4576,  5119,
    4936,  5142,  5180,  5186,   838,  3665,  4942,  2222,  4759,   958,
     959,  3225,  2270,   962,  4797,  1441,  4952,  2705,  3683,   620,
    1938,   620,  2137,  2065,  2697,   555,   556,   557,  1518,  2698,
     616,   432,   562,  5090,  1646,  3328,   437,  1010,  2759,  2678,
    1438,  2320,  3121,  4525,   617,   994,  3418,  1017,  5110,   579,
    3698,  4055,   582,  4989,  2733,  5138,  3221,    -1,   656,   656,
     656,  1116,    -1,    -1,   503,  1116,    -1,  1116,    -1,    -1,
      -1,  1648,   602,    -1,    -1,   587,    -1,    -1,    -1,    -1,
     592,    -1,    -1,   595,    -1,    -1,    -1,    -1,    -1,    -1,
     491,   621,   436,    -1,   606,    -1,    -1,    -1,  4881,   611,
     612,   445,  5038,   615,    -1,  5041,  5042,  5164,    -1,    -1,
      -1,    -1,   513,  5170,    -1,    -1,    -1,    -1,   462,  5187,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   566,    -1,   592,
      -1,    -1,   595,    -1,    -1,    -1,   480,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   583,    -1,    -1,    -1,   611,   612,
      -1,    -1,   615,    -1,  5090,    -1,   686,    -1,    -1,    -1,
      -1,    -1,  4945,  4946,  5096,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,
      -1,   525,    -1,   584,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   604,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   558,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  5160,    -1,    -1,  1176,  5164,   630,
    1179,  1180,    -1,    -1,  5170,    -1,    -1,    -1,  5174,    -1,
      -1,    -1,    -1,    -1,  5180,   646,  5029,  5030,    -1,    -1,
    5186,    -1,    -1,    -1,    -1,  1204,  1205,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1213,  1214,  1215,  1216,  1217,  1218,
    1219,  1220,  1221,  1222,  1223,  1224,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1234,  1235,    -1,  1237,  1238,
      -1,    -1,    -1,    -1,  1243,  1244,  1245,    -1,    -1,  1248,
    1249,  1250,  1251,  1252,  1253,    -1,  1255,  1256,  1257,    -1,
      -1,    -1,    -1,    -1,    -1,  1264,  1265,    -1,  1267,  1268,
    1269,  1270,  1271,    -1,    -1,  1274,  1275,  1276,  1277,    -1,
    1279,  1280,  1281,  1282,    -1,  1284,  1285,  1286,  1287,  1288,
      -1,    -1,  1291,    -1,    -1,  1294,  1295,    -1,    -1,    -1,
    1299,    -1,    -1,    -1,  1303,  1304,  1305,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1315,  1316,  1317,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1325,    -1,    -1,    -1,
      -1,    -1,    -1,  1332,  1333,  1334,  1335,    -1,    28,    -1,
      30,    -1,    -1,    -1,  1343,  1344,  1345,    -1,  1347,  1348,
    1349,  1350,  1351,    -1,  1353,  1354,  1355,  1356,  1357,  1358,
    1359,  1360,    -1,    -1,    -1,  1364,    -1,  1366,    -1,    -1,
      -1,    -1,    62,    63,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1441,   133,    -1,    -1,   136,    -1,    -1,    -1,
      -1,    -1,    -1,  1452,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1468,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,   168,    -1,
      14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    28,    38,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,
      -1,    -1,    56,    -1,    -1,    -1,    60,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,  1535,    62,    63,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
     240,    85,   242,  1552,    -1,    -1,    -1,    -1,    83,    -1,
     250,    -1,    -1,    -1,    -1,    -1,    91,   257,    -1,    -1,
     104,    -1,    -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,
      -1,    -1,    -1,   273,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   129,    -1,   287,    -1,    -1,
      -1,    -1,   168,    -1,   138,   171,   140,   141,   133,    -1,
      -1,   136,    13,    -1,  1613,    -1,    -1,    -1,    -1,   153,
     154,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,
      -1,    -1,   166,    -1,    -1,    -1,    37,    38,    -1,    -1,
      -1,   331,    -1,   168,    -1,    -1,   212,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     350,    62,    63,    -1,    -1,   199,    -1,    -1,   234,    -1,
      -1,    -1,    -1,    74,   240,    -1,   242,    -1,    -1,    -1,
      -1,    -1,    -1,   217,    -1,   219,    -1,    -1,    -1,    -1,
      -1,   225,    -1,    -1,    -1,   229,    -1,    -1,    -1,   100,
      -1,   102,    -1,   104,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,   240,   117,   242,    -1,   409,
      -1,   411,   256,    -1,   258,   250,    -1,    -1,    -1,   419,
      -1,    -1,   257,   299,    -1,    -1,    -1,    -1,    -1,   140,
     141,   275,    -1,    -1,    -1,    -1,    -1,    -1,   273,    -1,
      -1,    -1,    -1,    -1,    -1,  1754,    -1,    -1,   324,   293,
      -1,    -1,    -1,   297,    -1,    -1,   167,   168,    -1,    -1,
     304,   172,    -1,    -1,   175,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1794,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   331,   208,   498,   210,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,    -1,   220,
      -1,    -1,    -1,    -1,    -1,   350,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,    -1,    -1,   249,   250,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   395,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,
     436,   272,   562,    -1,    -1,    -1,    -1,    -1,    -1,   445,
     414,    -1,   416,    -1,   409,    -1,   411,    -1,    -1,   579,
      -1,    -1,   582,   294,   419,    -1,   462,    -1,   432,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   443,
      -1,    -1,   602,    -1,   480,    -1,    -1,    -1,    -1,    -1,
    1919,  1920,  1921,   324,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   621,    -1,   467,    -1,  1934,   470,    -1,   472,    -1,
     474,   475,    -1,    -1,   478,   479,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   489,    -1,  1956,   492,   525,
      -1,    -1,   528,  1962,    -1,    -1,  1965,   501,  1967,    -1,
      -1,    -1,    -1,   498,  1973,    -1,  1975,  1976,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,
      -1,    -1,   558,   394,   684,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2001,    -1,    -1,    -1,    -1,    -1,   152,    -1,
      -1,  2010,   578,    -1,    -1,   581,    -1,    -1,    -1,   553,
     600,    -1,   423,    -1,    -1,    -1,    -1,   561,    -1,    -1,
     555,   556,   557,    -1,    -1,   436,   437,   562,    -1,   440,
     441,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   579,   635,    -1,   582,    -1,    -1,
      -1,    -1,   463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   607,    -1,    -1,    -1,   602,    -1,    -1,
      -1,    -1,    -1,  2082,    -1,    -1,   620,    -1,    -1,    -1,
     624,    -1,  2091,   627,    -1,    -1,   621,    -1,   632,    -1,
     244,    -1,   246,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   512,    -1,    -1,    -1,  2114,    -1,    -1,    -1,    -1,
      -1,   655,   656,    -1,   525,    -1,    -1,    -1,    -1,   663,
      -1,   711,    -1,    -1,    -1,   669,  2135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2152,    -1,    -1,    -1,   558,    -1,    -1,
     740,   562,   306,   307,    -1,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     581,   325,   326,   327,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   783,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     800,    -1,  2221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   649,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2270,   852,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   899,
     464,   465,    -1,  2322,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2344,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   942,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2407,    -1,
      -1,    -1,  2411,    -1,    -1,    -1,    -1,  2416,  2417,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2425,    -1,  2427,    -1,
    2429,  2430,  2431,  2432,    -1,    -1,  2435,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2445,    -1,  2447,    -1,
    2449,  2450,    -1,  2452,    -1,  2454,    -1,  2456,  2457,  2458,
    2459,    -1,  2461,  2462,    -1,    -1,  2465,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2474,    -1,    -1,    -1,    -1,
      -1,  2480,    -1,    -1,  2483,    -1,  2485,    -1,  2487,  2488,
      -1,  2490,  2491,    -1,    -1,    -1,  2495,  2496,  2497,    -1,
      -1,    -1,  2501,  2502,  2503,    -1,  2505,    -1,  2507,    -1,
    2509,    -1,  2511,    -1,  2513,    -1,    -1,    -1,    -1,  2518,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2534,    -1,    -1,    -1,    -1,
      -1,  2540,    -1,    -1,  2543,    -1,    -1,    -1,    -1,    -1,
    2549,    -1,    -1,    -1,  2553,    -1,    -1,    -1,  2557,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1176,    -1,    -1,  1179,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2613,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1204,  1205,    -1,    -1,    -1,    -1,
    2629,  2630,  2631,  1213,  1214,    -1,    -1,  1217,  1218,  1219,
    1220,  1221,  1222,  1223,  1224,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1234,  1235,    -1,  1237,  1238,    -1,
      -1,    -1,    -1,  1243,  1244,    -1,    -1,    -1,  1248,  1249,
    1250,  1251,  1252,  1253,    -1,  1255,  1256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1264,  1265,    -1,  1267,  1268,    -1,
      -1,    -1,    -1,    -1,  1274,  1275,  1276,  1277,    -1,  1279,
      -1,    -1,  1282,    -1,  1284,  1285,  1286,  1287,  1288,    -1,
      -1,  1291,    -1,    -1,  1294,  1295,    -1,    -1,    -1,  1299,
      -1,    -1,    -1,  1303,  1304,  1305,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1315,  1316,  1317,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1325,    -1,    -1,  2747,    -1,
      -1,    -1,  1332,  1333,  1334,    14,    -1,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2772,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,  2781,    -1,    -1,    -1,  1366,    -1,    -1,  2788,
      -1,    -1,    -1,    52,    53,    -1,    -1,    56,    -1,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2816,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,  2828,
    2829,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     129,    -1,  1452,    -1,    28,    -1,    30,    -1,    -1,   138,
      -1,   140,   141,    -1,    -1,    -1,    -1,    -1,  1468,    -1,
      -1,    -1,    -1,    -1,   153,   154,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2905,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   181,    -1,    -1,    -1,    -1,  2926,    -1,    83,
      -1,    -1,  2931,  2932,    -1,    -1,    -1,    91,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1535,    -1,    -1,   217,    -1,
     219,    -1,    -1,  2962,  2963,   119,   225,    -1,    -1,    -1,
     229,    -1,  1552,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    -1,   136,    -1,   243,    -1,    -1,    -1,  2987,    -1,
      -1,    -1,  2991,    -1,    -1,    -1,    -1,   256,    -1,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   168,    -1,   275,    -1,    -1,    -1,
      -1,  3020,  3021,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1613,   293,    -1,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,   304,  3045,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3054,    -1,  3056,    -1,  3058,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,   242,    -1,
    3089,    -1,    -1,    -1,    -1,  3094,   250,    -1,    -1,    -1,
      -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,    -1,    -1,
      14,    -1,    16,  3112,    -1,    -1,    -1,    -1,    -1,   273,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3131,    -1,    38,    -1,   395,    -1,    -1,    -1,
      -1,    -1,  3141,  3142,  3143,  3144,    -1,  3146,    52,    53,
      -1,    -1,    -1,    -1,    -1,   414,    60,   416,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   432,    -1,    -1,    -1,   331,    -1,    -1,
      -1,    85,    -1,    -1,   443,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3191,    -1,    -1,    -1,   350,    -1,    -1,    -1,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,   470,    -1,   472,  1794,   474,   475,    -1,    -1,   478,
     479,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,
     489,    -1,    -1,   492,   138,    -1,   140,   141,    -1,    -1,
      -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,   153,
     154,    -1,    -1,    -1,    -1,   409,   515,   411,    -1,    -1,
      -1,   520,   521,   522,    -1,   419,    -1,    -1,    -1,    -1,
      -1,  3270,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,  3282,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   553,   199,    -1,    -1,    -1,    -1,
      -1,    -1,   561,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   217,    -1,   219,    -1,    -1,    -1,    -1,
      -1,   225,    -1,    -1,    -1,   229,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1919,
    1920,  1921,    -1,    -1,   498,    -1,    -1,    -1,   607,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,    -1,    -1,    -1,
      -1,   620,    -1,    -1,    -1,   624,    -1,    -1,   627,    -1,
      -1,   275,    -1,   632,    -1,    -1,  1956,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1965,    -1,  1967,    -1,   293,
      -1,    -1,    -1,   297,    -1,    -1,   655,   656,    -1,    -1,
      -1,   555,   556,   557,   663,    -1,    -1,  3406,   562,    -1,
     669,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2001,    -1,    -1,    -1,   579,    -1,    -1,   582,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3439,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   602,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   621,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3474,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3485,    -1,    -1,    -1,
      -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2082,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     414,  2091,   416,    -1,    -1,    -1,    -1,    -1,  3517,    -1,
      -1,    -1,    -1,    -1,  3523,  3524,    -1,  3526,   432,    -1,
      -1,    -1,    -1,    -1,  2114,    -1,    -1,    -1,  3537,   443,
      -1,    -1,    -1,  3542,    -1,    -1,  3545,    -1,  3547,  3548,
      -1,    -1,    -1,    -1,    -1,  2135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,   470,    -1,   472,    -1,
      -1,   475,  2152,    -1,   478,   479,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,   492,  3588,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,
      -1,    -1,    -1,    -1,  3623,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   553,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   561,    -1,    -1,
    3659,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   607,    -1,    -1,    -1,    -1,    -1,    -1,
    3709,    -1,    -1,    -1,    -1,    -1,   620,    -1,    -1,    -1,
     624,    -1,    -1,   627,    -1,    -1,    -1,    -1,   632,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3740,    -1,    -1,    -1,    -1,  3745,    -1,    -1,    -1,
      -1,    -1,   656,    -1,  3753,    -1,    -1,    -1,    -1,   663,
      -1,    -1,    -1,    -1,  2344,   669,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2407,    -1,    -1,
      -1,  2411,    -1,    -1,    -1,    -1,  2416,  2417,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2425,    -1,  2427,    -1,  2429,
      -1,  2431,  2432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2445,    -1,  2447,    -1,  2449,
      -1,    -1,  2452,    -1,  2454,    -1,  2456,  2457,  2458,  2459,
      -1,  2461,  2462,    -1,    -1,    -1,    -1,    -1,  3887,  3888,
      -1,    -1,    -1,    -1,  2474,    -1,    -1,    -1,    -1,    -1,
    2480,    -1,    -1,  2483,    -1,  2485,    -1,  2487,  2488,    -1,
    2490,    -1,    -1,    -1,    -1,  2495,  2496,  2497,    -1,    -1,
      -1,  2501,  2502,  2503,    -1,  2505,    -1,  2507,    -1,  2509,
      -1,  2511,    -1,  2513,    -1,    -1,    -1,    -1,  2518,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    37,    -1,    -1,  2534,  3954,    42,    -1,    44,    -1,
      46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2549,
      -1,    -1,    -1,  2553,    36,    37,    -1,    63,    -1,    -1,
      42,    -1,    44,    -1,    46,    47,    -1,    -1,    -1,    -1,
      -1,    -1,  3991,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    63,    -1,    -1,    -1,    -1,    -1,  4006,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4026,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,
      -1,  2631,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,
      -1,   123,    -1,  4062,    -1,   151,    -1,    -1,    -1,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,    -1,   151,
      -1,    -1,    -1,    -1,    -1,  4094,    -1,    -1,    -1,    -1,
      -1,  4100,    -1,    -1,    -1,    -1,    -1,   169,    -1,    -1,
     196,    -1,   198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   214,   215,
      -1,    -1,    -1,    -1,   196,    -1,   198,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   214,   215,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   261,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   261,
      -1,  2781,    -1,    -1,    -1,   291,    -1,    -1,  2788,   271,
      -1,    -1,    -1,    -1,   300,   301,    -1,   303,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4236,   300,   301,
      -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   338,   339,   340,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   357,   358,   359,  4273,    -1,   338,   339,   340,   365,
      -1,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4291,    -1,    -1,   357,   358,   359,    -1,   385,
      -1,   387,    -1,   365,    -1,    -1,   368,  4306,  4307,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,    -1,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,
     426,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2932,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,   426,    -1,    -1,   453,    -1,    -1,
      -1,    -1,    -1,    -1,  4373,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   453,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2987,  4407,    -1,
       6,  2991,    -1,    -1,    -1,    -1,    12,    -1,    14,    -1,
      -1,    -1,    -1,    -1,    -1,   511,    -1,    -1,    -1,   515,
      -1,    -1,    28,    -1,    30,    -1,    -1,    -1,    -1,    -1,
    3020,  3021,    -1,   529,    -1,    -1,    -1,  4446,    -1,    -1,
      -1,    -1,    -1,   515,    -1,    -1,    -1,  4456,    -1,    -1,
      -1,    -1,    -1,    -1,    60,  3045,    -1,   529,    -1,    65,
      -1,    -1,    -1,    -1,  3054,    -1,  3056,    -1,  3058,    -1,
      -1,    -1,    -1,  4482,    -1,    -1,    -1,    83,    -1,    -1,
    4489,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,
      -1,    -1,   588,  4502,    -1,   101,   592,    -1,    -1,   595,
     596,   597,   598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,    -1,    -1,   588,    -1,    -1,    -1,
     592,    -1,  3112,   595,   596,   597,   598,   133,    -1,    -1,
     136,  4540,    -1,  4542,    -1,    -1,    -1,    -1,    -1,    -1,
     146,    -1,    -1,   639,   640,    -1,    -1,    -1,   154,    -1,
      -1,    -1,    -1,    -1,  4563,    -1,   162,    -1,  4567,    -1,
      -1,    -1,   168,    -1,    -1,    -1,    -1,   639,   640,    -1,
      -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   667,   202,    -1,    -1,  4608,
      -1,  3191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4639,    -1,    -1,    -1,   240,    -1,   242,    -1,    -1,    -1,
      -1,  4650,    -1,    -1,   250,    -1,    -1,    -1,    -1,  4658,
      -1,   257,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4674,    -1,   273,    -1,    -1,
      -1,  4680,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   297,  3282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4711,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   331,    -1,  4736,    -1,    -1,
      -1,    -1,  4741,    -1,    -1,    -1,    -1,    -1,    -1,  4748,
      -1,    -1,    -1,    -1,   350,    -1,    -1,    -1,   354,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4775,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,
      -1,  4810,    -1,   409,    -1,   411,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4870,    -1,    -1,   470,    -1,    -1,  4876,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   498,    -1,    -1,  3485,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4928,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3517,  4937,    -1,
      -1,    -1,    -1,  3523,  3524,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3537,    -1,   555,
     556,   557,  3542,    -1,    -1,  3545,   562,  3547,  3548,  4968,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   579,    -1,    -1,   582,    -1,    -1,    -1,
      -1,  4990,    -1,  4992,  4993,  4994,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   602,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   621,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3623,    -1,    -1,    -1,    -1,    -1,    -1,
    5049,    -1,    -1,  5052,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3659,
      -1,    -1,    -1,    -1,    -1,  5084,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  5101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3709,
      -1,    -1,  5131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3745,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3753,    -1,    -1,    -1,    -1,  5177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    5189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3887,  3888,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3954,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3991,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4026,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4062,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4094,    -1,    -1,    -1,    -1,    -1,
    4100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4119,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4273,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4291,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4306,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4502,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4540,    -1,  4542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4608,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4775,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
    4810,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,   134,    -1,   136,    -1,    -1,   139,    -1,  4928,   142,
      -1,   144,   145,   146,   147,   148,    -1,  4937,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,  4994,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,   229,   230,   231,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
     243,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,   256,   257,   258,   259,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,   302,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,  5189,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,   412,
     413,    -1,   415,    -1,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,   448,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,   474,   475,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,   559,   560,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   575,   576,   577,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,   600,   601,   602,
     603,    -1,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,   634,   635,   636,   637,   638,    -1,    -1,   641,   642,
      -1,   644,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   677,   678,    -1,    -1,    -1,    -1,
     683,   684,    -1,    -1,   687,   688,    -1,    -1,   691,   692,
       5,    -1,     7,     8,     9,    10,    11,    12,    13,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,
      -1,   136,    -1,    -1,   139,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,   229,   230,   231,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,   243,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,   256,   257,   258,   259,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,   302,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,   412,   413,    -1,
     415,    -1,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,   448,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,   474,
     475,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,   559,   560,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,   634,
     635,   636,   637,   638,    -1,    -1,   641,   642,    -1,   644,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   677,   678,    -1,    -1,    -1,    -1,   683,   684,
      -1,    -1,   687,   688,    -1,    -1,   691,   692,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,   101,   102,   103,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,    -1,    -1,
      -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,   136,
      -1,    -1,   139,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,   229,   230,   231,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,   243,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,
     257,   258,   259,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,   302,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,   412,   413,    -1,   415,    -1,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,   448,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,   559,   560,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,   634,   635,   636,
     637,   638,    -1,    -1,   641,   642,    -1,   644,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,
     667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     677,   678,    -1,    -1,    -1,    -1,   683,   684,    -1,    -1,
     687,   688,    -1,    -1,   691,   692,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,
     139,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
     229,   230,   231,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,   243,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,   258,
     259,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,   302,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,   412,   413,    -1,   415,    -1,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,   448,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,   474,   475,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
     559,   560,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,   587,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,   634,   635,   636,   637,   638,
      -1,    -1,   641,   642,    -1,   644,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,   678,
      -1,    -1,    -1,    -1,   683,   684,    -1,    -1,   687,   688,
      -1,    -1,   691,   692,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,   139,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,   229,   230,
     231,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,   243,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,   256,   257,   258,   259,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,   302,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,   412,   413,    -1,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,   448,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,   474,   475,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,   559,   560,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,   575,   576,   577,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,   634,   635,   636,   637,   638,    -1,    -1,
     641,   642,    -1,   644,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   677,   678,    -1,    -1,
      -1,    -1,   683,   684,    -1,    -1,   687,   688,    -1,    -1,
     691,   692,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,   134,    -1,   136,    -1,    -1,   139,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,   229,   230,   231,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
     243,    -1,   245,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,   256,   257,   258,   259,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,   302,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,   412,
     413,    -1,   415,    -1,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,   448,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,   474,   475,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,   559,   560,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   575,   576,   577,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,   634,   635,   636,   637,   638,    -1,    -1,   641,   642,
      -1,   644,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   677,   678,    -1,    -1,    -1,    -1,
     683,   684,    -1,    -1,   687,   688,    -1,    -1,   691,   692,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,
      -1,   136,    -1,    -1,   139,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,   229,   230,   231,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,   243,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,   256,   257,   258,   259,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,   302,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,   412,   413,    -1,
     415,    -1,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,   448,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,   474,
     475,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,   559,   560,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,   634,
     635,   636,   637,   638,    -1,    -1,   641,   642,    -1,   644,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   677,   678,    -1,    -1,    -1,    -1,   683,   684,
      -1,    -1,   687,   688,    -1,    -1,   691,   692,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,   101,   102,   103,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,    -1,    -1,
      -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,   136,
      -1,    -1,   139,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,   229,   230,   231,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,   243,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,
     257,   258,   259,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,   302,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,   412,   413,    -1,   415,    -1,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,   448,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,   559,   560,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,   634,   635,   636,
     637,   638,    -1,    -1,   641,   642,    -1,   644,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,
     667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     677,   678,    -1,    -1,    -1,    -1,   683,   684,    -1,    -1,
     687,   688,    -1,    -1,   691,   692,     5,    -1,     7,     8,
       9,    10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,
     139,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
     229,   230,   231,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,   243,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,   258,
     259,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,   302,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,    -1,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,   412,   413,    -1,   415,    -1,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,   448,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,   474,   475,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
     559,   560,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,   587,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,   634,   635,   636,   637,   638,
      -1,    -1,   641,   642,    -1,   644,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,   678,
      -1,    -1,    -1,    -1,   683,   684,    -1,    -1,   687,   688,
      -1,    -1,   691,   692,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,   139,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,   229,   230,
     231,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,   243,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,   256,   257,   258,   259,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,   302,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,   412,   413,    -1,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,   448,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,   474,   475,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,   559,   560,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,   575,   576,   577,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,   634,   635,   636,   637,   638,    -1,    -1,
     641,   642,    -1,   644,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   677,   678,    -1,    -1,
      -1,    -1,   683,   684,    -1,    -1,   687,   688,    -1,    -1,
     691,   692,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,   134,    -1,   136,    -1,    -1,   139,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,   229,   230,   231,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
     243,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,   256,   257,   258,   259,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,   302,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,   412,
     413,    -1,   415,    -1,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,   448,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,   474,   475,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,   559,   560,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   575,   576,   577,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,   634,   635,   636,   637,   638,    -1,    -1,   641,   642,
      -1,   644,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   677,   678,    -1,    -1,    -1,    -1,
     683,   684,    -1,    -1,   687,   688,    -1,    -1,   691,   692,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,
      -1,   136,    -1,    -1,   139,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,   229,   230,   231,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,   243,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,   256,   257,   258,   259,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,   302,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,   412,   413,    -1,
     415,    -1,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,   448,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,   474,
     475,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,   559,   560,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,   634,
     635,   636,   637,   638,    -1,    -1,   641,   642,    -1,   644,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   677,   678,    -1,    -1,    -1,    -1,   683,   684,
      -1,    -1,   687,   688,    -1,    -1,   691,   692,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,   101,   102,   103,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,    -1,    -1,
      -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,   136,
      -1,    -1,   139,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,   229,   230,   231,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,   243,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,
     257,   258,   259,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,   302,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,    -1,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,   412,   413,    -1,   415,    -1,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,   448,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,   559,   560,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,   634,   635,   636,
     637,   638,    -1,    -1,   641,   642,    -1,   644,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,
     667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     677,   678,    -1,    -1,    -1,    -1,   683,   684,    -1,    -1,
     687,   688,    -1,    -1,   691,   692,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,
     139,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
     229,   230,   231,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,   243,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,   258,
     259,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,   302,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,    -1,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,   412,   413,    -1,   415,    -1,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,   448,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,   474,   475,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
     559,   560,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,   587,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,   634,   635,   636,   637,   638,
      -1,    -1,   641,   642,    -1,   644,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,   678,
      -1,    -1,    -1,    -1,   683,   684,    -1,    -1,   687,   688,
      -1,    -1,   691,   692,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,   139,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,   229,   230,
     231,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,   243,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,   256,   257,   258,   259,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,   302,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,    -1,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,   412,   413,    -1,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,   448,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,   474,   475,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,   559,   560,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,   575,   576,   577,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,   634,   635,   636,   637,   638,    -1,    -1,
     641,   642,    -1,   644,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   677,   678,    -1,    -1,
      -1,    -1,   683,   684,    -1,    -1,   687,   688,    -1,    -1,
     691,   692,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,   134,    -1,   136,    -1,    -1,   139,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,   229,   230,   231,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
     243,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,   256,   257,   258,   259,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,   302,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,    -1,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,   412,
     413,    -1,   415,    -1,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,   448,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,   474,   475,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,   559,   560,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   575,   576,   577,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,   634,   635,   636,   637,   638,    -1,    -1,   641,   642,
      -1,   644,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   677,   678,    -1,    -1,    -1,    -1,
     683,   684,    -1,    -1,   687,   688,    -1,    -1,   691,   692,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,
      -1,   136,    -1,    -1,   139,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,   229,   230,   231,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,   243,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,   256,   257,   258,   259,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,   302,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,   412,   413,    -1,
     415,    -1,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,   448,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,   474,
     475,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,   559,   560,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,   634,
     635,   636,   637,   638,    -1,    -1,   641,   642,    -1,   644,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   677,   678,    -1,    -1,    -1,    -1,    -1,   684,
      -1,    -1,    -1,   688,    -1,    -1,   691,   692,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    39,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,   130,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,    -1,   193,    -1,   195,   196,
     197,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,   230,   231,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,   302,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,   382,   383,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,
     667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,   691,   692,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,   133,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
     196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,   497,   498,    -1,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,   607,   608,   609,   610,    -1,   612,   613,   614,    -1,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
      -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   692,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
      -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,    -1,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,
     667,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   692,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,    -1,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,   667,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   692,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,   587,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,    -1,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   692,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   692,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,   685,    15,    -1,    -1,    -1,    19,
     691,   692,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   692,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
     691,   692,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   692,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,   209,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,   250,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,   287,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,   507,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,   536,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,   656,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
     691,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,   209,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,   250,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,   274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,   536,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   691,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,    -1,
      -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,    -1,   497,   498,    -1,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,   607,   608,   609,   610,    -1,   612,   613,   614,
      -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,   656,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
     685,    -1,    19,    -1,    -1,    22,   691,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
      -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,    -1,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,
     667,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,   684,    -1,    -1,
      19,    -1,    -1,    22,   691,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,    -1,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   691,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,   679,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
     691,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,    -1,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,   667,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,   684,    -1,    -1,    19,
      -1,    -1,    22,   691,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,   243,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   691,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   691,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   691,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
     196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,   497,   498,    -1,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,   607,   608,   609,   610,    -1,   612,   613,   614,    -1,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
      -1,   667,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   691,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,    -1,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,   667,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,   691,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,    -1,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,    -1,
      -1,    -1,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,   192,   193,    -1,   195,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,    -1,   218,    -1,
     220,    -1,    -1,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,   243,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,    -1,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,   269,
      -1,   271,    -1,   273,    -1,    -1,    -1,   277,   278,    -1,
      -1,   281,   282,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,    -1,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,
     410,    -1,    -1,    -1,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,    -1,    -1,    -1,
      -1,    -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,    -1,
      -1,   471,    -1,   473,   474,    -1,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,    -1,   486,   487,   488,    -1,
      -1,   491,    -1,   493,   494,   495,    -1,   497,   498,    -1,
     500,    -1,   502,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,   511,   512,    -1,    -1,    -1,    -1,   517,    -1,    -1,
      -1,    -1,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
     530,    -1,   532,    -1,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,    -1,   554,    -1,    -1,    -1,   558,    -1,
      -1,    -1,   562,    -1,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,    -1,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,    -1,   608,   609,
     610,    -1,    -1,   613,   614,    -1,   616,   617,    -1,    -1,
      -1,    -1,    -1,   623,    -1,    -1,   626,    -1,    -1,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,    -1,   655,    -1,    -1,    -1,   659,
      -1,    -1,   662,    -1,   664,    -1,    -1,   667,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   686,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,   110,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
      -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,    -1,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,     5,
     667,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   684,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
     196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,   497,   498,    -1,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,   607,   608,   609,   610,    -1,   612,   613,   614,    -1,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
       5,   667,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   684,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,    -1,
      -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,    -1,   497,   498,    -1,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,   607,   608,   609,   610,    -1,   612,   613,   614,
      -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,     5,   667,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,   679,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,     5,   667,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,   679,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,     5,   667,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,   679,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,     5,   667,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,   679,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,   516,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,
       5,   672,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,   104,
      -1,   106,    -1,    -1,   109,    -1,   111,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,   138,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,   154,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,    -1,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,
      -1,   246,   247,   248,   249,   250,    -1,   252,    -1,    -1,
      -1,   256,   257,   258,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,
     285,   286,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,    -1,    -1,    -1,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,    -1,
      -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,    -1,   497,   498,    -1,   500,   501,   502,   503,    -1,
     505,   506,   507,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,   604,
      -1,    -1,   607,   608,   609,   610,    -1,   612,   613,   614,
      -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,   627,   628,   629,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,     5,   667,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
     104,    -1,   106,    -1,    -1,   109,    -1,   111,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,   138,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
     154,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,   250,    -1,   252,    -1,
      -1,    -1,   256,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,   507,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
     604,    -1,    -1,   607,   608,   609,   610,    -1,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,   627,   628,   629,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,     5,   667,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,   197,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,   230,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,   302,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,
     383,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,   538,   539,   540,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,   611,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,     5,   667,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,
      -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,   197,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,   230,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
     302,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,   383,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,   611,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,     5,   667,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,   197,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,   230,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,   302,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,   383,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
     611,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,     5,   667,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
     130,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,   197,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
     230,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,   302,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,   383,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,   611,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,     5,   667,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,   302,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,   383,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,   412,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,   611,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,     5,   667,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,   302,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,   383,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,   412,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,   496,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,   611,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,     5,   667,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,   110,   111,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
      -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,    -1,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,     5,
     667,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,   133,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
     196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,   497,   498,    -1,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,   607,   608,   609,   610,    -1,   612,   613,   614,    -1,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
       5,   667,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    39,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,   227,    -1,   229,   230,   231,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,    -1,
      -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,    -1,   497,   498,    -1,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,   607,   608,   609,   610,    -1,   612,   613,   614,
      -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,     5,   667,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,   302,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,   383,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,   412,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,   611,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,     5,   667,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
     133,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,     5,   667,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,   110,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,     5,   667,     7,     8,     9,    10,
      11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,     5,   667,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,   111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,   286,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,     5,   667,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,   587,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,    -1,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,     5,   667,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,    -1,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,     5,   667,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
      -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,    -1,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,     5,
     667,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
     196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,   497,   498,    -1,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,   607,   608,   609,   610,    -1,   612,   613,   614,    -1,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
       5,   667,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    20,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,    -1,
      -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,    -1,   497,   498,    -1,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,   607,   608,   609,   610,    -1,   612,   613,   614,
      -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,     5,   667,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,   539,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,     5,   667,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,     5,   667,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,     5,   667,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,     5,   667,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,     5,   667,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,    -1,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,     5,   667,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,   133,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,    -1,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,     5,   667,
       7,     8,     9,    10,    11,    12,    13,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
      -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,    -1,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,     5,
     667,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,   133,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
     196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,   497,   498,    -1,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,   607,   608,   609,   610,    -1,   612,   613,   614,    -1,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
       5,   667,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,    -1,
      -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,    -1,   497,   498,    -1,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,   607,   608,   609,   610,    -1,   612,   613,   614,
      -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,     5,   667,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,     5,   667,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,     5,   667,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,     5,   667,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,     5,   667,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,     5,   667,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
      -1,   160,   161,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
      -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,    -1,    -1,    -1,    -1,    -1,   226,   227,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,   243,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,    -1,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
     269,    -1,   271,    -1,   273,    -1,    -1,    -1,   277,   278,
      -1,    -1,   281,   282,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,    -1,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     409,   410,    -1,    -1,    -1,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,    -1,    -1,
      -1,    -1,    -1,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
      -1,    -1,   471,    -1,   473,   474,    -1,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,    -1,   486,   487,   488,
      -1,    -1,   491,    -1,   493,   494,   495,    -1,   497,   498,
      -1,   500,    -1,   502,   503,    -1,   505,    -1,    -1,    -1,
      -1,   510,   511,   512,    -1,    -1,    -1,    -1,   517,    -1,
      -1,    -1,    -1,    -1,    -1,   524,    -1,    -1,   527,   528,
      -1,   530,    -1,   532,    -1,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,    -1,   554,    -1,    -1,    -1,   558,
      -1,    -1,    -1,   562,    -1,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,    -1,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,   608,
     609,   610,    -1,    -1,   613,   614,    -1,   616,   617,    -1,
      -1,    -1,    -1,    -1,   623,    -1,    -1,   626,    -1,    -1,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,    -1,   655,    -1,    -1,    -1,
     659,    -1,    -1,   662,    -1,   664,    -1,     5,   667,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,    -1,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,
     158,    -1,   160,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,   192,   193,    -1,   195,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,    -1,    -1,    -1,    -1,    -1,   226,   227,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,   243,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
      -1,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,   269,    -1,   271,    -1,   273,    -1,    -1,    -1,   277,
     278,    -1,    -1,   281,   282,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
      -1,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   409,   410,    -1,    -1,    -1,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,    -1,
      -1,    -1,    -1,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,    -1,    -1,   471,    -1,   473,   474,    -1,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,    -1,   486,   487,
     488,    -1,    -1,   491,    -1,   493,   494,   495,    -1,   497,
     498,    -1,   500,    -1,   502,   503,    -1,   505,    -1,    -1,
      -1,    -1,   510,   511,   512,    -1,    -1,    -1,    -1,   517,
      -1,    -1,    -1,    -1,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,   530,    -1,   532,    -1,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,    -1,   554,    -1,    -1,    -1,
     558,    -1,    -1,    -1,   562,    -1,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
     588,   589,    -1,    -1,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,
     608,   609,   610,    -1,    -1,   613,   614,    -1,   616,   617,
      -1,    -1,    -1,    -1,    -1,   623,    -1,    -1,   626,    -1,
      -1,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,   652,    -1,    -1,   655,    -1,    -1,
      -1,   659,    -1,    -1,   662,    -1,   664,    -1,     5,   667,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,
     157,   158,    -1,   160,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,   192,   193,    -1,   195,   196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,    -1,    -1,    -1,   226,
     227,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,   243,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,    -1,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,   269,    -1,   271,    -1,   273,    -1,    -1,    -1,
     277,   278,    -1,    -1,   281,   282,    -1,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,    -1,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   409,   410,    -1,    -1,    -1,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
      -1,    -1,    -1,    -1,    -1,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,    -1,    -1,   471,    -1,   473,   474,    -1,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,    -1,   486,
     487,   488,    -1,    -1,   491,    -1,   493,   494,   495,    -1,
     497,   498,    -1,   500,    -1,   502,   503,    -1,   505,    -1,
      -1,    -1,    -1,   510,   511,   512,    -1,    -1,    -1,    -1,
     517,    -1,    -1,    -1,    -1,    -1,    -1,   524,    -1,    -1,
     527,   528,    -1,   530,    -1,   532,    -1,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,    -1,   554,    -1,    -1,
      -1,   558,    -1,    -1,    -1,   562,    -1,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,   588,   589,    -1,    -1,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
      -1,   608,   609,   610,    -1,    -1,   613,   614,    -1,   616,
     617,    -1,    -1,    -1,    -1,    -1,   623,    -1,    -1,   626,
      -1,    -1,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,   652,    -1,    -1,   655,    -1,
      -1,    -1,   659,    -1,    -1,   662,    -1,   664,    -1,     5,
     667,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,   192,   193,    -1,   195,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,    -1,    -1,    -1,
     226,   227,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,   243,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,    -1,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,   269,    -1,   271,    -1,   273,    -1,    -1,
      -1,   277,   278,    -1,    -1,   281,   282,    -1,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   409,   410,    -1,    -1,    -1,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,    -1,    -1,    -1,    -1,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,    -1,    -1,   471,    -1,   473,   474,    -1,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,    -1,
     486,   487,   488,    -1,    -1,   491,    -1,   493,   494,   495,
      -1,   497,   498,    -1,   500,    -1,   502,   503,    -1,   505,
      -1,    -1,    -1,    -1,   510,   511,   512,    -1,    -1,    -1,
      -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,   530,    -1,   532,    -1,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,    -1,   554,    -1,
      -1,    -1,   558,    -1,    -1,    -1,   562,    -1,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,   588,   589,    -1,    -1,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,   608,   609,   610,    -1,    -1,   613,   614,    -1,
     616,   617,    -1,    -1,    -1,    -1,    -1,   623,    -1,    -1,
     626,    -1,    -1,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,    -1,   655,
      -1,    -1,    -1,   659,    -1,    -1,   662,    -1,   664,    -1,
       5,   667,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,   192,   193,    -1,
     195,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,    -1,    -1,
      -1,   226,   227,    -1,    -1,    -1,    -1,    -1,    -1,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,   243,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,    -1,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,   269,    -1,   271,    -1,   273,    -1,
      -1,    -1,   277,   278,    -1,    -1,   281,   282,    -1,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   409,   410,    -1,    -1,    -1,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,    -1,    -1,    -1,    -1,    -1,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,    -1,    -1,   471,    -1,   473,   474,
      -1,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
      -1,   486,   487,   488,    -1,    -1,   491,    -1,   493,   494,
     495,    -1,   497,   498,    -1,   500,    -1,   502,   503,    -1,
     505,    -1,    -1,    -1,    -1,   510,   511,   512,    -1,    -1,
      -1,    -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,
      -1,    -1,   527,   528,    -1,   530,    -1,   532,    -1,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,    -1,   554,
      -1,    -1,    -1,   558,    -1,    -1,    -1,   562,    -1,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,   588,   589,    -1,    -1,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,    -1,   608,   609,   610,    -1,    -1,   613,   614,
      -1,   616,   617,    -1,    -1,    -1,    -1,    -1,   623,    -1,
      -1,   626,    -1,    -1,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,    -1,
     655,    -1,    -1,    -1,   659,    -1,    -1,   662,    -1,   664,
      -1,     5,   667,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      84,    -1,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,    -1,    -1,    -1,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,   243,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,   269,    -1,   271,    -1,   273,
      -1,    -1,    -1,   277,   278,    -1,    -1,   281,   282,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   409,   410,    -1,    -1,    -1,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,    -1,    -1,    -1,    -1,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,    -1,    -1,   471,    -1,   473,
     474,    -1,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,    -1,   486,   487,   488,    -1,    -1,   491,    -1,   493,
     494,   495,    -1,   497,   498,    -1,   500,    -1,   502,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,    -1,
      -1,    -1,    -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,   530,    -1,   532,    -1,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,    -1,
     554,    -1,    -1,    -1,   558,    -1,    -1,    -1,   562,    -1,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,    -1,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,    -1,   608,   609,   610,    -1,    -1,   613,
     614,    -1,   616,   617,    -1,    -1,    -1,    -1,    -1,   623,
      -1,    -1,   626,    -1,    -1,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
      -1,   655,    -1,    -1,    -1,   659,    -1,    -1,   662,    -1,
     664,    -1,     5,   667,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,   192,
     193,    -1,   195,   196,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
      -1,    -1,    -1,   226,   227,    -1,    -1,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
     243,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,   269,    -1,   271,    -1,
     273,    -1,    -1,    -1,   277,   278,    -1,    -1,   281,   282,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   409,   410,    -1,    -1,
      -1,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,    -1,    -1,    -1,    -1,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,    -1,    -1,   471,    -1,
     473,   474,    -1,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,    -1,   486,   487,   488,    -1,    -1,   491,    -1,
     493,   494,   495,    -1,   497,   498,    -1,   500,    -1,   502,
     503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,
      -1,    -1,    -1,    -1,   517,    -1,    -1,    -1,    -1,    -1,
      -1,   524,    -1,    -1,   527,   528,    -1,   530,    -1,   532,
      -1,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
      -1,   554,    -1,    -1,    -1,   558,    -1,    -1,    -1,   562,
      -1,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,    -1,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,    -1,   608,   609,   610,    -1,    -1,
     613,   614,    -1,   616,   617,    -1,    -1,    -1,    -1,    -1,
     623,    -1,    -1,   626,    -1,    -1,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,    -1,   655,    -1,    -1,    -1,   659,    -1,    -1,   662,
      -1,   664,    -1,     5,   667,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    84,    -1,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,
      -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,    -1,    -1,    -1,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
     192,   193,    -1,   195,   196,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,    -1,
      -1,    -1,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,   243,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,   269,    -1,   271,
      -1,   273,    -1,    -1,    -1,   277,   278,    -1,    -1,   281,
     282,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,    -1,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,   410,    -1,
      -1,    -1,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,    -1,    -1,    -1,    -1,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,    -1,    -1,   471,
      -1,   473,   474,    -1,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,    -1,   486,   487,   488,    -1,    -1,   491,
      -1,   493,   494,   495,    -1,   497,   498,    -1,   500,    -1,
     502,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,
     512,    -1,    -1,    -1,    -1,   517,    -1,    -1,    -1,    -1,
      -1,    -1,   524,    -1,    -1,   527,   528,    -1,   530,    -1,
     532,    -1,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,    -1,   554,    -1,    -1,    -1,   558,    -1,    -1,    -1,
     562,    -1,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,   588,   589,    -1,    -1,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,    -1,   608,   609,   610,    -1,
      -1,   613,   614,    -1,   616,   617,    -1,    -1,    -1,    -1,
      -1,   623,    -1,    -1,   626,    -1,    -1,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,    -1,   655,    -1,    -1,    -1,   659,    -1,    -1,
     662,    -1,   664,    -1,     5,   667,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,    -1,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,    -1,    -1,
      -1,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,    -1,   195,   196,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,   243,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,    -1,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,   269,    -1,
     271,    -1,   273,    -1,    -1,    -1,   277,   278,    -1,    -1,
     281,   282,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,    -1,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,   410,
      -1,    -1,    -1,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,    -1,    -1,    -1,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,    -1,    -1,
     471,    -1,   473,   474,    -1,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,    -1,   486,   487,   488,    -1,    -1,
     491,    -1,   493,   494,   495,    -1,   497,   498,    -1,   500,
      -1,   502,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,
     511,   512,    -1,    -1,    -1,    -1,   517,    -1,    -1,    -1,
      -1,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,   530,
      -1,   532,    -1,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,    -1,   554,    -1,    -1,    -1,   558,    -1,    -1,
      -1,   562,    -1,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,   589,    -1,
      -1,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,    -1,   608,   609,   610,
      -1,    -1,   613,   614,    -1,   616,   617,    -1,    -1,    -1,
      -1,    -1,   623,    -1,    -1,   626,    -1,    -1,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,    -1,   655,    -1,    -1,    -1,   659,    -1,
      -1,   662,    -1,   664,    -1,     5,   667,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,    -1,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,    -1,
      -1,    -1,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,   192,   193,    -1,   195,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,    -1,   218,    -1,
     220,    -1,    -1,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,   243,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,    -1,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,   269,
      -1,   271,    -1,   273,    -1,    -1,    -1,   277,   278,    -1,
      -1,   281,   282,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,    -1,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,
     410,    -1,    -1,    -1,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,    -1,    -1,    -1,
      -1,    -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,    -1,
      -1,   471,    -1,   473,   474,    -1,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,    -1,   486,   487,   488,    -1,
      -1,   491,    -1,   493,   494,   495,    -1,   497,   498,    -1,
     500,    -1,   502,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,   511,   512,    -1,    -1,    -1,    -1,   517,    -1,    -1,
      -1,    -1,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
     530,    -1,   532,    -1,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,    -1,   554,    -1,    -1,    -1,   558,    -1,
      -1,    -1,   562,    -1,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,    -1,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,    -1,   608,   609,
     610,    -1,    -1,   613,   614,    -1,   616,   617,    -1,    -1,
      -1,    -1,    -1,   623,    -1,    -1,   626,    -1,    -1,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,    -1,   655,    -1,    -1,    -1,   659,
      -1,    -1,   662,    -1,   664,    -1,     5,   667,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,    -1,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
      -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,    -1,    -1,    -1,    -1,    -1,   226,   227,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,   243,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,    -1,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,    -1,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     409,   410,    -1,    -1,    -1,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,    -1,    -1,
      -1,    -1,    -1,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
      -1,    -1,   471,    -1,   473,   474,    -1,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,    -1,   486,   487,   488,
      -1,    -1,   491,    -1,   493,   494,   495,    -1,   497,   498,
      -1,   500,    -1,   502,   503,    -1,   505,    -1,    -1,    -1,
      -1,   510,   511,   512,    -1,    -1,    -1,    -1,   517,    -1,
      -1,    -1,    -1,    -1,    -1,   524,    -1,    -1,   527,   528,
      -1,   530,    -1,   532,    -1,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,    -1,   554,    -1,    -1,    -1,   558,
      -1,    -1,    -1,   562,    -1,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,    -1,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,   608,
     609,   610,    -1,    -1,   613,   614,    -1,   616,   617,    -1,
      -1,    -1,    -1,    -1,   623,    -1,    -1,   626,    -1,    -1,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,    -1,   655,    -1,    -1,    -1,
     659,    -1,    -1,   662,    -1,   664,    -1,     5,   667,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,    -1,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,    -1,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,    -1,    -1,    -1,    -1,    -1,   226,   227,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
      -1,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,    -1,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
      -1,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   409,   410,    -1,    -1,    -1,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,    -1,
      -1,    -1,    -1,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,    -1,    -1,   471,    -1,   473,    -1,    -1,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,    -1,   493,   494,   495,    -1,   497,
     498,    -1,   500,    -1,   502,   503,    -1,   505,    -1,    -1,
      -1,    -1,   510,   511,   512,    -1,    -1,    -1,    -1,   517,
      -1,    -1,    -1,    -1,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,   530,    -1,   532,    -1,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,    -1,   554,    -1,    -1,    -1,
     558,    -1,    -1,    -1,   562,    -1,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
     588,   589,    -1,    -1,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,
     608,   609,   610,    -1,    -1,   613,   614,    -1,   616,   617,
      -1,    -1,    -1,    -1,    -1,   623,    -1,    -1,   626,    -1,
      -1,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   659,    -1,    -1,   662,    -1,   664,    -1,    -1,   667
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    34,    38,    52,    53,    56,    60,    65,
      66,    85,   104,   129,   138,   140,   141,   153,   154,   166,
     181,   199,   217,   219,   225,   229,   243,   256,   258,   275,
     293,   297,   304,   395,   414,   416,   432,   443,   467,   470,
     472,   474,   475,   478,   479,   489,   492,   501,   515,   520,
     521,   522,   553,   561,   607,   620,   624,   627,   632,   655,
     656,   663,   669,   695,   698,   699,   700,   701,   702,   705,
     712,   714,   727,   758,   786,   793,   794,   809,   810,   829,
     848,   863,   926,   984,  1029,  1113,  1158,  1161,  1171,  1176,
    1182,  1195,  1198,  1204,  1207,  1212,  1219,  1231,  1448,  1450,
    1462,  1465,  1488,  1496,  1509,  1516,  1530,  1534,  1535,  1539,
    1553,  1561,  1565,  1570,  1571,  1572,  1604,  1605,  1638,  1669,
    1675,  1677,  1684,  1687,  1724,  1726,  1732,  1733,  1734,  1735,
    1793,  1801,  1802,  1803,    12,   116,   134,   210,   298,   437,
     513,   579,   630,  1114,  1759,  1760,  1761,  1762,   205,   294,
     380,  1206,  1537,   375,   376,  1279,  1725,   587,   692,  1625,
     250,     5,     7,     8,     9,    10,    11,    12,    15,    19,
      22,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      34,    38,    42,    45,    46,    47,    49,    51,    52,    55,
      58,    59,    61,    62,    64,    65,    67,    68,    69,    70,
      71,    72,    74,    75,    76,    77,    78,    79,    80,    82,
      83,    84,    85,    86,    87,    88,    89,    91,    92,    94,
      95,    96,    97,    98,   100,   103,   106,   109,   112,   114,
     118,   119,   120,   123,   128,   129,   134,   136,   142,   144,
     145,   146,   147,   148,   153,   156,   157,   158,   162,   164,
     165,   167,   168,   169,   171,   172,   174,   175,   176,   177,
     178,   179,   180,   181,   184,   185,   186,   187,   190,   191,
     193,   195,   196,   199,   200,   201,   205,   206,   208,   210,
     212,   213,   214,   215,   216,   217,   218,   220,   225,   226,
     227,   229,   233,   234,   238,   239,   240,   241,   242,   246,
     247,   248,   249,   252,   257,   258,   262,   264,   265,   267,
     268,   271,   273,   276,   277,   278,   281,   284,   285,   291,
     292,   294,   296,   298,   299,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   324,   325,   326,   327,   329,   330,   331,   332,
     334,   335,   336,   341,   342,   343,   344,   345,   346,   349,
     350,   352,   354,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   368,   371,   372,   373,   374,   378,   379,
     384,   387,   388,   389,   391,   392,   393,   394,   396,   397,
     403,   408,   409,   410,   413,   415,   417,   418,   419,   421,
     422,   423,   424,   425,   426,   427,   429,   430,   432,   433,
     434,   436,   438,   439,   440,   441,   442,   444,   445,   446,
     450,   454,   455,   457,   458,   459,   462,   463,   464,   465,
     466,   468,   469,   471,   472,   473,   476,   478,   480,   481,
     483,   484,   486,   488,   491,   492,   493,   494,   495,   497,
     498,   500,   501,   502,   503,   505,   506,   510,   511,   512,
     513,   517,   521,   523,   524,   525,   526,   527,   528,   530,
     531,   532,   533,   534,   535,   542,   543,   545,   548,   552,
     553,   554,   558,   561,   562,   563,   565,   566,   567,   568,
     569,   570,   573,   574,   575,   576,   578,   579,   582,   583,
     584,   585,   588,   589,   591,   592,   593,   594,   595,   601,
     602,   603,   607,   608,   609,   610,   612,   613,   614,   616,
     617,   619,   620,   623,   626,   628,   630,   631,   638,   641,
     645,   646,   647,   648,   649,   650,   651,   654,   659,   660,
     662,   663,   664,   667,   752,  1624,  1629,  1635,  1636,  1637,
     830,   324,   578,   581,  1671,  1199,   659,  1728,   298,   402,
     579,  1497,  1449,   116,   176,   210,   250,   298,   437,   491,
     513,   579,   584,   604,   630,   646,  1461,   247,  1629,  1206,
     109,   795,   751,   691,  1621,  1623,  1629,   713,   811,  1463,
     424,   533,  1566,   119,   250,   664,  1577,  1671,   864,  1206,
    1030,   927,  1629,  1562,   501,   630,  1671,  1206,   866,  1466,
    1554,   539,   783,   787,   788,  1629,   751,  1728,  1629,   554,
    1639,  1517,   787,    13,   525,   601,    13,   525,   581,  1511,
     424,   533,  1676,  1489,  1629,   865,   456,  1607,    34,    85,
     164,   432,   455,   492,   553,  1795,     0,   166,   696,   432,
     116,   209,   491,   536,   622,   630,   733,   734,  1091,  1092,
    1093,  1461,   186,   205,   417,  1536,  1537,  1621,  1629,   507,
     684,  1232,   672,  1126,  1629,   672,   752,   221,   752,   286,
    1625,  1629,  1631,   869,   870,   873,   896,  1629,   243,  1460,
    1150,  1151,  1120,  1267,  1759,   672,  1671,  1231,  1462,  1465,
    1488,  1496,  1533,    25,  1728,  1631,  1213,   759,   691,   652,
     831,   832,   835,   839,   725,   726,  1625,  1172,   646,  1196,
    1671,    18,  1729,   221,   475,   871,   896,   245,   305,   446,
    1507,  1508,     8,    22,    31,    37,    39,    40,    41,    43,
      56,    57,    62,    63,    71,    74,    76,    77,    78,    79,
      80,    97,   101,   102,   107,   108,   110,   111,   115,   116,
     121,   122,   123,   128,   130,   133,   139,   182,   188,   189,
     194,   197,   205,   214,   216,   222,   223,   224,   230,   231,
     238,   243,   256,   259,   278,   283,   291,   302,   328,   333,
     345,   349,   351,   355,   356,   357,   358,   359,   367,   375,
     376,   377,   381,   382,   383,   386,   389,   412,   419,   420,
     425,   426,   428,   444,   448,   474,   475,   488,   490,   495,
     497,   499,   505,   559,   560,   567,   571,   572,   577,   587,
     592,   593,   594,   595,   605,   606,   607,   611,   615,   630,
     634,   635,   636,   637,   642,   644,   650,   651,   667,   677,
     678,   683,   684,   687,   688,   691,   692,  1273,  1274,  1275,
    1276,  1280,  1291,  1292,  1293,  1294,  1295,  1296,  1297,  1305,
    1309,  1310,  1311,  1313,  1327,  1596,  1599,  1601,  1602,  1603,
    1617,  1619,  1624,  1629,  1460,  1460,  1460,   243,  1459,   221,
    1460,  1460,  1460,   896,  1460,  1460,  1460,  1671,   703,   704,
     706,  1540,   144,    13,    14,   104,   111,   138,   154,   176,
     181,   193,   219,   250,   256,   297,   438,   442,   460,   468,
     476,   507,   520,   521,   573,   604,   627,   629,  1631,  1688,
    1692,  1693,  1695,  1697,  1698,  1629,   394,    70,   451,   691,
    1631,   824,   825,   135,   232,   305,  1468,  1629,  1625,   226,
     532,  1567,   260,  1573,  1670,    34,    70,   192,   269,   282,
     394,   487,   772,   807,   808,   809,   812,   813,   814,   816,
     817,   818,   819,   821,   844,   846,   852,   859,  1624,  1630,
    1637,  1671,  1273,    50,   928,   207,    37,   324,  1522,  1563,
    1629,   751,  1208,  1177,   772,   855,   135,   305,  1469,  1495,
     324,   445,   525,  1555,  1556,   638,   784,   515,   789,     7,
      13,   442,  1685,  1686,  1693,  1695,   599,  1729,  1640,    62,
      63,   133,   218,   294,   363,   419,   491,   512,   601,   692,
    1056,  1629,  1643,  1655,  1659,  1660,    13,    26,    38,    62,
      74,   100,   102,   104,   117,   168,   172,   175,   208,   210,
     218,   220,   249,   250,   272,   294,   324,   394,   423,   436,
     437,   440,   441,   463,   512,   525,   562,   581,   649,  1056,
    1090,  1518,  1522,  1523,  1525,  1534,  1624,  1656,   789,   526,
     725,   451,   656,  1162,  1163,  1164,   526,   725,  1510,  1629,
    1625,  1671,  1495,   853,  1273,  1606,    39,   230,   231,   587,
    1597,  1598,  1626,  1794,  1794,  1794,  1794,  1794,   690,  1629,
     243,   983,   983,   983,  1756,  1760,  1761,  1762,   513,   735,
     250,   250,   250,   581,  1532,  1531,  1253,  1254,   684,  1234,
    1235,   343,   585,   614,  1116,   628,   110,  1631,  1632,  1633,
    1692,  1118,   875,   897,  1629,  1117,  1122,     6,    60,   154,
     376,   450,   452,   898,   182,   751,   581,   245,   393,  1152,
    1153,  1154,   547,  1763,  1764,   176,  1119,  1631,  1183,   849,
     686,  1214,  1215,  1216,  1217,  1621,   684,   760,  1629,   840,
     160,   842,  1273,   839,   599,  1454,  1455,  1621,  1197,  1454,
      59,   378,   378,   467,  1730,   874,   897,     6,   207,  1498,
    1504,  1505,  1629,  1507,   684,   684,   684,  1292,   684,   684,
     684,  1273,  1330,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,  1272,  1272,
    1272,   684,  1271,   684,   684,   684,   587,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,  1273,   684,   684,   684,   684,  1328,
    1329,  1617,  1629,   684,   684,   684,   684,   684,   684,   684,
     684,   684,  1273,  1271,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,  1271,   587,   684,
     684,   684,   587,   684,   684,   684,   587,  1598,   684,  1272,
    1271,  1271,   684,   684,   684,   684,   684,   684,  1292,  1292,
    1292,  1031,  1273,  1750,  1751,  1629,  1629,  1314,    17,    18,
     399,   402,   665,  1277,  1278,   170,   211,   266,   279,   369,
     672,   673,   674,  1281,    35,   150,   263,   287,   355,   461,
     518,   519,   534,   675,   676,   677,   678,   679,   680,   681,
     682,  1279,  1292,    73,   401,   407,   686,  1626,   684,   691,
    1629,   752,  1629,   182,  1629,   897,   752,   751,  1631,   907,
    1523,   752,   751,  1453,  1460,   707,  1273,   633,   708,    37,
     142,   168,   171,   212,   234,   299,   324,   436,   445,   462,
     480,   525,   528,   558,  1541,  1546,  1547,  1624,  1671,    90,
     692,   796,   797,   798,   799,  1629,   436,  1696,   494,   494,
     579,   584,   630,   646,  1272,   397,  1700,   578,   390,  1702,
      69,   525,  1699,   117,   646,  1701,   599,   390,   686,    20,
     672,  1386,  1387,  1678,  1629,   164,  1273,   245,  1149,   533,
      91,   445,  1568,    52,    89,   305,  1579,  1621,  1672,  1673,
     847,  1629,   207,   372,   822,  1630,  1630,  1629,   815,   164,
     808,   690,   699,   858,   693,  1205,   929,   703,   299,  1209,
    1632,  1634,  1210,  1211,  1621,   646,  1174,  1671,   626,   858,
     260,  1456,  1470,  1471,  1621,  1558,    52,  1557,   686,  1626,
      58,    68,    82,    94,    95,    96,   114,   344,   362,   503,
     566,   583,   790,   792,   397,  1696,   390,   207,   390,   501,
    1731,  1730,   133,  1642,  1658,  1660,   515,   491,   691,    37,
     133,   516,   672,  1057,  1058,  1479,  1631,   204,  1479,  1666,
    1631,  1645,   692,  1631,    37,   133,  1060,  1061,  1631,   691,
    1646,  1644,  1479,   526,   175,   287,   653,  1529,   684,   116,
     176,   210,   437,   581,   604,   630,   646,  1529,    13,   993,
    1631,   288,  1419,  1420,  1421,   207,   263,  1524,  1526,    72,
     558,   204,   558,   578,   533,    72,   558,    13,    45,    98,
     103,   265,   342,   410,   535,   575,  1512,  1513,  1514,   725,
     234,   558,   726,   558,  1419,  1529,  1526,   299,   167,    75,
     439,   578,   603,   204,  1265,   558,   641,  1165,  1166,  1165,
     392,   661,    92,   686,  1165,  1165,  1455,  1149,   858,   153,
    1608,  1609,  1613,  1629,   686,   391,  1797,   574,  1798,   270,
     483,  1796,   166,   697,  1279,  1629,   751,   751,    11,   210,
     437,   604,   739,  1267,  1758,  1764,  1774,  1780,  1781,  1782,
    1788,   210,   739,  1757,  1764,  1774,  1782,  1788,  1759,   983,
     983,   983,   983,   983,  1533,  1538,  1597,  1629,   207,   260,
     400,  1242,  1251,  1252,  1255,  1256,  1257,  1415,  1421,  1444,
    1743,    13,   149,   232,   541,   542,   543,   544,   545,   546,
     564,  1259,  1260,  1261,  1755,  1234,   685,   507,   133,   980,
     981,   990,   991,  1065,   119,  1272,   692,   753,     6,   876,
     753,   396,   118,   893,   893,   893,     4,  1632,  1633,  1634,
    1708,  1712,  1621,  1154,   506,   646,   752,  1764,  1184,  1185,
    1455,   850,   851,   692,   263,   686,   416,  1225,  1227,  1228,
     761,   762,  1273,  1273,   772,   164,   833,   715,   186,   446,
     686,  1173,  1454,    61,   186,   190,   204,   341,   446,  1200,
    1201,  1202,    59,   467,   876,   893,  1457,  1458,  1621,  1622,
    1629,   686,  1501,   691,  1506,  1273,  1273,    13,   149,  1320,
    1388,  1320,  1320,  1320,   652,  1332,  1273,  1273,  1327,  1327,
    1273,  1273,  1273,  1273,  1289,  1290,  1273,  1273,  1273,  1273,
     149,  1320,  1388,   685,   685,   130,   197,   230,   302,   383,
     611,   685,  1428,  1431,  1432,   685,  1273,  1273,  1273,  1273,
    1617,   685,  1750,   124,   125,   126,   127,   128,   235,   236,
     237,   238,   345,   347,   348,   349,   356,   444,   504,   505,
     650,   666,   667,  1383,  1384,  1273,  1273,  1327,   120,   123,
     592,   595,  1385,   149,  1316,  1273,  1273,  1273,  1273,  1273,
    1273,  1383,  1273,  1327,  1273,  1327,  1329,    10,   686,   691,
     149,  1320,  1273,  1273,   149,  1320,  1273,  1273,  1327,  1327,
    1327,  1273,  1273,  1273,  1273,   685,  1273,  1327,  1276,  1273,
     685,  1273,  1273,  1273,  1273,  1273,   685,   685,  1273,  1320,
    1320,  1273,  1273,   149,  1320,  1273,  1384,  1384,  1273,    48,
     280,   600,  1273,  1273,   685,  1618,  1619,  1629,  1320,  1320,
    1273,  1273,  1273,   685,   686,  1604,  1273,   691,   692,  1315,
    1631,  1273,  1273,  1273,  1275,   189,   382,   606,   623,  1279,
      13,    19,  1275,  1282,  1276,  1276,   684,  1292,  1276,  1276,
    1276,  1276,   287,  1276,  1276,   259,  1276,   259,  1276,  1276,
    1276,  1276,  1276,    35,   263,   287,   461,  1631,  1292,   684,
    1312,  1400,  1629,  1273,  1298,  1629,   691,   390,   907,  1691,
    1693,   379,   648,   908,   909,   168,  1634,  1707,  1454,  1451,
     708,   709,   299,   299,   299,   299,    52,   299,   725,   299,
     686,  1265,  1542,   123,   592,   595,   791,   801,  1313,  1601,
    1617,  1631,   686,   672,   578,   684,  1713,  1634,  1713,  1713,
    1713,  1708,   210,   437,   581,  1694,   176,   181,   193,   438,
     468,   476,   521,   573,  1698,  1624,  1628,  1635,   195,   372,
    1629,  1679,  1680,   243,   590,  1470,  1625,   239,   630,  1273,
    1569,  1220,   294,  1578,  1387,   686,   850,   207,  1629,  1273,
     304,   690,    34,   304,   474,   655,  1454,   289,   292,   447,
     930,   932,    33,   599,  1564,   686,   599,   686,   599,  1175,
    1454,   856,  1471,  1467,   416,  1346,  1347,   599,  1560,   725,
    1556,   686,   672,   204,   686,  1634,  1633,  1709,   210,   437,
    1694,  1629,   686,  1641,  1479,  1693,  1629,    73,  1063,  1273,
    1634,   389,   419,   587,  1667,   267,   451,  1661,  1662,  1663,
    1664,   218,   294,   512,  1657,  1479,  1629,   601,  1647,  1658,
     686,  1649,    13,    37,   133,   390,  1273,  1668,   558,   263,
    1527,  1265,  1265,   679,   983,   752,   752,   752,  1621,   752,
    1634,  1621,   299,   360,   558,  1521,  1521,   302,   383,   496,
     611,  1422,  1423,  1599,  1629,  1529,  1629,   752,  1529,  1633,
    1524,  1529,  1625,   752,  1529,   264,   576,   191,   204,  1515,
     686,   175,   558,  1524,  1621,  1526,  1524,  1524,  1273,  1529,
    1529,  1529,  1160,   466,   548,  1167,  1168,  1159,   530,  1164,
     684,   688,  1333,  1334,  1335,  1336,  1337,  1348,  1349,  1350,
    1351,   854,   686,   684,  1611,  1597,   422,  1799,   182,   732,
    1691,  1708,   210,  1781,   983,   983,  1267,   176,   983,  1764,
    1631,  1629,  1629,  1629,  1621,   155,  1258,  1334,   156,   405,
    1439,  1440,  1445,    50,   204,   297,  1262,   437,  1434,  1444,
    1743,  1262,   653,  1389,  1419,  1255,  1256,   679,  1263,  1264,
    1267,  1261,   685,   621,  1737,  1741,  1742,  1253,   981,    73,
    1056,   145,  1631,    83,    97,   276,   353,   378,   449,   547,
     755,   757,   457,   616,   894,   895,   252,   890,   891,   892,
     899,   907,   909,   684,  1625,    27,   332,   884,   885,   886,
     899,   900,   901,   907,   909,   877,   878,   884,   241,   477,
     686,  1716,  1115,   134,   262,   983,  1121,   686,   421,  1186,
     773,  1631,   133,  1218,  1629,  1216,  1621,   925,  1227,   250,
     274,  1088,  1229,   685,   686,   841,    56,   652,   834,   836,
     152,   244,   246,   306,   307,   309,   310,   311,   312,   313,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   325,
     326,   327,   464,   465,   716,   717,   724,  1455,   204,  1203,
     628,  1201,    83,   373,   458,   617,   887,   888,   889,   899,
     903,   904,   905,   906,   907,   909,   632,   872,   686,  1502,
    1346,   691,  1506,  1505,   207,   679,  1629,   686,   685,  1320,
     685,  1321,   685,   685,   685,  1273,   160,   652,  1331,    20,
     685,   633,   685,   685,   685,   686,   685,   686,   685,   686,
     686,   686,   686,   633,   686,  1306,   685,   679,   685,   686,
     686,   685,   685,   685,   685,   207,   685,   686,   685,   686,
    1308,   685,   686,   685,   686,   685,   686,   686,   686,   678,
     685,   686,   686,   685,   685,   684,  1617,  1629,  1320,   685,
     685,   685,  1320,   685,   686,   685,   685,   685,   685,   685,
     686,   685,   685,   686,   685,   263,   685,   686,   686,   685,
     686,   686,   685,   685,   685,   686,   207,   686,  1320,   685,
     685,   686,   686,   686,   685,   207,  1273,   207,  1273,   207,
    1273,   207,   685,   686,   685,   685,   685,   685,   686,    20,
     285,   686,  1079,   685,  1327,   507,   684,  1746,  1747,  1748,
    1749,   689,  1629,  1657,   516,   189,   382,   606,   623,   684,
      18,  1273,  1750,   174,  1393,  1276,  1273,  1273,  1276,   684,
    1292,  1276,  1401,  1267,  1302,  1303,  1304,   684,   691,  1629,
    1621,   908,   686,  1479,  1480,   686,    54,   482,  1155,  1454,
     133,   245,   710,   711,  1273,  1485,   137,  1549,   725,  1547,
    1454,  1548,   799,   802,   803,   798,   384,   497,   800,  1629,
    1714,  1715,   599,   656,  1690,   679,  1621,  1629,  1706,  1706,
    1706,   195,   211,   277,   279,   372,   434,   672,   673,   674,
    1681,  1683,  1389,   826,  1464,  1634,  1221,  1222,  1223,  1224,
    1621,   251,   305,   451,   661,  1674,  1673,   260,   845,   860,
     862,   861,    75,   684,   937,   938,   937,   938,   417,   940,
     227,   274,  1273,  1625,  1634,  1634,  1211,  1621,  1454,   186,
     446,   631,  1178,  1179,  1180,  1273,   515,   637,   638,   684,
     917,  1472,  1475,  1604,   684,   130,   197,   230,   302,   383,
     611,  1427,    13,  1559,   792,   791,  1693,   219,   207,   686,
    1706,  1706,  1706,  1658,   204,  1668,   204,   133,  1062,  1064,
    1631,  1479,   684,   684,   285,   392,   661,   686,   686,   691,
     691,   691,  1660,  1273,  1661,  1648,  1650,  1651,  1625,   207,
    1528,  1625,  1273,   685,  1629,   179,   496,   388,   686,   751,
    1529,   445,  1419,  1514,  1527,  1529,  1524,  1621,  1529,  1529,
     686,   626,  1169,  1365,  1629,   105,   253,   270,   283,   366,
     490,   564,  1344,  1345,   515,   686,  1621,   772,  1609,  1612,
    1629,  1610,   686,   204,  1800,   979,   980,   656,  1689,  1716,
     983,   752,  1629,   752,   983,   983,   736,   609,   633,  1101,
     390,   390,   728,   587,  1627,  1627,   692,  1441,  1442,  1443,
    1631,  1416,   627,   263,  1629,  1434,  1444,  1243,  1390,   221,
    1394,  1414,  1415,   686,  1273,  1615,  1629,    13,   149,  1745,
    1743,  1248,  1251,  1256,  1480,  1480,   364,  1625,   547,   547,
     547,   547,   547,   506,  1625,  1625,  1480,   686,   892,   116,
     233,   408,   419,   427,   531,   630,   737,   738,  1480,  1480,
     686,   886,   879,   880,   899,   900,   901,    50,   645,   656,
    1710,    67,   268,   374,   550,   568,   662,  1704,  1705,  1712,
     656,  1719,     6,    12,    14,    16,    28,    30,    60,    65,
      66,    71,    83,    91,   101,   119,   136,   146,   147,   154,
     162,   168,   178,   202,   248,   250,   257,   273,   297,   331,
     350,   354,   395,   400,   409,   411,   416,   419,   454,   469,
     470,   471,   472,   498,   555,   556,   557,   562,   579,   582,
     602,   607,   621,   923,   986,   988,   990,   991,  1127,  1131,
    1133,  1136,  1142,  1143,  1144,  1146,  1147,  1411,  1624,  1621,
     390,   747,  1123,  1185,   204,   132,   771,   774,  1226,   684,
    1273,   590,   837,   836,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   686,   628,
    1480,  1480,  1480,  1480,   686,   889,   298,   187,   881,   882,
     883,   899,   900,   901,   902,   905,   906,   907,   909,  1458,
    1629,   633,  1499,  1629,  1334,   691,  1506,   259,  1273,   685,
    1273,   590,  1273,  1273,   164,    37,    63,   120,   123,   131,
     151,   261,   368,   523,   595,   625,  1322,  1324,  1325,  1057,
    1290,  1273,  1289,  1327,  1273,  1273,  1057,  1322,  1327,   685,
     259,   259,  1273,  1273,  1273,  1327,  1273,  1273,  1273,  1273,
    1273,  1273,  1273,  1273,  1276,   685,   685,  1273,  1273,  1273,
    1273,  1273,  1273,  1273,  1327,   259,  1273,  1273,  1273,   685,
    1273,  1273,  1273,  1273,   207,  1273,   207,  1273,   207,  1273,
    1273,  1273,    37,    63,  1074,  1075,  1076,  1077,  1078,  1428,
    1427,   685,  1357,  1358,  1359,   684,  1240,  1241,  1262,  1743,
     621,  1356,  1744,  1752,  1631,  1273,  1750,  1275,   685,   686,
     685,  1292,  1383,  1383,    18,  1273,  1750,  1393,  1402,  1629,
    1273,   685,   686,  1326,  1327,  1629,  1452,  1693,   992,  1631,
    1634,  1155,   686,   672,   204,   656,  1543,  1544,   672,   686,
     685,   686,  1708,     7,   691,   691,   599,   599,   599,  1682,
    1419,   772,  1472,   686,  1225,  1227,  1627,   661,   294,    89,
     820,   850,   852,   855,   853,   684,  1267,  1428,   570,   941,
     931,    12,   933,   599,   207,  1181,  1179,   164,  1473,   684,
    1476,  1481,  1476,   685,   972,  1474,  1604,  1614,  1615,  1618,
    1629,   507,  1382,  1629,   672,   397,  1707,  1633,   207,   207,
     207,   698,  1634,   587,   587,   451,   473,   510,  1665,  1663,
    1662,  1479,  1649,   686,  1653,  1655,  1659,   130,   197,   302,
     383,   611,  1429,  1519,   172,   649,  1423,  1424,   179,  1423,
    1423,   383,  1528,  1389,  1524,  1168,   308,   724,  1170,   507,
    1352,  1360,  1361,  1365,  1366,  1751,  1333,   270,   270,   404,
    1368,   283,   490,  1344,  1368,  1333,  1491,  1492,  1618,  1335,
    1346,   164,   685,   686,    20,  1427,   346,     7,  1719,  1629,
     684,   486,  1789,  1775,   752,   203,    49,   227,   500,  1107,
    1107,   390,  1621,  1621,   287,   684,   911,   915,   985,   987,
     988,  1446,  1631,   686,  1273,  1417,  1616,   517,  1435,  1736,
    1737,  1273,    50,   228,  1391,  1419,  1264,  1268,  1268,   691,
    1738,  1262,  1064,  1058,   119,   119,   134,   262,   230,   302,
     383,   611,   910,  1430,  1431,  1624,   892,  1625,  1625,  1625,
    1625,  1427,  1625,  1625,   685,   686,   910,   910,   886,   686,
     880,   419,   587,  1631,   587,   587,   587,    18,  1703,   329,
     330,   334,   335,   336,  1717,  1718,    81,    93,   416,  1001,
    1009,  1013,  1014,  1088,  1092,  1093,  1148,  1480,  1148,   416,
    1480,  1480,  1148,  1480,   416,   416,  1480,  1480,   599,   145,
    1480,   272,   579,    93,   203,   416,  1012,  1088,  1148,   272,
    1480,   416,   579,   145,  1480,  1480,  1480,  1480,  1480,  1148,
     416,    50,  1480,  1480,   925,  1480,   416,   418,    20,   599,
     672,  1157,   416,   416,  1480,  1480,  1480,  1480,   148,   342,
    1629,  1480,  1480,   416,  1480,   986,   686,   922,   923,  1131,
     684,   691,  1000,  1015,  1620,  1629,  1479,  1765,    87,   502,
     470,  1124,    13,    75,  1187,    99,   183,   779,   805,  1629,
     164,   808,   690,   684,   435,  1379,  1380,  1381,  1629,   772,
    1273,   684,   684,   684,  1427,  1427,  1625,  1625,  1429,  1625,
    1427,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1427,  1427,
    1625,   112,   378,   527,  1602,  1625,  1427,   717,  1625,  1428,
     910,   910,   889,   221,  1480,   686,   883,   691,  1334,  1389,
    1506,  1389,  1273,   685,  1273,   590,   684,  1047,  1048,  1048,
    1048,   684,  1044,  1045,  1047,   684,  1045,  1050,  1048,   261,
    1048,   261,   685,   685,   685,    20,  1283,   685,    20,   685,
     685,   685,  1307,  1273,  1273,   685,   685,   686,   685,   400,
    1318,   685,   685,   686,   686,   685,   686,   685,   685,   263,
    1299,  1300,   685,   685,   685,   685,   685,   686,   685,   685,
    1273,   685,   204,   685,   685,   686,   685,   686,   686,   685,
    1273,   685,  1273,   685,  1273,   685,   685,   685,   684,  1069,
    1069,    21,   140,   488,   677,  1071,  1072,  1073,   686,   686,
    1256,  1753,  1754,  1755,  1240,   685,   507,  1262,  1745,  1354,
    1747,  1748,   691,  1111,   685,  1327,  1275,   685,   686,   685,
     416,  1403,  1268,  1304,   685,   711,   684,  1545,   451,    58,
      68,    82,    94,    95,    96,   114,   344,   362,   484,   503,
     566,   583,   804,   803,  1715,   656,  1721,   397,   679,   679,
    1708,  1708,  1708,   684,   827,   390,  1486,  1223,  1621,  1227,
     245,  1230,  1574,   823,  1629,   843,  1630,   843,   857,   857,
     857,   934,   935,   936,  1629,   946,  1276,    50,   684,   948,
     938,   672,   684,  1634,   361,   474,  1477,  1478,  1618,  1482,
     686,   684,  1475,   685,   685,   686,   507,   691,   973,   974,
     685,   686,   791,   207,  1709,  1709,  1709,   685,   685,    84,
     613,   451,  1668,  1652,  1654,  1419,  1424,  1520,  1529,   672,
     686,  1367,   685,  1741,  1744,  1262,  1743,  1336,  1605,   689,
     270,  1368,  1368,  1348,   270,   390,   633,   686,  1490,  1479,
    1387,   655,  1629,   684,  1633,  1783,   131,   261,   453,   565,
     996,   684,   752,   740,   119,  1621,   730,   731,  1621,    93,
     287,   972,   997,   998,   999,  1000,  1001,  1009,   921,   922,
     686,   987,  1056,  1059,  1442,   686,    21,   140,  1418,   352,
     684,  1395,  1616,  1392,   654,  1397,    20,  1269,  1625,  1629,
     679,  1629,   507,   684,  1233,   738,   880,   587,    20,   633,
    1711,  1704,  1427,  1427,  1427,  1602,   383,   677,  1426,  1717,
     243,  1110,  1620,   983,    66,   203,   435,   622,  1011,  1087,
     983,  1088,  1089,  1089,   243,   982,   133,  1629,  1620,  1206,
    1429,  1427,  1459,  1427,    13,  1132,  1140,  1141,  1629,  1206,
    1625,  1625,  1056,  1480,  1427,  1459,   274,  1460,   435,  1459,
    1459,  1631,  1141,  1480,   195,   277,   378,   995,  1427,   133,
    1629,  1429,  1429,  1459,  1206,  1412,  1413,  1618,   133,  1427,
     133,  1427,  1433,   924,  1625,  1206,  1621,  1206,  1206,    86,
      88,   133,   158,   196,   410,   459,   994,   133,  1427,   133,
    1427,   133,  1427,  1427,  1433,  1132,   989,     6,   154,  1144,
     997,  1629,     9,   195,  1156,   460,  1081,  1016,   691,   133,
    1430,  1625,  1629,   684,  1766,  1279,  1727,    24,   177,   741,
     599,   146,   162,   743,    13,   684,  1188,   225,   686,   775,
      90,   113,   690,  1132,   685,   686,   838,   720,   721,  1427,
     722,   723,  1427,   718,   719,  1427,  1629,   910,   883,  1629,
    1389,  1414,  1383,  1273,   130,   302,   383,   611,  1323,   383,
     383,    63,   120,   123,   131,   151,   198,   261,   365,   368,
     453,   595,   625,  1037,  1038,  1284,  1285,  1286,  1287,  1322,
     685,  1383,  1383,  1273,    50,   509,  1317,  1273,  1273,  1327,
      46,   366,   685,   656,  1301,  1273,  1383,  1273,  1273,  1273,
    1273,   685,   685,   685,  1428,   685,  1079,  1074,  1072,  1074,
    1075,  1427,  1263,  1755,   685,  1741,  1358,  1355,  1629,   685,
    1327,    50,   400,  1404,  1269,  1429,  1550,  1551,   185,   297,
     219,  1716,  1716,  1716,  1484,  1485,   160,   161,   828,   157,
    1230,   281,   245,   475,  1580,   686,   685,   686,  1268,   932,
     416,   949,   950,  1428,   934,   686,  1479,  1483,  1484,  1481,
     919,   920,  1475,  1614,   973,  1629,   976,  1255,  1256,  1743,
    1259,   925,  1629,  1709,  1653,  1658,  1419,  1625,   724,  1362,
    1363,  1387,  1353,  1356,  1262,  1749,  1333,  1348,   270,   270,
    1333,  1348,  1338,  1339,  1492,  1389,  1485,  1377,  1378,  1265,
     763,   764,   765,  1629,   533,  1790,     9,    33,   867,   390,
     660,   729,   684,   684,  1621,   685,   685,   686,   916,  1580,
     987,  1058,  1447,  1616,  1267,  1436,  1437,  1438,   657,   658,
     686,  1396,  1418,  1273,  1312,  1398,  1399,  1625,  1629,   691,
    1253,   684,  1236,  1237,  1625,   302,   383,  1279,  1206,   684,
     274,   274,  1089,   983,  1110,  1629,   983,   983,  1279,   154,
     515,  1132,  1620,  1129,   686,  1428,  1058,  1625,  1620,  1459,
    1140,   274,  1620,  1620,   656,  1625,  1015,  1132,   686,  1418,
     928,  1132,  1137,  1132,   684,   685,  1629,  1621,    36,    37,
      42,    44,    46,    47,   120,   123,   131,   151,   169,   196,
     198,   214,   215,   261,   271,   291,   300,   301,   303,   338,
     339,   340,   357,   358,   359,   365,   368,   385,   387,   425,
     426,   453,   511,   515,   529,   588,   592,   595,   596,   597,
     598,   639,   640,   667,  1017,  1035,  1036,  1037,  1038,  1039,
    1040,  1041,  1042,  1629,  1629,  1767,    20,   433,  1273,  1273,
     390,   747,   752,   390,    83,   748,  1189,   249,   204,  1629,
    1035,  1055,   204,   204,   685,  1380,   590,   685,   686,   685,
     686,   685,   686,   288,  1425,   685,   685,   685,   685,   685,
      22,    37,    51,   619,  1056,  1066,  1067,   686,  1048,  1044,
      63,  1048,   261,  1288,   685,   685,   685,   685,  1319,  1616,
    1597,   685,   685,   686,   685,   352,   276,   445,   685,   685,
     685,   685,   685,   685,  1070,   685,   686,  1256,  1356,   685,
    1395,    50,   447,   496,  1405,  1406,   685,   686,    18,  1552,
     397,   656,  1720,  1720,  1720,   685,   686,   772,   824,  1487,
     260,  1629,   936,   685,   227,   274,   951,   685,   686,   685,
    1478,  1485,   685,  1737,  1741,   975,   976,  1256,   977,  1262,
    1743,   977,  1263,  1259,  1354,  1752,   390,  1341,  1348,  1348,
     390,  1343,  1273,   684,  1414,  1375,  1376,  1750,   685,   686,
     766,  1625,   254,   263,   406,   767,   768,   769,   770,   138,
     256,   627,   868,   502,  1631,   684,  1108,  1109,  1629,  1108,
     685,   913,   914,   912,   999,    20,   978,    75,  1581,  1418,
    1273,   685,   686,  1616,    20,   686,   679,  1244,  1252,  1255,
    1256,  1236,   685,   507,   182,  1134,  1273,   983,  1110,  1629,
     633,  1100,   609,  1110,  1110,   182,   133,   133,  1015,  1200,
    1141,  1063,  1620,  1155,   581,  1156,  1128,  1413,  1138,  1140,
    1130,  1548,   684,  1082,  1047,  1049,  1049,  1048,  1048,  1044,
     431,   684,  1044,  1044,  1067,    63,   639,  1037,  1039,  1067,
    1067,    63,   640,   640,   643,  1044,  1019,   684,  1048,  1048,
    1048,  1067,  1047,  1048,  1010,  1011,  1018,  1044,   643,  1049,
    1049,  1047,  1047,  1048,  1050,   691,   685,   686,  1768,  1769,
    1383,   525,  1625,   153,  1125,  1192,  1629,    13,   684,  1190,
     776,  1063,   133,   806,   782,   783,  1427,   777,   778,   772,
     721,   723,   719,   496,  1423,  1500,  1066,  1057,    37,  1068,
     383,  1067,   686,  1418,  1273,   352,   184,   685,  1427,  1414,
    1417,   685,    35,   109,   123,   592,   595,   612,  1407,  1408,
    1601,  1551,   146,   219,  1717,  1722,  1723,  1485,   274,   581,
     684,   939,   933,   952,  1629,   950,   977,   918,  1263,   685,
    1340,   633,  1342,   633,  1382,  1425,   202,   245,   632,  1370,
    1371,  1374,  1266,  1784,   765,  1055,   685,   686,   765,   390,
     741,   396,  1108,   685,   686,  1418,   684,   685,  1737,  1741,
     985,   917,   163,   173,   398,   586,  1582,  1583,   290,  1584,
    1268,  1438,  1418,  1400,  1399,  1262,  1743,  1262,   685,  1737,
    1741,  1253,  1620,   417,   684,  1135,   685,  1110,  1100,   609,
    1107,  1002,  1107,  1004,  1005,   259,   677,   678,   684,  1032,
    1033,  1034,  1291,  1600,  1156,  1621,  1206,  1139,  1178,   685,
    1083,  1629,   328,  1084,   523,   625,   668,  1046,  1112,  1597,
    1046,  1046,  1067,   643,  1046,    83,   435,   622,  1020,  1021,
    1028,  1054,  1080,  1279,  1624,  1112,  1067,  1046,    28,    73,
     133,   213,   382,   390,   511,  1022,  1024,  1051,  1052,  1053,
    1054,   549,  1043,  1067,  1068,  1067,  1068,  1046,  1046,  1629,
    1629,  1604,   742,   749,   750,   685,   686,  1191,   538,   540,
     780,   781,   782,   785,  1279,  1629,  1273,  1231,   179,   496,
     485,  1503,   685,  1616,   685,   685,  1419,   612,  1408,  1409,
    1601,   495,   430,   180,  1410,   430,    64,   397,  1723,   627,
    1621,  1267,   942,   684,   133,   637,   953,  1736,  1364,  1387,
    1273,   684,  1273,   684,   685,  1088,  1088,  1371,   685,   486,
    1791,   769,  1267,   746,   747,   684,   685,    83,   273,   656,
    1095,  1099,  1103,  1106,  1624,  1109,   383,  1096,  1098,  1103,
    1105,   921,    50,    50,   163,    50,  1583,   551,   586,  1585,
    1586,  1245,  1249,  1252,  1256,  1011,  1428,   949,  1008,  1006,
    1107,   684,  1003,   684,   684,   684,  1602,  1602,  1031,   925,
     260,   685,   686,   208,   415,   524,   390,  1085,   668,   625,
     685,   686,  1625,   274,  1054,   274,   382,  1479,   685,  1062,
    1034,    15,   627,   133,    20,  1053,   672,   507,   684,  1770,
     552,   744,   808,  1629,   435,  1193,  1194,  1629,   686,   808,
     206,   179,  1263,  1418,  1262,   201,    18,   201,   109,   221,
     378,   591,  1493,  1494,  1618,  1346,   946,   569,   947,   944,
     945,  1629,   263,   284,    83,    91,   119,   250,   331,   350,
     373,   579,   969,   970,   971,  1523,  1256,  1382,  1382,   204,
    1369,  1369,  1785,   754,  1776,   743,   737,   609,   633,  1094,
    1097,  1102,  1103,  1104,  1625,  1480,   413,  1145,  1146,  1147,
    1106,  1479,  1418,   685,  1145,  1105,   916,  1597,  1597,    50,
    1597,    50,    50,  1586,  1736,  1262,   685,   684,   684,  1007,
    1108,   684,  1108,  1108,  1273,   685,   684,  1629,   138,   627,
    1067,  1597,   133,  1430,  1625,  1629,  1067,   377,   638,  1032,
     383,  1253,   684,  1238,  1239,   656,  1771,  1273,   165,   745,
     685,   686,   781,  1409,   495,   403,   686,  1479,  1575,  1268,
    1428,   685,   686,   955,   589,  1480,  1480,   145,   145,  1480,
    1480,  1480,  1480,   684,   964,   971,   168,   685,   685,   221,
     270,   400,  1373,  1372,  1055,   755,   756,  1727,  1792,  1621,
     748,   685,  1107,  1107,  1145,  1104,  1427,  1624,  1147,  1146,
     133,  1430,  1625,  1629,  1597,  1597,  1597,  1108,  1108,   684,
     685,  1108,   685,   685,   686,   949,    54,   378,   482,   515,
    1086,  1086,   684,  1270,  1023,  1246,  1255,  1256,  1743,  1238,
     685,   507,    55,    66,   294,  1273,  1194,  1494,  1485,  1059,
     685,   943,   945,   684,   957,   959,   954,  1625,  1625,  1480,
    1480,  1430,  1430,  1428,  1631,   570,   965,   966,  1480,    50,
      50,   684,   684,  1786,   143,   808,   204,   153,   685,   685,
    1108,  1094,   685,  1095,  1096,  1273,   685,     5,   133,   382,
     390,   390,   685,  1428,   421,   563,   647,  1025,  1743,  1262,
    1262,   685,   621,  1739,  1741,  1253,    66,   397,    66,  1576,
     947,   684,   958,   959,   960,   337,   956,   959,  1625,  1625,
     967,   685,   686,   992,  1379,  1381,   754,  1267,   749,  1081,
    1094,   685,  1094,   627,   138,   685,  1026,  1027,  1028,  1262,
    1247,  1745,  1250,  1255,  1256,  1743,   397,   397,   496,  1587,
     685,   686,   337,   962,   963,  1276,   968,  1631,   966,   685,
     685,  1787,  1777,  1094,  1086,  1086,  1028,  1739,  1740,  1262,
    1743,   241,  1581,   959,   686,   961,   969,   807,   159,  1770,
      50,  1584,   963,   685,   495,  1597,   245,  1588,  1778,   383,
     684,  1590,   200,   429,  1772,  1773,   290,   496,  1589,   685,
     692,  1591,  1592,  1618,   515,  1593,  1631,  1779,  1631,   685,
     686,  1594,  1595,  1618,   808,  1592,   686,  1479,  1595,  1267,
    1485,  1268
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   694,   695,   696,   695,   695,   697,   697,   698,   698,
     698,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   700,   701,   701,
     702,   704,   703,   706,   705,   707,   705,   708,   709,   708,
     710,   710,   711,   713,   712,   715,   714,   716,   716,   717,
     717,   717,   717,   717,   717,   717,   717,   717,   717,   717,
     717,   717,   717,   717,   717,   717,   717,   717,   717,   718,
     718,   718,   719,   720,   720,   720,   721,   722,   722,   722,
     723,   724,   724,   724,   724,   724,   724,   724,   725,   725,
     726,   728,   727,   729,   727,   730,   727,   731,   727,   732,
     727,   733,   727,   727,   727,   727,   727,   734,   727,   736,
     735,   737,   737,   738,   738,   738,   738,   738,   738,   738,
     740,   739,   742,   741,   741,   743,   743,   743,   743,   744,
     744,   745,   745,   746,   746,   747,   748,   748,   750,   749,
     751,   752,   752,   753,   753,   754,   754,   755,   755,   755,
     755,   755,   755,   755,   756,   756,   757,   757,   759,   758,
     760,   760,   761,   761,   762,   762,   763,   763,   764,   764,
     766,   765,   767,   767,   768,   768,   769,   770,   770,   770,
     770,   771,   771,   772,   772,   773,   773,   775,   774,   774,
     776,   774,   774,   778,   777,   779,   779,   780,   780,   781,
     782,   782,   783,   784,   784,   785,   785,   785,   785,   785,
     786,   787,   787,   788,   788,   789,   789,   790,   790,   791,
     791,   791,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   793,   794,   795,   795,   796,   796,
     797,   797,   798,   799,   799,   800,   800,   801,   802,   802,
     803,   804,   804,   804,   804,   804,   804,   804,   804,   804,
     804,   804,   804,   804,   805,   805,   806,   806,   807,   807,
     807,   807,   807,   808,   808,   808,   808,   808,   808,   808,
     809,   809,   809,   809,   811,   810,   813,   812,   815,   814,
     816,   817,   818,   820,   819,   821,   822,   822,   822,   823,
     823,   825,   826,   827,   824,   828,   828,   828,   830,   829,
     832,   833,   831,   831,   834,   834,   835,   835,   837,   838,
     836,   840,   841,   839,   842,   842,   843,   843,   845,   844,
     847,   846,   849,   848,   851,   850,   852,   854,   853,   856,
     855,   857,   858,   860,   859,   861,   859,   862,   859,   864,
     863,   865,   863,   866,   863,   867,   867,   868,   868,   868,
     869,   870,   871,   872,   872,   873,   873,   874,   875,   876,
     876,   878,   877,   879,   879,   879,   880,   880,   880,   881,
     882,   882,   882,   883,   883,   883,   883,   883,   883,   883,
     883,   884,   885,   885,   885,   886,   886,   886,   886,   886,
     887,   888,   888,   888,   889,   889,   889,   889,   889,   889,
     889,   890,   891,   891,   891,   892,   892,   892,   893,   894,
     895,   896,   897,   898,   898,   898,   899,   900,   901,   902,
     903,   904,   905,   906,   907,   908,   908,   909,   909,   910,
     910,   912,   911,   911,   911,   913,   911,   914,   911,   911,
     915,   915,   916,   916,   918,   917,   917,   917,   919,   917,
     920,   917,   921,   922,   922,   924,   923,   925,   927,   926,
     929,   928,   930,   931,   930,   930,   930,   930,   930,   932,
     932,   933,   933,   934,   934,   935,   935,   936,   937,   938,
     939,   940,   940,   941,   942,   941,   943,   941,   944,   944,
     945,   946,   947,   947,   948,   948,   949,   949,   951,   950,
     952,   953,   954,   953,   955,   953,   953,   956,   956,   957,
     957,   958,   958,   960,   961,   959,   962,   962,   963,   963,
     964,   964,   965,   965,   967,   966,   968,   969,   969,   970,
     970,   971,   971,   971,   971,   971,   971,   971,   971,   971,
     972,   974,   973,   975,   975,   976,   976,   977,   978,   978,
     979,   979,   980,   980,   981,   981,   982,   982,   983,   983,
     984,   984,   985,   985,   986,   986,   987,   987,   987,   988,
     988,   988,   988,   988,   988,   988,   988,   988,   988,   988,
     988,   988,   988,   988,   988,   988,   988,   988,   988,   989,
     988,   988,   988,   988,   988,   988,   988,   988,   988,   988,
     988,   988,   988,   988,   988,   988,   990,   991,   992,   993,
     994,   994,   994,   994,   994,   994,   994,   995,   995,   995,
     996,   996,   996,   996,   997,   998,   998,   999,   999,   999,
    1000,  1000,  1002,  1001,  1003,  1001,  1004,  1001,  1005,  1001,
    1006,  1001,  1007,  1001,  1008,  1001,  1009,  1010,  1010,  1011,
    1012,  1012,  1013,  1013,  1014,  1016,  1015,  1018,  1017,  1019,
    1017,  1020,  1020,  1021,  1021,  1022,  1023,  1022,  1024,  1024,
    1025,  1025,  1025,  1025,  1026,  1026,  1027,  1027,  1028,  1028,
    1028,  1030,  1029,  1031,  1031,  1031,  1032,  1033,  1033,  1034,
    1034,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,
    1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,
    1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,
    1035,  1035,  1035,  1035,  1035,  1035,  1036,  1036,  1036,  1036,
    1036,  1036,  1036,  1036,  1037,  1038,  1038,  1039,  1039,  1040,
    1040,  1040,  1040,  1040,  1041,  1041,  1041,  1041,  1041,  1042,
    1042,  1042,  1043,  1043,  1044,  1044,  1044,  1045,  1046,  1046,
    1046,  1046,  1046,  1046,  1047,  1047,  1047,  1047,  1048,  1048,
    1049,  1049,  1050,  1050,  1051,  1051,  1052,  1052,  1053,  1053,
    1053,  1053,  1053,  1053,  1053,  1054,  1054,  1054,  1054,  1054,
    1054,  1054,  1055,  1056,  1056,  1057,  1057,  1058,  1058,  1059,
    1059,  1060,  1060,  1061,  1061,  1062,  1063,  1063,  1064,  1064,
    1065,  1065,  1066,  1066,  1066,  1067,  1067,  1067,  1067,  1067,
    1068,  1068,  1070,  1069,  1071,  1071,  1072,  1073,  1073,  1073,
    1073,  1074,  1075,  1076,  1076,  1077,  1078,  1078,  1079,  1079,
    1080,  1080,  1081,  1082,  1082,  1083,  1083,  1084,  1084,  1084,
    1084,  1085,  1085,  1085,  1085,  1085,  1086,  1086,  1086,  1086,
    1086,  1087,  1087,  1088,  1088,  1089,  1089,  1090,  1090,  1090,
    1091,  1091,  1092,  1093,  1094,  1094,  1095,  1095,  1096,  1096,
    1097,  1097,  1098,  1098,  1099,  1099,  1100,  1100,  1101,  1101,
    1101,  1102,  1102,  1103,  1103,  1103,  1103,  1103,  1103,  1104,
    1104,  1105,  1106,  1106,  1107,  1107,  1107,  1108,  1108,  1109,
    1109,  1110,  1110,  1111,  1111,  1112,  1112,  1114,  1115,  1113,
    1116,  1113,  1113,  1117,  1113,  1118,  1113,  1119,  1113,  1120,
    1113,  1121,  1113,  1113,  1113,  1113,  1113,  1122,  1113,  1113,
    1123,  1123,  1123,  1123,  1124,  1124,  1125,  1125,  1126,  1126,
    1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,
    1128,  1127,  1127,  1129,  1127,  1130,  1127,  1127,  1127,  1127,
    1127,  1131,  1132,  1132,  1134,  1133,  1135,  1135,  1135,  1137,
    1136,  1138,  1139,  1138,  1140,  1140,  1141,  1142,  1142,  1143,
    1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,
    1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,
    1144,  1144,  1144,  1145,  1145,  1145,  1145,  1145,  1146,  1146,
    1147,  1147,  1148,  1148,  1149,  1149,  1151,  1150,  1152,  1152,
    1153,  1153,  1154,  1154,  1155,  1155,  1155,  1156,  1156,  1156,
    1157,  1157,  1157,  1157,  1159,  1158,  1160,  1158,  1158,  1158,
    1161,  1162,  1162,  1163,  1163,  1164,  1164,  1164,  1166,  1165,
    1167,  1167,  1168,  1168,  1168,  1169,  1169,  1169,  1170,  1170,
    1172,  1171,  1173,  1173,  1173,  1174,  1175,  1174,  1177,  1176,
    1178,  1178,  1179,  1179,  1180,  1180,  1180,  1181,  1181,  1183,
    1182,  1184,  1184,  1185,  1186,  1186,  1187,  1187,  1188,  1189,
    1188,  1190,  1191,  1190,  1192,  1192,  1192,  1193,  1193,  1193,
    1194,  1194,  1195,  1195,  1196,  1197,  1196,  1199,  1198,  1200,
    1200,  1201,  1201,  1202,  1202,  1202,  1202,  1202,  1202,  1203,
    1203,  1205,  1204,  1206,  1206,  1206,  1208,  1207,  1207,  1209,
    1209,  1210,  1210,  1211,  1213,  1212,  1214,  1214,  1215,  1215,
    1216,  1217,  1218,  1218,  1220,  1219,  1221,  1221,  1222,  1222,
    1223,  1224,  1226,  1225,  1228,  1227,  1229,  1229,  1230,  1230,
    1231,  1232,  1232,  1232,  1232,  1233,  1233,  1233,  1233,  1235,
    1234,  1234,  1237,  1236,  1236,  1239,  1238,  1238,  1241,  1240,
    1240,  1243,  1242,  1242,  1245,  1244,  1244,  1246,  1247,  1246,
    1246,  1246,  1248,  1248,  1249,  1249,  1250,  1250,  1250,  1251,
    1251,  1251,  1252,  1252,  1252,  1252,  1252,  1254,  1253,  1255,
    1256,  1256,  1257,  1258,  1258,  1259,  1259,  1260,  1260,  1261,
    1261,  1261,  1262,  1262,  1262,  1263,  1263,  1263,  1264,  1264,
    1265,  1266,  1267,  1268,  1269,  1269,  1269,  1269,  1269,  1270,
    1270,  1270,  1271,  1271,  1271,  1272,  1272,  1273,  1273,  1273,
    1273,  1273,  1273,  1273,  1273,  1273,  1273,  1273,  1274,  1274,
    1274,  1274,  1274,  1274,  1275,  1275,  1275,  1275,  1275,  1275,
    1275,  1275,  1275,  1275,  1275,  1275,  1275,  1275,  1276,  1276,
    1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,
    1276,  1276,  1276,  1277,  1277,  1278,  1278,  1279,  1279,  1280,
    1280,  1281,  1281,  1281,  1281,  1281,  1281,  1282,  1282,  1283,
    1283,  1284,  1284,  1284,  1285,  1285,  1285,  1285,  1285,  1285,
    1286,  1286,  1286,  1288,  1287,  1287,  1289,  1290,  1290,  1291,
    1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,
    1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1293,
    1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,
    1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,
    1293,  1293,  1293,  1293,  1293,  1293,  1293,  1294,  1294,  1294,
    1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,
    1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,
    1294,  1294,  1294,  1294,  1295,  1295,  1295,  1295,  1295,  1295,
    1295,  1295,  1295,  1295,  1295,  1295,  1295,  1295,  1295,  1295,
    1295,  1295,  1295,  1295,  1295,  1295,  1295,  1295,  1295,  1295,
    1295,  1296,  1296,  1296,  1296,  1296,  1296,  1296,  1296,  1298,
    1297,  1297,  1299,  1299,  1300,  1300,  1301,  1301,  1302,  1302,
    1303,  1303,  1304,  1305,  1305,  1305,  1305,  1305,  1305,  1305,
    1306,  1307,  1305,  1305,  1305,  1305,  1305,  1305,  1305,  1305,
    1305,  1305,  1305,  1308,  1305,  1309,  1309,  1310,  1310,  1311,
    1311,  1311,  1311,  1311,  1311,  1311,  1311,  1311,  1311,  1311,
    1311,  1311,  1312,  1314,  1313,  1315,  1315,  1315,  1316,  1316,
    1317,  1317,  1318,  1318,  1319,  1319,  1321,  1320,  1322,  1323,
    1322,  1322,  1322,  1322,  1324,  1324,  1324,  1324,  1324,  1324,
    1324,  1325,  1325,  1325,  1326,  1326,  1327,  1327,  1328,  1328,
    1329,  1329,  1330,  1330,  1331,  1331,  1332,  1332,  1333,  1333,
    1334,  1335,  1335,  1336,  1336,  1337,  1338,  1337,  1339,  1337,
    1337,  1340,  1337,  1341,  1337,  1337,  1342,  1337,  1343,  1337,
    1337,  1344,  1344,  1344,  1345,  1345,  1346,  1346,  1347,  1348,
    1348,  1350,  1349,  1351,  1351,  1352,  1352,  1353,  1352,  1352,
    1352,  1352,  1354,  1354,  1355,  1354,  1356,  1357,  1359,  1358,
    1360,  1361,  1363,  1364,  1362,  1365,  1366,  1367,  1368,  1368,
    1369,  1369,  1369,  1369,  1370,  1370,  1372,  1371,  1373,  1371,
    1374,  1374,  1375,  1376,  1375,  1378,  1377,  1379,  1379,  1380,
    1380,  1381,  1381,  1382,  1382,  1383,  1383,  1383,  1383,  1383,
    1383,  1383,  1383,  1383,  1383,  1383,  1383,  1384,  1384,  1384,
    1384,  1384,  1384,  1384,  1384,  1384,  1385,  1385,  1385,  1385,
    1386,  1386,  1386,  1387,  1387,  1388,  1388,  1389,  1390,  1389,
    1391,  1392,  1391,  1393,  1393,  1394,  1394,  1395,  1395,  1396,
    1396,  1396,  1397,  1397,  1398,  1398,  1399,  1401,  1400,  1402,
    1402,  1403,  1403,  1404,  1404,  1405,  1405,  1406,  1406,  1407,
    1407,  1408,  1408,  1408,  1409,  1409,  1409,  1410,  1410,  1410,
    1410,  1410,  1411,  1412,  1412,  1413,  1414,  1414,  1416,  1415,
    1417,  1417,  1418,  1418,  1418,  1419,  1419,  1420,  1421,  1421,
    1421,  1422,  1422,  1422,  1423,  1423,  1423,  1423,  1423,  1424,
    1425,  1425,  1425,  1425,  1426,  1426,  1426,  1427,  1427,  1427,
    1427,  1427,  1427,  1428,  1428,  1428,  1428,  1428,  1429,  1429,
    1429,  1429,  1429,  1430,  1430,  1430,  1430,  1430,  1431,  1432,
    1432,  1433,  1433,  1435,  1434,  1436,  1436,  1437,  1437,  1438,
    1440,  1439,  1441,  1441,  1442,  1443,  1443,  1444,  1446,  1447,
    1445,  1445,  1445,  1449,  1448,  1451,  1450,  1452,  1450,  1450,
    1450,  1450,  1450,  1450,  1450,  1453,  1450,  1450,  1450,  1450,
    1450,  1450,  1454,  1454,  1455,  1456,  1457,  1457,  1458,  1459,
    1459,  1460,  1460,  1461,  1461,  1463,  1464,  1462,  1466,  1467,
    1465,  1468,  1468,  1468,  1468,  1469,  1469,  1470,  1470,  1471,
    1472,  1472,  1472,  1473,  1472,  1474,  1474,  1475,  1475,  1475,
    1476,  1476,  1477,  1477,  1478,  1479,  1479,  1480,  1480,  1482,
    1481,  1483,  1483,  1484,  1484,  1485,  1485,  1485,  1486,  1487,
    1486,  1489,  1490,  1488,  1491,  1491,  1492,  1493,  1493,  1494,
    1495,  1495,  1497,  1496,  1499,  1500,  1498,  1501,  1498,  1502,
    1498,  1503,  1503,  1504,  1504,  1505,  1505,  1506,  1506,  1507,
    1507,  1508,  1508,  1508,  1510,  1509,  1511,  1511,  1512,  1512,
    1513,  1513,  1514,  1514,  1514,  1514,  1514,  1514,  1514,  1514,
    1514,  1515,  1515,  1517,  1516,  1518,  1518,  1518,  1518,  1518,
    1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,  1519,
    1518,  1520,  1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,
    1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,
    1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,
    1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,  1518,
    1521,  1521,  1521,  1522,  1522,  1523,  1523,  1524,  1524,  1525,
    1525,  1526,  1526,  1527,  1527,  1528,  1528,  1529,  1529,  1529,
    1531,  1530,  1532,  1530,  1533,  1533,  1533,  1533,  1533,  1534,
    1534,  1535,  1536,  1536,  1536,  1537,  1537,  1538,  1538,  1538,
    1540,  1539,  1542,  1541,  1541,  1543,  1543,  1544,  1545,  1544,
    1546,  1546,  1547,  1547,  1547,  1547,  1547,  1547,  1547,  1547,
    1547,  1547,  1547,  1547,  1547,  1547,  1547,  1547,  1548,  1548,
    1549,  1549,  1550,  1550,  1550,  1551,  1552,  1552,  1554,  1553,
    1555,  1555,  1557,  1556,  1558,  1556,  1556,  1559,  1559,  1560,
    1560,  1562,  1561,  1563,  1564,  1564,  1566,  1565,  1567,  1567,
    1567,  1568,  1568,  1568,  1568,  1569,  1569,  1570,  1571,  1573,
    1574,  1575,  1576,  1572,  1577,  1577,  1578,  1578,  1579,  1579,
    1579,  1580,  1580,  1580,  1581,  1581,  1582,  1582,  1583,  1583,
    1583,  1583,  1584,  1584,  1585,  1585,  1586,  1586,  1587,  1587,
    1588,  1588,  1589,  1589,  1590,  1590,  1590,  1591,  1591,  1592,
    1592,  1593,  1593,  1594,  1594,  1595,  1596,  1596,  1596,  1596,
    1597,  1597,  1598,  1598,  1598,  1599,  1600,  1600,  1601,  1601,
    1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1602,  1602,
    1602,  1602,  1602,  1603,  1603,  1603,  1604,  1604,  1606,  1605,
    1607,  1607,  1608,  1608,  1610,  1609,  1611,  1611,  1612,  1612,
    1613,  1614,  1614,  1615,  1615,  1616,  1617,  1617,  1618,  1618,
    1619,  1619,  1619,  1620,  1620,  1620,  1620,  1621,  1621,  1621,
    1622,  1622,  1623,  1624,  1624,  1625,  1626,  1627,  1628,  1628,
    1629,  1629,  1630,  1630,  1631,  1631,  1631,  1632,  1632,  1632,
    1633,  1633,  1634,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
    1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
    1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
    1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
    1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
    1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
    1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
    1635,  1635,  1635,  1635,  1636,  1636,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,  1637,
    1637,  1637,  1637,  1637,  1637,  1637,  1639,  1638,  1640,  1641,
    1638,  1642,  1642,  1644,  1643,  1645,  1643,  1646,  1643,  1648,
    1647,  1647,  1649,  1649,  1651,  1650,  1652,  1650,  1654,  1653,
    1653,  1655,  1655,  1655,  1656,  1656,  1656,  1656,  1657,  1657,
    1657,  1657,  1658,  1659,  1659,  1659,  1659,  1659,  1659,  1659,
    1659,  1659,  1659,  1660,  1660,  1660,  1661,  1661,  1661,  1661,
    1662,  1663,  1664,  1664,  1665,  1665,  1665,  1665,  1666,  1666,
    1667,  1667,  1667,  1668,  1668,  1668,  1668,  1668,  1670,  1669,
    1671,  1671,  1672,  1672,  1673,  1674,  1674,  1674,  1674,  1674,
    1676,  1675,  1677,  1677,  1678,  1677,  1679,  1679,  1680,  1680,
    1681,  1681,  1681,  1681,  1682,  1681,  1683,  1683,  1683,  1683,
    1683,  1684,  1685,  1685,  1685,  1685,  1685,  1685,  1686,  1686,
    1687,  1688,  1688,  1688,  1688,  1688,  1689,  1689,  1690,  1690,
    1691,  1691,  1692,  1693,  1693,  1694,  1694,  1695,  1695,  1696,
    1696,  1697,  1697,  1699,  1698,  1700,  1698,  1701,  1698,  1702,
    1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
    1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
    1698,  1698,  1698,  1698,  1698,  1698,  1698,  1703,  1703,  1704,
    1704,  1705,  1705,  1705,  1706,  1706,  1706,  1706,  1707,  1707,
    1708,  1708,  1709,  1709,  1710,  1710,  1711,  1711,  1712,  1712,
    1712,  1712,  1712,  1713,  1713,  1714,  1714,  1715,  1716,  1716,
    1716,  1716,  1716,  1717,  1717,  1717,  1717,  1717,  1718,  1718,
    1719,  1719,  1720,  1720,  1721,  1721,  1722,  1722,  1723,  1723,
    1725,  1724,  1726,  1727,  1727,  1728,  1728,  1729,  1729,  1729,
    1730,  1730,  1730,  1731,  1731,  1732,  1733,  1733,  1734,  1735,
    1736,  1736,  1738,  1737,  1740,  1739,  1742,  1741,  1743,  1743,
    1744,  1745,  1745,  1745,  1746,  1747,  1747,  1748,  1748,  1749,
    1749,  1749,  1750,  1751,  1752,  1753,  1753,  1754,  1754,  1755,
    1755,  1755,  1755,  1755,  1755,  1755,  1755,  1756,  1756,  1756,
    1757,  1757,  1757,  1757,  1757,  1758,  1758,  1758,  1758,  1758,
    1758,  1759,  1759,  1760,  1761,  1762,  1762,  1762,  1763,  1763,
    1763,  1765,  1764,  1766,  1766,  1767,  1767,  1769,  1768,  1770,
    1770,  1770,  1770,  1771,  1771,  1771,  1771,  1772,  1772,  1773,
    1773,  1775,  1776,  1777,  1778,  1779,  1774,  1780,  1780,  1781,
    1783,  1784,  1785,  1786,  1787,  1782,  1789,  1790,  1791,  1792,
    1788,  1793,  1793,  1793,  1793,  1793,  1793,  1794,  1794,  1794,
    1795,  1795,  1796,  1796,  1796,  1797,  1797,  1798,  1799,  1798,
    1800,  1800,  1801,  1801,  1802,  1802,  1803
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       4,     0,     2,     0,     4,     0,     5,     0,     0,     3,
       3,     1,     1,     0,     3,     0,     6,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     5,     5,     1,     0,
       1,     3,     1,     0,     1,     3,     1,     0,     1,     3,
       1,     3,     3,     3,     3,     3,     3,     3,     0,     1,
       1,     0,     7,     0,    14,     0,    13,     0,    13,     0,
       6,     0,     3,     7,     6,     4,     3,     0,     3,     0,
      12,     1,     3,     2,     2,     2,     2,     2,     2,     2,
       0,    13,     0,     6,     2,     0,     1,     3,     1,     0,
       2,     0,     2,     0,     1,     4,     0,     2,     0,     2,
       0,     3,     1,     0,     2,     0,     2,     2,     2,     2,
       2,     3,     3,     1,     1,     2,     3,     3,     0,     4,
       0,     3,     0,     1,     3,     1,     0,     1,     3,     1,
       0,     3,     0,     1,     3,     1,     2,     0,     1,     1,
       1,     0,     3,     2,     3,     0,     3,     0,     5,     5,
       0,     7,     5,     0,     2,     1,     1,     1,     3,     1,
       1,     1,     3,     0,     1,     1,     1,     1,     2,     1,
       3,     1,     1,     0,     1,     0,     2,     3,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     4,     0,     1,     1,     3,
       1,     3,     3,     1,     2,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     5,     0,     2,     0,     3,
       2,     2,     2,     0,     6,     2,     0,     2,     1,     1,
       3,     0,     0,     0,     7,     0,     2,     2,     0,     6,
       0,     0,     4,     1,     1,     2,     1,     2,     0,     0,
       6,     0,     0,     6,     0,     2,     0,     1,     0,     6,
       0,     3,     0,     5,     0,     4,     3,     0,     6,     0,
       6,     1,     0,     0,     6,     0,     6,     0,     6,     0,
       4,     0,     4,     0,     4,     1,     1,     1,     1,     1,
       2,     4,     5,     0,     4,     4,     4,     3,     3,     2,
       2,     0,     2,     1,     2,     3,     1,     1,     1,     1,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     4,     0,     1,     1,     1,     1,
       1,     0,     7,     3,     3,     0,     5,     0,     5,     1,
       2,     4,     0,     3,     0,     7,     5,     3,     0,     5,
       0,     5,     1,     0,     1,     0,     4,     0,     0,     3,
       0,     6,     6,     0,     4,     2,     2,     2,     2,     0,
       1,     0,     3,     0,     1,     1,     3,     1,     4,     5,
       5,     0,     2,     0,     0,     7,     0,    10,     1,     3,
       1,     1,     0,     2,     0,     3,     1,     3,     0,     6,
       1,     0,     0,     5,     0,     4,     1,     1,     1,     1,
       3,     1,     3,     0,     0,     5,     1,     3,     1,     1,
       0,     3,     1,     3,     0,     4,     1,     0,     1,     2,
       1,     3,     4,     3,     3,     3,     3,     4,     4,     3,
       5,     0,     3,     1,     1,     2,     1,     1,     0,     1,
       0,     1,     1,     2,     1,     1,     0,     3,     0,     3,
       1,     3,     0,     1,     1,     2,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     0,
       6,     1,     1,     3,     4,     4,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     2,     0,     9,     0,    10,     0,     9,     0,     9,
       0,    10,     0,    11,     0,    10,     2,     0,     1,     4,
       0,     1,     0,     1,     2,     0,     4,     0,     3,     0,
       3,     0,     1,     2,     1,     1,     0,     6,     0,     2,
       0,     1,     1,     1,     0,     1,     2,     1,     1,     2,
       2,     0,     3,     1,     1,     3,     3,     1,     1,     1,
       1,     3,     3,     3,     2,     1,     1,     3,     3,     2,
       3,     3,     2,     3,     1,     2,     2,     2,     1,     2,
       3,     1,     1,     2,     3,     2,     3,     2,     2,     3,
       3,     3,     5,     5,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     2,
       1,     2,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     2,     0,     3,     0,     1,     1,     5,     0,     1,
       1,     1,     2,     2,     3,     3,     3,     3,     0,     1,
       0,     1,     0,     1,     0,     1,     2,     1,     1,     2,
       4,     1,     3,     2,     1,     2,     2,     1,     3,     3,
       3,     3,     2,     2,     1,     1,     1,     1,     1,     0,
       2,     1,     1,     1,     1,     1,     0,     2,     1,     1,
       0,     1,     2,     1,     1,     0,     1,     2,     1,     2,
       0,     1,     0,     4,     1,     1,     1,     0,     1,     2,
       1,     1,     2,     1,     3,     3,     1,     1,     0,     2,
       0,     1,     5,     0,     3,     3,     1,     0,     2,     2,
       2,     0,     3,     3,     6,     6,     1,     1,     2,     2,
       2,     2,     2,     1,     1,     0,     1,     1,     1,     1,
       0,     1,     1,     1,     0,     1,     0,     1,     0,     1,
       1,     2,     1,     2,     1,     2,     0,     2,     0,     2,
       2,     2,     2,     3,     2,     3,     3,     3,     3,     1,
       1,     1,     1,     3,     1,     1,     1,     4,     2,     1,
       4,     0,     1,     0,     2,     1,     3,     0,     0,     7,
       0,     5,     7,     0,     5,     0,     5,     0,     5,     0,
       4,     0,    11,     3,     4,     3,     3,     0,     8,     7,
       0,     3,     1,     4,     0,     3,     0,     2,     0,     1,
       0,     2,     2,     2,     2,     1,     1,     1,     4,     4,
       0,     6,     4,     0,     5,     0,     6,     4,     3,     1,
       7,     2,     1,     1,     0,     6,     0,     3,     2,     0,
       5,     0,     0,     6,     1,     3,     1,     1,     3,     3,
       3,     2,     4,     2,     7,     6,     5,     5,     4,     5,
       4,     4,     2,     2,     6,     5,     3,     5,     1,     1,
       1,     1,     1,     0,     1,     1,     2,     2,     3,     3,
       3,     3,     0,     1,     0,     1,     0,     2,     0,     1,
       2,     1,     1,     1,     0,     1,     1,     0,     2,     1,
       0,     1,     1,     1,     0,     6,     0,     5,     4,     4,
       3,     0,     1,     1,     3,     3,     2,     2,     0,     2,
       1,     3,     0,     1,     1,     0,     2,     4,     1,     3,
       0,     5,     0,     1,     1,     3,     0,     4,     0,     4,
       0,     1,     1,     2,     1,     1,     1,     0,     2,     0,
       5,     1,     3,     2,     0,     3,     1,     4,     1,     0,
       4,     1,     0,     4,     0,     1,     3,     0,     1,     3,
       1,     1,     2,     6,     3,     0,     4,     0,     3,     0,
       1,     1,     2,     1,     1,     1,     1,     1,     2,     0,
       2,     0,     5,     0,     1,     1,     0,     4,     4,     3,
       5,     1,     3,     3,     0,     6,     1,     1,     1,     3,
       2,     3,     1,     1,     0,     6,     1,     1,     1,     3,
       3,     4,     0,     6,     0,     2,     0,     4,     0,     2,
       2,     3,     3,     4,     4,     3,     3,     4,     4,     0,
       5,     3,     0,     5,     3,     0,     5,     3,     0,     7,
       3,     0,     4,     2,     0,     4,     2,     2,     0,     4,
       2,     3,     1,     1,     1,     1,     1,     1,     2,     1,
       2,     3,     1,     4,     2,     2,     3,     0,     3,     5,
       0,     1,     2,     1,     1,     0,     1,     2,     1,     1,
       1,     1,     0,     2,     4,     3,     1,     1,     3,     4,
       0,     0,     0,     0,     0,     2,     2,     1,     1,     0,
       2,     3,     0,     2,     3,     0,     2,     3,     3,     3,
       2,     3,     4,     3,     4,     3,     4,     1,     3,     4,
       3,     3,     6,     1,     5,     6,     5,     7,     6,     8,
       5,     6,     4,     4,     5,     3,     4,     1,     3,     3,
       3,     3,     3,     3,     5,     5,     3,     3,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       2,     1,     1,     1,     1,     2,     1,     1,     1,     2,
       1,     2,     2,     0,     3,     1,     4,     1,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     6,
       4,     4,     7,     6,     5,     6,     6,     4,     4,     1,
       3,     3,     2,     3,     2,     2,     2,     2,     5,     4,
       6,     2,     2,     4,     4,     4,    10,     6,     8,     6,
       4,     4,     6,     4,     4,     4,     6,     4,     7,     7,
       7,     6,     6,     6,     6,     3,     4,     6,     8,     2,
       2,     8,     8,     6,     6,     2,     6,     6,     8,     8,
       6,     8,     6,     2,     8,     8,     2,     2,     2,     6,
       6,     4,     4,     8,     4,     4,     4,     4,     3,     8,
       6,     8,     4,     6,     4,     6,     4,     4,     4,     6,
       8,     4,     3,     6,     4,     6,     5,     8,     7,    10,
       1,     6,     4,     4,     4,     4,     4,     6,     4,     0,
       5,     6,     2,     3,     0,     4,     0,     3,     0,     1,
       1,     3,     4,     4,     5,     4,     4,     4,     5,     4,
       0,     0,     7,     4,     5,     4,     5,     4,     4,     4,
       4,     4,     5,     0,     8,     3,     3,     1,     1,     3,
       3,     3,     3,     3,     4,     4,     4,     6,     4,     6,
       4,     6,     1,     0,     3,     3,     1,     4,     0,     1,
       0,     2,     0,     3,     4,     2,     0,     3,     2,     0,
       4,     2,     1,     1,     1,     1,     2,     1,     2,     2,
       2,     1,     2,     2,     0,     1,     1,     3,     1,     3,
       1,     3,     0,     1,     0,     2,     4,     5,     1,     1,
       1,     1,     4,     1,     3,     3,     0,     6,     0,     8,
       4,     0,     8,     0,    10,     6,     0,     8,     0,    10,
       6,     1,     2,     1,     1,     2,     0,     1,     5,     1,
       1,     0,     5,     5,     8,     1,     2,     0,     4,     2,
       3,     3,     1,     1,     0,     3,     2,     1,     0,     3,
       2,     3,     0,     0,     5,     0,     1,     0,     0,     1,
       0,     2,     3,     3,     1,     1,     0,     7,     0,     7,
       1,     2,     0,     0,     2,     0,     2,     0,     1,     1,
       1,     1,     3,     1,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     1,     0,     2,     0,     1,     0,     0,     3,
       0,     0,     3,     2,     0,     0,     4,     4,     2,     0,
       1,     1,     0,     2,     3,     1,     3,     0,     7,     0,
       1,     0,     3,     0,     3,     0,     3,     1,     1,     1,
       4,     2,     2,     2,     1,     2,     2,     0,     3,     2,
       2,     3,     3,     3,     1,     2,     0,     1,     0,     4,
       4,     2,     0,     1,     1,     0,     1,     1,     2,     5,
       4,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       0,     2,     3,     4,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     6,     0,     1,     3,     1,     3,
       0,     2,     3,     1,     1,     2,     1,     2,     0,     0,
       7,     2,     1,     0,     3,     0,     7,     0,     7,     4,
       6,     4,     4,     5,     5,     0,     6,     4,     4,     5,
       6,     4,     1,     3,     1,     2,     1,     3,     1,     0,
       2,     0,     2,     0,     1,     0,     0,     8,     0,     0,
       6,     0,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     3,     4,     0,     3,     3,     1,     2,     2,     1,
       3,     1,     3,     1,     3,     1,     1,     0,     1,     0,
       4,     0,     1,     3,     1,     1,     1,     1,     0,     0,
       6,     0,     0,    11,     3,     1,     3,     3,     1,     3,
       0,     1,     0,     4,     0,     0,     9,     0,     5,     0,
       6,     0,     2,     1,     3,     2,     4,     0,     2,     0,
       2,     1,     1,     1,     0,     4,     0,     1,     0,     1,
       1,     3,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     0,     3,     0,     3,     2,     4,     4,     3,     4,
       4,     1,     3,     3,     3,     3,     6,     2,     2,     0,
       6,     0,     7,     5,     2,     1,     1,     1,     5,     5,
       2,     2,     1,     4,     3,     2,     3,     2,     2,     1,
       4,     4,     3,     3,     2,     3,     2,     3,     3,     3,
       3,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     0,     1,     0,     2,     0,
       1,     1,     1,     0,     2,     0,     2,     0,     3,     3,
       0,     4,     0,     4,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     1,     0,     3,     0,     1,     1,
       0,     4,     0,     4,     1,     0,     1,     4,     0,     3,
       3,     1,     2,     2,     2,     2,     3,     3,     2,     1,
       1,     1,     1,     2,     1,     1,     1,     2,     0,     1,
       0,     5,     0,     1,     3,     1,     0,     3,     0,     3,
       3,     1,     0,     4,     0,     3,     2,     0,     1,     0,
       2,     0,     3,     3,     2,     2,     0,     5,     0,     1,
       1,     0,     1,     1,     2,     1,     2,     1,     2,     0,
       0,     0,     0,    22,     1,     1,     0,     1,     0,     1,
       1,     0,     1,     1,     0,     2,     2,     1,     3,     4,
       3,     3,     0,     2,     2,     1,     3,     3,     0,     4,
       0,     3,     1,     1,     0,     3,     2,     3,     1,     1,
       2,     0,     2,     3,     1,     5,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     2,     2,     2,     0,     1,     0,     4,
       0,     1,     1,     3,     0,     9,     0,     3,     1,     3,
       1,     1,     1,     3,     5,     1,     1,     1,     1,     1,
       3,     4,     5,     1,     5,     3,     2,     1,     3,     2,
       2,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     3,     0,     0,
       7,     1,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     2,     0,     2,     0,     2,     0,     4,     0,     3,
       1,     1,     1,     1,     0,     1,     1,     1,     0,     2,
       2,     2,     3,     3,     4,     6,     2,     3,     3,     3,
       5,     2,     3,     1,     3,     3,     1,     1,     3,     3,
       1,     3,     2,     2,     2,     2,     2,     1,     1,     3,
       1,     4,     4,     1,     1,     1,     1,     1,     0,     4,
       1,     1,     1,     3,     3,     1,     1,     2,     2,     2,
       0,     3,     4,     3,     0,     7,     1,     2,     1,     1,
       1,     1,     1,     1,     0,     5,     1,     1,     1,     1,
       1,     3,     6,     6,     6,     7,     5,     3,     4,     1,
       3,     8,     8,     8,     6,     4,     0,     3,     0,     3,
       1,     3,     2,     1,     1,     0,     1,     1,     2,     0,
       1,     1,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     3,     2,     2,     2,     2,
       2,     2,     2,     2,     1,     1,     2,     0,     1,     3,
       1,     2,     2,     2,     1,     3,     3,     1,     1,     3,
       1,     3,     1,     3,     1,     1,     1,     1,     4,     5,
       4,     6,     1,     0,     3,     3,     1,     1,     0,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       0,     2,     0,     2,     0,     3,     2,     1,     2,     1,
       0,     3,     1,     0,     1,     0,     1,     0,     3,     2,
       0,     1,     2,     0,     1,     4,     4,     5,     2,     3,
       0,     1,     0,     4,     0,     4,     0,     2,     2,     1,
       2,     0,     1,     1,     3,     3,     4,     2,     3,     1,
       1,     2,     4,     0,     0,     0,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     3,     3,     3,     0,     3,
       3,     0,     8,     0,     3,     1,     3,     0,     4,     3,
       3,     4,     4,     0,     3,     4,     4,     1,     1,     0,
       2,     0,     0,     0,     0,     0,    20,     2,     1,     7,
       0,     0,     0,     0,     0,    15,     0,     0,     0,     0,
      12,     4,     4,     3,     4,     3,     2,     1,     3,     5,
       1,     1,     0,     1,     1,     0,     2,     0,     0,     3,
       0,     2,     5,     3,     3,     3,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (thd);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, THD *thd)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, thd); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
{
  YYUSE (yyvaluep);
  YYUSE (thd);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (THD *thd)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, thd);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 2091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
              my_yyabort_error((ER_EMPTY_QUERY, MYF(0)));

            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
#line 21525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3:
#line 2100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
#line 21552 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 5:
#line 2125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
#line 21561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 67:
#line 2204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[0].lex_str);
          }
#line 21571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 70:
#line 2218 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "PREPARE..FROM"));
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[-2].lex_str);
          }
#line 21584 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 71:
#line 2229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->expr_allows_subselect= false; }
#line 21590 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 72:
#line 2231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->prepared_stmt_code= (yyvsp[0].item);
            Lex->expr_allows_subselect= true;
          }
#line 21599 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 73:
#line 2239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[0].lex_str);
          }
#line 21609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 74:
#line 2245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 75:
#line 2247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "EXECUTE IMMEDIATE"));
            Lex->sql_command= SQLCOM_EXECUTE_IMMEDIATE;
          }
#line 21626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 76:
#line 2254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 78:
#line 2259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->expr_allows_subselect= false; }
#line 21638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 79:
#line 2261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "EXECUTE..USING"));
            Lex->expr_allows_subselect= true;
          }
#line 21649 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 82:
#line 2276 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->prepared_stmt_params.push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 21658 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 83:
#line 2286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HELP"));
          }
#line 21667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 84:
#line 2291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[0].lex_str).str;
          }
#line 21677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 85:
#line 2302 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
#line 21685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 86:
#line 2306 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21691 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 89:
#line 2316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.host = (yyvsp[0].lex_str).str;
          }
#line 21699 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 90:
#line 2320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.user = (yyvsp[0].lex_str).str;
          }
#line 21707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 91:
#line 2324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.password = (yyvsp[0].lex_str).str;
          }
#line 21715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 92:
#line 2328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.port = (yyvsp[0].ulong_num);
          }
#line 21723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 93:
#line 2332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.connect_retry = (yyvsp[0].ulong_num);
          }
#line 21731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 94:
#line 2336 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].ulong_num) > MASTER_DELAY_MAX)
            {
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       (uint) (yyvsp[0].ulong_num), (uint) MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[0].ulong_num);
          }
#line 21745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 95:
#line 2346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl= (yyvsp[0].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
#line 21754 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 96:
#line 2351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_ca= (yyvsp[0].lex_str).str;
          }
#line 21762 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 97:
#line 2355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_capath= (yyvsp[0].lex_str).str;
          }
#line 21770 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 98:
#line 2359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_cert= (yyvsp[0].lex_str).str;
          }
#line 21778 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 99:
#line 2363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_cipher= (yyvsp[0].lex_str).str;
          }
#line 21786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 100:
#line 2367 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_key= (yyvsp[0].lex_str).str;
          }
#line 21794 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 101:
#line 2371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[0].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
#line 21803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 102:
#line 2376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_crl= (yyvsp[0].lex_str).str;
          }
#line 21811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 103:
#line 2380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_crlpath= (yyvsp[0].lex_str).str;
          }
#line 21819 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 104:
#line 2385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[0].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
               my_yyabort_error((ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0),
                                 SLAVE_MAX_HEARTBEAT_PERIOD));

            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 21850 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 105:
#line 2412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
#line 21858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 106:
#line 2416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_do_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 21866 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 107:
#line 2420 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_ignore_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 21874 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 112:
#line 2435 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 21882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 116:
#line 2448 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_do_domain_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 21890 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 120:
#line 2461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_ignore_domain_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 21898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 121:
#line 2468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.log_file_name = (yyvsp[0].lex_str).str;
          }
#line 21906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 122:
#line 2472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitly specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitly specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, (yyvsp[0].ulonglong_number));
          }
#line 21925 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 123:
#line 2487 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.relay_log_name = (yyvsp[0].lex_str).str;
          }
#line 21933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 124:
#line 2491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.relay_log_pos = (yyvsp[0].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
#line 21943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 125:
#line 2497 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
#line 21953 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 126:
#line 2503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
#line 21963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 127:
#line 2509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
#line 21973 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 128:
#line 2518 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
          }
#line 21982 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 130:
#line 2527 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->mi.connection_name= (yyvsp[0].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME"));
#endif
         }
#line 21994 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 131:
#line 2540 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (!(lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_create_table()))
              MYSQL_YYABORT;
            lex->create_info.init();
            if (lex->set_command_with_check(SQLCOM_CREATE_TABLE, (yyvsp[-3].num), (yyvsp[-4].object_ddl_options) | (yyvsp[-1].object_ddl_options)))
               MYSQL_YYABORT;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            /*
              For CREATE TABLE we should not open the table even if it exists.
              If the table exists, we should either not create it or replace it
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
            lex->create_info.default_table_charset= NULL;
            lex->name= null_lex_str;
            lex->create_last_non_select_table= lex->last_table();
          }
#line 22020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 132:
#line 2562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            create_table_set_open_action_and_adjust_tables(lex);
          }
#line 22030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 133:
#line 2570 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-6].key_type), (yyvsp[-3].lex_str), (yyvsp[-2].key_alg), (yyvsp[-7].object_ddl_options) | (yyvsp[-4].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 22041 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 134:
#line 2577 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22047 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 135:
#line 2580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-5].key_type), (yyvsp[-2].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-6].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 22058 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 136:
#line 2587 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22064 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 137:
#line 2590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-5].key_type), (yyvsp[-2].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-6].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 22075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 138:
#line 2597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 139:
#line 2599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
#line 22090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 140:
#line 2604 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->set_command_with_check(SQLCOM_CREATE_DB, 0, (yyvsp[-5].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
               MYSQL_YYABORT;
            lex->name= (yyvsp[-2].lex_str);
          }
#line 22101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 141:
#line 2611 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.set((yyvsp[0].object_ddl_options));
            Lex->create_view_mode= ((yyvsp[0].object_ddl_options).or_replace() ? VIEW_CREATE_OR_REPLACE :
                                                      VIEW_CREATE_NEW);
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
#line 22113 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 142:
#line 2618 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 143:
#line 2621 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_USER, (yyvsp[-6].object_ddl_options) | (yyvsp[-4].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 22128 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 144:
#line 2627 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_ROLE, (yyvsp[-5].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 22137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 145:
#line 2632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
#line 22145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 146:
#line 2636 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
#line 22153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 147:
#line 2639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->set_command(SQLCOM_CREATE_SERVER, (yyvsp[0].object_ddl_options)); }
#line 22159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 148:
#line 2641 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 149:
#line 2646 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            Lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 22175 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 150:
#line 2653 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->server_options.scheme= (yyvsp[-4].lex_str); }
#line 22181 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 153:
#line 2663 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.username.str == 0);
            Lex->server_options.username= (yyvsp[0].lex_str);
          }
#line 22190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 154:
#line 2668 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.host.str == 0);
            Lex->server_options.host= (yyvsp[0].lex_str);
          }
#line 22199 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 155:
#line 2673 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.db.str == 0);
            Lex->server_options.db= (yyvsp[0].lex_str);
          }
#line 22208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 156:
#line 2678 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.owner.str == 0);
            Lex->server_options.owner= (yyvsp[0].lex_str);
          }
#line 22217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 157:
#line 2683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.password.str == 0);
            Lex->server_options.password= (yyvsp[0].lex_str);
          }
#line 22226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 158:
#line 2688 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.socket.str == 0);
            Lex->server_options.socket= (yyvsp[0].lex_str);
          }
#line 22235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 159:
#line 2693 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.port= (yyvsp[0].ulong_num);
          }
#line 22243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 160:
#line 2700 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[-3].simple_string);
            if (lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[0].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
#line 22263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 161:
#line 2720 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
#line 22275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 162:
#line 2731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_expression= (yyvsp[-1].item);
            Lex->event_parse_data->interval= (yyvsp[0].interval);
          }
#line 22284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 164:
#line 2738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[0].item);
          }
#line 22292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 165:
#line 2744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 22298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 166:
#line 2746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
#line 22308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 167:
#line 2752 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
#line 22318 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 168:
#line 2758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
#line 22328 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 169:
#line 2767 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, 0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
#line 22339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 170:
#line 2774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_starts= (yyvsp[0].item);
          }
#line 22347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 172:
#line 2782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_ends= (yyvsp[0].item);
          }
#line 22355 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 173:
#line 2788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 22361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 175:
#line 2794 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->on_completion= (yyvsp[-1].num)
                                    ? Event_parse_data::ON_COMPLETION_DROP
                                    : Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
#line 22372 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 176:
#line 2803 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 22378 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 177:
#line 2805 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[0].lex_str);
            (yyval.num)= 1;
          }
#line 22387 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 178:
#line 2812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
              my_yyabort_error((ER_EVENT_RECURSION_FORBIDDEN, MYF(0)));
              
            if (!make_sp_head(thd, lex->event_parse_data->identifier, TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
#line 22422 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 179:
#line 2843 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->event_parse_data->body_changed= TRUE;
          }
#line 22436 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 180:
#line 2856 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
#line 22452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 181:
#line 2871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(yyvsp[-2].lex_str).str || check_db_name(&(yyvsp[-2].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            if (check_routine_name(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
#line 22467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 182:
#line 2882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[0].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name(db, (yyvsp[0].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
#line 22486 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 183:
#line 2899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22492 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 184:
#line 2900 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 185:
#line 2904 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 186:
#line 2905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22510 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 187:
#line 2911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.comment= (yyvsp[0].lex_str); }
#line 22516 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 188:
#line 2913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* Just parse it, we only have one language for now. */ }
#line 22522 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 189:
#line 2915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
#line 22528 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 190:
#line 2917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
#line 22534 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 191:
#line 2919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
#line 22540 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 192:
#line 2921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
#line 22546 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 193:
#line 2923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22552 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 194:
#line 2928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22558 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 195:
#line 2929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.detistic= ! (yyvsp[-1].num); }
#line 22564 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 196:
#line 2934 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
#line 22572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 197:
#line 2938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
#line 22580 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 198:
#line 2945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[0].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[0].spname), TYPE_ENUM_PROCEDURE);
          }
#line 22593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 199:
#line 2953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22599 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 204:
#line 2969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->value_list.push_back((yyvsp[0].item), thd->mem_root);
          }
#line 22607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 205:
#line 2973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->value_list.push_back((yyvsp[0].item), thd->mem_root);
          }
#line 22615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 210:
#line 2991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_PARAM, MYF(0), (yyvsp[0].lex_str).str));

            sp_variable *spvar= spc->add_variable(thd, (yyvsp[0].lex_str));

            lex->init_last_field(&spvar->field_def, (yyvsp[0].lex_str).str,
                                 thd->variables.collation_database);
            (yyval.spvar)= spvar;
          }
#line 22633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 211:
#line 3005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_variable *spvar= (yyvsp[-1].spvar);

            if (lex->sphead->fill_field_definition(thd, lex, lex->last_field))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

            (yyval.spvar)= spvar;
          }
#line 22651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 216:
#line 3032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyvsp[0].spvar)->mode=(yyvsp[-1].spvar_mode); }
#line 22657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 217:
#line 3036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
#line 22663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 218:
#line 3037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
#line 22669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 219:
#line 3038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_OUT; }
#line 22675 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 220:
#line 3039 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_INOUT; }
#line 22681 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 221:
#line 3043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 223:
#line 3048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 225:
#line 3054 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
#line 22701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 226:
#line 3058 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[-1].spblock).vars || (yyvsp[-1].spblock).conds) && ((yyvsp[-2].spblock).curs || (yyvsp[-2].spblock).hndlrs))
              my_yyabort_error((ER_SP_VARCOND_AFTER_CURSHNDLR, MYF(0)));
            if ((yyvsp[-1].spblock).curs && (yyvsp[-2].spblock).hndlrs)
              my_yyabort_error((ER_SP_CURSOR_AFTER_HANDLER, MYF(0)));
            (yyval.spblock).vars= (yyvsp[-2].spblock).vars + (yyvsp[-1].spblock).vars;
            (yyval.spblock).conds= (yyvsp[-2].spblock).conds + (yyvsp[-1].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[-2].spblock).hndlrs + (yyvsp[-1].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[-2].spblock).curs + (yyvsp[-1].spblock).curs;
          }
#line 22720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 227:
#line 3076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;

            // get the last variable:
            uint num_vars= pctx->context_var_count();
            uint var_idx= pctx->var_context2runtime(num_vars - 1);
            sp_variable *spvar= pctx->find_variable(var_idx);

            lex->sphead->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[0].num));
            thd->lex->init_last_field(&spvar->field_def, spvar->name.str,
                                      thd->variables.collation_database);
          }
#line 22739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 228:
#line 3092 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            Item *dflt_value_item= (yyvsp[0].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null(thd);
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[-3].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
              bool last= i == num_vars - 1;
            
              if (!spvar)
                MYSQL_YYABORT;
            
              if (!last)
                spvar->field_def= *lex->last_field;

              spvar->default_value= dflt_value_item;
              spvar->field_def.field_name= spvar->name.str;
            
              if (lex->sphead->fill_field_definition(thd, lex,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new (lex->thd->mem_root)
                                 sp_instr_set(lex->sphead->instructions(),
                                               pctx, var_idx, dflt_value_item,
                                               (yyvsp[-1].Lex_field_type).field_type(), lex, last);
              if (is == NULL || lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[-3].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
#line 22797 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 229:
#line 3146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[-3].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_COND, MYF(0), (yyvsp[-3].lex_str).str));
            if(spc->add_condition(thd, (yyvsp[-3].lex_str), (yyvsp[0].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
#line 22813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 230:
#line 3158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[-2].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new (thd->mem_root) sp_instr_hpush_jump(sp->instructions(),
                   ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[-2].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(thd, i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0)))
              MYSQL_YYABORT;
          }
#line 22844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 231:
#line 3185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[-5].num) == sp_handler::CONTINUE)
            {
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(thd, i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
#line 22880 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 232:
#line 3217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[-3].lex_str), &offp, TRUE))
              my_yyabort_error((ER_SP_DUP_CURS, MYF(0), (yyvsp[-3].lex_str).str));

            i= new (thd->mem_root)
                 sp_instr_cpush(sp->instructions(), ctx, (yyvsp[0].lex),
                                ctx->current_cursor_count());
            if (i == NULL || sp->add_instr(i) || ctx->add_cursor((yyvsp[-3].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
#line 22903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 233:
#line 3238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd);
          }
#line 22911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 234:
#line 3242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
              my_yyabort_error((ER_SP_BAD_CURSOR_SELECT, MYF(0)));
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22928 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 235:
#line 3257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_handler::EXIT; }
#line 22934 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 236:
#line 3258 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_handler::CONTINUE; }
#line 22940 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 237:
#line 3264 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 22946 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 238:
#line 3266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)+= 1; }
#line 22952 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 239:
#line 3271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[0].spcondvalue)))
              my_yyabort_error((ER_SP_DUP_HANDLER, MYF(0)));

            sp_instr_hpush_jump *i= (sp_instr_hpush_jump *)sp->last_instruction();
            i->add_condition((yyvsp[0].spcondvalue));
          }
#line 22968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 240:
#line 3286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* mysql errno */
            if ((yyvsp[0].ulong_num) == 0)
              my_yyabort_error((ER_WRONG_VALUE, MYF(0), "CONDITION", "0"));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[0].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 22980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 242:
#line 3298 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[0].lex_str)) || is_sqlstate_completion((yyvsp[0].lex_str).str))
              my_yyabort_error((ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[0].lex_str).str));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[0].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 23000 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 243:
#line 3316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 244:
#line 3317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23012 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 245:
#line 3322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= (yyvsp[0].spcondvalue);
          }
#line 23020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 246:
#line 3326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[0].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 23030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 247:
#line 3332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 23040 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 248:
#line 3338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 23050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 249:
#line 3344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 23060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 250:
#line 3353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[-1].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 23075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 251:
#line 3367 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_condition_value *cond;

            /* SIGNAL foo cannot be used outside of stored programs */
            if (lex->spcont == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            cond= lex->spcont->find_condition((yyvsp[0].lex_str), false);
            if (cond == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            if (cond->type != sp_condition_value::SQLSTATE)
              my_yyabort_error((ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0)));
            (yyval.spcondvalue)= cond;
          }
#line 23094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 252:
#line 3382 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= (yyvsp[0].spcondvalue); }
#line 23100 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 253:
#line 3387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= NULL; }
#line 23106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 254:
#line 3389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= (yyvsp[0].spcondvalue); }
#line 23112 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 255:
#line 3394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
#line 23120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 257:
#line 3402 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[-2].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[0].item);
          }
#line 23132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 258:
#line 3411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[-2].diag_condition_item_name);
            if (info->m_item[index] != NULL)
              my_yyabort_error((ER_DUP_SIGNAL_SET, MYF(0),
                                Diag_condition_item_names[index].str));
            info->m_item[index]= (yyvsp[0].item);
          }
#line 23146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 259:
#line 3427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 23152 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 260:
#line 3429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[0].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[0].item);
          }
#line 23174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 261:
#line 3447 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 23180 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 262:
#line 3453 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
#line 23186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 263:
#line 3455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
#line 23192 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 264:
#line 3457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
#line 23198 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 265:
#line 3459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
#line 23204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 266:
#line 3461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
#line 23210 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 267:
#line 3463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
#line 23216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 268:
#line 3465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
#line 23222 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 269:
#line 3467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
#line 23228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 270:
#line 3469 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
#line 23234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 271:
#line 3471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
#line 23240 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 272:
#line 3473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
#line 23246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 273:
#line 3475 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
#line 23252 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 274:
#line 3480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[-1].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 23268 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 275:
#line 3495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Diagnostics_information *info= (yyvsp[0].diag_info);

            info->set_which_da((yyvsp[-2].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 23284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 276:
#line 3510 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
#line 23290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 277:
#line 3512 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
#line 23296 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 278:
#line 3517 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[0].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
#line 23306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 279:
#line 3523 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[-1].item), (yyvsp[0].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
#line 23316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 280:
#line 3532 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[0].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 23326 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 281:
#line 3538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].stmt_info_list)->push_back((yyvsp[0].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[-2].stmt_info_list);
          }
#line 23336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 282:
#line 3547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[0].stmt_info_item_name), (yyvsp[-2].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
#line 23346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 283:
#line 3556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(thd, (yyvsp[0].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 23359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 284:
#line 3565 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 23369 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 285:
#line 3574 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
#line 23375 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 286:
#line 3576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
#line 23381 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 287:
#line 3585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 23387 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 288:
#line 3590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[0].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 23397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 289:
#line 3596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].cond_info_list)->push_back((yyvsp[0].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[-2].cond_info_list);
          }
#line 23407 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 290:
#line 3605 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[0].cond_info_item_name), (yyvsp[-2].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
#line 23417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 291:
#line 3614 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
#line 23423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 292:
#line 3616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
#line 23429 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 293:
#line 3618 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
#line 23435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 294:
#line 3620 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
#line 23441 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 295:
#line 3622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
#line 23447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 296:
#line 3624 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
#line 23453 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 297:
#line 3626 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
#line 23459 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 298:
#line 3628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
#line 23465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 299:
#line 3630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
#line 23471 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 300:
#line 3632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
#line 23477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 301:
#line 3634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
#line 23483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 302:
#line 3636 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
#line 23489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 303:
#line 3638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
#line 23495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 304:
#line 3643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[0].lex_str).str));
            spc->add_variable(thd, (yyvsp[0].lex_str));
            (yyval.num)= 1;
          }
#line 23511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 305:
#line 3655 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[0].lex_str).str));
            spc->add_variable(thd, (yyvsp[0].lex_str));
            (yyval.num)= (yyvsp[-2].num) + 1;
          }
#line 23527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 306:
#line 3669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = NULL; }
#line 23533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 307:
#line 3670 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 23539 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 324:
#line 3709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->sphead->new_cont_backpatch(NULL);
          }
#line 23549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 325:
#line 3715 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->do_cont_backpatch(); }
#line 23555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 326:
#line 3719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
#line 23567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 327:
#line 3727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            /* "USE db" doesn't work in a procedure */
            if (lex->sql_command == SQLCOM_CHANGE_DB)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "USE"));
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new (thd->mem_root)
                sp_instr_stmt(sp->instructions(), lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_start() - sp->m_tmp_query;;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 23613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 328:
#line 3772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 23619 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 329:
#line 3774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
              my_yyabort_error((ER_SP_BADRETURN, MYF(0)));

            sp_instr_freturn *i;

            i= new (thd->mem_root)
                 sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[0].item),
                                  sp->m_return_field_def.sql_type, lex);
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;
            sp->m_flags|= sp_head::HAS_RETURN;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 23643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 330:
#line 3797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[0].lex_str));

            if (! lab)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[0].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;
            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., SP_LAB_ITER),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            n= ctx->diff_handlers(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(hpop);
            }
            n= ctx->diff_cursors(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(cpop);
            }
            i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL)
              MYSQL_YYABORT;
            sp->push_backpatch(thd, i, lab);  /* Jumping forward */
            sp->add_instr(i);
          }
#line 23694 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 331:
#line 3847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[0].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[0].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;

            n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL ||
                  sp->add_instr(hpop))
                MYSQL_YYABORT;
            }
            n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL ||
                  sp->add_instr(cpop))
                MYSQL_YYABORT;
            }
            i= new (thd->mem_root)
              sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 23736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 332:
#line 3888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[0].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 23755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 333:
#line 3906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[-1].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[-1].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 23774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 334:
#line 3921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23780 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 335:
#line 3926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[0].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 23799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 339:
#line 3950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
#line 23817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 340:
#line 3964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
#line 23835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 341:
#line 3980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 23841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 342:
#line 3982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, ctx, (yyvsp[-1].item), lex);
            if (i == NULL ||
                sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 23861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 343:
#line 3998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0));
          }
#line 23877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 344:
#line 4010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
#line 23887 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 348:
#line 4025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;

            /**
              An example of the CASE statement in use is
            <pre>
            CREATE PROCEDURE proc_19194_simple(i int)
            BEGIN
              DECLARE str CHAR(10);

              CASE i
                WHEN 1 THEN SET str="1";
                WHEN 2 THEN SET str="2";
                WHEN 3 THEN SET str="3";
                ELSE SET str="unknown";
              END CASE;

              SELECT str;
            END
            </pre>
              The actions are used to generate the following code:
            <pre>
            SHOW PROCEDURE CODE proc_19194_simple;
            Pos     Instruction
            0       set str@1 NULL
            1       set_case_expr (12) 0 i@0
            2       jump_if_not 5(12) (case_expr@0 = 1)
            3       set str@1 _latin1'1'
            4       jump 12
            5       jump_if_not 8(12) (case_expr@0 = 2)
            6       set str@1 _latin1'2'
            7       jump 12
            8       jump_if_not 11(12) (case_expr@0 = 3)
            9       set str@1 _latin1'3'
            10      jump 12
            11      set str@1 _latin1'unknown'
            12      stmt 0 "SELECT str"
            </pre>
            */

            Lex->sphead->new_cont_backpatch(NULL);

            /*
              BACKPATCH: Creating target label for the jump to after END CASE
              (instruction 12 in the example)
            */
            Lex->spcont->push_label(thd, empty_lex_str, Lex->sphead->instructions());
          }
#line 23941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 349:
#line 4078 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              BACKPATCH: Resolving forward jump from
              "case_stmt_action_then" to after END CASE
              (jump from instruction 4 to 12, 7 to 12 ... in the example)
            */
            Lex->sphead->backpatch(Lex->spcont->pop_label());

            if ((yyvsp[-3].num))
              Lex->spcont->pop_case_expr_id();

            Lex->sphead->do_cont_backpatch();
          }
#line 23959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 350:
#line 4094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); /* For expr $2 */ }
#line 23965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 351:
#line 4096 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (case_stmt_action_expr(Lex, (yyvsp[0].item)))
              MYSQL_YYABORT;

            if (Lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 23977 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 352:
#line 4104 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 23983 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 353:
#line 4106 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 23989 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 358:
#line 4121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
#line 23997 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 359:
#line 4125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[0].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 24012 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 360:
#line 4137 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
#line 24022 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 361:
#line 4146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
#line 24030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 362:
#line 4150 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[0].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 24043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 363:
#line 4160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
#line 24053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 364:
#line 4169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new (thd->mem_root)
              sp_instr_error(ip, lex->spcont, ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 24068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 366:
#line 4183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 24074 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 367:
#line 4184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 24080 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 368:
#line 4189 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[-2].lex_str));

            if (lab)
              my_yyabort_error((ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[-2].lex_str).str));
            lex->name= (yyvsp[-2].lex_str);
          }
#line 24094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 369:
#line 4199 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, (yyvsp[-1].splabel)->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            }
          }
#line 24106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 370:
#line 4210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
#line 24114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 371:
#line 4214 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 372:
#line 4219 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
#line 24130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 373:
#line 4225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24136 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 374:
#line 4229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->push_label(thd, lex->name,
                                                   lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
#line 24149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 375:
#line 4240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[-2].spblock).hndlrs)
            {
              i= new (thd->mem_root)
                sp_instr_hpop(sp->instructions(), ctx, (yyvsp[-2].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[-2].spblock).curs)
            {
              i= new (thd->mem_root)
                sp_instr_cpop(sp->instructions(), ctx, (yyvsp[-2].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
            (yyval.splabel) = lex->spcont->pop_label();
          }
#line 24180 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 376:
#line 4270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
#line 24195 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 377:
#line 4284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[-1].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(thd, i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 24215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 378:
#line 4300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
#line 24231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 379:
#line 4315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 24237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 380:
#line 4317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[-2].item), lab->ip, lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
#line 24256 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 381:
#line 4335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            if ((yyvsp[0].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str,
                                lab->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            }
          }
#line 24271 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 382:
#line 4348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            DBUG_ASSERT(lab->name.length == 0);
          }
#line 24281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 383:
#line 4357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
          }
#line 24290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 384:
#line 4362 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24296 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 385:
#line 4364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
#line 24306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 386:
#line 4370 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 387:
#line 4372 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
          }
#line 24321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 388:
#line 4377 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24327 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 389:
#line 4382 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
#line 24336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 390:
#line 4388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 391:
#line 4390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
#line 24352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 392:
#line 4397 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24358 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 393:
#line 4399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
#line 24367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 394:
#line 4405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 395:
#line 4410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
#line 24379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 396:
#line 4412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
#line 24385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 397:
#line 4417 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
#line 24391 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 398:
#line 4419 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
#line 24397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 399:
#line 4421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
#line 24403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 403:
#line 4455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 404:
#line 4457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[0].lex_str).str;
          }
#line 24418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 405:
#line 4467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
#line 24426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 406:
#line 4473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
#line 24434 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 411:
#line 4496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24440 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 458:
#line 4590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[0].lex_str).str;
          }
#line 24449 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 459:
#line 4598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[0].lex_str).str;
          }
#line 24458 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 460:
#line 4606 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[0].lex_str).str;
          }
#line 24467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 461:
#line 4614 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[0].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
#line 24481 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 462:
#line 4627 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[0].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
#line 24495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 463:
#line 4640 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
#line 24504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 464:
#line 4645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
#line 24513 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 465:
#line 4650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
#line 24522 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 466:
#line 4658 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[0].ulonglong_number);
          }
#line 24531 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 467:
#line 4666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[0].ulonglong_number);
          }
#line 24540 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 468:
#line 4674 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[0].ulonglong_number);
          }
#line 24549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 469:
#line 4682 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[0].ulonglong_number);
          }
#line 24558 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 470:
#line 4690 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[0].ulonglong_number);
          }
#line 24567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 471:
#line 4698 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[0].ulonglong_number);
          }
#line 24576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 472:
#line 4706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP"));
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[0].ulong_num);
          }
#line 24587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 473:
#line 4716 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT"));
            lex->alter_tablespace_info->ts_comment= (yyvsp[0].lex_str).str;
          }
#line 24598 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 474:
#line 4726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE, MYF(0),
                                "STORAGE ENGINE"));
            lex->alter_tablespace_info->storage_engine= (yyvsp[0].db_type);
          }
#line 24610 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 477:
#line 4742 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
#line 24619 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 478:
#line 4747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT"));
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
#line 24630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 479:
#line 4756 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulonglong_number)= (yyvsp[0].ulonglong_number);}
#line 24636 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 480:
#line 4758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[0].lex_str).str;
            uint str_len= (yyvsp[0].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G': text_shift_number+=30; break;
                case 'm':
                case 'M': text_shift_number+=20; break;
                case 'k':
                case 'K': text_shift_number+=10; break;
                default:
                  my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
              }
              if (prefix_number >> 31)
                my_yyabort_error((ER_SIZE_OVERFLOW_ERROR, MYF(0)));
              number= prefix_number << text_shift_number;
            }
            else
              my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
            (yyval.ulonglong_number)= number;
          }
#line 24671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 481:
#line 4796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.option_list= NULL; }
#line 24677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 482:
#line 4797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 483:
#line 4798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 485:
#line 4806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 24695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 486:
#line 4806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 487:
#line 4808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 24707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 488:
#line 4808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 489:
#line 4810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {

            Lex->create_info.add(DDL_options_st::OPT_LIKE);
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[0].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
#line 24728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 490:
#line 4823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table)= (yyvsp[0].table); }
#line 24734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 491:
#line 4824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table)= (yyvsp[-1].table); }
#line 24740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 492:
#line 4828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 494:
#line 4835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Select->set_braces(0);
            Select->set_with_clause((yyvsp[-4].with_clause));
          }
#line 24755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 496:
#line 4842 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_with_clause((yyvsp[-4].with_clause));
          }
#line 24763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 498:
#line 4847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 24769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 499:
#line 4847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 500:
#line 4849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 24781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 501:
#line 4849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 502:
#line 4854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
#line 24801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 503:
#line 4890 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 505:
#line 4896 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
#line 24825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 507:
#line 4914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
              my_yyabort_error((ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                                "--skip-partition"));
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), "partitioning",
                              "--with-plugin-partition"));
#endif
          }
#line 24841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 508:
#line 4929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(thd, ER_PARTITION_ENTRY_ERROR);
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
#line 24858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 509:
#line 4941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 510:
#line 4946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->safe_to_cache_query= 1; }
#line 24870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 512:
#line 4952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
#line 24881 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 513:
#line 4959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= HASH_PARTITION; }
#line 24887 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 514:
#line 4960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24893 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 515:
#line 4962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= RANGE_PARTITION; }
#line 24899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 516:
#line 4964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= RANGE_PARTITION; }
#line 24905 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 517:
#line 4966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= LIST_PARTITION; }
#line 24911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 518:
#line 4968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= LIST_PARTITION; }
#line 24917 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 519:
#line 4972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 520:
#line 4974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->linear_hash_ind= TRUE;}
#line 24929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 521:
#line 4979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
#line 24935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 522:
#line 4981 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch ((yyvsp[0].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 24953 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 523:
#line 4997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 524:
#line 4998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 525:
#line 5002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24971 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 526:
#line 5003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24977 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 527:
#line 5008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[0].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of partition fields"));
          }
#line 24994 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 528:
#line 5024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
#line 25004 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 529:
#line 5034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr(thd, (yyvsp[-3].simple_string) + 1, (yyvsp[-2].item), (yyvsp[-1].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
#line 25016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 530:
#line 5045 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->part_info->set_part_expr(thd, (yyvsp[-3].simple_string) + 1, (yyvsp[-2].item), (yyvsp[-1].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
#line 25025 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 531:
#line 5053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25031 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 532:
#line 5055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            uint num_parts= (yyvsp[0].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "partitions"));

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
#line 25045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 533:
#line 5067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25051 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 534:
#line 5069 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->subpart_type= HASH_PARTITION; }
#line 25057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 535:
#line 5070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 536:
#line 5073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
#line 25073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 537:
#line 5078 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25079 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 538:
#line 5082 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 539:
#line 5083 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 540:
#line 5088 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[0].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of subpartition fields"));
          }
#line 25107 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 541:
#line 5103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->safe_to_cache_query)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[0].item);
          }
#line 25120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 542:
#line 5114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 543:
#line 5116 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint num_parts= (yyvsp[0].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "subpartitions"));
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
#line 25139 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 544:
#line 5128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "RANGE"));
            if (part_info->part_type == LIST_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "LIST"));
          }
#line 25153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 545:
#line 5138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_PART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
#line 25176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 546:
#line 5159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 547:
#line 5160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 548:
#line 5165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new (thd->mem_root) partition_element();

            if (!p_elem ||
                 part_info->partitions.push_back(p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
#line 25209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 549:
#line 5185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 550:
#line 5190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            if (check_ident_length(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            p_elem->partition_name= (yyvsp[0].lex_str).str;
          }
#line 25227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 551:
#line 5201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->error_if_requires_values())
                 MYSQL_YYABORT;
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
#line 25243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 552:
#line 5213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "RANGE", "LESS THAN"));
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
#line 25260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 553:
#line 5225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 554:
#line 5227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "LIST", "IN"));
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
#line 25283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 555:
#line 5239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 556:
#line 5241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "LIST", "DEFAULT"));
            }
            else
              part_info->part_type= LIST_PARTITION;
            if (part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
         }
#line 25314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 557:
#line 5265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 25340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 558:
#line 5286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 559:
#line 5291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val(thd))
              {
                MYSQL_YYABORT;
              }
            }
          }
#line 25379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 560:
#line 5320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(thd, ER_ROW_SINGLE_PARTITION_FIELD_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 25392 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 561:
#line 5331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25398 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 562:
#line 5332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25404 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 563:
#line 5337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 25420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 564:
#line 5348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 565:
#line 5350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
#line 25451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 566:
#line 5373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 567:
#line 5374 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25463 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 568:
#line 5379 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(thd, ER_MAXVALUE_IN_VALUES_IN);
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 25480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 569:
#line 5392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[0].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
#line 25500 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 570:
#line 5412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 25518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 571:
#line 5426 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
#line 25545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 572:
#line 5451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25551 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 573:
#line 5452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 574:
#line 5457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new (thd->mem_root)
                                           partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
#line 25595 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 575:
#line 5490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 576:
#line 5495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_ident_length(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            Lex->part_info->curr_part_elem->partition_name= (yyvsp[0].lex_str).str;
          }
#line 25611 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 577:
#line 5503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 578:
#line 5504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 579:
#line 5508 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 580:
#line 5509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 581:
#line 5514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[0].lex_str).str; }
#line 25641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 582:
#line 5516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[0].db_type);
            part_info->default_engine_type= (yyvsp[0].db_type);
          }
#line 25651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 583:
#line 5522 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[0].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[0].lex_str).length;
          }
#line 25661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 584:
#line 5528 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[0].ulong_num); }
#line 25667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 585:
#line 5530 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[0].ulonglong_number); }
#line 25673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 586:
#line 5532 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[0].ulonglong_number); }
#line 25679 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 587:
#line 5534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[0].lex_str).str; }
#line 25685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 588:
#line 5536 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[0].lex_str).str; }
#line 25691 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 589:
#line 5538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[0].lex_str).str; }
#line 25697 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 590:
#line 5548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_with_clause((yyvsp[-4].with_clause));
          }
#line 25705 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 591:
#line 5554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 25724 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 592:
#line 5569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 25732 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 597:
#line 5586 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
#line 25744 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 598:
#line 5596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 599:
#line 5597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25756 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 600:
#line 5601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25762 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 601:
#line 5602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25768 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 602:
#line 5606 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 603:
#line 5607 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25780 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 604:
#line 5611 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 605:
#line 5612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25792 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 606:
#line 5617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->check_exists= FALSE;
          }
#line 25800 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 607:
#line 5621 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->check_exists= TRUE;
          }
#line 25808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 608:
#line 5628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).init();
          }
#line 25816 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 609:
#line 5632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_NOT_EXISTS);
          }
#line 25824 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 610:
#line 5639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).init();
          }
#line 25832 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 611:
#line 5643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_OR_REPLACE);
          }
#line 25840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 619:
#line 5666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!lex->m_sql_cmd)
            {
              DBUG_ASSERT(lex->sql_command == SQLCOM_ALTER_TABLE);
              if (!(lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table()))
                MYSQL_YYABORT;
            }
            Storage_engine_name *opt=
              lex->m_sql_cmd->option_storage_engine_name();
            DBUG_ASSERT(opt); // Expect a proper Sql_cmd
            *opt= Storage_engine_name((yyvsp[0].lex_str));
            lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
#line 25859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 620:
#line 5681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.max_rows= (yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
#line 25868 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 621:
#line 5686 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.min_rows= (yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
#line 25877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 622:
#line 5691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.avg_row_length=(yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
#line 25886 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 623:
#line 5696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.password=(yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
#line 25895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 624:
#line 5701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.comment=(yyvsp[0].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
#line 25904 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 625:
#line 5706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.auto_increment_value=(yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
#line 25913 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 626:
#line 5711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
#line 25932 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 627:
#line 5726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
#line 25942 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 628:
#line 5732 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
#line 25961 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 629:
#line 5747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
#line 25970 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 630:
#line 5752 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
#line 25989 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 631:
#line 5767 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
#line 25999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 632:
#line 5773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[0].ulong_num) == 0 || (yyvsp[0].ulong_num) > 0xffff)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
#line 26021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 633:
#line 5791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
#line 26030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 634:
#line 5796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
#line 26039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 635:
#line 5801 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
#line 26048 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 636:
#line 5806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[0].choice);
          }
#line 26057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 637:
#line 5811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
#line 26066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 638:
#line 5816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.row_type= (yyvsp[0].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
#line 26075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 639:
#line 5821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
#line 26083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 640:
#line 5825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list.first;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
#line 26109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 643:
#line 5849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.merge_insert_method= (yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
#line 26118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 644:
#line 5854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.data_file_name= (yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
#line 26127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 645:
#line 5859 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.index_file_name= (yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
#line 26136 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 646:
#line 5864 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.tablespace= (yyvsp[0].lex_str).str;}
#line 26142 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 647:
#line 5866 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.storage_media= HA_SM_DISK;}
#line 26148 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 648:
#line 5868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
#line 26154 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 649:
#line 5870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.connect_string.str= (yyvsp[0].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[0].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
#line 26164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 650:
#line 5876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[0].ulong_num);
          }
#line 26173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 651:
#line 5881 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[0].choice);
          }
#line 26182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 652:
#line 5886 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 26194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 653:
#line 5894 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 26206 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 654:
#line 5902 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 26216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 655:
#line 5908 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 26226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 656:
#line 5917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->create_info.add_table_option_default_charset((yyvsp[0].charset)))
              MYSQL_YYABORT;
          }
#line 26235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 657:
#line 5925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[0].charset) &&
                 !((yyvsp[0].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[0].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[0].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
#line 26253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 658:
#line 5942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Storage_engine_name((yyvsp[0].lex_str)).
                 resolve_storage_engine_with_error(thd, &(yyval.db_type),
                                            thd->lex->create_info.tmp_table()))
              MYSQL_YYABORT;
          }
#line 26264 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 659:
#line 5952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[0].lex_str), false)))
              (yyval.db_type)= plugin_hton(plugin);
            else
              my_yyabort_error((ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 26276 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 660:
#line 5962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
#line 26282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 661:
#line 5963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_FIXED; }
#line 26288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 662:
#line 5964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
#line 26294 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 663:
#line 5965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
#line 26300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 664:
#line 5966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
#line 26306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 665:
#line 5967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
#line 26312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 666:
#line 5968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_PAGE; }
#line 26318 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 667:
#line 5972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
#line 26324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 668:
#line 5973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
#line 26330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 669:
#line 5974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
#line 26336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 670:
#line 5978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) STRING_RESULT; }
#line 26342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 671:
#line 5979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) REAL_RESULT; }
#line 26348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 672:
#line 5980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) DECIMAL_RESULT; }
#line 26354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 673:
#line 5981 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) INT_RESULT; }
#line 26360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 674:
#line 5987 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
#line 26368 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 677:
#line 5998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 680:
#line 6005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.create_field)= (yyvsp[0].create_field); }
#line 26380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 681:
#line 6007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.create_field)= (yyvsp[-1].create_field); }
#line 26386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 682:
#line 6012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[-1].lex_str), (yyvsp[0].key_alg), (yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 683:
#line 6017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26402 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 684:
#line 6019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[-2].lex_str), (yyvsp[0].key_alg), (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 685:
#line 6024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 686:
#line 6026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[0].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26428 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 687:
#line 6031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26434 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 688:
#line 6033 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[0].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 689:
#line 6038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 690:
#line 6042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[-1].lex_str).str ? (yyvsp[-1].lex_str) : (yyvsp[-4].lex_str), (yyvsp[0].key_alg), (yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 691:
#line 6047 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 692:
#line 6050 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-4].key_type), (yyvsp[-2].lex_str).str ? (yyvsp[-2].lex_str) : (yyvsp[-5].lex_str), (yyvsp[0].key_alg), (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26476 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 693:
#line 6055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26482 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 694:
#line 6057 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->check_add_key((yyvsp[-1].object_ddl_options)) ||
               !(Lex->last_key= (new (thd->mem_root)
                                 Key(Key::MULTIPLE, (yyvsp[-4].lex_str).str ? (yyvsp[-4].lex_str) : (yyvsp[0].lex_str),
                                     HA_KEY_ALG_UNDEF, true, (yyvsp[-1].object_ddl_options)))))
              MYSQL_YYABORT;
            Lex->option_list= NULL;
          }
#line 26495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 695:
#line 6066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Key *key= (new (thd->mem_root)
                       Foreign_key((yyvsp[-5].lex_str).str ? (yyvsp[-5].lex_str) : (yyvsp[-9].lex_str),
                                   lex->last_key->columns,
                                   (yyvsp[0].table)->db,
                                   (yyvsp[0].table)->table,
                                   lex->ref_list,
                                   lex->fk_delete_opt,
                                   lex->fk_update_opt,
                                   lex->fk_match_option,
                                    (yyvsp[-6].object_ddl_options)));
            if (key == NULL)
              MYSQL_YYABORT;
            /*
              handle_if_exists_options() expectes the two keys in this order:
              the Foreign_key, followed by its auto-generated Key.
            */
            lex->alter_info.key_list.push_back(key, thd->mem_root);
            lex->alter_info.key_list.push_back(Lex->last_key, thd->mem_root);
            lex->option_list= NULL;

            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
#line 26525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 696:
#line 6095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->add_constraint(&(yyvsp[-1].lex_str), (yyvsp[0].virtual_column), FALSE);
         }
#line 26533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 697:
#line 6101 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.virtual_column)= (Virtual_column_info*) 0; }
#line 26539 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 698:
#line 6102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.virtual_column)= (yyvsp[0].virtual_column);}
#line 26545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 699:
#line 6107 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Virtual_column_info *v=
              add_virtual_expression(thd, (yyvsp[-1].item));
            if (!v)
            {
              MYSQL_YYABORT;
            }
            (yyval.virtual_column)= v;
          }
#line 26559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 700:
#line 6119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 701:
#line 6120 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 702:
#line 6124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 26577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 703:
#line 6125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 26583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 704:
#line 6129 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 26589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 705:
#line 6134 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Create_field *f= new (thd->mem_root) Create_field();

            if (check_string_char_length(&(yyvsp[0].lex_str), 0, NAME_CHAR_LEN,
                                         system_charset_info, 1))
              my_yyabort_error((ER_TOO_LONG_IDENT, MYF(0), (yyvsp[0].lex_str).str));

            if (!f)
              MYSQL_YYABORT;

            lex->init_last_field(f, (yyvsp[0].lex_str).str, NULL);
            (yyval.create_field)= f;
          }
#line 26608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 706:
#line 6149 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            (yyval.create_field)= (yyvsp[-2].create_field);

            (yyval.create_field)->check_constraint= (yyvsp[0].virtual_column);

            if ((yyval.create_field)->check(thd))
              MYSQL_YYABORT;

            lex->alter_info.create_list.push_back((yyval.create_field), thd->mem_root);

            (yyval.create_field)->create_if_not_exists= Lex->check_exists;
            if ((yyval.create_field)->flags & PRI_KEY_FLAG)
              add_key_to_list(lex, &(yyvsp[-3].lex_str), Key::PRIMARY, Lex->check_exists);
            else if ((yyval.create_field)->flags & UNIQUE_KEY_FLAG)
              add_key_to_list(lex, &(yyvsp[-3].lex_str), Key::UNIQUE, Lex->check_exists);
          }
#line 26630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 707:
#line 6169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->set_last_field_type((yyvsp[0].Lex_field_type)); }
#line 26636 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 709:
#line 6171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_field_type_st type;
            type.set(MYSQL_TYPE_LONGLONG);
            Lex->set_last_field_type(type);
            Lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG
                                     | UNSIGNED_FLAG | UNIQUE_KEY_FLAG;
          }
#line 26648 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 711:
#line 6182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26654 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 712:
#line 6183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 713:
#line 6187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 716:
#line 6195 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->last_field->vcol_info= (yyvsp[0].virtual_column);
           Lex->last_field->flags&= ~NOT_NULL_FLAG; // undo automatic NOT NULL for timestamps
         }
#line 26675 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 718:
#line 6203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26681 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 719:
#line 6204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 720:
#line 6209 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
#line 26695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 721:
#line 6213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
#line 26703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 722:
#line 6217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(TRUE);
          }
#line 26711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 723:
#line 6221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(TRUE);
          }
#line 26719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 724:
#line 6227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 725:
#line 6228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 726:
#line 6232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26737 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 728:
#line 6238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 26747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 729:
#line 6244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 26757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 730:
#line 6249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->comment= (yyvsp[0].lex_str); }
#line 26763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 731:
#line 6254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            MYSQL_YYABORT_UNLESS(Lex->parse_vcol_expr);
          }
#line 26776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 732:
#line 6263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Virtual_column_info *v= add_virtual_expression(thd, (yyvsp[0].item));
            if (!v)
              MYSQL_YYABORT;
            Lex->last_field->vcol_info= v;
          }
#line 26787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 733:
#line 6273 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect(thd, (yyvsp[0].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 26797 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 735:
#line 6280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[0].item_list)->push_front((yyvsp[-2].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[0].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 26808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 736:
#line 6290 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Virtual_column_info *v=
              add_virtual_expression(thd, (yyvsp[-1].item));
            if (!v)
            {
              MYSQL_YYABORT;
            }
            (yyval.virtual_column)= v;
          }
#line 26822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 740:
#line 6306 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.virtual_column)= add_virtual_expression(thd, (yyvsp[0].item))))
              MYSQL_YYABORT;
          }
#line 26831 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 741:
#line 6313 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set((yyvsp[-2].field_type), (yyvsp[-1].simple_string)); }
#line 26837 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 742:
#line 6314 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set((yyvsp[-2].field_type), (yyvsp[-1].Lex_length_and_dec)); }
#line 26843 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 743:
#line 6316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_FLOAT, (yyvsp[-1].Lex_length_and_dec));
            if ((yyvsp[-1].Lex_length_and_dec).length() && !(yyvsp[-1].Lex_length_and_dec).dec())
            {
              int err;
              ulonglong tmp_length= my_strtoll10((yyvsp[-1].Lex_length_and_dec).length(), NULL, &err);
              if (err || tmp_length > PRECISION_FOR_DOUBLE)
                my_yyabort_error((ER_WRONG_FIELD_SPEC, MYF(0),
                                  Lex->last_field->field_name));
              if (tmp_length > PRECISION_FOR_FLOAT)
                (yyval.Lex_field_type).set(MYSQL_TYPE_DOUBLE);
              else
                (yyval.Lex_field_type).set(MYSQL_TYPE_FLOAT);
            }
          }
#line 26863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 744:
#line 6332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_BIT, (yyvsp[0].simple_string));
          }
#line 26871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 745:
#line 6336 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY, "1");
          }
#line 26879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 746:
#line 6340 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY, "1");
          }
#line 26887 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 747:
#line 6344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[-1].simple_string));
          }
#line 26895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 748:
#line 6348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[-1].simple_string));
            bincmp_collation(national_charset_info, (yyvsp[0].num));
          }
#line 26904 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 749:
#line 6353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[0].simple_string));
          }
#line 26913 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 750:
#line 6358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[-1].simple_string));
          }
#line 26921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 751:
#line 6362 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[-1].simple_string));
            bincmp_collation(national_charset_info, (yyvsp[0].num));
          }
#line 26930 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 752:
#line 6367 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[0].simple_string));
          }
#line 26939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 753:
#line 6372 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].simple_string))
            {
              errno= 0;
              ulong length= strtoul((yyvsp[-1].simple_string), NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER_THD(thd, ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.Lex_field_type).set(MYSQL_TYPE_YEAR, (yyvsp[-1].simple_string));
          }
#line 26961 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 754:
#line 6390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_DATE); }
#line 26967 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 755:
#line 6392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                   MYSQL_TYPE_TIME2 : MYSQL_TYPE_TIME, (yyvsp[0].simple_string)); }
#line 26974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 756:
#line 6395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                     MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME, (yyvsp[0].simple_string));
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                Unless --explicit-defaults-for-timestamp is given.
              */
              if (!opt_explicit_defaults_for_timestamp)
                Lex->last_field->flags|= NOT_NULL_FLAG;
              (yyval.Lex_field_type).set(opt_mysql56_temporal_format ? MYSQL_TYPE_TIMESTAMP2
                                                 : MYSQL_TYPE_TIMESTAMP, (yyvsp[0].simple_string));
            }
          }
#line 26995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 757:
#line 6412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                   MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME, (yyvsp[0].simple_string)); }
#line 27002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 758:
#line 6415 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY_BLOB);
          }
#line 27011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 759:
#line 6420 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_BLOB, (yyvsp[0].simple_string));
          }
#line 27020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 760:
#line 6425 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->last_field->geom_type= (yyvsp[-2].geom_type);
            (yyval.Lex_field_type).set(MYSQL_TYPE_GEOMETRY, (yyvsp[-1].Lex_length_and_dec));
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 27035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 761:
#line 6436 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB);
          }
#line 27044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 762:
#line 6441 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_LONG_BLOB);
          }
#line 27053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 763:
#line 6446 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB);
          }
#line 27062 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 764:
#line 6451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
#line 27068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 765:
#line 6453 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_TINY_BLOB); }
#line 27074 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 766:
#line 6455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_BLOB, (yyvsp[-1].simple_string)); }
#line 27080 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 767:
#line 6457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
#line 27086 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 768:
#line 6459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_LONG_BLOB); }
#line 27092 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 769:
#line 6461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[-1].Lex_length_and_dec));}
#line 27098 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 770:
#line 6463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[-1].Lex_length_and_dec));}
#line 27104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 771:
#line 6465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[-1].Lex_length_and_dec));}
#line 27110 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 772:
#line 6467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_ENUM); }
#line 27116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 773:
#line 6469 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_SET); }
#line 27122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 774:
#line 6471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
#line 27128 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 775:
#line 6473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset= &my_charset_utf8mb4_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_LONG_BLOB);
          }
#line 27137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 776:
#line 6480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_GEOMETRY; }
#line 27143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 777:
#line 6481 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_GEOMETRYCOLLECTION; }
#line 27149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 778:
#line 6482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_POINT; }
#line 27155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 779:
#line 6483 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTIPOINT; }
#line 27161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 780:
#line 6484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_LINESTRING; }
#line 27167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 781:
#line 6485 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTILINESTRING; }
#line 27173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 782:
#line 6486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_POLYGON; }
#line 27179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 783:
#line 6487 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTIPOLYGON; }
#line 27185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 784:
#line 6491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 785:
#line 6495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 786:
#line 6496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 787:
#line 6500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 788:
#line 6501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 789:
#line 6505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 790:
#line 6506 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 791:
#line 6507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 792:
#line 6508 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27239 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 793:
#line 6509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 794:
#line 6513 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_LONG; }
#line 27251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 795:
#line 6514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_TINY; }
#line 27257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 796:
#line 6515 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_SHORT; }
#line 27263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 797:
#line 6516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_INT24; }
#line 27269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 798:
#line 6517 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_LONGLONG; }
#line 27275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 799:
#line 6522 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
#line 27284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 800:
#line 6527 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
#line 27290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 801:
#line 6529 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
#line 27296 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 802:
#line 6534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->srid= 0; }
#line 27302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 803:
#line 6537 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->srid=atoi((yyvsp[0].lex_str).str);
          }
#line 27310 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 804:
#line 6543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec).set(0, 0);  }
#line 27316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 805:
#line 6544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec).set((yyvsp[0].simple_string), 0); }
#line 27322 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 806:
#line 6545 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec)= (yyvsp[0].Lex_length_and_dec); }
#line 27328 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 807:
#line 6549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec).set((yyvsp[-3].lex_str).str, (yyvsp[-1].lex_str).str); }
#line 27334 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 808:
#line 6553 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 809:
#line 6554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 810:
#line 6555 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG;}
#line 27352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 811:
#line 6556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
#line 27358 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 812:
#line 6557 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
#line 27364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 813:
#line 6558 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
#line 27370 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 814:
#line 6562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[-1].lex_str).str; }
#line 27376 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 815:
#line 6563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[-1].lex_str).str; }
#line 27382 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 816:
#line 6564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[-1].lex_str).str; }
#line 27388 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 817:
#line 6565 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[-1].lex_str).str; }
#line 27394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 818:
#line 6569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (char*) 0; /* use default length */ }
#line 27400 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 819:
#line 6570 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[0].simple_string); }
#line 27406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 820:
#line 6574 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (char*) "1"; }
#line 27412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 821:
#line 6575 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[0].simple_string); }
#line 27418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 822:
#line 6579 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec).set(0, 0); }
#line 27424 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 823:
#line 6580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec)= (yyvsp[0].Lex_length_and_dec); }
#line 27430 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 824:
#line 6584 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27436 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 825:
#line 6585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 826:
#line 6589 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 828:
#line 6594 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags&= ~ NOT_NULL_FLAG; }
#line 27454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 829:
#line 6595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->default_value= (yyvsp[0].virtual_column); }
#line 27460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 830:
#line 6597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->last_field->on_update= item;
          }
#line 27471 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 831:
#line 6603 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
#line 27477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 832:
#line 6605 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex=Lex;
            lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 27487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 833:
#line 6611 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[0].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[0].charset)->name,Lex->charset->csname));
            Lex->last_field->charset= (yyvsp[0].charset);
          }
#line 27498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 835:
#line 6621 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= NOT_NULL_FLAG; }
#line 27504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 836:
#line 6623 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 27514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 838:
#line 6630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
#line 27526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 839:
#line 6638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
#line 27538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 840:
#line 6646 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->last_field->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 27548 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 841:
#line 6652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->last_field->option_list, &Lex->option_list_last);
          }
#line 27557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 842:
#line 6661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.Lex_field_type)= (yyvsp[-1].Lex_field_type);

          if ((yyvsp[0].charset))
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[0].charset))))
              MYSQL_YYABORT;
          }
          Lex->set_last_field_type((yyvsp[-1].Lex_field_type));
        }
#line 27572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 843:
#line 6674 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27578 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 844:
#line 6675 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27584 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 845:
#line 6680 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[0].lex_str).str,MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 27593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 846:
#line 6684 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_bin; }
#line 27599 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 847:
#line 6688 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset);   }
#line 27605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 848:
#line 6689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 27611 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 849:
#line 6693 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= NULL; }
#line 27617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 850:
#line 6694 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= (yyvsp[0].charset); }
#line 27623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 851:
#line 6699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[0].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[0].lex_str).str)))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 27633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 852:
#line 6704 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_bin; }
#line 27639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 853:
#line 6708 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset);   }
#line 27645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 854:
#line 6709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 27651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 855:
#line 6714 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[0].lex_str).str)))
              MYSQL_YYABORT;
          }
#line 27660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 856:
#line 6721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 27666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 857:
#line 6722 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset); }
#line 27672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 858:
#line 6726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset); }
#line 27678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 859:
#line 6727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 27684 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 860:
#line 6731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27690 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 861:
#line 6732 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 862:
#line 6736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= (yyvsp[0].charset); }
#line 27702 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 863:
#line 6737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_latin1; }
#line 27708 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 864:
#line 6739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)= get_charset_by_csname("ucs2", MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2"));
          }
#line 27717 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 865:
#line 6746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(NULL, false); }
#line 27723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 866:
#line 6747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(&my_charset_bin, false); }
#line 27729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 867:
#line 6748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation((yyvsp[-1].charset), (yyvsp[0].num)); }
#line 27735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 868:
#line 6749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(NULL, true); }
#line 27741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 869:
#line 6750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation((yyvsp[0].charset), true); }
#line 27747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 870:
#line 6754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 27753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 871:
#line 6755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= true; }
#line 27759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 872:
#line 6760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          if ((yyvsp[0].ulong_num) == 0)
          {
            my_parse_error(thd, ER_SYNTAX_ERROR);
            MYSQL_YYABORT;
          }
        }
#line 27771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 873:
#line 6768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[-2].ulong_num); }
#line 27777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 874:
#line 6772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 27783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 875:
#line 6773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
#line 27789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 876:
#line 6777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
#line 27795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 877:
#line 6780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 27801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 878:
#line 6781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 27807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 879:
#line 6782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[-1].ulong_num) | (yyvsp[0].ulong_num); }
#line 27813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 880:
#line 6783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num) ; }
#line 27819 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 881:
#line 6788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.ulong_num)= (yyvsp[0].ulong_num) < 1 ? 1 : ((yyvsp[0].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[0].ulong_num));
          (yyval.ulong_num)--;
        }
#line 27828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 882:
#line 6796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.ulong_num)= (1 | (yyvsp[0].ulong_num)) << (yyvsp[-1].ulong_num);
        }
#line 27836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 883:
#line 6802 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 27842 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 884:
#line 6803 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)|= (yyvsp[0].ulong_num); }
#line 27848 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 885:
#line 6808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          uint start= (yyvsp[-2].ulong_num);
          uint end= (yyvsp[0].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
#line 27859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 886:
#line 6817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 27865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 887:
#line 6818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 27871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 888:
#line 6822 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 27877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 889:
#line 6823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 27883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 892:
#line 6837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)=(yyvsp[-3].table);
          }
#line 27891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 893:
#line 6844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ref_list.empty(); }
#line 27897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 895:
#line 6850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key, thd->mem_root);
          }
#line 27908 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 896:
#line 6857 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key, thd->mem_root);
          }
#line 27921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 897:
#line 6869 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
#line 27927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 898:
#line 6871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
#line 27933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 899:
#line 6873 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
#line 27939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 900:
#line 6875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
#line 27945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 901:
#line 6880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= FK_OPTION_UNDEF;
            lex->fk_delete_opt= FK_OPTION_UNDEF;
          }
#line 27955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 902:
#line 6886 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[0].m_fk_option);
            lex->fk_delete_opt= FK_OPTION_UNDEF;
          }
#line 27965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 903:
#line 6892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[0].m_fk_option);
          }
#line 27975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 904:
#line 6899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[-3].m_fk_option);
            lex->fk_delete_opt= (yyvsp[0].m_fk_option);
          }
#line 27985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 905:
#line 6906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[0].m_fk_option);
            lex->fk_delete_opt= (yyvsp[-3].m_fk_option);
          }
#line 27995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 906:
#line 6914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_RESTRICT; }
#line 28001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 907:
#line 6915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_CASCADE; }
#line 28007 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 908:
#line 6916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_SET_NULL; }
#line 28013 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 909:
#line 6917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_NO_ACTION; }
#line 28019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 910:
#line 6918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_SET_DEFAULT; }
#line 28025 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 911:
#line 6922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::PRIMARY; }
#line 28031 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 912:
#line 6923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::UNIQUE; }
#line 28037 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 913:
#line 6927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 914:
#line 6928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28049 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 915:
#line 6932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28055 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 917:
#line 6937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 918:
#line 6938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 919:
#line 6939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 920:
#line 6943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::MULTIPLE; }
#line 28079 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 921:
#line 6944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::UNIQUE; }
#line 28085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 922:
#line 6948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::FULLTEXT;}
#line 28091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 923:
#line 6953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 28104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 924:
#line 6964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28110 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 925:
#line 6965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 28116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 926:
#line 6969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 927:
#line 6970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 28128 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 928:
#line 6974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28134 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 929:
#line 6975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 28140 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 936:
#line 6994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
#line 28146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 937:
#line 6995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 28152 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 938:
#line 7000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
#line 28158 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 939:
#line 7001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 28164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 940:
#line 7002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 28170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 941:
#line 7007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.algorithm= (yyvsp[0].key_alg); }
#line 28176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 942:
#line 7009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.algorithm= (yyvsp[0].key_alg); }
#line 28182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 943:
#line 7014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.block_size= (yyvsp[0].ulong_num); }
#line 28188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 944:
#line 7016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.comment= (yyvsp[0].lex_str); }
#line 28194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 945:
#line 7018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 28206 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 946:
#line 7026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 28218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 947:
#line 7034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 28228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 948:
#line 7040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
#line 28237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 953:
#line 7058 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (plugin_is_ready(&(yyvsp[0].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->last_key->key_create_info.parser_name= (yyvsp[0].lex_str);
            else
              my_yyabort_error((ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 28248 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 954:
#line 7067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
#line 28254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 955:
#line 7068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
#line 28260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 956:
#line 7069 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
#line 28266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 957:
#line 7074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_key->columns.push_back((yyvsp[-1].key_part), thd->mem_root);
          }
#line 28274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 958:
#line 7078 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_key->columns.push_back((yyvsp[-1].key_part), thd->mem_root);
          }
#line 28282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 959:
#line 7085 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
#line 28292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 960:
#line 7091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int key_part_len= atoi((yyvsp[-1].lex_str).str);
            if (!key_part_len)
              my_yyabort_error((ER_KEY_PART_0, MYF(0), (yyvsp[-3].lex_str).str));
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[-3].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
#line 28305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 961:
#line 7102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 28311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 962:
#line 7103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 28317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 963:
#line 7107 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 28323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 964:
#line 7108 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 28329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 965:
#line 7113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->interval_list.push_back((yyvsp[0].string), thd->mem_root); }
#line 28335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 966:
#line 7115 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->interval_list.push_back((yyvsp[0].string), thd->mem_root); }
#line 28341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 967:
#line 7124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->name= null_lex_str;
            Lex->only_view= FALSE;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->select_lex.init_order();
            Lex->create_info.init();
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
#line 28359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 968:
#line 7138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
#line 28373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 969:
#line 7148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
#line 28387 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 970:
#line 7158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
#line 28396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 971:
#line 7163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[-2].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
#line 28409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 972:
#line 7172 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "DATABASE"));
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[-4].lex_str);
          }
#line 28421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 973:
#line 7180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 28433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 974:
#line 7188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[-2].spname);
          }
#line 28444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 975:
#line 7195 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 28456 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 976:
#line 7203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[-2].spname);
          }
#line 28467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 977:
#line 7210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_mode= VIEW_ALTER;
          }
#line 28479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 978:
#line 7218 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 979:
#line 7225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_algorithm= VIEW_ALGORITHM_INHERIT;
            lex->create_view_mode= VIEW_ALTER;
          }
#line 28498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 980:
#line 7234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 981:
#line 7236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[0].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_begin= (yyvsp[-2].simple_string);
          }
#line 28525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 982:
#line 7257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyvsp[-4].num) || (yyvsp[-3].num) || (yyvsp[-2].num) || (yyvsp[-1].num) || (yyvsp[0].num)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_end= (char*)YYLIP->get_cpp_ptr();
          }
#line 28543 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 983:
#line 7271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
#line 28552 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 984:
#line 7276 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
#line 28561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 985:
#line 7281 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
#line 28570 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 986:
#line 7286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
#line 28579 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 987:
#line 7291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 28589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 988:
#line 7295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 28595 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 989:
#line 7299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.set((yyvsp[-4].object_ddl_options));
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
#line 28604 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 990:
#line 7306 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 28610 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 991:
#line 7307 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 28616 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 992:
#line 7308 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 28622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 993:
#line 7309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 28628 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 994:
#line 7313 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 28634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 995:
#line 7315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[0].spname); 
            (yyval.num)= 1;
          }
#line 28647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 996:
#line 7326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 28653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 997:
#line 7327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 28659 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 998:
#line 7331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 28665 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 999:
#line 7332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 28671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1001:
#line 7338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 28683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1002:
#line 7346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 28695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1008:
#line 7368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
            DBUG_ASSERT(!Lex->if_exists());
            Lex->create_info.add((yyvsp[-1].object_ddl_options));
          }
#line 28705 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1009:
#line 7375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[-1].num);
          }
#line 28715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1010:
#line 7382 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 28730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1012:
#line 7395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
#line 28745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1013:
#line 7406 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 28759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1015:
#line 7418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 28774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1017:
#line 7430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->alter_info.num_parts= (yyvsp[0].ulong_num);
          }
#line 28785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1018:
#line 7437 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 28799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1020:
#line 7449 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[-1].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[-1].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 28826 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1021:
#line 7475 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
#line 28834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1022:
#line 7482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
#line 28842 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1024:
#line 7491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            DBUG_ASSERT(!Lex->create_info.if_not_exists());
            lex->create_info.set((yyvsp[-1].object_ddl_options));
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 28860 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1025:
#line 7505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28866 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1027:
#line 7511 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
#line 28875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1028:
#line 7516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->part_info->num_parts= (yyvsp[0].ulong_num);
          }
#line 28883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1029:
#line 7523 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 28898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1031:
#line 7538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
#line 28906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1032:
#line 7542 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
#line 28914 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1033:
#line 7546 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
#line 28923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1034:
#line 7553 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1035:
#line 7554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1036:
#line 7559 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[0].lex_str).str,
                                                          thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
#line 28948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1039:
#line 7580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
#line 28957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1040:
#line 7588 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[-1].create_field)->after= (yyvsp[0].const_simple_string);
          }
#line 28966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1041:
#line 7593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 28975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1042:
#line 7598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
#line 28984 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1043:
#line 7603 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_CHECK_CONSTRAINT;
	  }
#line 28992 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1044:
#line 7607 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->alter_info.flags|= Alter_info::ALTER_ADD_CHECK_CONSTRAINT;
           Lex->add_constraint(&(yyvsp[-1].lex_str), (yyvsp[0].virtual_column), TRUE);
         }
#line 29001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1045:
#line 7613 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= (Alter_info::ALTER_CHANGE_COLUMN |
                                     Alter_info::ALTER_RENAME_COLUMN);
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[-1].create_field)->change= (yyvsp[-2].lex_str).str;
            (yyvsp[-1].create_field)->after= (yyvsp[0].const_simple_string);
          }
#line 29013 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1046:
#line 7622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[-1].create_field)->change= (yyvsp[-1].create_field)->field_name;
            (yyvsp[-1].create_field)->after= (yyvsp[0].const_simple_string);
          }
#line 29024 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1047:
#line 7629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::COLUMN, (yyvsp[-1].lex_str).str, (yyvsp[-2].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
#line 29038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1048:
#line 7639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::CHECK_CONSTRAINT,
                                        (yyvsp[0].lex_str).str, (yyvsp[-1].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_CHECK_CONSTRAINT;
          }
#line 29053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1049:
#line 7650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[0].lex_str).str, (yyvsp[-1].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
#line 29067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1050:
#line 7660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, primary_key_name,
                                        FALSE));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
#line 29082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1051:
#line 7671 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[0].lex_str).str, (yyvsp[-1].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
#line 29096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1052:
#line 7681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
#line 29106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1053:
#line 7687 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
#line 29116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1054:
#line 7693 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_column *ac= new (thd->mem_root) Alter_column((yyvsp[-3].lex_str).str,(yyvsp[0].virtual_column));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
#line 29129 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1055:
#line 7702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_column *ac= (new (thd->mem_root)
                               Alter_column((yyvsp[-2].lex_str).str, (Virtual_column_info*) 0));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
#line 29143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1056:
#line 7712 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[0].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[0].table)->table.str,(yyvsp[0].table)->table.length, FALSE) ||
                ((yyvsp[0].table)->db.str && check_db_name(&(yyvsp[0].table)->db)))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[0].table)->table.str));
            lex->name= (yyvsp[0].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
#line 29163 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1057:
#line 7728 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(yyvsp[-1].charset))
            {
              (yyvsp[-1].charset)= thd->variables.collation_database;
            }
            (yyvsp[0].charset)= (yyvsp[0].charset) ? (yyvsp[0].charset) : (yyvsp[-1].charset);
            if (!my_charset_same((yyvsp[-1].charset),(yyvsp[0].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[0].charset)->name, (yyvsp[-1].charset)->csname));
            if (Lex->create_info.add_alter_list_item_convert_to_charset((yyvsp[0].charset)))
              MYSQL_YYABORT;
            Lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
#line 29181 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1058:
#line 7742 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
#line 29190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1059:
#line 7747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
#line 29198 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1060:
#line 7751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
#line 29207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1068:
#line 7769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
#line 29216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1069:
#line 7774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 29225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1070:
#line 7782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
#line 29234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1071:
#line 7787 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 29243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1072:
#line 7794 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29249 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1073:
#line 7795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1074:
#line 7799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 0;}
#line 29261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1075:
#line 7800 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1;}
#line 29267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1076:
#line 7804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 0;}
#line 29273 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1082:
#line 7818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1;}
#line 29279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1083:
#line 7820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
#line 29288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1084:
#line 7828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_DEFAULT; }
#line 29294 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1085:
#line 7829 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_RESTRICT; }
#line 29300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1086:
#line 7830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_CASCADE; }
#line 29306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1087:
#line 7834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.const_simple_string)= NULL; }
#line 29312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1088:
#line 7836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.const_simple_string)= (yyvsp[0].lex_str).str;
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
#line 29321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1089:
#line 7841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.const_simple_string)= first_keyword;
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
#line 29330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1090:
#line 7848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1091:
#line 7849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1092:
#line 7850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1093:
#line 7851 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1094:
#line 7856 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
#line 29365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1095:
#line 7863 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1096:
#line 7865 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
            /* If you change this code don't forget to update STOP SLAVE too */
          }
#line 29382 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1097:
#line 7871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29388 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1098:
#line 7873 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
#line 29399 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1099:
#line 7880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
#line 29410 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1100:
#line 7890 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[0].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[0].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[0].num);
          }
#line 29427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1101:
#line 7906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= 0;
          }
#line 29435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1102:
#line 7910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[0].num);
          }
#line 29443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1103:
#line 7917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[0].num);
          }
#line 29451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1104:
#line 7921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[-2].num) | (yyvsp[0].num);
          }
#line 29459 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1105:
#line 7928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
#line 29467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1106:
#line 7932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
#line 29475 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1107:
#line 7936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
#line 29483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1108:
#line 7942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt= 0; }
#line 29489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1109:
#line 7944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1112:
#line 7953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29501 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1113:
#line 7954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt|=SLAVE_SQL; }
#line 29507 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1114:
#line 7955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt|=SLAVE_IO; }
#line 29513 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1115:
#line 7959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29519 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1116:
#line 7961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
               my_yyabort_error((ER_BAD_SLAVE_UNTIL_COND, MYF(0)));
          }
#line 29532 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1117:
#line 7970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.gtid_pos_str = (yyvsp[0].lex_str);
          }
#line 29540 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1120:
#line 7982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 29551 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1121:
#line 7989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1122:
#line 7993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= 0; }
#line 29563 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1123:
#line 7994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= T_QUICK; }
#line 29569 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1124:
#line 7995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= T_EXTEND; }
#line 29575 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1126:
#line 8000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->only_view= TRUE; }
#line 29581 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1128:
#line 8005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[0].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 29595 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1129:
#line 8015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 29607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1130:
#line 8025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags = T_MEDIUM; }
#line 29613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1131:
#line 8026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29619 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1132:
#line 8030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29625 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1133:
#line 8031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29631 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1134:
#line 8035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_QUICK; }
#line 29637 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1135:
#line 8036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_EXTEND; }
#line 29643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1136:
#line 8037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
#line 29649 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1137:
#line 8041 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 29655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1138:
#line 8042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FROM_MYSQL; }
#line 29661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1139:
#line 8047 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 29675 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1140:
#line 8057 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 29687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1144:
#line 8077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1145:
#line 8079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
#line 29701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1146:
#line 8086 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1147:
#line 8088 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1148:
#line 8092 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1149:
#line 8094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX* lex= thd->lex;
            lex->column_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
#line 29730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1151:
#line 8105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1152:
#line 8107 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX* lex= thd->lex;
            lex->index_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
#line 29747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1154:
#line 8119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1155:
#line 8121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
#line 29762 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1156:
#line 8126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
#line 29771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1157:
#line 8134 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1160:
#line 8141 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->index_list->push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
          }
#line 29787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1161:
#line 8148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back((LEX_STRING*)
                                        thd->memdup(&str, sizeof(LEX_STRING)),
                                        thd->mem_root);
          }
#line 29798 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1162:
#line 8158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[0].lex_str);
            Lex->ident.str=    NULL;
            Lex->ident.length= 0;
          }
#line 29809 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1163:
#line 8166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[-3].lex_str);
            Lex->ident=   (yyvsp[0].lex_str);
          }
#line 29819 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1165:
#line 8175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->only_view= TRUE; }
#line 29825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1167:
#line 8179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 29839 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1168:
#line 8189 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "CHECK"));
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 29853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1169:
#line 8201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags = T_MEDIUM; }
#line 29859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1170:
#line 8202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1171:
#line 8206 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1172:
#line 8207 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1173:
#line 8211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_QUICK; }
#line 29883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1174:
#line 8212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_FAST; }
#line 29889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1175:
#line 8213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_MEDIUM; }
#line 29895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1176:
#line 8214 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_EXTEND; }
#line 29901 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1177:
#line 8215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
#line 29907 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1178:
#line 8216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
#line 29913 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1179:
#line 8220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 29919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1180:
#line 8221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
#line 29925 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1181:
#line 8226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 29939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1182:
#line 8236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 29951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1183:
#line 8246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 29957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1184:
#line 8247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 29963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1185:
#line 8248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 29969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1186:
#line 8253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
#line 29977 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1187:
#line 8257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29983 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1188:
#line 8259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
#line 29991 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1189:
#line 8266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[-2].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 30001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1190:
#line 8272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[-2].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 30011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1193:
#line 8286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(thd, (yyvsp[-2].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(thd, (yyvsp[0].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
#line 30025 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1194:
#line 8299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.reset();
          }
#line 30033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1195:
#line 8303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 30043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1200:
#line 8322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 30054 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1201:
#line 8332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 30065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1202:
#line 8341 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 30071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1203:
#line 8342 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str) = default_key_cache_base; }
#line 30077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1204:
#line 8347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
#line 30087 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1205:
#line 8353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1210:
#line 8368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), NULL, (yyvsp[0].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 30104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1211:
#line 8378 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-3].table), NULL, (yyvsp[0].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 30115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1212:
#line 8388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
#line 30123 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1214:
#line 8395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
#line 30133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1216:
#line 8404 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 30139 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1218:
#line 8410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 30145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1219:
#line 8411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
#line 30151 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1220:
#line 8421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->current_select->set_with_clause((yyvsp[-1].with_clause));
          }
#line 30161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1229:
#line 8443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
#line 30173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1230:
#line 8452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
#line 30181 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1232:
#line 8459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
#line 30193 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1233:
#line 8468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
#line 30201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1235:
#line 8475 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
#line 30213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1236:
#line 8484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
#line 30221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1238:
#line 8492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(true);
          }
#line 30229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1239:
#line 8500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->current_select->braces);
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
#line 30238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1240:
#line 8504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-1].select_lex); }
#line 30244 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1241:
#line 8510 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
#line 30253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1243:
#line 8517 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
#line 30262 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1244:
#line 8527 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
#line 30271 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1246:
#line 8534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
#line 30280 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1247:
#line 8543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(false);
          }
#line 30288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1248:
#line 8547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(false);
          }
#line 30296 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1250:
#line 8552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(false);
          }
#line 30304 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1251:
#line 8556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(false);
          }
#line 30312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1267:
#line 8596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 30324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1268:
#line 8604 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 30332 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1273:
#line 8632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
#line 30342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1276:
#line 8647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT"));
          }
#line 30351 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1280:
#line 8661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE"));

            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
#line 30372 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1281:
#line 8678 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE"));

            Lex->safe_to_cache_query=1;
            Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
          }
#line 30393 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1283:
#line 8699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_WRITE;
            lex->current_select->set_lock_for_tables(TL_WRITE, false);
            lex->safe_to_cache_query=0;
          }
#line 30404 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1284:
#line 8706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_READ_WITH_SHARED_LOCKS;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS, false);
            lex->safe_to_cache_query=0;
          }
#line 30416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1287:
#line 8719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root)
                          Item_field(thd, &thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
#line 30431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1288:
#line 8733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_item_to_list(thd, (yyvsp[-1].item)))
              MYSQL_YYABORT;
          }
#line 30440 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1289:
#line 8738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT((yyvsp[-3].simple_string) < (yyvsp[-1].simple_string));

            if (add_item_to_list(thd, (yyvsp[-2].item)))
              MYSQL_YYABORT;
            if ((yyvsp[0].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[0].lex_str).str))
                my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[0].lex_str).str));
              (yyvsp[-2].item)->is_autogenerated_name= FALSE;
              (yyvsp[-2].item)->set_name(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[-2].item)->name)
            {
              (yyvsp[-2].item)->set_name(thd, (yyvsp[-3].simple_string), (uint) ((yyvsp[-1].simple_string) - (yyvsp[-3].simple_string)), thd->charset());
            }
          }
#line 30463 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1290:
#line 8759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_tok_start();
          }
#line 30471 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1291:
#line 8765 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_tok_end();
          }
#line 30479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1292:
#line 8771 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
#line 30487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1293:
#line 8777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
#line 30495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1294:
#line 8783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=null_lex_str;}
#line 30501 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1295:
#line 8784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 30507 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1296:
#line 8785 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 30513 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1297:
#line 8786 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 30519 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1298:
#line 8787 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 30525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1299:
#line 8791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= NOT_FIXED_DEC;  }
#line 30531 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1300:
#line 8792 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= NOT_FIXED_DEC;  }
#line 30537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1301:
#line 8793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].ulong_num); }
#line 30543 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1302:
#line 8797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;  }
#line 30549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1303:
#line 8798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;  }
#line 30555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1304:
#line 8799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].ulong_num); }
#line 30561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1305:
#line 8803 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1306:
#line 8804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30573 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1307:
#line 8810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[-2].item)))
            {
              item1= (Item_cond_or*) (yyvsp[-2].item);
              if (is_cond_or((yyvsp[0].item)))
              {
                item3= (Item_cond_or*) (yyvsp[0].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[0].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[0].item), thd->mem_root);
                (yyval.item) = (yyvsp[-2].item);
              }
            }
            else if (is_cond_or((yyvsp[0].item)))
            {
              item3= (Item_cond_or*) (yyvsp[0].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[-2].item), thd->mem_root);
              (yyval.item) = (yyvsp[0].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item)= new (thd->mem_root) Item_cond_or(thd, (yyvsp[-2].item), (yyvsp[0].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 30628 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1308:
#line 8861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* XOR is a proprietary extension */
            (yyval.item)= new (thd->mem_root) Item_func_xor(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1309:
#line 8868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[-2].item)))
            {
              item1= (Item_cond_and*) (yyvsp[-2].item);
              if (is_cond_and((yyvsp[0].item)))
              {
                item3= (Item_cond_and*) (yyvsp[0].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[0].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[0].item), thd->mem_root);
                (yyval.item) = (yyvsp[-2].item);
              }
            }
            else if (is_cond_and((yyvsp[0].item)))
            {
              item3= (Item_cond_and*) (yyvsp[0].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[-2].item), thd->mem_root);
              (yyval.item) = (yyvsp[0].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item)= new (thd->mem_root) Item_cond_and(thd, (yyvsp[-2].item), (yyvsp[0].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 30686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1310:
#line 8911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= negate_expression(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1311:
#line 8917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30706 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1312:
#line 8923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1313:
#line 8929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1314:
#line 8935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1315:
#line 8941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1316:
#line 8947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30756 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1318:
#line 8957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1319:
#line 8963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1320:
#line 8969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1321:
#line 8975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (*(yyvsp[-1].boolfunc2creator))(0)->create(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1322:
#line 8981 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= all_any_subquery_creator(thd, (yyvsp[-5].item), (yyvsp[-4].boolfunc2creator), (yyvsp[-3].num), (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30806 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1324:
#line 8991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[-4].item), (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30816 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1325:
#line 8997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[-5].item), (yyvsp[-1].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1326:
#line 9006 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[-4].item), true, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30839 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1327:
#line 9012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-6].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_func_in(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30851 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1328:
#line 9020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[-5].item), false, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1329:
#line 9026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-7].item), thd->mem_root);
            Item_func_in *item= new (thd->mem_root) Item_func_in(thd, *(yyvsp[-1].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
#line 30874 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1330:
#line 9035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_between(thd, (yyvsp[-4].item), (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30884 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1331:
#line 9041 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
#line 30896 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1332:
#line 9049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item1= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[-3].item));
            Item *item4= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[0].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(thd, item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30910 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1333:
#line 9059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_like(thd, (yyvsp[-3].item), (yyvsp[-1].item), (yyvsp[0].item),
                                                   Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1334:
#line 9066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_like(thd, (yyvsp[-4].item), (yyvsp[-1].item), (yyvsp[0].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
#line 30933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1335:
#line 9074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1336:
#line 9080 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_regex(thd, (yyvsp[-3].item), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30956 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1338:
#line 9093 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1339:
#line 9099 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1340:
#line 9105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1341:
#line 9111 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1342:
#line 9117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1343:
#line 9123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1344:
#line 9129 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-4].item), (yyvsp[-1].item), (yyvsp[0].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1345:
#line 9135 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-4].item), (yyvsp[-1].item), (yyvsp[0].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1346:
#line 9141 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1347:
#line 9147 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_div(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1348:
#line 9153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1349:
#line 9159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31076 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1350:
#line 9165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31086 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1351:
#line 9171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1361:
#line 9200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
#line 31102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1362:
#line 9201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
#line 31108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1363:
#line 9202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
#line 31114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1364:
#line 9203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_le_creator; }
#line 31120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1365:
#line 9204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
#line 31126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1366:
#line 9205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
#line 31132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1367:
#line 9209 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 31138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1368:
#line 9210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1369:
#line 9215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_NULL); /* automatic type */
            Lex->charset= NULL;
	  }
#line 31153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1370:
#line 9219 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type)= (yyvsp[0].Lex_dyncol_type); }
#line 31159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1371:
#line 9223 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type)= (yyvsp[0].Lex_dyncol_type); Lex->charset= NULL; }
#line 31165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1372:
#line 9224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type)= (yyvsp[0].Lex_dyncol_type); Lex->charset= NULL; }
#line 31171 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1373:
#line 9225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type)= (yyvsp[0].Lex_dyncol_type); }
#line 31177 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1374:
#line 9229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_INT); }
#line 31183 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1375:
#line 9230 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_UINT);  }
#line 31189 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1376:
#line 9231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE);  }
#line 31195 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1377:
#line 9232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE); }
#line 31201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1378:
#line 9233 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE); }
#line 31207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1379:
#line 9234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DECIMAL, (yyvsp[0].Lex_length_and_dec)); }
#line 31213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1380:
#line 9238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DATE); }
#line 31219 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1381:
#line 9239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_TIME, 0, (yyvsp[0].simple_string)); }
#line 31225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1382:
#line 9240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DATETIME, 0, (yyvsp[0].simple_string)); }
#line 31231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1383:
#line 9245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= thd->variables.collation_connection; }
#line 31237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1384:
#line 9247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_STRING);
          }
#line 31245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1385:
#line 9251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_STRING);
            Lex->charset= national_charset_info;
          }
#line 31254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1386:
#line 9259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[-3].item);
     (yyval.dyncol_def)->value= (yyvsp[-1].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[0].Lex_dyncol_type).dyncol_type();
     (yyval.dyncol_def)->cs= lex->charset;
     if ((yyvsp[0].Lex_dyncol_type).length())
       (yyval.dyncol_def)->len= strtoul((yyvsp[0].Lex_dyncol_type).length(), NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if ((yyvsp[0].Lex_dyncol_type).dec())
       (yyval.dyncol_def)->frac= strtoul((yyvsp[0].Lex_dyncol_type).dec(), NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
#line 31278 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1387:
#line 9282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[0].dyncol_def), thd->mem_root);
       }
#line 31289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1388:
#line 9289 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
         (yyvsp[-2].dyncol_def_list)->push_back((yyvsp[0].dyncol_def), thd->mem_root);
         (yyval.dyncol_def_list)= (yyvsp[-2].dyncol_def_list);
       }
#line 31298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1395:
#line 9330 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item_param); }
#line 31304 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1399:
#line 9335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31315 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1400:
#line 9342 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect(thd, (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31325 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1401:
#line 9348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[-1].item)->type() == Item::STRING_ITEM)
            {
              Item_string *item= (Item_string *) (yyvsp[-1].item);
              enum_field_types type= item->odbc_temporal_literal_type(&(yyvsp[-2].lex_str));
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd, item->val_str(NULL),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[-1].item);
          }
#line 31353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1402:
#line 9372 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-5].item_list)->push_front((yyvsp[-2].item), thd->mem_root);
            Item_func_match *i1= new (thd->mem_root) Item_func_match(thd, *(yyvsp[-5].item_list),
                                                                     (yyvsp[-1].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(thd, i1);
            (yyval.item)= i1;
          }
#line 31367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1403:
#line 9382 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[-3].item), (yyvsp[-1].Lex_cast_type).type(), (yyvsp[-1].Lex_cast_type).length(), (yyvsp[-1].Lex_cast_type).dec(),
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1404:
#line 9390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(thd, *(yyvsp[-2].item_list), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1405:
#line 9396 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[-3].item), (yyvsp[-1].Lex_cast_type).type(), (yyvsp[-1].Lex_cast_type).length(), (yyvsp[-1].Lex_cast_type).dec(),
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31400 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1406:
#line 9403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset(thd, (yyvsp[-3].item), (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31410 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1407:
#line 9409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_splocal *il= (yyvsp[-1].item)->get_item_splocal();
            if (il)
              my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str));
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context(),
                                                         (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31424 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1408:
#line 9419 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(thd, Lex->current_context(),
                                                        (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1410:
#line 9430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *i1= new (thd->mem_root) Item_string(thd, (yyvsp[0].lex_str).str,
                                                      (yyvsp[0].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation(thd, (yyvsp[-2].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1411:
#line 9440 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[-1].item); }
#line 31456 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1412:
#line 9442 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[0].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1413:
#line 9449 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1414:
#line 9455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item);
          }
#line 31485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1415:
#line 9459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item)->neg(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1416:
#line 9465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1417:
#line 9471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= negate_expression(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1418:
#line 9478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[0].item), (yyvsp[-3].item), (yyvsp[-2].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1419:
#line 9493 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1420:
#line 9499 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[-3].item_list), (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1421:
#line 9505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 31558 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1422:
#line 9514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 31571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1423:
#line 9523 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31581 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1424:
#line 9529 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1425:
#line 9535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1426:
#line 9541 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert(thd, (yyvsp[-7].item), (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31611 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1427:
#line 9547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[-1].item), thd->mem_root);
            list->push_front((yyvsp[-3].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1428:
#line 9561 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-5].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *(yyvsp[-1].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1429:
#line 9572 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_left(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31654 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1430:
#line 9578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31664 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1431:
#line 9584 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_month(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1432:
#line 9590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_right(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31684 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1433:
#line 9596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_second(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31694 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1434:
#line 9602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast(thd, (yyvsp[-1].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31705 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1435:
#line 9609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast(thd, (yyvsp[-1].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1436:
#line 9616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time(thd, (yyvsp[-3].item), (yyvsp[-1].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1437:
#line 9622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1438:
#line 9628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1439:
#line 9634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31756 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1440:
#line 9640 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1441:
#line 9646 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1442:
#line 9652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1443:
#line 9658 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1444:
#line 9664 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31806 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1445:
#line 9670 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_user(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
#line 31818 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1446:
#line 9678 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_year(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1447:
#line 9699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31839 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1448:
#line 9706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31849 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1449:
#line 9712 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 31860 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1450:
#line 9719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 31871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1451:
#line 9727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31881 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1452:
#line 9734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1453:
#line 9740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_extract(thd, (yyvsp[-3].interval), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31901 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1454:
#line 9746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format(thd, (yyvsp[-3].date_time_type), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1455:
#line 9752 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 31922 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1456:
#line 9759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_locate(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31932 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1457:
#line 9765 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1458:
#line 9772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31953 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1459:
#line 9778 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1460:
#line 9784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31973 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1461:
#line 9790 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31983 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1462:
#line 9796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31993 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1463:
#line 9802 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local(thd, (yyvsp[0].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1464:
#line 9820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-1].item), (yyvsp[-3].item), (yyvsp[-5].interval_time_st), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32025 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1465:
#line 9826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff(thd, (yyvsp[-3].item), (yyvsp[-1].item), (yyvsp[-5].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1466:
#line 9832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1467:
#line 9839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1468:
#line 9846 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1469:
#line 9854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[-3].item), *(yyvsp[-1].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1470:
#line 9861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[-3].item), *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32088 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1471:
#line 9868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32098 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1472:
#line 9875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[-1].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1473:
#line 9882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].Lex_cast_type).type(),
                                        (yyvsp[-1].Lex_cast_type).length(), (yyvsp[-1].Lex_cast_type).dec(),
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1474:
#line 9899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1475:
#line 9905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1476:
#line 9911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32151 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1477:
#line 9917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1478:
#line 9923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_database(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32172 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1479:
#line 9930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_if(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1480:
#line 9936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32192 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1481:
#line 9942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1482:
#line 9951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_back((yyvsp[-1].item), thd->mem_root);

            (yyval.item)= new (thd->mem_root) Item_func_last_value(thd, *list);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1483:
#line 9962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-3].item_list)->push_back((yyvsp[-1].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_func_last_value(thd, *(yyvsp[-3].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1484:
#line 9969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1485:
#line 9975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32248 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1486:
#line 9981 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=  new (thd->mem_root)
              Item_func_password(thd, (yyvsp[-1].item), Item_func_password::OLD);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1487:
#line 9988 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item* i1;
            i1= new (thd->mem_root) Item_func_password(thd, (yyvsp[-1].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
#line 32271 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1488:
#line 9996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_quarter(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1489:
#line 10002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1490:
#line 10008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1491:
#line 10014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1492:
#line 10020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 32323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1493:
#line 10028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_round(thd, (yyvsp[-3].item), (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1494:
#line 10034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1495:
#line 10040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1496:
#line 10046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[-2].item), 0, 0, (yyvsp[-1].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1497:
#line 10052 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, (yyvsp[-5].item), 0, (yyvsp[-2].ulong_num),
                                        (yyvsp[-1].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32375 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1498:
#line 10060 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_char_typecast(thd, (yyvsp[-4].item), (yyvsp[-1].ulong_num),
                                                               &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, item, 0, (yyvsp[-1].ulong_num),
                                        MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32391 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1499:
#line 10072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[-7].item), (yyvsp[-5].ulong_num), (yyvsp[-3].ulong_num),
                                                            (yyvsp[-1].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32402 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1500:
#line 10079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[0].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 32418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1501:
#line 10094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_precise_rel(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                 Item_func::SP_CONTAINS_FUNC));
          }
#line 32428 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1502:
#line 10100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
#line 32439 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1503:
#line 10107 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
#line 32450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1504:
#line 10114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
#line 32461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1505:
#line 10121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
#line 32472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1506:
#line 10128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
#line 32483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1507:
#line 10135 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point(thd, (yyvsp[-3].item), (yyvsp[-1].item)));
          }
#line 32491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1508:
#line 10139 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
#line 32502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1509:
#line 10158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
#line 32525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1510:
#line 10177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[-4].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[-4].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[-4].lex_str), (yyvsp[-1].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[-2].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[-1].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[-4].lex_str), (yyvsp[-1].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
#line 32582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1511:
#line 10230 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[-5].lex_str).str || check_db_name(&(yyvsp[-5].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-5].lex_str).str));
            if (check_routine_name(&(yyvsp[-3].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[-5].lex_str), (yyvsp[-3].lex_str), true, (yyvsp[-1].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
#line 32621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1512:
#line 10268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].num) | (yyvsp[0].num); }
#line 32627 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1513:
#line 10270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_BOOL; }
#line 32633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1514:
#line 10274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_NL; }
#line 32639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1515:
#line 10275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_NL; }
#line 32645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1516:
#line 10279 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;         }
#line 32651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1517:
#line 10280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_EXPAND; }
#line 32657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1518:
#line 10284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= NULL; }
#line 32663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1519:
#line 10285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list); }
#line 32669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1520:
#line 10290 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 32680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1521:
#line 10297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 32689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1522:
#line 10305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[0].lex_str).str)
            {
              (yyvsp[-2].item)->is_autogenerated_name= FALSE;
              (yyvsp[-2].item)->set_name(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[-2].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[-2].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[-2].item)->set_name(thd, (yyvsp[-3].simple_string), (uint) ((yyvsp[-1].simple_string) - (yyvsp[-3].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[-2].item);
          }
#line 32717 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1523:
#line 10332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[-1].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32727 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1524:
#line 10338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[-1].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32737 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1525:
#line 10344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1526:
#line 10350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1527:
#line 10356 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32767 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1528:
#line 10362 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_int(thd, (int32) 0L, 1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32780 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1529:
#line 10371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32790 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1530:
#line 10377 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr++; }
#line 32796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1531:
#line 10379 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr--; }
#line 32802 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1532:
#line 10381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, *(yyvsp[-2].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32812 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1533:
#line 10387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1534:
#line 10398 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32832 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1535:
#line 10404 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32842 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1536:
#line 10410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1537:
#line 10416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[-1].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32862 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1538:
#line 10422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[-1].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32872 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1539:
#line 10428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1540:
#line 10434 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32892 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1541:
#line 10440 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[-1].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32902 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1542:
#line 10446 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[-1].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1543:
#line 10452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr++; }
#line 32918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1544:
#line 10456 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(thd, Lex->current_context(), (yyvsp[-5].num), (yyvsp[-3].item_list),
                                         sel->gorder_list, (yyvsp[-1].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[-3].item_list)->empty();
            sel->gorder_list.empty();
          }
#line 32934 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1545:
#line 10471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_window_func(thd, (Item_sum *) (yyvsp[-2].item), (yyvsp[0].lex_str_ptr));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            if (Select->add_window_func((Item_window_func *) (yyval.item)))
              MYSQL_YYABORT;
          }
#line 32946 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1546:
#line 10480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (Select->add_window_spec(thd, lex->win_ref,
                                        Select->group_list,
                                        Select->order_list,
                                        lex->win_frame))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_window_func(thd, (Item_sum *) (yyvsp[-2].item),
                                                      thd->lex->win_spec); 
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            if (Select->add_window_func((Item_window_func *) (yyval.item)))
              MYSQL_YYABORT;
          }
#line 32965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1548:
#line 10500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            ((Item_sum *) (yyvsp[0].item))->mark_as_window_func_sum_expr();
          }
#line 32973 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1549:
#line 10507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_row_number(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32983 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1550:
#line 10514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32993 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1551:
#line 10521 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_dense_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33003 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1552:
#line 10528 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_percent_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33013 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1553:
#line 10535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_cume_dist(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33023 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1554:
#line 10542 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_ntile(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1555:
#line 10549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_first_value(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1556:
#line 10556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_last_value(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1557:
#line 10563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_nth_value(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1558:
#line 10570 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* No second argument defaults to 1. */
            Item* item_offset= new (thd->mem_root) Item_uint(thd, 1);
            if (item_offset == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_lead(thd, (yyvsp[-1].item), item_offset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1559:
#line 10581 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_lead(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33087 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1560:
#line 10588 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* No second argument defaults to 1. */
            Item* item_offset= new (thd->mem_root) Item_uint(thd, 1);
            if (item_offset == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_lag(thd, (yyvsp[-1].item), item_offset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1561:
#line 10599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_lag(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33111 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1562:
#line 10608 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str_ptr)= (LEX_STRING *) thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
#line 33121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1563:
#line 10617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (! Lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
          }
#line 33130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1564:
#line 10622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item);
          }
#line 33138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1565:
#line 10629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[-2].lex_str), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item, thd->mem_root);
          }
#line 33152 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1566:
#line 10639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
#line 33164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1567:
#line 10647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[-1].lex_str).str && (yyvsp[0].lex_str).str && check_reserved_words(&(yyvsp[-1].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[-2].var_type), (yyvsp[-1].lex_str), (yyvsp[0].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
#line 33181 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1568:
#line 10662 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 33187 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1569:
#line 10663 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 33193 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1570:
#line 10668 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
#line 33203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1571:
#line 10673 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 33209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1574:
#line 10683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_gorder_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 33215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1575:
#line 10685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_gorder_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 33221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1576:
#line 10690 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 33234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1577:
#line 10699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[0].item);
          }
#line 33243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1578:
#line 10707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[0].simple_string)); Lex->charset= &my_charset_bin; }
#line 33249 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1579:
#line 10709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= thd->variables.collation_connection; }
#line 33255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1580:
#line 10711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[-2].simple_string)); }
#line 33261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1581:
#line 10713 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset= national_charset_info;
            (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[0].simple_string), 0);
          }
#line 33270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1582:
#line 10717 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type)= (yyvsp[0].Lex_cast_type); Lex->charset= NULL; }
#line 33276 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1583:
#line 10718 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type)= (yyvsp[0].Lex_cast_type); Lex->charset= NULL; }
#line 33282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1584:
#line 10722 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
#line 33288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1585:
#line 10723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
#line 33294 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1586:
#line 10724 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
#line 33300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1587:
#line 10725 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_UNSIGNED_INT); }
#line 33306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1588:
#line 10726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_UNSIGNED_INT); }
#line 33312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1589:
#line 10727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_DECIMAL, (yyvsp[0].Lex_length_and_dec)); }
#line 33318 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1590:
#line 10728 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_DOUBLE, (yyvsp[0].Lex_length_and_dec));  }
#line 33324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1591:
#line 10732 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_DATE); }
#line 33330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1592:
#line 10733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_TIME, 0, (yyvsp[0].simple_string)); }
#line 33336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1593:
#line 10734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_DATETIME, 0, (yyvsp[0].simple_string)); }
#line 33342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1594:
#line 10738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= NULL; }
#line 33348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1595:
#line 10739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list);}
#line 33354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1596:
#line 10744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 33365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1597:
#line 10751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 33374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1598:
#line 10758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list); }
#line 33380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1599:
#line 10759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[-1].item_list); }
#line 33386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1600:
#line 10764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 33397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1601:
#line 10771 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 33406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1602:
#line 10778 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= NULL; }
#line 33412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1603:
#line 10779 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 33418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1604:
#line 10783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= NULL; }
#line 33424 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1605:
#line 10784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 33430 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1606:
#line 10789 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[-2].item), thd->mem_root);
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 33442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1607:
#line 10797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-4].item_list)->push_back((yyvsp[-2].item), thd->mem_root);
            (yyvsp[-4].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-4].item_list);
          }
#line 33452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1608:
#line 10807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)= (yyvsp[0].table_list); }
#line 33458 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1609:
#line 10809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(thd)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 33471 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1610:
#line 10820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[0].table_list)); }
#line 33477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1611:
#line 10831 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 33483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1612:
#line 10832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[-1].table_list); }
#line 33489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1613:
#line 10838 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 33495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1614:
#line 10840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));
          }
#line 33503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1615:
#line 10858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));

            if (unlikely(Select->add_cross_joined_table((yyvsp[-2].table_list), (yyvsp[0].table_list), (yyvsp[-1].num))))
              MYSQL_YYABORT;
          }
#line 33514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1616:
#line 10866 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-3].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 33526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1617:
#line 10874 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	    (yyvsp[-3].table_list)->straight=(yyvsp[-4].num);
            add_join_on(thd, (yyvsp[-3].table_list), (yyvsp[0].item));
            (yyvsp[-3].table_list)->on_context= Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
#line 33537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1618:
#line 10882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && (yyvsp[-1].table_list));
          }
#line 33545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1619:
#line 10886 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
	    (yyvsp[-5].table_list)->straight=(yyvsp[-6].num);
            add_join_natural((yyvsp[-7].table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select); 
	    (yyval.table_list)=(yyvsp[-5].table_list); 
          }
#line 33555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1620:
#line 10892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));
	    (yyvsp[0].table_list)->straight=(yyvsp[-1].num);
            add_join_natural((yyvsp[-3].table_list),(yyvsp[0].table_list),NULL,Select);
          }
#line 33565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1621:
#line 10901 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-5].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 33577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1622:
#line 10909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            add_join_on(thd, (yyvsp[-3].table_list), (yyvsp[0].item));
            (yyvsp[-3].table_list)->on_context= Lex->pop_context();
            (yyvsp[-3].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[-3].table_list);
            Select->parsing_place= NO_MATTER;
          }
#line 33589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1623:
#line 10917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].table_list) && (yyvsp[0].table_list));
          }
#line 33597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1624:
#line 10921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            add_join_natural((yyvsp[-9].table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select); 
            (yyvsp[-5].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[-5].table_list); 
          }
#line 33607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1625:
#line 10927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[0].table_list));
            add_join_natural((yyvsp[-5].table_list),(yyvsp[0].table_list),NULL,Select);
            (yyvsp[0].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[0].table_list);
          }
#line 33618 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1626:
#line 10937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-5].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 33630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1627:
#line 10945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on(thd, (yyval.table_list), (yyvsp[0].item));
            (yyvsp[-7].table_list)->on_context= Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
#line 33643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1628:
#line 10954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].table_list) && (yyvsp[0].table_list));
          }
#line 33651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1629:
#line 10958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select);
          }
#line 33662 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1630:
#line 10965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[0].table_list));
            add_join_natural((yyvsp[0].table_list),(yyvsp[-5].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
#line 33674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1631:
#line 10976 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 33680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1632:
#line 10977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 33686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1633:
#line 10978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 33692 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1634:
#line 10982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = (yyvsp[0].num); }
#line 33698 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1635:
#line 10983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 33704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1636:
#line 10991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string_list)= 0;}
#line 33710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1638:
#line 10997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string_list)= (yyvsp[-2].string_list);
          }
#line 33718 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1641:
#line 11016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
#line 33727 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1642:
#line 11021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[-3].table), (yyvsp[-1].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[-2].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
#line 33742 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1643:
#line 11053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[-2].table_list) || (yyvsp[0].lex_str_ptr)) && (yyvsp[-3].select_lex)->embedding &&
                !(yyvsp[-3].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[-2].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new (thd->mem_root) Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(thd,
                                               ti, (yyvsp[0].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[0].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[-2].table_list);
            }
            /*
              Fields in derived table can be used in upper select in
              case of merge. We do not add HAVING fields because we do
              not merge such derived. We do not add union because
              also do not merge them
            */
            if ((yyval.table_list) && (yyval.table_list)->derived &&
                !(yyval.table_list)->derived->first_select()->next_select())
              (yyval.table_list)->select_lex->add_where_field((yyval.table_list)->derived->first_select());
          }
#line 33809 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1644:
#line 11119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= (yyvsp[-6].select_lex);
            SELECT_LEX_UNIT *unit= (yyvsp[-3].select_lex)->master_unit();
            Table_ident *ti= new (thd->mem_root) Table_ident(unit);
            if (ti == NULL)
              MYSQL_YYABORT;
            (yyvsp[-3].select_lex)->set_with_clause((yyvsp[-4].with_clause));
            lex->current_select= sel;
            if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                             ti, (yyvsp[0].lex_str_ptr), 0,
                                             TL_READ, MDL_SHARED_READ)))
              MYSQL_YYABORT;
            sel->add_joined_table((yyval.table_list));
          }
#line 33829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1646:
#line 11158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 33841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1647:
#line 11166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 33853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1652:
#line 11180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->pop_context(); }
#line 33859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1653:
#line 11181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->pop_context(); }
#line 33865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1654:
#line 11182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->pop_context(); }
#line 33871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1657:
#line 11193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_braces(0);
          }
#line 33879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1658:
#line 11200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 33891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1659:
#line 11208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 33899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1660:
#line 11216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            /* for normal joins, $2 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[-1].select_lex)->end_nested_join(lex->thd)) && (yyvsp[0].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[0].table_list) && (yyval.table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 33917 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1661:
#line 11238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].num))
              Select->set_braces(1);
            (yyval.table_list)= NULL;
          }
#line 33927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1662:
#line 11246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 33948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1663:
#line 11263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 33956 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1665:
#line 11270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= Select; }
#line 33962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1666:
#line 11275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if ((yyvsp[0].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
#line 33972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1667:
#line 11283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            TABLE_LIST *embedding= lex->current_select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
#line 33985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1668:
#line 11294 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33991 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1669:
#line 11295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33997 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1670:
#line 11300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
#line 34005 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1671:
#line 11303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
#line 34011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1672:
#line 11304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
#line 34017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1673:
#line 11305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
#line 34023 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1674:
#line 11309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
#line 34029 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1675:
#line 11310 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
#line 34035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1676:
#line 11315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_index_hint_type((yyvsp[-2].index_hint), (yyvsp[0].num));
          }
#line 34043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1678:
#line 11320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[0].num));
          }
#line 34051 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1683:
#line 11333 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->alloc_index_hints(thd); }
#line 34057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1685:
#line 11337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {  Select->clear_index_hints(); }
#line 34063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1687:
#line 11342 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, NULL, 0); }
#line 34069 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1688:
#line 11343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1689:
#line 11348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length); }
#line 34081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1690:
#line 11350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
#line 34087 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1693:
#line 11360 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.string_list)= new (thd->mem_root) List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s, thd->mem_root);
          }
#line 34102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1694:
#line 11371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[-2].string_list)->push_back(s, thd->mem_root);
            (yyval.string_list)= (yyvsp[-2].string_list);
          }
#line 34116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1695:
#line 11383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1696:
#line 11384 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
#line 34128 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1697:
#line 11385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
#line 34134 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1698:
#line 11386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
#line 34140 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1699:
#line 11387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
#line 34146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1700:
#line 11388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
#line 34152 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1701:
#line 11389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
#line 34158 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1702:
#line 11390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
#line 34164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1703:
#line 11391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
#line 34170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1704:
#line 11392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
#line 34176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1705:
#line 11393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
#line 34182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1706:
#line 11394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
#line 34188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1707:
#line 11398 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_DAY; }
#line 34194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1708:
#line 11399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
#line 34200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1709:
#line 11400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
#line 34206 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1710:
#line 11401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
#line 34212 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1711:
#line 11402 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
#line 34218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1712:
#line 11403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
#line 34224 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1713:
#line 11404 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
#line 34230 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1714:
#line 11405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
#line 34236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1715:
#line 11406 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
#line 34242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1716:
#line 11410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
#line 34248 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1717:
#line 11411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
#line 34254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1718:
#line 11412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
#line 34260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1719:
#line 11413 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
#line 34266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1723:
#line 11423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str_ptr)=0; }
#line 34272 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1724:
#line 11425 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) thd->memdup(&(yyvsp[0].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
#line 34282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1727:
#line 11438 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->where= 0; }
#line 34288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1728:
#line 11440 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= IN_WHERE;
          }
#line 34296 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1729:
#line 11444 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond(thd, (yyvsp[0].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
          }
#line 34308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1731:
#line 11456 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= IN_HAVING;
          }
#line 34316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1732:
#line 11460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond(thd, (yyvsp[0].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
          }
#line 34328 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1733:
#line 11471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[0].item);
          }
#line 34337 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1734:
#line 11476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string_ascii(thd, "", 0) :
                 new (thd->mem_root) Item_string_ascii(thd, "\\", 1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 34350 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1737:
#line 11497 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_group_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 34356 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1738:
#line 11499 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_group_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 34362 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1739:
#line 11503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34368 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1740:
#line 11505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                                "global union parameters"));
            lex->current_select->olap= CUBE_TYPE;

            my_yyabort_error((ER_NOT_SUPPORTED_YET, MYF(0), "CUBE"));
          }
#line 34389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1741:
#line 11522 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                                "global union parameters"));
            lex->current_select->olap= ROLLUP_TYPE;
          }
#line 34408 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1742:
#line 11544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1743:
#line 11547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1746:
#line 11557 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            if (Select->add_window_def(thd, (yyvsp[-2].lex_str_ptr), lex->win_ref,
                                       Select->group_list,
                                       Select->order_list,
                                       lex->win_frame ))
              MYSQL_YYABORT;
          }
#line 34433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1747:
#line 11569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->prepare_add_window_spec(thd); }
#line 34439 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1749:
#line 11576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34445 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1750:
#line 11578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->lex->win_ref= (LEX_STRING *) thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING));
            if (thd->lex->win_ref == NULL)
              MYSQL_YYABORT;
          }
#line 34455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1751:
#line 11586 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 34461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1753:
#line 11591 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 34467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1755:
#line 11596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1756:
#line 11598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->win_frame=
              new (thd->mem_root) Window_frame((yyvsp[-2].frame_units),
                                               lex->frame_top_bound,
                                               lex->frame_bottom_bound,
                                               (yyvsp[0].frame_exclusion));
            if (lex->win_frame == NULL)
              MYSQL_YYABORT;
          }
#line 34488 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1757:
#line 11611 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_units)= Window_frame::UNITS_ROWS; }
#line 34494 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1758:
#line 11612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_units)= Window_frame::UNITS_RANGE; }
#line 34500 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1759:
#line 11617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->frame_top_bound= (yyvsp[0].window_frame_bound);
            lex->frame_bottom_bound=
              new (thd->mem_root)
                Window_frame_bound(Window_frame_bound::CURRENT, NULL);
            if (lex->frame_bottom_bound == NULL)
              MYSQL_YYABORT;
          }
#line 34514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1760:
#line 11627 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->frame_top_bound= (yyvsp[-2].window_frame_bound);
            lex->frame_bottom_bound= (yyvsp[0].window_frame_bound);
          }
#line 34524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1761:
#line 11636 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.window_frame_bound)= new (thd->mem_root) 
                  Window_frame_bound(Window_frame_bound::PRECEDING, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
#line 34535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1762:
#line 11643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::CURRENT, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
#line 34546 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1763:
#line 11650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::PRECEDING, (yyvsp[-1].item)); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
#line 34557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1764:
#line 11659 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.window_frame_bound)= (yyvsp[0].window_frame_bound); }
#line 34563 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1765:
#line 11661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::FOLLOWING, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
#line 34574 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1766:
#line 11668 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::FOLLOWING, (yyvsp[-1].item)); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
#line 34585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1767:
#line 11677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_exclusion)= Window_frame::EXCL_NONE; }
#line 34591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1768:
#line 11679 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_exclusion)= Window_frame::EXCL_CURRENT_ROW; }
#line 34597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1769:
#line 11681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_exclusion)= Window_frame::EXCL_GROUP; }
#line 34603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1770:
#line 11683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_exclusion)= Window_frame::EXCL_TIES; }
#line 34609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1771:
#line 11685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_exclusion)= Window_frame::EXCL_NONE; }
#line 34615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1775:
#line 11703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            bool ascending= ((yyvsp[0].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[-1].item), ascending))
              MYSQL_YYABORT;
          }
#line 34625 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1778:
#line 11721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE &&
                !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(thd))
                MYSQL_YYABORT;
            }
            if (sel->master_unit()->is_union() && !sel->braces)
            {
               /*
                 At this point we don't know yet whether this is the last
                 select in union or not, but we move ORDER BY to
                 fake_select_lex anyway. If there would be one more select
                 in union mysql_new_select will correctly throw error.
               */
               DBUG_ASSERT(sel->master_unit()->fake_select_lex);
               lex->current_select= sel->master_unit()->fake_select_lex;
             }
          }
#line 34672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1779:
#line 11764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {

          }
#line 34680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1780:
#line 11771 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_order_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 34686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1781:
#line 11773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_order_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 34692 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1782:
#line 11777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =  1; }
#line 34698 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1783:
#line 11778 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =1; }
#line 34704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1784:
#line 11779 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =0; }
#line 34710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1785:
#line 11783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1786:
#line 11784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34722 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1787:
#line 11789 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            if (sel->master_unit()->is_union() && !sel->braces)
            {
              /* Move LIMIT that belongs to UNION to fake_select_lex */
              Lex->current_select= sel->master_unit()->fake_select_lex;
              DBUG_ASSERT(Select);
            }
          }
#line 34736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1788:
#line 11802 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            if (!sel->select_limit->basic_const_item() ||
                sel->select_limit->val_int() > 0)
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 34747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1789:
#line 11810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 34755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1790:
#line 11814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 34763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1791:
#line 11821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
#line 34774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1792:
#line 11828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            sel->offset_limit= (yyvsp[-2].item);
            sel->explicit_limit= 1;
          }
#line 34785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1793:
#line 11835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[-2].item);
            sel->offset_limit= (yyvsp[0].item);
            sel->explicit_limit= 1;
          }
#line 34796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1794:
#line 11845 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[0].lex_str), false)))
          {
            uint pos_in_query= 0;
            uint len_in_query= 0;
            if (!lex->clone_spec_offset)
            {
              pos_in_query= (uint)(lip->get_tok_start() -
                                   lex->sphead->m_tmp_query);
              len_in_query= (uint)(lip->get_ptr() -
                                   lip->get_tok_start());
            }
            splocal= new (thd->mem_root)
              Item_splocal(thd, (yyvsp[0].lex_str), spv->offset, spv->sql_type(),
                           pos_in_query, len_in_query);
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
            my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));
          if (splocal->type() != Item::INT_ITEM)
            my_yyabort_error((ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0)));
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
#line 34835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1795:
#line 11880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyvsp[0].item_param)->limit_clause_param= TRUE;
        }
#line 34843 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1796:
#line 11884 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 34853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1797:
#line 11890 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 34863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1798:
#line 11896 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 34873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1799:
#line 11905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[0].item);
          }
#line 34882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1800:
#line 11913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
#line 34891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1801:
#line 11918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
#line 34902 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1802:
#line 11924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
#line 34908 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1803:
#line 11925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
#line 34914 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1804:
#line 11929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 34920 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1805:
#line 11930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 34926 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1806:
#line 11931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 34932 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1807:
#line 11935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 34938 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1808:
#line 11936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 34944 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1809:
#line 11937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 34950 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1810:
#line 11938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 34956 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1811:
#line 11939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 34962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1812:
#line 11940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 34968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1813:
#line 11944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 34974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1814:
#line 11945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 34980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1815:
#line 11946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 34986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1816:
#line 11947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 34992 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1817:
#line 11948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT; }
#line 34998 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1818:
#line 11952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35004 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1819:
#line 11953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35010 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1820:
#line 11954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1821:
#line 11955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35022 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1822:
#line 11956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35028 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1823:
#line 11960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35034 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1824:
#line 11961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35040 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1825:
#line 11962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulonglong_number)= strtoull((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 35046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1826:
#line 11963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35052 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1827:
#line 11964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT; }
#line 35058 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1828:
#line 11969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_ONLY_INTEGERS_ALLOWED); }
#line 35064 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1831:
#line 11978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.choice)= (yyvsp[0].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
#line 35070 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1832:
#line 11979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.choice)= HA_CHOICE_UNDEF; }
#line 35076 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1833:
#line 11984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            DBUG_ASSERT(&lex->select_lex == lex->current_select);

            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(thd, &lex->current_select->context,
                                           NULL, NULL, (yyvsp[0].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);

            /*
              PROCEDURE CLAUSE cannot handle subquery as one of its parameter,
              so set expr_allows_subselect as false to disallow any subqueries
              further. Reset expr_allows_subselect back to true once the
              parameters are reduced.
            */
            Lex->expr_allows_subselect= false;
          }
#line 35106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1834:
#line 12010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Subqueries are allowed from now.*/
            Lex->expr_allows_subselect= true;
          }
#line 35115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1835:
#line 12017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1836:
#line 12018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1839:
#line 12028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_proc_to_list(thd, (yyvsp[-1].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[-1].item)->name)
              (yyvsp[-1].item)->set_name(thd, (yyvsp[-2].simple_string), (uint) ((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)), thd->charset());
          }
#line 35138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1840:
#line 12037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->describe &&
                (!(lex->result= new (thd->mem_root) select_dumpvar(thd))))
              MYSQL_YYABORT;
          }
#line 35149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1841:
#line 12044 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1843:
#line 12049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1844:
#line 12053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->result)
            {
              if ((yyvsp[0].myvar) == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)Lex->result)->var_list.push_back((yyvsp[0].myvar), thd->mem_root);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(Lex->describe);
            }
          }
#line 35182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1845:
#line 12073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.myvar) = Lex->result ? new (thd->mem_root) my_var_user((yyvsp[0].lex_str)) : NULL;
          }
#line 35190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1846:
#line 12077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_variable *t;

            if (!Lex->spcont || !(t= Lex->spcont->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));
            (yyval.myvar) = Lex->result ? (new (thd->mem_root)
                                my_var_sp((yyvsp[0].lex_str), t->offset, t->sql_type(),
                                          Lex->sphead)) :
                                NULL;
          }
#line 35205 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1848:
#line 12095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange=
                    new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str, 0)) ||
                !(lex->result=
                    new (thd->mem_root) select_export(thd, lex->exchange)))
              MYSQL_YYABORT;
          }
#line 35219 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1849:
#line 12105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->cs= (yyvsp[0].charset); }
#line 35225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1851:
#line 12108 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result=
                      new (thd->mem_root) select_dump(thd, lex->exchange)))
                MYSQL_YYABORT;
            }
          }
#line 35242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1852:
#line 12121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
#line 35250 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1853:
#line 12132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
#line 35260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1854:
#line 12138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->insert_list= (yyvsp[0].item_list);
          }
#line 35268 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1855:
#line 12149 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_TABLE, (yyvsp[-2].num), (yyvsp[0].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 35279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1856:
#line 12156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35285 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1857:
#line 12157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1858:
#line 12158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[-3].lex_str).str, (yyvsp[-4].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
#line 35312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1859:
#line 12175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_DB, (yyvsp[-1].object_ddl_options));
            lex->name= (yyvsp[0].lex_str);
          }
#line 35322 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1860:
#line 12181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[-2].lex_str).str && check_db_name(&(yyvsp[-2].lex_str)))
               my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[-3].object_ddl_options));
            spname= new (thd->mem_root) sp_name((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
#line 35341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1861:
#line 12196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[-1].object_ddl_options));
            spname= new (thd->mem_root) sp_name(db, (yyvsp[0].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
#line 35361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1862:
#line 12212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            lex->set_command(SQLCOM_DROP_PROCEDURE, (yyvsp[-1].object_ddl_options));
            lex->spname= (yyvsp[0].spname);
          }
#line 35373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1863:
#line 12220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_USER, (yyvsp[-2].object_ddl_options));
          }
#line 35381 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1864:
#line 12224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_ROLE, (yyvsp[-2].object_ddl_options));
          }
#line 35389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1865:
#line 12228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_VIEW, (yyvsp[0].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 35400 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1866:
#line 12235 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1867:
#line 12237 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->spname= (yyvsp[0].spname);
            Lex->set_command(SQLCOM_DROP_EVENT, (yyvsp[-1].object_ddl_options));
          }
#line 35415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1868:
#line 12242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_TRIGGER, (yyvsp[-1].object_ddl_options));
            lex->spname= (yyvsp[0].spname);
          }
#line 35425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1869:
#line 12248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
#line 35434 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1870:
#line 12253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
#line 35443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1871:
#line 12258 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_SERVER, (yyvsp[-1].object_ddl_options));
            Lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 35452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1874:
#line 12271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[0].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 35464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1875:
#line 12282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[0].string_list)))
              MYSQL_YYABORT;
          }
#line 35478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1878:
#line 12300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[0].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 35490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1879:
#line 12311 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
#line 35499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1880:
#line 12316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
#line 35508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1881:
#line 12324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_NONE);
        }
#line 35516 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1882:
#line 12328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_EXISTS);
        }
#line 35524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1883:
#line 12334 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 35530 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1884:
#line 12335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= HA_LEX_CREATE_TMP_TABLE; }
#line 35536 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1885:
#line 12343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
#line 35547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1886:
#line 12351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_lock_for_tables((yyvsp[-2].lock_type), true);
            Lex->current_select= &Lex->select_lex;
          }
#line 35556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1887:
#line 12356 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1888:
#line 12361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
#line 35573 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1889:
#line 12368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_lock_for_tables((yyvsp[-1].lock_type), true);
            Lex->current_select= &Lex->select_lex;
          }
#line 35582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1890:
#line 12373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1891:
#line 12378 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 35601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1892:
#line 12386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 35607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1893:
#line 12388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
#line 35619 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1894:
#line 12395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE; }
#line 35625 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1895:
#line 12399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= (yyvsp[0].lock_type); }
#line 35631 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1896:
#line 12401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
#line 35643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1897:
#line 12411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35649 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1898:
#line 12412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1899:
#line 12417 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
#line 35666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1900:
#line 12426 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1901:
#line 12427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1902:
#line 12428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35684 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1903:
#line 12430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!(lex->insert_list= new (thd->mem_root) List_item) ||
                lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
#line 35695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1905:
#line 12441 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 35701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1906:
#line 12442 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 35707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1907:
#line 12446 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1908:
#line 12447 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1909:
#line 12448 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1914:
#line 12463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[-2].item), thd->mem_root) ||
                lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 35736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1915:
#line 12472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35742 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1916:
#line 12473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35748 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1917:
#line 12477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35754 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1918:
#line 12478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35760 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1919:
#line 12483 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
              if (!(Lex->insert_list= new (thd->mem_root) List_item))
                MYSQL_YYABORT;
          }
#line 35769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1920:
#line 12488 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
#line 35779 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1921:
#line 12496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1923:
#line 12502 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 35794 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1924:
#line 12507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 35803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1925:
#line 12514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item);}
#line 35809 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1926:
#line 12516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35819 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1927:
#line 12522 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_ignore_value(thd, Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1929:
#line 12531 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates= DUP_UPDATE; }
#line 35835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1931:
#line 12539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
#line 35846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1932:
#line 12547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *slex= &Lex->select_lex;
            if (slex->table_list.elements > 1)
              Lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (slex->get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       slex->get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            slex->set_lock_for_tables((yyvsp[-4].lock_type), slex->table_list.elements == 1);
          }
#line 35869 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1933:
#line 12565 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1936:
#line 12575 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_item_to_list(thd, (yyvsp[-2].item)) || add_value_to_list(thd, (yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 35884 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1939:
#line 12588 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[-2].item), thd->mem_root) || 
              lex->value_list.push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 35895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1940:
#line 12597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
#line 35901 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1941:
#line 12598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 35907 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1942:
#line 12605 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
#line 35922 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1944:
#line 12620 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[0].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 35937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1945:
#line 12631 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1946:
#line 12632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35949 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1947:
#line 12634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 35959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1948:
#line 12640 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
#line 35968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1949:
#line 12645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 35978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1950:
#line 12651 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
#line 35987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1955:
#line 12669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Table_ident *ti= new (thd->mem_root) Table_ident((yyvsp[-1].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 36004 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1956:
#line 12682 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Table_ident *ti= new (thd->mem_root) Table_ident(thd, (yyvsp[-3].lex_str), (yyvsp[-1].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 36021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1957:
#line 12697 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1958:
#line 12698 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1959:
#line 12702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1960:
#line 12703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1961:
#line 12707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= OPTION_QUICK; }
#line 36051 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1962:
#line 12708 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
#line 36057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1963:
#line 12709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1; }
#line 36063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1964:
#line 12714 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 36078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1965:
#line 12725 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 36090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1972:
#line 12749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_CPU;
    }
#line 36098 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1973:
#line 12753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
#line 36106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1974:
#line 12757 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
#line 36114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1975:
#line 12761 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
#line 36122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1976:
#line 12765 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
#line 36130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1977:
#line 12769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_IPC;
    }
#line 36138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1978:
#line 12773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
#line 36146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1979:
#line 12777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
#line 36154 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1980:
#line 12781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_ALL;
    }
#line 36162 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1981:
#line 12788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_query_id= 0;
    }
#line 36170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1982:
#line 12792 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_query_id= atoi((yyvsp[0].lex_str).str);
    }
#line 36178 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1983:
#line 12801 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->create_info.init();
          }
#line 36191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1984:
#line 12810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 36199 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1985:
#line 12817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
#line 36210 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1986:
#line 12824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
#line 36222 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1987:
#line 12832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
#line 36234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1988:
#line 12840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
#line 36246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1989:
#line 12848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
#line 36258 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1990:
#line 12856 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[-1].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
#line 36270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1991:
#line 12864 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
#line 36281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1992:
#line 12871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ident= (yyvsp[0].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
#line 36292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1993:
#line 12878 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
#line 36302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1994:
#line 12884 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.db_type= (yyvsp[-1].db_type); }
#line 36308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1995:
#line 12886 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.db_type= NULL; }
#line 36314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1996:
#line 12888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[-1].simple_string))
              (yyvsp[-2].table)->change_db((yyvsp[-1].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[-2].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
#line 36327 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1997:
#line 12897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
#line 36335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1998:
#line 12901 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
#line 36343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1999:
#line 12905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
#line 36352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2001:
#line 12911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
#line 36361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2003:
#line 12916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[-1].simple_string))
              (yyvsp[-2].table)->change_db((yyvsp[-1].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[-2].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
#line 36374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2004:
#line 12925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
#line 36385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2005:
#line 12932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
#line 36394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2006:
#line 12937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
#line 36403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2007:
#line 12942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
#line 36412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2008:
#line 12947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (void) create_select_for_variable("warning_count"); }
#line 36418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2009:
#line 12949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (void) create_select_for_variable("error_count"); }
#line 36424 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2010:
#line 12951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
#line 36430 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2011:
#line 12953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
#line 36436 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2012:
#line 12955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
#line 36442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2013:
#line 12957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              MYSQL_YYABORT;
          }
#line 36453 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2014:
#line 12964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[-2].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_STATUS))
              MYSQL_YYABORT;
          }
#line 36465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2015:
#line 12972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
#line 36471 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2016:
#line 12974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[-2].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_VARIABLES))
              MYSQL_YYABORT;
          }
#line 36483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2017:
#line 12982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
#line 36494 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2018:
#line 12989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
#line 36505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2019:
#line 12996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
#line 36516 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2020:
#line 13003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[-1].lex_user);
          }
#line 36526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2021:
#line 13009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_SHOW_CREATE_DB, (yyvsp[-1].object_ddl_options));
            Lex->name= (yyvsp[0].lex_str);
          }
#line 36535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2022:
#line 13014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,0))
              MYSQL_YYABORT;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
#line 36547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2023:
#line 13022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
#line 36559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2024:
#line 13030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
#line 36567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2025:
#line 13034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
#line 36576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2026:
#line 13039 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
#line 36587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2027:
#line 13046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
#line 36596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2028:
#line 13051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[0].spname);
          }
#line 36607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2029:
#line 13058 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[0].spname);
          }
#line 36618 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2030:
#line 13065 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[0].spname);
          }
#line 36628 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2031:
#line 13071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_CREATE_USER;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user;
          }
#line 36639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2032:
#line 13078 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->sql_command= SQLCOM_SHOW_CREATE_USER;
             Lex->grant_user= (yyvsp[0].lex_user);
          }
#line 36648 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2033:
#line 13083 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
#line 36659 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2034:
#line 13090 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
#line 36670 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2035:
#line 13097 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[0].spname);
          }
#line 36679 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2036:
#line 13102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[0].spname);
          }
#line 36688 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2037:
#line 13107 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->spname= (yyvsp[0].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
#line 36697 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2038:
#line 13112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[0].item));
          }
#line 36708 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2039:
#line 13119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             bool in_plugin;
             lex->sql_command= SQLCOM_SHOW_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[-2].lex_str).str, &in_plugin);
             if (!table || !table->old_format || !in_plugin)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[-1].simple_string));
               MYSQL_YYABORT;
             }
             if (lex->wild && table->idx_field1 < 0)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[0].simple_string));
               MYSQL_YYABORT;
             }
             if (make_schema_select(thd, Lex->current_select, table))
               MYSQL_YYABORT;
           }
#line 36731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2040:
#line 13141 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
#line 36737 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2041:
#line 13143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
#line 36743 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2042:
#line 13145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
#line 36749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2047:
#line 13159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= 0; }
#line 36755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2048:
#line 13160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[0].lex_str).str; }
#line 36761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2049:
#line 13164 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->verbose=0; }
#line 36767 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2050:
#line 13165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->verbose=1; }
#line 36773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2053:
#line 13174 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.log_file_name = 0; }
#line 36779 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2054:
#line 13175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.log_file_name = (yyvsp[0].lex_str).str; }
#line 36785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2055:
#line 13179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.pos = 4; /* skip magic number */ }
#line 36791 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2056:
#line 13180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.pos = (yyvsp[0].ulonglong_number); }
#line 36797 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2057:
#line 13184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= 0; }
#line 36803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2058:
#line 13186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
            (yyval.simple_string)= (yyvsp[-1].simple_string);
          }
#line 36815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2059:
#line 13194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->where= normalize_cond(thd, (yyvsp[0].item));
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
            (yyval.simple_string)= (yyvsp[-1].simple_string);
          }
#line 36826 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2060:
#line 13205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[0].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
#line 36841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2061:
#line 13216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 36849 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2062:
#line 13220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_NORMAL; }
#line 36855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2063:
#line 13222 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
#line 36864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2071:
#line 13243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->analyze_stmt= true;
          }
#line 36872 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2072:
#line 13249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_EXTENDED; }
#line 36878 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2073:
#line 13250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_PARTITIONS; }
#line 36884 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2074:
#line 13251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36890 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2075:
#line 13255 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36896 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2076:
#line 13257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, "JSON"))
              Lex->explain_json= true;
            else if (!my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, "TRADITIONAL"))
              DBUG_ASSERT(Lex->explain_json==false);
            else
              my_yyabort_error((ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 36909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2077:
#line 13268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2078:
#line 13269 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->wild= (yyvsp[0].string); }
#line 36921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2079:
#line 13271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
#line 36933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2080:
#line 13285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 36944 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2081:
#line 13292 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36950 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2082:
#line 13297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
#line 36964 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2083:
#line 13307 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36970 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2085:
#line 13312 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2086:
#line 13314 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          TABLE_LIST *tables= Lex->query_tables;
          for (; tables; tables= tables->next_global)
          {
            tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
            tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
            tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
          }
        }
#line 36990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2087:
#line 13327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_READ_LOCK | (yyvsp[0].num); }
#line 36996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2088:
#line 13329 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(thd, ER_NO_TABLES_USED);
              MYSQL_YYABORT;
            } 
            Lex->type|= REFRESH_FOR_EXPORT;
          }
#line 37009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2089:
#line 13336 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2091:
#line 13342 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2092:
#line 13347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_ERROR_LOG; }
#line 37027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2093:
#line 13349 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_ENGINE_LOG; }
#line 37033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2094:
#line 13351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_GENERAL_LOG; }
#line 37039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2095:
#line 13353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_SLOW_LOG; }
#line 37045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2096:
#line 13355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_BINARY_LOG; }
#line 37051 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2097:
#line 13357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS"));
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
#line 37063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2098:
#line 13365 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
#line 37069 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2099:
#line 13367 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_HOSTS; }
#line 37075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2100:
#line 13369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_GRANT; }
#line 37081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2101:
#line 13371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name= empty_lex_str;
          }
#line 37090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2102:
#line 13376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_STATUS; }
#line 37096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2103:
#line 13378 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE"));
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
#line 37108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2104:
#line 13386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_MASTER; }
#line 37114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2105:
#line 13388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_DES_KEY_FILE; }
#line 37120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2106:
#line 13390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_USER_RESOURCES; }
#line 37126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2107:
#line 13392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->type|= REFRESH_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[-1].lex_str).str);
             if (!table || !table->reset_table)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[0].simple_string));
               MYSQL_YYABORT;
             }
             Lex->view_list.push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[-1].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
           }
#line 37143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2108:
#line 13407 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2109:
#line 13408 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2110:
#line 13412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2111:
#line 13414 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2115:
#line 13424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint32 value= (uint32) (yyvsp[0].ulonglong_number);
            if ((yyvsp[0].ulonglong_number) > UINT_MAX32)
            {
              my_printf_error(ER_BINLOG_CANT_DELETE_GTID_DOMAIN,
                              "The value of gtid domain being deleted ('%llu') "
                              "exceeds its maximum size "
                              "of 32 bit unsigned integer", MYF(0), (yyvsp[0].ulonglong_number));
              MYSQL_YYABORT;
            }
            insert_dynamic(&Lex->delete_gtid_domain, (uchar*) &value);
          }
#line 37184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2116:
#line 13439 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num)= 0;}
#line 37190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2117:
#line 13440 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num)= REFRESH_CHECKPOINT; }
#line 37196 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2118:
#line 13445 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
#line 37205 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2119:
#line 13450 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2122:
#line 13459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_SLAVE; }
#line 37217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2123:
#line 13461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 37223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2124:
#line 13463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->type|= REFRESH_MASTER;
             Lex->next_binlog_file_number= 0;
          }
#line 37232 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2126:
#line 13468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_QUERY_CACHE;}
#line 37238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2127:
#line 13472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->reset_slave_info.all= false; }
#line 37244 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2128:
#line 13473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->reset_slave_info.all= true; }
#line 37250 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2129:
#line 13477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37256 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2130:
#line 13479 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->next_binlog_file_number = (yyvsp[0].ulong_num);
          }
#line 37264 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2131:
#line 13486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
#line 37274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2132:
#line 13492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37280 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2134:
#line 13501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->to_log = (yyvsp[0].lex_str).str;
          }
#line 37288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2135:
#line 13505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[0].item), thd->mem_root);
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
#line 37299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2136:
#line 13517 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
#line 37311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2137:
#line 13525 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->kill_signal= (killed_state) ((yyvsp[-2].num) | (yyvsp[-1].num));
          }
#line 37319 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2138:
#line 13531 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_HARD_BIT; }
#line 37325 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2139:
#line 13532 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_HARD_BIT; }
#line 37331 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2140:
#line 13533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 37337 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2141:
#line 13537 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_CONNECTION; }
#line 37343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2142:
#line 13538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_CONNECTION; }
#line 37349 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2143:
#line 13539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_QUERY; }
#line 37355 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2144:
#line 13541 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
          }
#line 37364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2145:
#line 13549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->value_list.push_front((yyval.item), thd->mem_root);
         }
#line 37372 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2146:
#line 13553 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root);
            Lex->kill_type= KILL_TYPE_USER;
          }
#line 37381 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2147:
#line 13561 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
#line 37387 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2148:
#line 13568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[0].lex_str).str;
          }
#line 37397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2149:
#line 13579 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            mysql_init_select(lex);

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[0].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
#line 37413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2150:
#line 13591 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[-2].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str, 0, (yyvsp[-5].filetype))))
              MYSQL_YYABORT;
          }
#line 37427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2151:
#line 13601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[-9].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[0].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
            lex->many_values.empty();
          }
#line 37442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2152:
#line 13612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->cs= (yyvsp[0].charset); }
#line 37448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2153:
#line 13616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2154:
#line 13620 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.filetype)= FILETYPE_CSV; }
#line 37460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2155:
#line 13621 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.filetype)= FILETYPE_XML; }
#line 37466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2156:
#line 13625 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=0;}
#line 37472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2157:
#line 13626 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1;}
#line 37478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2158:
#line 13630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
#line 37484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2159:
#line 13632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 37496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2160:
#line 13639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 37502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2161:
#line 13643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates=DUP_ERROR; }
#line 37508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2162:
#line 13644 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates=DUP_REPLACE; }
#line 37514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2163:
#line 13645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1; }
#line 37520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2168:
#line 13660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[0].string);
          }
#line 37529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2169:
#line 13665 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[0].string);
            lex->exchange->opt_enclosed= 1;
          }
#line 37540 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2170:
#line 13672 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[0].string);
          }
#line 37549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2171:
#line 13677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[0].string);
          }
#line 37558 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2176:
#line 13695 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[0].string);
          }
#line 37567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2177:
#line 13700 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[0].string);
          }
#line 37576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2178:
#line 13707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 37582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2179:
#line 13709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->line_term = (yyvsp[0].string); }
#line 37588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2181:
#line 13715 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[-1].lex_str).str);
          }
#line 37597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2182:
#line 13722 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 37603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2183:
#line 13723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 37609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2184:
#line 13727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2185:
#line 13728 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2186:
#line 13729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37627 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2187:
#line 13734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 37633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2188:
#line 13736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 37639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2189:
#line 13740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.item)= (yyvsp[0].item);}
#line 37645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2190:
#line 13742 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 37655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2191:
#line 13750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2192:
#line 13751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2195:
#line 13761 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[-4].item), thd->mem_root) || 
                lex->value_list.push_back((yyvsp[-1].item), thd->mem_root))
                MYSQL_YYABORT;
            (yyvsp[-1].item)->set_name_no_truncate(thd, (yyvsp[-2].simple_string), (uint) ((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)), thd->charset());
          }
#line 37679 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2196:
#line 13774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(thd, tmp.str, tmp.length,
                                                cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 37707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2197:
#line 13798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 37723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2198:
#line 13810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_string_with_introducer(thd, (yyvsp[0].lex_str).str,
                                                                (yyvsp[0].lex_str).length, (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 37734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2199:
#line 13817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_string* item= (Item_string*) (yyvsp[-1].item);
            item->append((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[0].lex_str).str,
                                                                (yyvsp[0].lex_str).length);
            }
          }
#line 37754 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2200:
#line 13836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[0].lex_str).str,
                                             (yyvsp[0].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
#line 37766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2201:
#line 13843 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string)= (yyvsp[0].string); }
#line 37772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2202:
#line 13849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 37789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2203:
#line 13862 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_hex_string(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 37802 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2204:
#line 13871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_bin_string(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 37819 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2205:
#line 13887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            bool rc;
            if (! lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
            const char *query_start= lex->sphead && !lex->clone_spec_offset ?
                                     lex->sphead->m_tmp_query : lip->get_buf();
            item= new (thd->mem_root) Item_param(thd,
                                                 (uint)(lip->get_tok_start() -
                                                        query_start));
            if (!((yyval.item_param)= item))
              MYSQL_YYABORT;
            if (!lex->clone_spec_offset)
              rc= lex->param_list.push_back(item, thd->mem_root);
            else
              rc= item->add_as_clone(thd);
            if (rc)
              my_yyabort_error((ER_OUT_OF_RESOURCES, MYF(0)));

          }
#line 37846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2206:
#line 13912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item_num); }
#line 37852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2207:
#line 13914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[0].item_num)->max_length++;
            (yyval.item)= (yyvsp[0].item_num)->neg(thd);
          }
#line 37861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2208:
#line 13921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 37867 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2209:
#line 13922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item_num); }
#line 37873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2210:
#line 13923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 37879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2211:
#line 13925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            YYLIP->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item)= new (thd->mem_root) Item_null(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
#line 37897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2212:
#line 13939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_bool(thd, (char*) "FALSE",0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 37907 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2213:
#line 13945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_bool(thd, (char*) "TRUE",1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 37917 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2214:
#line 13951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 37927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2215:
#line 13957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_hex_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 37937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2216:
#line 13963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 37947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2217:
#line 13969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_string_with_introducer *item_str;
            /*
              Pass NULL as name. Name will be set in the "select_item" rule and
              will include the introducer and the original hex/bin notation.
            */
            item_str= new (thd->mem_root)
               Item_string_with_introducer(thd, NULL, (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length(),
                                           (yyvsp[-1].charset));
            if (!item_str || !item_str->check_well_formed_result(true))
              MYSQL_YYABORT;

            (yyval.item)= item_str;
          }
#line 37966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2218:
#line 13987 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[0].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[0].lex_str).str, NULL, &error),
                           (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 37980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2219:
#line 13997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[0].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[0].lex_str).str, NULL, &error),
                           (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 37994 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2220:
#line 14007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 38004 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2221:
#line 14013 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
#line 38017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2222:
#line 14022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_float(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
#line 38029 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2223:
#line 14034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
#line 38039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2224:
#line 14040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
#line 38049 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2225:
#line 14046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
#line 38059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2226:
#line 14055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.with_clause)= 0; }
#line 38065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2227:
#line 14057 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.with_clause)= (yyvsp[0].with_clause);
          }
#line 38073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2228:
#line 14065 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             With_clause *with_clause=
             new With_clause((yyvsp[0].num), Lex->curr_with_clause);
             if (with_clause == NULL)
               MYSQL_YYABORT;
             Lex->derived_tables|= DERIVED_WITH;
             Lex->curr_with_clause= with_clause;
             with_clause->add_to_list(Lex->with_clauses_list_last_next);
          }
#line 38087 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2229:
#line 14075 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.with_clause)= Lex->curr_with_clause;
            Lex->curr_with_clause= Lex->curr_with_clause->pop();
          }
#line 38096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2230:
#line 14083 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 38102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2231:
#line 14084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 38108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2234:
#line 14097 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[0].lex_str_list)= new List<LEX_STRING> (Lex->with_column_list);
            if ((yyvsp[0].lex_str_list) == NULL)
              MYSQL_YYABORT;
            Lex->with_column_list.empty();
          }
#line 38119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2235:
#line 14104 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            const char *query_start= lex->sphead ? lex->sphead->m_tmp_query
                                                 : thd->query();
            char *spec_start= (yyvsp[-3].simple_string) + 1;
            With_element *elem= new With_element((yyvsp[-8].lex_str_ptr), *(yyvsp[-7].lex_str_list), (yyvsp[-2].select_lex)->master_unit());
	    if (elem == NULL || Lex->curr_with_clause->add_with_element(elem))
	      MYSQL_YYABORT;
            if (elem->set_unparsed_spec(thd, spec_start, (yyvsp[-1].simple_string),
                                        (uint) (spec_start - query_start)))
              MYSQL_YYABORT;
	  }
#line 38136 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2236:
#line 14121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str_list)= NULL; }
#line 38142 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2237:
#line 14123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str_list)= NULL; }
#line 38148 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2238:
#line 14129 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->with_column_list.push_back((LEX_STRING*)
                    thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)));
	  }
#line 38157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2239:
#line 14134 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->with_column_list.push_back((LEX_STRING*)
                    thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)));
          }
#line 38166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2240:
#line 14143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str_ptr)= (LEX_STRING *) thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
#line 38176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2241:
#line 14157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 38182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2242:
#line 14158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 38188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2243:
#line 14163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
#line 38201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2244:
#line 14172 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[-4].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[-2].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
#line 38217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2245:
#line 14186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 38223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2246:
#line 14191 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
                my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));

              Item_splocal *splocal;
              uint pos_in_query= 0;
              uint len_in_query= 0;
              if (!lex->clone_spec_offset)
              {
                pos_in_query= (uint)(lip->get_tok_start_prev() -
                                     lex->sphead->m_tmp_query);
                len_in_query= (uint)(lip->get_tok_end() -
                                     lip->get_tok_start_prev());
              }
              splocal= new (thd->mem_root)
                         Item_splocal(thd, (yyvsp[0].lex_str), spv->offset, spv->sql_type(),
                                      pos_in_query, len_in_query);
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, NullS, (yyvsp[0].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[0].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 38278 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2247:
#line 14241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 38284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2248:
#line 14246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[0].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, NullS, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2249:
#line 14262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 38311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2250:
#line 14267 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[-2].lex_str).str[0]=='N' || (yyvsp[-2].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT"));

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE"));

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool tmp_read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(thd, Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[0].lex_str).str,
                                            SELECT_ACL,
                                            tmp_read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[-2].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 38387 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2251:
#line 14339 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[-2].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2252:
#line 14363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[-4].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[-2].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 schema,
                                                 (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38446 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2253:
#line 14392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 38452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2254:
#line 14394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[-4].lex_str).str, table->db))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-4].lex_str).str));
            if (my_strcasecmp(table_alias_charset, (yyvsp[-2].lex_str).str,
                              table->table_name))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            (yyval.lex_str)=(yyvsp[0].lex_str);
          }
#line 38466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2255:
#line 14404 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[-2].lex_str).str, table->alias))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            (yyval.lex_str)=(yyvsp[0].lex_str);
          }
#line 38477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2256:
#line 14410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 38483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2257:
#line 14415 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[0].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38493 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2258:
#line 14421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[-2].lex_str), (yyvsp[0].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2259:
#line 14427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* For Delphi */
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[0].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2260:
#line 14437 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[-1].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2261:
#line 14443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[-3].lex_str), (yyvsp[-1].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38534 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2262:
#line 14452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new (thd->mem_root) Table_ident(thd, db, (yyvsp[0].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2263:
#line 14461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 38551 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2264:
#line 14463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              uint wlen= Well_formed_prefix(cs, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length).length();
              if (wlen < (yyvsp[0].lex_str).length)
              {
                ErrConvString err((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[0].lex_str);
            }
            else
            {
              if (thd->convert_with_error(system_charset_info, &(yyval.lex_str),
                                          thd->charset(), (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length))
                MYSQL_YYABORT;
            }
          }
#line 38577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2265:
#line 14488 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
#line 38592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2266:
#line 14502 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
#line 38607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2267:
#line 14516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
#line 38623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2268:
#line 14530 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 38629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2269:
#line 14532 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 38640 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2270:
#line 14541 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 38646 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2271:
#line 14543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 38657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2272:
#line 14552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 38663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2273:
#line 14554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 38674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2274:
#line 14563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 38680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2275:
#line 14564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 38686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2276:
#line 14565 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 38692 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2277:
#line 14570 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[0].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
#line 38709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2278:
#line 14583 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[-2].lex_str); (yyval.lex_user)->host=(yyvsp[0].lex_str);
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
#line 38743 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2279:
#line 14613 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
#line 38755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2282:
#line 14625 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           if ((yyvsp[0].lex_user)->user.str != current_user.str && (yyvsp[0].lex_user)->host.str == 0)
             (yyvsp[0].lex_user)->host= host_not_specified;
           (yyval.lex_user)= (yyvsp[0].lex_user);
         }
#line 38765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2283:
#line 14634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2284:
#line 14635 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2285:
#line 14636 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2286:
#line 14637 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2287:
#line 14638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2288:
#line 14639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2289:
#line 14640 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2290:
#line 14641 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2291:
#line 14642 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38819 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2292:
#line 14643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2293:
#line 14644 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38831 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2294:
#line 14645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38837 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2295:
#line 14646 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38843 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2296:
#line 14647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38849 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2297:
#line 14648 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2298:
#line 14649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2299:
#line 14650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38867 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2300:
#line 14651 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2301:
#line 14652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2302:
#line 14653 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2303:
#line 14654 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2304:
#line 14655 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2305:
#line 14656 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2306:
#line 14657 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2307:
#line 14658 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2308:
#line 14659 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2309:
#line 14660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2310:
#line 14661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2311:
#line 14662 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2312:
#line 14663 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2313:
#line 14664 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2314:
#line 14665 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2315:
#line 14666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2316:
#line 14667 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2317:
#line 14668 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2318:
#line 14669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2319:
#line 14670 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2320:
#line 14671 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38993 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2321:
#line 14672 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2322:
#line 14673 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39005 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2323:
#line 14674 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2324:
#line 14675 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2325:
#line 14676 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39023 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2326:
#line 14677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39029 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2327:
#line 14678 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2328:
#line 14679 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39041 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2329:
#line 14680 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39047 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2330:
#line 14681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2331:
#line 14682 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2332:
#line 14683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2333:
#line 14684 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2334:
#line 14685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2335:
#line 14686 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2336:
#line 14687 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2337:
#line 14688 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39095 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2338:
#line 14689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2339:
#line 14690 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39107 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2340:
#line 14691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39113 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2341:
#line 14692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2342:
#line 14693 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39125 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2343:
#line 14694 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2344:
#line 14695 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2345:
#line 14696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2346:
#line 14697 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2347:
#line 14698 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2348:
#line 14699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2349:
#line 14700 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2350:
#line 14701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2351:
#line 14702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2352:
#line 14703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2353:
#line 14704 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2355:
#line 14709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2356:
#line 14718 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2357:
#line 14719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2358:
#line 14720 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2359:
#line 14721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2360:
#line 14722 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2361:
#line 14723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2362:
#line 14724 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39239 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2363:
#line 14725 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2364:
#line 14726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2365:
#line 14727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2366:
#line 14728 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2367:
#line 14729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2368:
#line 14730 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2369:
#line 14731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2370:
#line 14732 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2371:
#line 14733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2372:
#line 14734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2373:
#line 14735 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2374:
#line 14736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2375:
#line 14737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2376:
#line 14738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2377:
#line 14739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2378:
#line 14740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2379:
#line 14741 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2380:
#line 14742 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2381:
#line 14743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2382:
#line 14744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2383:
#line 14745 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2384:
#line 14746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2385:
#line 14747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2386:
#line 14748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2387:
#line 14749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2388:
#line 14750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2389:
#line 14751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2390:
#line 14752 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39407 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2391:
#line 14753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2392:
#line 14754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39419 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2393:
#line 14755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2394:
#line 14756 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2395:
#line 14757 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39437 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2396:
#line 14758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2397:
#line 14759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39449 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2398:
#line 14760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2399:
#line 14761 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2400:
#line 14762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2401:
#line 14763 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2402:
#line 14764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2403:
#line 14765 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2404:
#line 14766 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2405:
#line 14771 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2406:
#line 14772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2407:
#line 14773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2408:
#line 14774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2409:
#line 14775 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39521 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2410:
#line 14776 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2411:
#line 14777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2412:
#line 14778 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39539 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2413:
#line 14779 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2414:
#line 14780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39551 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2415:
#line 14781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2416:
#line 14782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39563 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2417:
#line 14783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39569 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2418:
#line 14784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39575 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2419:
#line 14785 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39581 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2420:
#line 14786 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2421:
#line 14787 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2422:
#line 14788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39599 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2423:
#line 14789 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2424:
#line 14790 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39611 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2425:
#line 14791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2426:
#line 14792 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2427:
#line 14793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2428:
#line 14794 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2429:
#line 14795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2430:
#line 14796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2431:
#line 14797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2432:
#line 14798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39659 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2433:
#line 14799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39665 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2434:
#line 14800 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2435:
#line 14801 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2436:
#line 14802 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2437:
#line 14803 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2438:
#line 14804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2439:
#line 14805 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2440:
#line 14806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2441:
#line 14807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2442:
#line 14808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2443:
#line 14809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2444:
#line 14810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2445:
#line 14811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39737 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2446:
#line 14812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39743 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2447:
#line 14813 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2448:
#line 14814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2449:
#line 14815 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2450:
#line 14816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39767 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2451:
#line 14817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2452:
#line 14818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39779 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2453:
#line 14819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2454:
#line 14820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39791 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2455:
#line 14821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39797 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2456:
#line 14822 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2457:
#line 14823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39809 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2458:
#line 14824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2459:
#line 14825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39821 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2460:
#line 14826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39827 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2461:
#line 14827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39833 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2462:
#line 14828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39839 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2463:
#line 14829 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39845 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2464:
#line 14830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39851 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2465:
#line 14831 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39857 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2466:
#line 14832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2467:
#line 14833 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39869 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2468:
#line 14834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2469:
#line 14835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39881 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2470:
#line 14836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39887 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2471:
#line 14837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39893 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2472:
#line 14838 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2473:
#line 14839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39905 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2474:
#line 14840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2475:
#line 14841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39917 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2476:
#line 14842 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2477:
#line 14843 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2478:
#line 14844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2479:
#line 14845 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2480:
#line 14846 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2481:
#line 14847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39953 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2482:
#line 14848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2483:
#line 14849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2484:
#line 14850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39971 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2485:
#line 14851 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39977 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2486:
#line 14852 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39983 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2487:
#line 14853 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39989 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2488:
#line 14854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2489:
#line 14855 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2490:
#line 14856 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40007 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2491:
#line 14857 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40013 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2492:
#line 14858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2493:
#line 14859 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40025 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2494:
#line 14860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40031 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2495:
#line 14861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40037 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2496:
#line 14862 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2497:
#line 14863 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40049 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2498:
#line 14864 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40055 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2499:
#line 14865 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2500:
#line 14866 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2501:
#line 14867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2502:
#line 14868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40079 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2503:
#line 14869 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2504:
#line 14870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2505:
#line 14871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40097 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2506:
#line 14872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2507:
#line 14873 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2508:
#line 14874 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2509:
#line 14875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2510:
#line 14876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2511:
#line 14877 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2512:
#line 14878 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40139 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2513:
#line 14879 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2514:
#line 14880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40151 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2515:
#line 14881 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2516:
#line 14882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40163 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2517:
#line 14883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40169 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2518:
#line 14884 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40175 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2519:
#line 14885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40181 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2520:
#line 14886 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40187 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2521:
#line 14887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40193 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2522:
#line 14888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40199 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2523:
#line 14889 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40205 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2524:
#line 14890 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2525:
#line 14891 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2526:
#line 14892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2527:
#line 14893 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2528:
#line 14894 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2529:
#line 14895 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2530:
#line 14896 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2531:
#line 14897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2532:
#line 14898 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2533:
#line 14899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2534:
#line 14900 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40271 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2535:
#line 14901 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40277 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2536:
#line 14902 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2537:
#line 14903 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2538:
#line 14904 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40295 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2539:
#line 14905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2540:
#line 14906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40307 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2541:
#line 14907 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2542:
#line 14908 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40319 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2543:
#line 14909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40325 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2544:
#line 14910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40331 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2545:
#line 14911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40337 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2546:
#line 14912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2547:
#line 14913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40349 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2548:
#line 14914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40355 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2549:
#line 14915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2550:
#line 14916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2551:
#line 14917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2552:
#line 14918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2553:
#line 14919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2554:
#line 14920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40391 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2555:
#line 14921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2556:
#line 14922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2557:
#line 14923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2558:
#line 14924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2559:
#line 14925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2560:
#line 14926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2561:
#line 14927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2562:
#line 14928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40439 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2563:
#line 14929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40445 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2564:
#line 14930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2565:
#line 14931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2566:
#line 14932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40463 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2567:
#line 14933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40469 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2568:
#line 14934 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40475 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2569:
#line 14935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40481 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2570:
#line 14936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2571:
#line 14937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40493 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2572:
#line 14938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2573:
#line 14939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2574:
#line 14940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2575:
#line 14941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2576:
#line 14942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2577:
#line 14943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2578:
#line 14944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2579:
#line 14945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40541 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2580:
#line 14946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2581:
#line 14947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2582:
#line 14948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2583:
#line 14949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2584:
#line 14950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2585:
#line 14951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2586:
#line 14952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2587:
#line 14953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2588:
#line 14954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40595 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2589:
#line 14955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2590:
#line 14956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2591:
#line 14957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2592:
#line 14958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40619 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2593:
#line 14959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40625 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2594:
#line 14960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40631 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2595:
#line 14961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40637 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2596:
#line 14962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2597:
#line 14963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40649 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2598:
#line 14964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2599:
#line 14965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2600:
#line 14966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2601:
#line 14967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2602:
#line 14968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40679 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2603:
#line 14969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2604:
#line 14970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40691 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2605:
#line 14971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40697 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2606:
#line 14972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2607:
#line 14973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2608:
#line 14974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2609:
#line 14975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2610:
#line 14976 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40727 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2611:
#line 14977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40733 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2612:
#line 14978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2613:
#line 14979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2614:
#line 14980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2615:
#line 14981 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2616:
#line 14982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2617:
#line 14983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2618:
#line 14984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2619:
#line 14985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2620:
#line 14986 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2621:
#line 14987 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40793 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2622:
#line 14988 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2623:
#line 14989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2624:
#line 14990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2625:
#line 14991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2626:
#line 14992 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2627:
#line 14993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2628:
#line 14994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2629:
#line 14995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2630:
#line 14996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2631:
#line 14997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2632:
#line 14998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2633:
#line 14999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2634:
#line 15000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2635:
#line 15001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2636:
#line 15002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2637:
#line 15003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2638:
#line 15004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2639:
#line 15005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40901 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2640:
#line 15006 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40907 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2641:
#line 15007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40913 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2642:
#line 15008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2643:
#line 15009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40925 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2644:
#line 15010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2645:
#line 15011 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2646:
#line 15012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2647:
#line 15013 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40949 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2648:
#line 15014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2649:
#line 15015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40961 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2650:
#line 15016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40967 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2651:
#line 15017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40973 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2652:
#line 15018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2653:
#line 15019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2654:
#line 15020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40991 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2655:
#line 15021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40997 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2656:
#line 15022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41003 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2657:
#line 15023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2658:
#line 15024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2659:
#line 15025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2660:
#line 15026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2661:
#line 15027 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2662:
#line 15028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2663:
#line 15029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2664:
#line 15030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41051 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2665:
#line 15031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2666:
#line 15043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->autocommit= 0;
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 41071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2667:
#line 15053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2668:
#line 15055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->option_type= OPT_SESSION;
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->autocommit= 0;
          }
#line 41089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2669:
#line 15063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0), "SET STATEMENT"));
            lex->stmt_var_list= lex->var_list;
            lex->var_list.empty();
          }
#line 41101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2670:
#line 15071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41107 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2673:
#line 15087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
#line 41116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2675:
#line 15093 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= OPT_DEFAULT;
          }
#line 41124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2676:
#line 15097 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
#line 41133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2677:
#line 15102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= (yyvsp[0].var_type);
          }
#line 41141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2679:
#line 15112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 41150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2681:
#line 15118 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 41159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2684:
#line 15132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 41167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2685:
#line 15136 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 41176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2686:
#line 15141 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 41184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2687:
#line 15145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 41193 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2688:
#line 15154 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= (yyvsp[0].var_type);
          }
#line 41201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2691:
#line 15162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 41207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2692:
#line 15163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2693:
#line 15164 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41219 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2694:
#line 15168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2695:
#line 15169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 41231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2696:
#line 15170 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2697:
#line 15171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2698:
#line 15175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_DEFAULT; }
#line 41249 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2699:
#line 15176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 41255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2700:
#line 15177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2701:
#line 15178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2702:
#line 15184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if ((yyvsp[-2].variable).var && (yyvsp[-2].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[-2].variable), lex->option_type, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceding local variable is illegal.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 41291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2703:
#line 15208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if ((yyvsp[-2].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(thd, &(yyvsp[-2].variable).base_name, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[-2].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[-2].variable), lex->option_type, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[-2].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
          }
#line 41321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2704:
#line 15234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[-2].lex_str), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new (thd->mem_root) set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var, thd->mem_root);
          }
#line 41336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2705:
#line 15245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            struct sys_var_with_base tmp= (yyvsp[-2].variable);
            if (tmp.var == trg_new_row_fake_var)
            {
              my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), 3, "NEW");
              MYSQL_YYABORT;
            }
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[-3].var_type), (yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 41357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2706:
#line 15262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[0].charset) ? (yyvsp[0].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= (new (thd->mem_root)
                  set_var_collation_client(cs2,
                                           thd->variables.collation_database,
                                            cs2));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 41375 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2707:
#line 15276 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(thd, ER_SYNTAX_ERROR);

            MYSQL_YYABORT;
          }
#line 41394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2708:
#line 15291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[-1].charset) ? (yyvsp[-1].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[0].charset) ? (yyvsp[0].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new (thd->mem_root) set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 41417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2709:
#line 15310 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            LEX_USER *user;
            if (!(user=(LEX_USER *) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role(user,
                                                             (yyvsp[0].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 41438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2710:
#line 15327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role((yyvsp[0].lex_user), (yyvsp[-2].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 41454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2711:
#line 15339 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_role *var= new (thd->mem_root) set_var_role((yyvsp[0].lex_str));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 41466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2712:
#line 15347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_password *var= (new (thd->mem_root)
                                    set_var_password(lex->definer));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 41482 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2713:
#line 15363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[0].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[0].lex_str);
            }
          }
#line 41512 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2714:
#line 15389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[-2].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "OLD")))
            {
              if ((yyvsp[-2].lex_str).str[0]=='O' || (yyvsp[-2].lex_str).str[0]=='o')
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", ""));
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after "));
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[0].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[0].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[-2].lex_str);
            }
          }
#line 41553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2715:
#line 15426 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[0].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
#line 41568 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2720:
#line 15447 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[0].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_read_only"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 41587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2721:
#line 15465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[0].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_isolation"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 41606 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2722:
#line 15482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= true; }
#line 41612 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2723:
#line 15483 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 41618 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2724:
#line 15487 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
#line 41624 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2725:
#line 15488 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
#line 41630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2726:
#line 15489 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
#line 41636 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2727:
#line 15490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
#line 41642 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2728:
#line 15495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (spc && spc->find_variable(pw, false))
              my_yyabort_error((ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str));
            if (!(lex->definer= (LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            lex->definer->user= current_user;
            lex->definer->plugin= empty_lex_str;
            lex->definer->auth= empty_lex_str;
          }
#line 41660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2729:
#line 15508 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer= (yyvsp[-1].lex_user); }
#line 41666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2730:
#line 15512 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer->pwhash= (yyvsp[0].lex_str);}
#line 41672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2731:
#line 15513 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer->pwtext= (yyvsp[-1].lex_str); }
#line 41678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2732:
#line 15515 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->definer->pwtext= (yyvsp[-1].lex_str);
            Lex->definer->pwhash.str= Item_func_password::alloc(thd,
                                   (yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length, Item_func_password::OLD);
            Lex->definer->pwhash.length=  SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
          }
#line 41689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2733:
#line 15524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 41695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2734:
#line 15525 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=0; }
#line 41701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2735:
#line 15527 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ON",  2);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 41711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2736:
#line 15533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ALL", 3);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 41721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2737:
#line 15539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "binary", 6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 41731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2738:
#line 15550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "LOCK"));
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
#line 41743 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2739:
#line 15558 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2740:
#line 15562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 41755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2741:
#line 15563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 41761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2744:
#line 15573 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[0].num);
            bool lock_for_write= lock_type >= TL_WRITE_ALLOW_WRITE;
            ulong table_options= lock_for_write ? TL_OPTION_UPDATING : 0;
            enum_mdl_type mdl_type= !lock_for_write
                                    ? MDL_SHARED_READ
                                    : lock_type == TL_WRITE_CONCURRENT_INSERT
                                      ? MDL_SHARED_WRITE
                                      : MDL_SHARED_NO_READ_WRITE;

            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), (yyvsp[-1].lex_str_ptr), table_options,
                                           lock_type, mdl_type))
              MYSQL_YYABORT;
          }
#line 41780 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2745:
#line 15590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_READ_NO_INSERT; }
#line 41786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2746:
#line 15591 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_WRITE_DEFAULT; }
#line 41792 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2747:
#line 15593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 41800 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2748:
#line 15597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
#line 41806 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2749:
#line 15598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_READ; }
#line 41812 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2750:
#line 15603 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "UNLOCK"));
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
#line 41824 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2751:
#line 15611 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41830 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2752:
#line 15620 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-2].table), (yyvsp[0].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
#line 41843 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2753:
#line 15629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), 0, 0))
              MYSQL_YYABORT;
          }
#line 41856 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2754:
#line 15638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int(thd, (int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), 0, 0))
              MYSQL_YYABORT;
          }
#line 41877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2755:
#line 15655 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
#line 41892 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2756:
#line 15668 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ident= null_lex_str; }
#line 41898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2757:
#line 15669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ident= (yyvsp[-1].lex_str); }
#line 41904 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2758:
#line 15673 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RFIRST; }
#line 41910 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2759:
#line 15674 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RNEXT;  }
#line 41916 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2760:
#line 15678 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RFIRST; }
#line 41922 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2761:
#line 15679 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RNEXT;  }
#line 41928 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2762:
#line 15680 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RPREV;  }
#line 41934 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2763:
#line 15681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RLAST;  }
#line 41940 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2764:
#line 15683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[0].ha_rkey_mode);
            if (!(lex->insert_list= new (thd->mem_root) List_item))
              MYSQL_YYABORT;
          }
#line 41952 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2765:
#line 15691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41958 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2766:
#line 15695 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
#line 41964 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2767:
#line 15696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
#line 41970 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2768:
#line 15697 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
#line 41976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2769:
#line 15698 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
#line 41982 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2770:
#line 15699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
#line 41988 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2771:
#line 15706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41994 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2772:
#line 15711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
#line 42004 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2773:
#line 15717 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
#line 42019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2774:
#line 15728 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
#line 42034 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2775:
#line 15739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
#line 42042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2776:
#line 15743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[-2].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
#line 42053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2777:
#line 15750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[-2].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2778:
#line 15759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 42069 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2779:
#line 15761 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 42075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2780:
#line 15766 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2781:
#line 15772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
#line 42091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2782:
#line 15779 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
#line 42106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2783:
#line 15791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
#line 42121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2784:
#line 15802 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[-3].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
#line 42132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2785:
#line 15809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[-3].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2786:
#line 15820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer = 0; }
#line 42150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2787:
#line 15821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer = (yyvsp[0].lex_user); }
#line 42156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2788:
#line 15825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= false; }
#line 42162 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2789:
#line 15826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= true; }
#line 42168 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2790:
#line 15831 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42177 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2791:
#line 15836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2792:
#line 15844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->reset_auth();
          }
#line 42197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2793:
#line 15854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            CHARSET_INFO *cs= system_charset_info;
            /* trim end spaces (as they'll be lost in mysql.user anyway) */
            (yyvsp[0].lex_str).length= cs->cset->lengthsp(cs, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            (yyvsp[0].lex_str).str[(yyvsp[0].lex_str).length] = '\0';
            if ((yyvsp[0].lex_str).length == 0)
              my_yyabort_error((ER_INVALID_ROLE, MYF(0), ""));
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[0].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         cs, 0))
              MYSQL_YYABORT;
          }
#line 42220 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2797:
#line 15881 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2798:
#line 15883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
#line 42235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2803:
#line 15901 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = SELECT_ACL;}
#line 42241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2804:
#line 15902 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2805:
#line 15904 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = INSERT_ACL;}
#line 42253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2806:
#line 15905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2807:
#line 15907 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = UPDATE_ACL; }
#line 42265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2808:
#line 15908 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42271 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2809:
#line 15910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = REFERENCES_ACL;}
#line 42277 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2810:
#line 15911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2811:
#line 15912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= DELETE_ACL;}
#line 42289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2812:
#line 15913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42295 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2813:
#line 15914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= INDEX_ACL;}
#line 42301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2814:
#line 15915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= ALTER_ACL;}
#line 42307 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2815:
#line 15916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_ACL;}
#line 42313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2816:
#line 15917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= DROP_ACL;}
#line 42319 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2817:
#line 15918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= EXECUTE_ACL;}
#line 42325 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2818:
#line 15919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= RELOAD_ACL;}
#line 42331 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2819:
#line 15920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHUTDOWN_ACL;}
#line 42337 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2820:
#line 15921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= PROCESS_ACL;}
#line 42343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2821:
#line 15922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= FILE_ACL;}
#line 42349 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2822:
#line 15923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 42355 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2823:
#line 15924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHOW_DB_ACL;}
#line 42361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2824:
#line 15925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SUPER_ACL;}
#line 42367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2825:
#line 15926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_TMP_ACL;}
#line 42373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2826:
#line 15927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= LOCK_TABLES_ACL; }
#line 42379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2827:
#line 15928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= REPL_SLAVE_ACL; }
#line 42385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2828:
#line 15929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= REPL_CLIENT_ACL; }
#line 42391 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2829:
#line 15930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_VIEW_ACL; }
#line 42397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2830:
#line 15931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHOW_VIEW_ACL; }
#line 42403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2831:
#line 15932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_PROC_ACL; }
#line 42409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2832:
#line 15933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= ALTER_PROC_ACL; }
#line 42415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2833:
#line 15934 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_USER_ACL; }
#line 42421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2834:
#line 15935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= EVENT_ACL;}
#line 42427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2835:
#line 15936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= TRIGGER_ACL; }
#line 42433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2836:
#line 15937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
#line 42439 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2837:
#line 15941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42445 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2838:
#line 15942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2841:
#line 15952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SUBJECT"));
            lex->x509_subject=(yyvsp[0].lex_str).str;
          }
#line 42462 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2842:
#line 15959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "ISSUER"));
            lex->x509_issuer=(yyvsp[0].lex_str).str;
          }
#line 42473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2843:
#line 15966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "CIPHER"));
            lex->ssl_cipher=(yyvsp[0].lex_str).str;
          }
#line 42484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2844:
#line 15976 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 42499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2845:
#line 15987 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[-2].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 42512 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2846:
#line 15996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 42525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2847:
#line 16005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[0].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
#line 42538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2848:
#line 16017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2849:
#line 16022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2850:
#line 16030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2851:
#line 16035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42574 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2852:
#line 16043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2853:
#line 16048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2858:
#line 16059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-3].lex_user);
            (yyvsp[-3].lex_user)->pwtext= (yyvsp[0].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
          }
#line 42603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2859:
#line 16066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.lex_user)= (yyvsp[-4].lex_user); 
            (yyvsp[-4].lex_user)->pwhash= (yyvsp[0].lex_str);
          }
#line 42612 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2860:
#line 16071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-3].lex_user);
            (yyvsp[-3].lex_user)->plugin= (yyvsp[0].lex_str);
            (yyvsp[-3].lex_user)->auth= empty_lex_str;
          }
#line 42622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2861:
#line 16077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-5].lex_user);
            (yyvsp[-5].lex_user)->plugin= (yyvsp[-2].lex_str);
            (yyvsp[-5].lex_user)->auth= (yyvsp[0].lex_str);
          }
#line 42632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2862:
#line 16083 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 42638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2863:
#line 16088 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
#line 42647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2867:
#line 16102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            String *new_str= new (thd->mem_root) String((const char*) (yyvsp[0].lex_str).str,(yyvsp[0].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= (new (thd->mem_root)
                                LEX_COLUMN(*new_str,lex->which_columns));
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col, thd->mem_root);
            }
          }
#line 42677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2869:
#line 16132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
#line 42685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2870:
#line 16136 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
#line 42693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2871:
#line 16140 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
#line 42701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2872:
#line 16144 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
#line 42709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2873:
#line 16151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
#line 42719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2874:
#line 16157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
#line 42729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2875:
#line 16163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
#line 42739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2876:
#line 16169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[0].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
#line 42749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2877:
#line 16175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.max_statement_time= (yyvsp[0].item_num)->val_real();
            lex->mqh.specified_limits|= USER_RESOURCES::MAX_STATEMENT_TIME;
          }
#line 42759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2878:
#line 16183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2879:
#line 16184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2880:
#line 16188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2882:
#line 16194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2883:
#line 16195 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2884:
#line 16199 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2885:
#line 16200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 42801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2886:
#line 16204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2887:
#line 16205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2888:
#line 16209 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 42819 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2889:
#line 16210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2890:
#line 16215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
#line 42835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2891:
#line 16220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2892:
#line 16225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_COMPOUND;
            Lex->sphead->set_stmt_end(thd);
            Lex->sphead->restore_thd_mem_root(thd);
          }
#line 42851 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2893:
#line 16233 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 42857 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2894:
#line 16234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 42863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2895:
#line 16238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42869 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2896:
#line 16239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2897:
#line 16244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
#line 42881 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2898:
#line 16245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_NO; }
#line 42887 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2899:
#line 16246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_YES; }
#line 42893 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2900:
#line 16251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
#line 42899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2901:
#line 16252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_YES; }
#line 42905 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2902:
#line 16253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_NO; }
#line 42911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2903:
#line 16257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42917 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2904:
#line 16258 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2905:
#line 16263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[-1].m_yes_no_unk) != TVL_YES || (yyvsp[0].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[-1].m_yes_no_unk);
            lex->tx_release= (yyvsp[0].m_yes_no_unk);
          }
#line 42936 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2906:
#line 16275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[-1].m_yes_no_unk) != TVL_YES || (yyvsp[0].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[-1].m_yes_no_unk);
            lex->tx_release= (yyvsp[0].m_yes_no_unk);
          }
#line 42949 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2907:
#line 16285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 42959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2908:
#line 16294 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 42969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2909:
#line 16303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 42979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2910:
#line 16316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2912:
#line 16322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), TRUE))
              MYSQL_YYABORT;
          }
#line 42994 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2913:
#line 16327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
#line 43006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2914:
#line 16338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), TRUE))
              MYSQL_YYABORT;
          }
#line 43015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2915:
#line 16343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->pop_context();
          }
#line 43023 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2916:
#line 16349 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
#line 43041 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2917:
#line 16363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
#line 43050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2920:
#line 16379 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), FALSE))
              MYSQL_YYABORT;
          }
#line 43059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2921:
#line 16386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1; }
#line 43065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2922:
#line 16387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1; }
#line 43071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2923:
#line 16388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=0; }
#line 43077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2924:
#line 16402 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
#line 43085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2925:
#line 16408 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-2].select_lex); }
#line 43091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2926:
#line 16409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-2].select_lex); }
#line 43097 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2927:
#line 16413 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-1].select_lex); }
#line 43103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2928:
#line 16414 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-1].select_lex); }
#line 43109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2929:
#line 16418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[0].select_lex); }
#line 43115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2930:
#line 16419 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[0].select_lex); }
#line 43121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2931:
#line 16420 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-1].select_lex); }
#line 43127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2932:
#line 16426 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyvsp[-1].select_lex)->set_with_clause((yyvsp[-2].with_clause));
            (yyval.select_lex)= (yyvsp[-1].select_lex);
          }
#line 43136 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2933:
#line 16433 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
#line 43159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2934:
#line 16454 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;

            /*
              A subquery (and all the subsequent query blocks in a UNION) can
              add columns to an outer query block. Reserve space for them.
              Aggregate functions in having clause can also add fields to an
              outer select.
            */
            for (SELECT_LEX *temp= child->master_unit()->first_select();
                 temp != NULL; temp= temp->next_select())
            {
              lex->current_select->select_n_where_fields+=
                temp->select_n_where_fields;
              lex->current_select->select_n_having_items+=
                temp->select_n_having_items;
            }
          }
#line 43188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2939:
#line 16491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_STRAIGHT_JOIN; }
#line 43194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2940:
#line 16493 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
#line 43206 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2941:
#line 16500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_DISTINCT; }
#line 43212 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2942:
#line 16501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_SMALL_RESULT; }
#line 43218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2943:
#line 16502 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_BIG_RESULT; }
#line 43224 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2944:
#line 16504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
#line 43234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2945:
#line 16510 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
#line 43244 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2946:
#line 16515 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_ALL; }
#line 43250 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2947:
#line 16526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43256 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2948:
#line 16528 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43262 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2949:
#line 16530 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43268 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2963:
#line 16563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
#line 43283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2964:
#line 16577 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->definer= (yyvsp[0].lex_user);
            Lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
            Lex->ssl_cipher= Lex->x509_subject= Lex->x509_issuer= 0;
            bzero(&(Lex->mqh), sizeof(Lex->mqh));
          }
#line 43294 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2965:
#line 16593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
#line 43300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2966:
#line 16595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
#line 43306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2967:
#line 16597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
#line 43312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2968:
#line 16602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
#line 43318 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2969:
#line 16604 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
#line 43324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2970:
#line 16606 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
#line 43330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2971:
#line 16611 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
#line 43348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2973:
#line 16629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2975:
#line 16635 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
#line 43364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2976:
#line 16641 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
#line 43374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2977:
#line 16649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
#line 43384 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2978:
#line 16655 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            size_t len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            uint not_used;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select,
                            &not_used);
            lex->parsing_options.allows_variable= TRUE;
            lex->current_select->set_with_clause((yyvsp[-2].with_clause));
          }
#line 43401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2983:
#line 16682 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_NONE; }
#line 43407 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2984:
#line 16684 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
#line 43413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2985:
#line 16686 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
#line 43419 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2986:
#line 16688 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
#line 43425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2987:
#line 16699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.trigger_action_order_type)= TRG_ORDER_FOLLOWS; }
#line 43431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2988:
#line 16701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.trigger_action_order_type)= TRG_ORDER_PRECEDES; }
#line 43437 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2989:
#line 16706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
              (yyval.trg_execution_order).ordering_clause= TRG_ORDER_NONE;
              (yyval.trg_execution_order).anchor_trigger_name.str= NULL;
              (yyval.trg_execution_order).anchor_trigger_name.length= 0;
            }
#line 43447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2990:
#line 16713 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
              (yyval.trg_execution_order).ordering_clause= (yyvsp[-1].trigger_action_order_type);
              (yyval.trg_execution_order).anchor_trigger_name= (yyvsp[0].lex_str);
            }
#line 43456 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2991:
#line 16723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[0].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 43465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2992:
#line 16732 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $10 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
#line 43473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2993:
#line 16738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $14 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
#line 43481 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2994:
#line 16743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->trg_chistics.ordering_clause_begin= YYLIP->get_cpp_ptr();
          }
#line 43489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2995:
#line 16747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $19 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER"));

            lex->stmt_definition_begin= (yyvsp[-16].simple_string);
            lex->ident.str= (yyvsp[-9].simple_string);
            lex->ident.length= (yyvsp[-5].simple_string) - (yyvsp[-9].simple_string);
            lex->spname= (yyvsp[-13].spname);
            (*static_cast<st_trg_execution_order*>(&lex->trg_chistics))= ((yyvsp[0].trg_execution_order));
            lex->trg_chistics.ordering_clause_end= lip->get_cpp_ptr();

            if (!make_sp_head(thd, (yyvsp[-13].spname), TYPE_ENUM_TRIGGER))
              MYSQL_YYABORT;

            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
#line 43513 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2996:
#line 16767 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $21 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[-9].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
#line 43541 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2997:
#line 16799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { thd->lex->udf.type= UDFTYPE_AGGREGATE; }
#line 43547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2998:
#line 16800 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { thd->lex->udf.type= UDFTYPE_FUNCTION;  }
#line 43553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2999:
#line 16806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[-5].object_ddl_options)))
              MYSQL_YYABORT;
            if (is_native_function(thd, & (yyvsp[-4].lex_str)))
              my_yyabort_error((ER_NATIVE_FCT_NAME_COLLISION, MYF(0), (yyvsp[-4].lex_str).str));
            lex->sql_command= SQLCOM_CREATE_FUNCTION;
            lex->udf.name= (yyvsp[-4].lex_str);
            lex->udf.returns= (Item_result) (yyvsp[-2].num);
            lex->udf.dl= (yyvsp[0].lex_str).str;
          }
#line 43569 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3000:
#line 16824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $5 */
            LEX *lex= Lex;
            Lex_input_stream *lip= YYLIP;
            const char* tmp_param_begin;

            if (lex->add_create_options_with_check((yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
            lex->spname= (yyvsp[-1].spname);

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION"));

            if (!make_sp_head(thd, (yyvsp[-1].spname), TYPE_ENUM_FUNCTION))
              MYSQL_YYABORT;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
#line 43593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3001:
#line 16845 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
#line 43601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3002:
#line 16849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $10 */
            LEX *lex= Lex;
            lex->init_last_field(&lex->sphead->m_return_field_def, NULL,
                                 thd->variables.collation_database);
          }
#line 43611 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3003:
#line 16855 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $12 */
            if (Lex->sphead->fill_field_definition(thd, Lex, Lex->last_field))
              MYSQL_YYABORT;
          }
#line 43620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3004:
#line 16860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
#line 43631 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3005:
#line 16867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
              my_yyabort_error((ER_SP_NORETURN, MYF(0), sp->m_qname.str));
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to
                occur before the call), the warning will provide a hint
                explaining the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER_THD(thd, ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
#line 43684 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3006:
#line 16919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;

            if (Lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE"));

            if (!make_sp_head(thd, (yyvsp[0].spname), TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;
            Lex->spname= (yyvsp[0].spname);
          }
#line 43700 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3007:
#line 16931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
#line 43712 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3008:
#line 16940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
#line 43720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3009:
#line 16944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
#line 43728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3010:
#line 16948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
#line 43741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3011:
#line 16962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
#line 43749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3012:
#line 16966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
#line 43757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3013:
#line 16970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
#line 43765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3014:
#line 16974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
#line 43773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3015:
#line 16978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
#line 43781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3016:
#line 16982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
#line 43789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3017:
#line 16989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[0].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length(), 0, 0);
          }
#line 43800 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3018:
#line 16996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].string)->length() <= MAXGTRIDSIZE && (yyvsp[0].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[-2].string)->ptr(), (yyvsp[-2].string)->length(), (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length());
          }
#line 43811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3019:
#line 17003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].string)->length() <= MAXGTRIDSIZE && (yyvsp[-2].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[0].ulong_num), (yyvsp[-4].string)->ptr(), (yyvsp[-4].string)->length(), (yyvsp[-2].string)->ptr(), (yyvsp[-2].string)->length());
          }
#line 43822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3020:
#line 17012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3021:
#line 17013 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3022:
#line 17017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 43840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3023:
#line 17018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_JOIN;        }
#line 43846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3024:
#line 17019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_RESUME;      }
#line 43852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3025:
#line 17023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 43858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3026:
#line 17024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_ONE_PHASE;   }
#line 43864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3027:
#line 17029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 43870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3028:
#line 17031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_SUSPEND;     }
#line 43876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3030:
#line 17036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3031:
#line 17037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_FOR_MIGRATE; }
#line 43888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3032:
#line 17042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[-2].lex_str);
            lex->ident= (yyvsp[0].lex_str);
          }
#line 43899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3033:
#line 17049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 43910 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3034:
#line 17059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[0].lex_str);
          }
#line 43920 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3035:
#line 17065 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 43931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3036:
#line 17076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            YYERROR;
          }
#line 43939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;


#line 43943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (thd, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, thd);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, thd);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
