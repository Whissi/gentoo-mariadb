/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */
#line 25 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:339  */

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include <my_global.h>
#include "sql_priv.h"
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_show.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "sql_cte.h"
#include "sql_window.h"
#include "item_windowfunc.h"
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"
#include "lex_token.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(thd, (char*) (A));              \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)                  \
  if (!(A))                                      \
  {                                              \
    my_parse_error(thd, ER_SYNTAX_ERROR);        \
    MYSQL_YYABORT;                               \
  }

#define my_yyabort_error(A)                      \
  do { my_error A; MYSQL_YYABORT; } while(0)

#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

static void my_parse_error_intern(THD *thd, const char *err_text,
                                  const char *yytext)
{
  Lex_input_stream *lip= &thd->m_parser_state->m_lip;
  if (!yytext)
  {
    if (!(yytext= lip->get_tok_start()))
      yytext= "";
  }
  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext),
                    thd->variables.character_set_client);
  my_error(ER_PARSE_ERROR, MYF(0), err_text, err.ptr(), lip->yylineno);
}


static void my_parse_error(THD *thd, uint err_number, const char *yytext=0)
{
  return my_parse_error_intern(thd, ER_THD(thd, err_number), yytext);
}

void LEX::parse_error()
{
  my_parse_error(thd, ER_SYNTAX_ERROR);
}


static Item* escape(THD *thd)
{
  thd->lex->escape_used= false;
  const char *esc= thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES ? "" : "\\";
  return new (thd->mem_root) Item_string_ascii(thd, esc, MY_TEST(esc[0]));
}


/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER_THD(thd, ER_SYNTAX_ERROR);
  my_parse_error_intern(thd, s, 0);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


static sp_head *make_sp_head(THD *thd, sp_name *name,
                             enum stored_procedure_type type)
{
  LEX *lex= thd->lex;
  sp_head *sp;

  /* Order is important here: new - reset - init */
  if ((sp= sp_head::create()))
  {
    sp->reset_thd_mem_root(thd);
    sp->init(lex);
    sp->m_type= type;
    if (name)
      sp->init_sp_name(thd, name);
    sp->m_chistics= &lex->sp_chistics;
    lex->sphead= sp;
  }
  bzero(&lex->sp_chistics, sizeof(lex->sp_chistics));
  return sp;
}

static bool maybe_start_compound_statement(THD *thd)
{
  if (!thd->lex->sphead)
  {
    if (!make_sp_head(thd, NULL, TYPE_ENUM_PROCEDURE))
      return 1;

    Lex->sp_chistics.suid= SP_IS_NOT_SUID;
    Lex->sphead->set_body_start(thd, YYLIP->get_cpp_ptr());
  }
  return 0;
}

static bool push_sp_label(THD *thd, LEX_STRING label)
{
  sp_pcontext *ctx= thd->lex->spcont;
  sp_label *lab= ctx->find_label(label);

  if (lab)
  {
    my_error(ER_SP_LABEL_REDEFINE, MYF(0), label.str);
    return 1;
  }
  else
  {
    lab= thd->lex->spcont->push_label(thd, label,
        thd->lex->sphead->instructions());
    lab->type= sp_label::ITERATION;
  }
  return 0;
}

static bool push_sp_empty_label(THD *thd)
{
  if (maybe_start_compound_statement(thd))
    return 1;
  /* Unlabeled controls get an empty label. */
  thd->lex->spcont->push_label(thd, empty_lex_str,
      thd->lex->sphead->instructions());
  return 0;
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new (lex->thd->mem_root)
    sp_instr_set_case_expr(sp->instructions(), parsing_ctx, case_expr_id, expr,
                           lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;
  THD *thd= lex->thd;

  if (simple)
  {
    var= new (thd->mem_root)
         Item_case_expr(thd, ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new (thd->mem_root) Item_func_eq(thd, var, when);
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !MY_TEST(i) ||
         sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i= new (lex->thd->mem_root) sp_instr_jump(ip, ctx);
  if (!MY_TEST(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to after END CASE
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(lex->thd, i, ctx->last_label());
}

static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var != NULL)
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new (thd->mem_root)
         set_var(thd, var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var, thd->mem_root);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null(thd);
    if (it == NULL)
      return TRUE;
  }

  sp_set= new (thd->mem_root)
         sp_instr_set(lex->sphead->instructions(), lex->spcont,
                                   spv->offset, it, spv->sql_type(),
                                   lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new (thd->mem_root) Item_null(thd);

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(thd, lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new (thd->mem_root)
        sp_instr_set_trigger_field(lex->sphead->instructions(),
                                                 lex->spcont, trg_fld, val,
         lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= (uint)(start_in_q - lex->sphead->m_tmp_query);
  len_in_q= (uint)(end_in_q - start_in_q);

  item= new (thd->mem_root)
    Item_splocal(thd, name, spvar->offset, spvar->sql_type(),
                 pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(thd, left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(thd, left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(thd, left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select
          statement uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
                       is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->order_list.first && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "ORDER BY");
    return TRUE;
  }

  if (lex->current_select->explicit_limit && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "LIMIT");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  lex->current_select->with_all_modifier= !is_union_distinct;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}


static bool add_create_index_prepare(LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->option_list= NULL;
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    if (no_lookahead)
        lex->sphead->m_tmp_query= lip->get_ptr();
    else
        lex->sphead->m_tmp_query= lip->get_tok_end();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex->spcont, lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}


static void add_key_to_list(LEX *lex, LEX_STRING *field_name,
                            enum Key::Keytype type, bool check_exists)
{
  Key *key;
  MEM_ROOT *mem_root= lex->thd->mem_root;
  key= new (mem_root)
        Key(type, null_lex_str, HA_KEY_ALG_UNDEF, false,
             DDL_options(check_exists ?
                         DDL_options::OPT_IF_NOT_EXISTS :
                         DDL_options::OPT_NONE));
  key->columns.push_back(new (mem_root) Key_part_spec(*field_name, 0),
                         mem_root);
  lex->alter_info.key_list.push_back(key, mem_root);
}

void LEX::init_last_field(Column_definition *field, const char *field_name,
         CHARSET_INFO *cs)
{
  last_field= field;

  field->field_name= field_name;

  /* reset LEX fields that are used in Create_field::set_and_check() */
  charset= cs;
}

void LEX::set_last_field_type(const Lex_field_type_st &type)
{
  last_field->sql_type= type.field_type();
  last_field->charset= charset;

  if (type.length())
  {
    int err;
    last_field->length= my_strtoll10(type.length(), NULL, &err);
    if (err)
      last_field->length= ~0ULL; // safety
  }
  else
    last_field->length= 0;

  last_field->decimals= type.dec() ? (uint)atoi(type.dec()) : 0;
}

bool LEX::set_bincmp(CHARSET_INFO *cs, bool bin)
{
  /*
     if charset is NULL - we're parsing a field declaration.
     we cannot call find_bin_collation for a field here, because actual
     field charset is determined in get_sql_field_charset() much later.
     so we only set a flag.
  */
  if (!charset)
  {
    charset= cs;
    last_field->flags|= bin ? BINCMP_FLAG : 0;
    return false;
  }

  charset= bin ? find_bin_collation(cs ? cs : charset)
               :                    cs ? cs : charset;
  return charset == NULL;
}

#define bincmp_collation(X,Y)           \
  do                                    \
  {                                     \
     if (Lex->set_bincmp(X,Y))          \
       MYSQL_YYABORT;                   \
  } while(0)

Virtual_column_info *add_virtual_expression(THD *thd, Item *expr)
{
  Virtual_column_info *v= new (thd->mem_root) Virtual_column_info();
  if (!v)
  {
     mem_alloc_error(sizeof(Virtual_column_info));
     return 0;
   }
   v->expr= expr;
   v->utf8= 0;  /* connection charset */
   return v;
}


#line 984 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "sql_yacc.h".  */
#ifndef YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED
# define YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int MYSQLdebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    ABORT_SYM = 258,
    ACCESSIBLE_SYM = 259,
    ACTION = 260,
    ADD = 261,
    ADMIN_SYM = 262,
    ADDDATE_SYM = 263,
    AFTER_SYM = 264,
    AGAINST = 265,
    AGGREGATE_SYM = 266,
    ALGORITHM_SYM = 267,
    ALL = 268,
    ALTER = 269,
    ALWAYS_SYM = 270,
    ANALYZE_SYM = 271,
    AND_AND_SYM = 272,
    AND_SYM = 273,
    ANY_SYM = 274,
    AS = 275,
    ASC = 276,
    ASCII_SYM = 277,
    ASENSITIVE_SYM = 278,
    AT_SYM = 279,
    ATOMIC_SYM = 280,
    AUTHORS_SYM = 281,
    AUTOEXTEND_SIZE_SYM = 282,
    AUTO_INC = 283,
    AUTO_SYM = 284,
    AVG_ROW_LENGTH = 285,
    AVG_SYM = 286,
    BACKUP_SYM = 287,
    BEFORE_SYM = 288,
    BEGIN_SYM = 289,
    BETWEEN_SYM = 290,
    BIGINT = 291,
    BINARY = 292,
    BINLOG_SYM = 293,
    BIN_NUM = 294,
    BIT_AND = 295,
    BIT_OR = 296,
    BIT_SYM = 297,
    BIT_XOR = 298,
    BLOB_SYM = 299,
    BLOCK_SYM = 300,
    BOOLEAN_SYM = 301,
    BOOL_SYM = 302,
    BOTH = 303,
    BTREE_SYM = 304,
    BY = 305,
    BYTE_SYM = 306,
    CACHE_SYM = 307,
    CALL_SYM = 308,
    CASCADE = 309,
    CASCADED = 310,
    CASE_SYM = 311,
    CAST_SYM = 312,
    CATALOG_NAME_SYM = 313,
    CHAIN_SYM = 314,
    CHANGE = 315,
    CHANGED = 316,
    CHARSET = 317,
    CHAR_SYM = 318,
    CHECKPOINT_SYM = 319,
    CHECKSUM_SYM = 320,
    CHECK_SYM = 321,
    CIPHER_SYM = 322,
    CLASS_ORIGIN_SYM = 323,
    CLIENT_SYM = 324,
    CLOSE_SYM = 325,
    COALESCE = 326,
    CODE_SYM = 327,
    COLLATE_SYM = 328,
    COLLATION_SYM = 329,
    COLUMNS = 330,
    COLUMN_ADD_SYM = 331,
    COLUMN_CHECK_SYM = 332,
    COLUMN_CREATE_SYM = 333,
    COLUMN_DELETE_SYM = 334,
    COLUMN_GET_SYM = 335,
    COLUMN_SYM = 336,
    COLUMN_NAME_SYM = 337,
    COMMENT_SYM = 338,
    COMMITTED_SYM = 339,
    COMMIT_SYM = 340,
    COMPACT_SYM = 341,
    COMPLETION_SYM = 342,
    COMPRESSED_SYM = 343,
    CONCURRENT = 344,
    CONDITION_SYM = 345,
    CONNECTION_SYM = 346,
    CONSISTENT_SYM = 347,
    CONSTRAINT = 348,
    CONSTRAINT_CATALOG_SYM = 349,
    CONSTRAINT_NAME_SYM = 350,
    CONSTRAINT_SCHEMA_SYM = 351,
    CONTAINS_SYM = 352,
    CONTEXT_SYM = 353,
    CONTINUE_SYM = 354,
    CONTRIBUTORS_SYM = 355,
    CONVERT_SYM = 356,
    COUNT_SYM = 357,
    CPU_SYM = 358,
    CREATE = 359,
    CROSS = 360,
    CUBE_SYM = 361,
    CUME_DIST_SYM = 362,
    CURDATE = 363,
    CURRENT_SYM = 364,
    CURRENT_USER = 365,
    CURRENT_ROLE = 366,
    CURRENT_POS_SYM = 367,
    CURSOR_SYM = 368,
    CURSOR_NAME_SYM = 369,
    CURTIME = 370,
    DATABASE = 371,
    DATABASES = 372,
    DATAFILE_SYM = 373,
    DATA_SYM = 374,
    DATETIME = 375,
    DATE_ADD_INTERVAL = 376,
    DATE_SUB_INTERVAL = 377,
    DATE_SYM = 378,
    DAY_HOUR_SYM = 379,
    DAY_MICROSECOND_SYM = 380,
    DAY_MINUTE_SYM = 381,
    DAY_SECOND_SYM = 382,
    DAY_SYM = 383,
    DEALLOCATE_SYM = 384,
    DECIMAL_NUM = 385,
    DECIMAL_SYM = 386,
    DECLARE_SYM = 387,
    DEFAULT = 388,
    DEFINER_SYM = 389,
    DELAYED_SYM = 390,
    DELAY_KEY_WRITE_SYM = 391,
    DELETE_DOMAIN_ID_SYM = 392,
    DELETE_SYM = 393,
    DENSE_RANK_SYM = 394,
    DESC = 395,
    DESCRIBE = 396,
    DES_KEY_FILE = 397,
    DETERMINISTIC_SYM = 398,
    DIAGNOSTICS_SYM = 399,
    DIRECTORY_SYM = 400,
    DISABLE_SYM = 401,
    DISCARD = 402,
    DISK_SYM = 403,
    DISTINCT = 404,
    DIV_SYM = 405,
    DOUBLE_SYM = 406,
    DO_DOMAIN_IDS_SYM = 407,
    DO_SYM = 408,
    DROP = 409,
    DUAL_SYM = 410,
    DUMPFILE = 411,
    DUPLICATE_SYM = 412,
    DYNAMIC_SYM = 413,
    EACH_SYM = 414,
    ELSE = 415,
    ELSEIF_SYM = 416,
    ENABLE_SYM = 417,
    ENCLOSED = 418,
    END = 419,
    ENDS_SYM = 420,
    END_OF_INPUT = 421,
    ENGINES_SYM = 422,
    ENGINE_SYM = 423,
    ENUM = 424,
    EQUAL_SYM = 425,
    ERROR_SYM = 426,
    ERRORS = 427,
    ESCAPED = 428,
    ESCAPE_SYM = 429,
    EVENTS_SYM = 430,
    EVENT_SYM = 431,
    EVERY_SYM = 432,
    EXCHANGE_SYM = 433,
    EXAMINED_SYM = 434,
    EXCLUDE_SYM = 435,
    EXECUTE_SYM = 436,
    EXISTS = 437,
    EXIT_SYM = 438,
    EXPANSION_SYM = 439,
    EXPORT_SYM = 440,
    EXTENDED_SYM = 441,
    EXTENT_SIZE_SYM = 442,
    EXTRACT_SYM = 443,
    FALSE_SYM = 444,
    FAST_SYM = 445,
    FAULTS_SYM = 446,
    FETCH_SYM = 447,
    FILE_SYM = 448,
    FIRST_VALUE_SYM = 449,
    FIRST_SYM = 450,
    FIXED_SYM = 451,
    FLOAT_NUM = 452,
    FLOAT_SYM = 453,
    FLUSH_SYM = 454,
    FOLLOWS_SYM = 455,
    FOLLOWING_SYM = 456,
    FORCE_SYM = 457,
    FOREIGN = 458,
    FOR_SYM = 459,
    FORMAT_SYM = 460,
    FOUND_SYM = 461,
    FROM = 462,
    FULL = 463,
    FULLTEXT_SYM = 464,
    FUNCTION_SYM = 465,
    GE = 466,
    GENERAL = 467,
    GENERATED_SYM = 468,
    GEOMETRYCOLLECTION = 469,
    GEOMETRY_SYM = 470,
    GET_FORMAT = 471,
    GET_SYM = 472,
    GLOBAL_SYM = 473,
    GRANT = 474,
    GRANTS = 475,
    GROUP_SYM = 476,
    GROUP_CONCAT_SYM = 477,
    LAG_SYM = 478,
    LEAD_SYM = 479,
    HANDLER_SYM = 480,
    HARD_SYM = 481,
    HASH_SYM = 482,
    HAVING = 483,
    HELP_SYM = 484,
    HEX_NUM = 485,
    HEX_STRING = 486,
    HIGH_PRIORITY = 487,
    HOST_SYM = 488,
    HOSTS_SYM = 489,
    HOUR_MICROSECOND_SYM = 490,
    HOUR_MINUTE_SYM = 491,
    HOUR_SECOND_SYM = 492,
    HOUR_SYM = 493,
    ID_SYM = 494,
    IDENT = 495,
    IDENTIFIED_SYM = 496,
    IDENT_QUOTED = 497,
    IF_SYM = 498,
    IGNORE_DOMAIN_IDS_SYM = 499,
    IGNORE_SYM = 500,
    IGNORE_SERVER_IDS_SYM = 501,
    IMMEDIATE_SYM = 502,
    IMPORT = 503,
    INDEXES = 504,
    INDEX_SYM = 505,
    INFILE = 506,
    INITIAL_SIZE_SYM = 507,
    INNER_SYM = 508,
    INOUT_SYM = 509,
    INSENSITIVE_SYM = 510,
    INSERT = 511,
    INSERT_METHOD = 512,
    INSTALL_SYM = 513,
    INTERVAL_SYM = 514,
    INTO = 515,
    INT_SYM = 516,
    INVOKER_SYM = 517,
    IN_SYM = 518,
    IO_SYM = 519,
    IPC_SYM = 520,
    IS = 521,
    ISOLATION = 522,
    ISSUER_SYM = 523,
    ITERATE_SYM = 524,
    JOIN_SYM = 525,
    JSON_SYM = 526,
    KEYS = 527,
    KEY_BLOCK_SIZE = 528,
    KEY_SYM = 529,
    KILL_SYM = 530,
    LANGUAGE_SYM = 531,
    LAST_SYM = 532,
    LAST_VALUE = 533,
    LE = 534,
    LEADING = 535,
    LEAVES = 536,
    LEAVE_SYM = 537,
    LEFT = 538,
    LESS_SYM = 539,
    LEVEL_SYM = 540,
    LEX_HOSTNAME = 541,
    LIKE = 542,
    LIMIT = 543,
    LINEAR_SYM = 544,
    LINES = 545,
    LINESTRING = 546,
    LIST_SYM = 547,
    LOAD = 548,
    LOCAL_SYM = 549,
    LOCATOR_SYM = 550,
    LOCKS_SYM = 551,
    LOCK_SYM = 552,
    LOGFILE_SYM = 553,
    LOGS_SYM = 554,
    LONGBLOB = 555,
    LONGTEXT = 556,
    LONG_NUM = 557,
    LONG_SYM = 558,
    LOOP_SYM = 559,
    LOW_PRIORITY = 560,
    MASTER_CONNECT_RETRY_SYM = 561,
    MASTER_DELAY_SYM = 562,
    MASTER_GTID_POS_SYM = 563,
    MASTER_HOST_SYM = 564,
    MASTER_LOG_FILE_SYM = 565,
    MASTER_LOG_POS_SYM = 566,
    MASTER_PASSWORD_SYM = 567,
    MASTER_PORT_SYM = 568,
    MASTER_SERVER_ID_SYM = 569,
    MASTER_SSL_CAPATH_SYM = 570,
    MASTER_SSL_CA_SYM = 571,
    MASTER_SSL_CERT_SYM = 572,
    MASTER_SSL_CIPHER_SYM = 573,
    MASTER_SSL_CRL_SYM = 574,
    MASTER_SSL_CRLPATH_SYM = 575,
    MASTER_SSL_KEY_SYM = 576,
    MASTER_SSL_SYM = 577,
    MASTER_SSL_VERIFY_SERVER_CERT_SYM = 578,
    MASTER_SYM = 579,
    MASTER_USER_SYM = 580,
    MASTER_USE_GTID_SYM = 581,
    MASTER_HEARTBEAT_PERIOD_SYM = 582,
    MATCH = 583,
    MAX_CONNECTIONS_PER_HOUR = 584,
    MAX_QUERIES_PER_HOUR = 585,
    MAX_ROWS = 586,
    MAX_SIZE_SYM = 587,
    MAX_SYM = 588,
    MAX_UPDATES_PER_HOUR = 589,
    MAX_STATEMENT_TIME_SYM = 590,
    MAX_USER_CONNECTIONS_SYM = 591,
    MAX_VALUE_SYM = 592,
    MEDIUMBLOB = 593,
    MEDIUMINT = 594,
    MEDIUMTEXT = 595,
    MEDIUM_SYM = 596,
    MEMORY_SYM = 597,
    MERGE_SYM = 598,
    MESSAGE_TEXT_SYM = 599,
    MICROSECOND_SYM = 600,
    MIGRATE_SYM = 601,
    MINUTE_MICROSECOND_SYM = 602,
    MINUTE_SECOND_SYM = 603,
    MINUTE_SYM = 604,
    MIN_ROWS = 605,
    MIN_SYM = 606,
    MODE_SYM = 607,
    MODIFIES_SYM = 608,
    MODIFY_SYM = 609,
    MOD_SYM = 610,
    MONTH_SYM = 611,
    MULTILINESTRING = 612,
    MULTIPOINT = 613,
    MULTIPOLYGON = 614,
    MUTEX_SYM = 615,
    MYSQL_SYM = 616,
    MYSQL_ERRNO_SYM = 617,
    NAMES_SYM = 618,
    NAME_SYM = 619,
    NATIONAL_SYM = 620,
    NATURAL = 621,
    NCHAR_STRING = 622,
    NCHAR_SYM = 623,
    NE = 624,
    NEG = 625,
    NEW_SYM = 626,
    NEXT_SYM = 627,
    NODEGROUP_SYM = 628,
    NONE_SYM = 629,
    NOT2_SYM = 630,
    NOT_SYM = 631,
    NOW_SYM = 632,
    NO_SYM = 633,
    NO_WAIT_SYM = 634,
    NO_WRITE_TO_BINLOG = 635,
    NTILE_SYM = 636,
    NULL_SYM = 637,
    NUM = 638,
    NUMBER_SYM = 639,
    NUMERIC_SYM = 640,
    NTH_VALUE_SYM = 641,
    NVARCHAR_SYM = 642,
    OFFSET_SYM = 643,
    OLD_PASSWORD_SYM = 644,
    ON = 645,
    ONE_SYM = 646,
    ONLY_SYM = 647,
    ONLINE_SYM = 648,
    OPEN_SYM = 649,
    OPTIMIZE = 650,
    OPTIONS_SYM = 651,
    OPTION = 652,
    OPTIONALLY = 653,
    OR2_SYM = 654,
    ORDER_SYM = 655,
    OR_OR_SYM = 656,
    OR_SYM = 657,
    OTHERS_SYM = 658,
    OUTER = 659,
    OUTFILE = 660,
    OUT_SYM = 661,
    OVER_SYM = 662,
    OWNER_SYM = 663,
    PACK_KEYS_SYM = 664,
    PAGE_SYM = 665,
    PAGE_CHECKSUM_SYM = 666,
    PARAM_MARKER = 667,
    PARSER_SYM = 668,
    PARSE_VCOL_EXPR_SYM = 669,
    PARTIAL = 670,
    PARTITION_SYM = 671,
    PARTITIONS_SYM = 672,
    PARTITIONING_SYM = 673,
    PASSWORD_SYM = 674,
    PERCENT_RANK_SYM = 675,
    PERSISTENT_SYM = 676,
    PHASE_SYM = 677,
    PLUGINS_SYM = 678,
    PLUGIN_SYM = 679,
    POINT_SYM = 680,
    POLYGON = 681,
    PORT_SYM = 682,
    POSITION_SYM = 683,
    PRECEDES_SYM = 684,
    PRECEDING_SYM = 685,
    PRECISION = 686,
    PREPARE_SYM = 687,
    PRESERVE_SYM = 688,
    PREV_SYM = 689,
    PRIMARY_SYM = 690,
    PRIVILEGES = 691,
    PROCEDURE_SYM = 692,
    PROCESS = 693,
    PROCESSLIST_SYM = 694,
    PROFILE_SYM = 695,
    PROFILES_SYM = 696,
    PROXY_SYM = 697,
    PURGE = 698,
    QUARTER_SYM = 699,
    QUERY_SYM = 700,
    QUICK = 701,
    RANGE_SYM = 702,
    RANK_SYM = 703,
    READS_SYM = 704,
    READ_ONLY_SYM = 705,
    READ_SYM = 706,
    READ_WRITE_SYM = 707,
    REAL = 708,
    REBUILD_SYM = 709,
    RECOVER_SYM = 710,
    RECURSIVE_SYM = 711,
    REDOFILE_SYM = 712,
    REDO_BUFFER_SIZE_SYM = 713,
    REDUNDANT_SYM = 714,
    REFERENCES = 715,
    REGEXP = 716,
    RELAY = 717,
    RELAYLOG_SYM = 718,
    RELAY_LOG_FILE_SYM = 719,
    RELAY_LOG_POS_SYM = 720,
    RELAY_THREAD = 721,
    RELEASE_SYM = 722,
    RELOAD = 723,
    REMOVE_SYM = 724,
    RENAME = 725,
    REORGANIZE_SYM = 726,
    REPAIR = 727,
    REPEATABLE_SYM = 728,
    REPEAT_SYM = 729,
    REPLACE = 730,
    REPLICATION = 731,
    REQUIRE_SYM = 732,
    RESET_SYM = 733,
    RESIGNAL_SYM = 734,
    RESOURCES = 735,
    RESTORE_SYM = 736,
    RESTRICT = 737,
    RESUME_SYM = 738,
    RETURNED_SQLSTATE_SYM = 739,
    RETURNING_SYM = 740,
    RETURNS_SYM = 741,
    RETURN_SYM = 742,
    REVERSE_SYM = 743,
    REVOKE = 744,
    RIGHT = 745,
    ROLE_SYM = 746,
    ROLLBACK_SYM = 747,
    ROLLUP_SYM = 748,
    ROUTINE_SYM = 749,
    ROW_SYM = 750,
    ROWS_SYM = 751,
    ROW_COUNT_SYM = 752,
    ROW_FORMAT_SYM = 753,
    ROW_NUMBER_SYM = 754,
    RTREE_SYM = 755,
    SAVEPOINT_SYM = 756,
    SCHEDULE_SYM = 757,
    SCHEMA_NAME_SYM = 758,
    SECOND_MICROSECOND_SYM = 759,
    SECOND_SYM = 760,
    SECURITY_SYM = 761,
    SELECT_SYM = 762,
    SENSITIVE_SYM = 763,
    SEPARATOR_SYM = 764,
    SERIALIZABLE_SYM = 765,
    SERIAL_SYM = 766,
    SESSION_SYM = 767,
    SERVER_SYM = 768,
    SERVER_OPTIONS = 769,
    SET = 770,
    SET_VAR = 771,
    SHARE_SYM = 772,
    SHIFT_LEFT = 773,
    SHIFT_RIGHT = 774,
    SHOW = 775,
    SHUTDOWN = 776,
    SIGNAL_SYM = 777,
    SIGNED_SYM = 778,
    SIMPLE_SYM = 779,
    SLAVE = 780,
    SLAVES = 781,
    SLAVE_POS_SYM = 782,
    SLOW = 783,
    SMALLINT = 784,
    SNAPSHOT_SYM = 785,
    SOCKET_SYM = 786,
    SOFT_SYM = 787,
    SONAME_SYM = 788,
    SOUNDS_SYM = 789,
    SOURCE_SYM = 790,
    SPATIAL_SYM = 791,
    SPECIFIC_SYM = 792,
    SQLEXCEPTION_SYM = 793,
    SQLSTATE_SYM = 794,
    SQLWARNING_SYM = 795,
    SQL_BIG_RESULT = 796,
    SQL_BUFFER_RESULT = 797,
    SQL_CACHE_SYM = 798,
    SQL_CALC_FOUND_ROWS = 799,
    SQL_NO_CACHE_SYM = 800,
    SQL_SMALL_RESULT = 801,
    SQL_SYM = 802,
    SQL_THREAD = 803,
    REF_SYSTEM_ID_SYM = 804,
    SSL_SYM = 805,
    STARTING = 806,
    STARTS_SYM = 807,
    START_SYM = 808,
    STATEMENT_SYM = 809,
    STATS_AUTO_RECALC_SYM = 810,
    STATS_PERSISTENT_SYM = 811,
    STATS_SAMPLE_PAGES_SYM = 812,
    STATUS_SYM = 813,
    STDDEV_SAMP_SYM = 814,
    STD_SYM = 815,
    STOP_SYM = 816,
    STORAGE_SYM = 817,
    STORED_SYM = 818,
    STRAIGHT_JOIN = 819,
    STRING_SYM = 820,
    SUBCLASS_ORIGIN_SYM = 821,
    SUBDATE_SYM = 822,
    SUBJECT_SYM = 823,
    SUBPARTITIONS_SYM = 824,
    SUBPARTITION_SYM = 825,
    SUBSTRING = 826,
    SUM_SYM = 827,
    SUPER_SYM = 828,
    SUSPEND_SYM = 829,
    SWAPS_SYM = 830,
    SWITCHES_SYM = 831,
    SYSDATE = 832,
    TABLES = 833,
    TABLESPACE = 834,
    TABLE_REF_PRIORITY = 835,
    TABLE_SYM = 836,
    TABLE_CHECKSUM_SYM = 837,
    TABLE_NAME_SYM = 838,
    TEMPORARY = 839,
    TEMPTABLE_SYM = 840,
    TERMINATED = 841,
    TEXT_STRING = 842,
    TEXT_SYM = 843,
    THAN_SYM = 844,
    THEN_SYM = 845,
    TIES_SYM = 846,
    TIMESTAMP = 847,
    TIMESTAMP_ADD = 848,
    TIMESTAMP_DIFF = 849,
    TIME_SYM = 850,
    TINYBLOB = 851,
    TINYINT = 852,
    TINYTEXT = 853,
    TO_SYM = 854,
    TRAILING = 855,
    TRANSACTION_SYM = 856,
    TRANSACTIONAL_SYM = 857,
    TRIGGERS_SYM = 858,
    TRIGGER_SYM = 859,
    TRIM = 860,
    TRUE_SYM = 861,
    TRUNCATE_SYM = 862,
    TYPES_SYM = 863,
    TYPE_SYM = 864,
    UDF_RETURNS_SYM = 865,
    ULONGLONG_NUM = 866,
    UNBOUNDED_SYM = 867,
    UNCOMMITTED_SYM = 868,
    UNDEFINED_SYM = 869,
    UNDERSCORE_CHARSET = 870,
    UNDOFILE_SYM = 871,
    UNDO_BUFFER_SIZE_SYM = 872,
    UNDO_SYM = 873,
    UNICODE_SYM = 874,
    UNINSTALL_SYM = 875,
    UNION_SYM = 876,
    UNIQUE_SYM = 877,
    UNKNOWN_SYM = 878,
    UNLOCK_SYM = 879,
    UNSIGNED = 880,
    UNTIL_SYM = 881,
    UPDATE_SYM = 882,
    UPGRADE_SYM = 883,
    USAGE = 884,
    USER_SYM = 885,
    USE_FRM = 886,
    USE_SYM = 887,
    USING = 888,
    UTC_DATE_SYM = 889,
    UTC_TIMESTAMP_SYM = 890,
    UTC_TIME_SYM = 891,
    VALUES = 892,
    VALUE_SYM = 893,
    VARBINARY = 894,
    VARCHAR = 895,
    VARIABLES = 896,
    VARIANCE_SYM = 897,
    VARYING = 898,
    VAR_SAMP_SYM = 899,
    VIA_SYM = 900,
    VIEW_SYM = 901,
    VIRTUAL_SYM = 902,
    WAIT_SYM = 903,
    WARNINGS = 904,
    WEEK_SYM = 905,
    WEIGHT_STRING_SYM = 906,
    WHEN_SYM = 907,
    WHERE = 908,
    WINDOW_SYM = 909,
    WHILE_SYM = 910,
    WITH = 911,
    WITH_CUBE_SYM = 912,
    WITH_ROLLUP_SYM = 913,
    WORK_SYM = 914,
    WRAPPER_SYM = 915,
    WRITE_SYM = 916,
    X509_SYM = 917,
    XA_SYM = 918,
    XML_SYM = 919,
    XOR = 920,
    YEAR_MONTH_SYM = 921,
    YEAR_SYM = 922,
    ZEROFILL = 923,
    IMPOSSIBLE_ACTION = 924,
    CONDITIONLESS_JOIN = 925,
    ON_SYM = 926
  };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define ATOMIC_SYM 280
#define AUTHORS_SYM 281
#define AUTOEXTEND_SIZE_SYM 282
#define AUTO_INC 283
#define AUTO_SYM 284
#define AVG_ROW_LENGTH 285
#define AVG_SYM 286
#define BACKUP_SYM 287
#define BEFORE_SYM 288
#define BEGIN_SYM 289
#define BETWEEN_SYM 290
#define BIGINT 291
#define BINARY 292
#define BINLOG_SYM 293
#define BIN_NUM 294
#define BIT_AND 295
#define BIT_OR 296
#define BIT_SYM 297
#define BIT_XOR 298
#define BLOB_SYM 299
#define BLOCK_SYM 300
#define BOOLEAN_SYM 301
#define BOOL_SYM 302
#define BOTH 303
#define BTREE_SYM 304
#define BY 305
#define BYTE_SYM 306
#define CACHE_SYM 307
#define CALL_SYM 308
#define CASCADE 309
#define CASCADED 310
#define CASE_SYM 311
#define CAST_SYM 312
#define CATALOG_NAME_SYM 313
#define CHAIN_SYM 314
#define CHANGE 315
#define CHANGED 316
#define CHARSET 317
#define CHAR_SYM 318
#define CHECKPOINT_SYM 319
#define CHECKSUM_SYM 320
#define CHECK_SYM 321
#define CIPHER_SYM 322
#define CLASS_ORIGIN_SYM 323
#define CLIENT_SYM 324
#define CLOSE_SYM 325
#define COALESCE 326
#define CODE_SYM 327
#define COLLATE_SYM 328
#define COLLATION_SYM 329
#define COLUMNS 330
#define COLUMN_ADD_SYM 331
#define COLUMN_CHECK_SYM 332
#define COLUMN_CREATE_SYM 333
#define COLUMN_DELETE_SYM 334
#define COLUMN_GET_SYM 335
#define COLUMN_SYM 336
#define COLUMN_NAME_SYM 337
#define COMMENT_SYM 338
#define COMMITTED_SYM 339
#define COMMIT_SYM 340
#define COMPACT_SYM 341
#define COMPLETION_SYM 342
#define COMPRESSED_SYM 343
#define CONCURRENT 344
#define CONDITION_SYM 345
#define CONNECTION_SYM 346
#define CONSISTENT_SYM 347
#define CONSTRAINT 348
#define CONSTRAINT_CATALOG_SYM 349
#define CONSTRAINT_NAME_SYM 350
#define CONSTRAINT_SCHEMA_SYM 351
#define CONTAINS_SYM 352
#define CONTEXT_SYM 353
#define CONTINUE_SYM 354
#define CONTRIBUTORS_SYM 355
#define CONVERT_SYM 356
#define COUNT_SYM 357
#define CPU_SYM 358
#define CREATE 359
#define CROSS 360
#define CUBE_SYM 361
#define CUME_DIST_SYM 362
#define CURDATE 363
#define CURRENT_SYM 364
#define CURRENT_USER 365
#define CURRENT_ROLE 366
#define CURRENT_POS_SYM 367
#define CURSOR_SYM 368
#define CURSOR_NAME_SYM 369
#define CURTIME 370
#define DATABASE 371
#define DATABASES 372
#define DATAFILE_SYM 373
#define DATA_SYM 374
#define DATETIME 375
#define DATE_ADD_INTERVAL 376
#define DATE_SUB_INTERVAL 377
#define DATE_SYM 378
#define DAY_HOUR_SYM 379
#define DAY_MICROSECOND_SYM 380
#define DAY_MINUTE_SYM 381
#define DAY_SECOND_SYM 382
#define DAY_SYM 383
#define DEALLOCATE_SYM 384
#define DECIMAL_NUM 385
#define DECIMAL_SYM 386
#define DECLARE_SYM 387
#define DEFAULT 388
#define DEFINER_SYM 389
#define DELAYED_SYM 390
#define DELAY_KEY_WRITE_SYM 391
#define DELETE_DOMAIN_ID_SYM 392
#define DELETE_SYM 393
#define DENSE_RANK_SYM 394
#define DESC 395
#define DESCRIBE 396
#define DES_KEY_FILE 397
#define DETERMINISTIC_SYM 398
#define DIAGNOSTICS_SYM 399
#define DIRECTORY_SYM 400
#define DISABLE_SYM 401
#define DISCARD 402
#define DISK_SYM 403
#define DISTINCT 404
#define DIV_SYM 405
#define DOUBLE_SYM 406
#define DO_DOMAIN_IDS_SYM 407
#define DO_SYM 408
#define DROP 409
#define DUAL_SYM 410
#define DUMPFILE 411
#define DUPLICATE_SYM 412
#define DYNAMIC_SYM 413
#define EACH_SYM 414
#define ELSE 415
#define ELSEIF_SYM 416
#define ENABLE_SYM 417
#define ENCLOSED 418
#define END 419
#define ENDS_SYM 420
#define END_OF_INPUT 421
#define ENGINES_SYM 422
#define ENGINE_SYM 423
#define ENUM 424
#define EQUAL_SYM 425
#define ERROR_SYM 426
#define ERRORS 427
#define ESCAPED 428
#define ESCAPE_SYM 429
#define EVENTS_SYM 430
#define EVENT_SYM 431
#define EVERY_SYM 432
#define EXCHANGE_SYM 433
#define EXAMINED_SYM 434
#define EXCLUDE_SYM 435
#define EXECUTE_SYM 436
#define EXISTS 437
#define EXIT_SYM 438
#define EXPANSION_SYM 439
#define EXPORT_SYM 440
#define EXTENDED_SYM 441
#define EXTENT_SIZE_SYM 442
#define EXTRACT_SYM 443
#define FALSE_SYM 444
#define FAST_SYM 445
#define FAULTS_SYM 446
#define FETCH_SYM 447
#define FILE_SYM 448
#define FIRST_VALUE_SYM 449
#define FIRST_SYM 450
#define FIXED_SYM 451
#define FLOAT_NUM 452
#define FLOAT_SYM 453
#define FLUSH_SYM 454
#define FOLLOWS_SYM 455
#define FOLLOWING_SYM 456
#define FORCE_SYM 457
#define FOREIGN 458
#define FOR_SYM 459
#define FORMAT_SYM 460
#define FOUND_SYM 461
#define FROM 462
#define FULL 463
#define FULLTEXT_SYM 464
#define FUNCTION_SYM 465
#define GE 466
#define GENERAL 467
#define GENERATED_SYM 468
#define GEOMETRYCOLLECTION 469
#define GEOMETRY_SYM 470
#define GET_FORMAT 471
#define GET_SYM 472
#define GLOBAL_SYM 473
#define GRANT 474
#define GRANTS 475
#define GROUP_SYM 476
#define GROUP_CONCAT_SYM 477
#define LAG_SYM 478
#define LEAD_SYM 479
#define HANDLER_SYM 480
#define HARD_SYM 481
#define HASH_SYM 482
#define HAVING 483
#define HELP_SYM 484
#define HEX_NUM 485
#define HEX_STRING 486
#define HIGH_PRIORITY 487
#define HOST_SYM 488
#define HOSTS_SYM 489
#define HOUR_MICROSECOND_SYM 490
#define HOUR_MINUTE_SYM 491
#define HOUR_SECOND_SYM 492
#define HOUR_SYM 493
#define ID_SYM 494
#define IDENT 495
#define IDENTIFIED_SYM 496
#define IDENT_QUOTED 497
#define IF_SYM 498
#define IGNORE_DOMAIN_IDS_SYM 499
#define IGNORE_SYM 500
#define IGNORE_SERVER_IDS_SYM 501
#define IMMEDIATE_SYM 502
#define IMPORT 503
#define INDEXES 504
#define INDEX_SYM 505
#define INFILE 506
#define INITIAL_SIZE_SYM 507
#define INNER_SYM 508
#define INOUT_SYM 509
#define INSENSITIVE_SYM 510
#define INSERT 511
#define INSERT_METHOD 512
#define INSTALL_SYM 513
#define INTERVAL_SYM 514
#define INTO 515
#define INT_SYM 516
#define INVOKER_SYM 517
#define IN_SYM 518
#define IO_SYM 519
#define IPC_SYM 520
#define IS 521
#define ISOLATION 522
#define ISSUER_SYM 523
#define ITERATE_SYM 524
#define JOIN_SYM 525
#define JSON_SYM 526
#define KEYS 527
#define KEY_BLOCK_SIZE 528
#define KEY_SYM 529
#define KILL_SYM 530
#define LANGUAGE_SYM 531
#define LAST_SYM 532
#define LAST_VALUE 533
#define LE 534
#define LEADING 535
#define LEAVES 536
#define LEAVE_SYM 537
#define LEFT 538
#define LESS_SYM 539
#define LEVEL_SYM 540
#define LEX_HOSTNAME 541
#define LIKE 542
#define LIMIT 543
#define LINEAR_SYM 544
#define LINES 545
#define LINESTRING 546
#define LIST_SYM 547
#define LOAD 548
#define LOCAL_SYM 549
#define LOCATOR_SYM 550
#define LOCKS_SYM 551
#define LOCK_SYM 552
#define LOGFILE_SYM 553
#define LOGS_SYM 554
#define LONGBLOB 555
#define LONGTEXT 556
#define LONG_NUM 557
#define LONG_SYM 558
#define LOOP_SYM 559
#define LOW_PRIORITY 560
#define MASTER_CONNECT_RETRY_SYM 561
#define MASTER_DELAY_SYM 562
#define MASTER_GTID_POS_SYM 563
#define MASTER_HOST_SYM 564
#define MASTER_LOG_FILE_SYM 565
#define MASTER_LOG_POS_SYM 566
#define MASTER_PASSWORD_SYM 567
#define MASTER_PORT_SYM 568
#define MASTER_SERVER_ID_SYM 569
#define MASTER_SSL_CAPATH_SYM 570
#define MASTER_SSL_CA_SYM 571
#define MASTER_SSL_CERT_SYM 572
#define MASTER_SSL_CIPHER_SYM 573
#define MASTER_SSL_CRL_SYM 574
#define MASTER_SSL_CRLPATH_SYM 575
#define MASTER_SSL_KEY_SYM 576
#define MASTER_SSL_SYM 577
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 578
#define MASTER_SYM 579
#define MASTER_USER_SYM 580
#define MASTER_USE_GTID_SYM 581
#define MASTER_HEARTBEAT_PERIOD_SYM 582
#define MATCH 583
#define MAX_CONNECTIONS_PER_HOUR 584
#define MAX_QUERIES_PER_HOUR 585
#define MAX_ROWS 586
#define MAX_SIZE_SYM 587
#define MAX_SYM 588
#define MAX_UPDATES_PER_HOUR 589
#define MAX_STATEMENT_TIME_SYM 590
#define MAX_USER_CONNECTIONS_SYM 591
#define MAX_VALUE_SYM 592
#define MEDIUMBLOB 593
#define MEDIUMINT 594
#define MEDIUMTEXT 595
#define MEDIUM_SYM 596
#define MEMORY_SYM 597
#define MERGE_SYM 598
#define MESSAGE_TEXT_SYM 599
#define MICROSECOND_SYM 600
#define MIGRATE_SYM 601
#define MINUTE_MICROSECOND_SYM 602
#define MINUTE_SECOND_SYM 603
#define MINUTE_SYM 604
#define MIN_ROWS 605
#define MIN_SYM 606
#define MODE_SYM 607
#define MODIFIES_SYM 608
#define MODIFY_SYM 609
#define MOD_SYM 610
#define MONTH_SYM 611
#define MULTILINESTRING 612
#define MULTIPOINT 613
#define MULTIPOLYGON 614
#define MUTEX_SYM 615
#define MYSQL_SYM 616
#define MYSQL_ERRNO_SYM 617
#define NAMES_SYM 618
#define NAME_SYM 619
#define NATIONAL_SYM 620
#define NATURAL 621
#define NCHAR_STRING 622
#define NCHAR_SYM 623
#define NE 624
#define NEG 625
#define NEW_SYM 626
#define NEXT_SYM 627
#define NODEGROUP_SYM 628
#define NONE_SYM 629
#define NOT2_SYM 630
#define NOT_SYM 631
#define NOW_SYM 632
#define NO_SYM 633
#define NO_WAIT_SYM 634
#define NO_WRITE_TO_BINLOG 635
#define NTILE_SYM 636
#define NULL_SYM 637
#define NUM 638
#define NUMBER_SYM 639
#define NUMERIC_SYM 640
#define NTH_VALUE_SYM 641
#define NVARCHAR_SYM 642
#define OFFSET_SYM 643
#define OLD_PASSWORD_SYM 644
#define ON 645
#define ONE_SYM 646
#define ONLY_SYM 647
#define ONLINE_SYM 648
#define OPEN_SYM 649
#define OPTIMIZE 650
#define OPTIONS_SYM 651
#define OPTION 652
#define OPTIONALLY 653
#define OR2_SYM 654
#define ORDER_SYM 655
#define OR_OR_SYM 656
#define OR_SYM 657
#define OTHERS_SYM 658
#define OUTER 659
#define OUTFILE 660
#define OUT_SYM 661
#define OVER_SYM 662
#define OWNER_SYM 663
#define PACK_KEYS_SYM 664
#define PAGE_SYM 665
#define PAGE_CHECKSUM_SYM 666
#define PARAM_MARKER 667
#define PARSER_SYM 668
#define PARSE_VCOL_EXPR_SYM 669
#define PARTIAL 670
#define PARTITION_SYM 671
#define PARTITIONS_SYM 672
#define PARTITIONING_SYM 673
#define PASSWORD_SYM 674
#define PERCENT_RANK_SYM 675
#define PERSISTENT_SYM 676
#define PHASE_SYM 677
#define PLUGINS_SYM 678
#define PLUGIN_SYM 679
#define POINT_SYM 680
#define POLYGON 681
#define PORT_SYM 682
#define POSITION_SYM 683
#define PRECEDES_SYM 684
#define PRECEDING_SYM 685
#define PRECISION 686
#define PREPARE_SYM 687
#define PRESERVE_SYM 688
#define PREV_SYM 689
#define PRIMARY_SYM 690
#define PRIVILEGES 691
#define PROCEDURE_SYM 692
#define PROCESS 693
#define PROCESSLIST_SYM 694
#define PROFILE_SYM 695
#define PROFILES_SYM 696
#define PROXY_SYM 697
#define PURGE 698
#define QUARTER_SYM 699
#define QUERY_SYM 700
#define QUICK 701
#define RANGE_SYM 702
#define RANK_SYM 703
#define READS_SYM 704
#define READ_ONLY_SYM 705
#define READ_SYM 706
#define READ_WRITE_SYM 707
#define REAL 708
#define REBUILD_SYM 709
#define RECOVER_SYM 710
#define RECURSIVE_SYM 711
#define REDOFILE_SYM 712
#define REDO_BUFFER_SIZE_SYM 713
#define REDUNDANT_SYM 714
#define REFERENCES 715
#define REGEXP 716
#define RELAY 717
#define RELAYLOG_SYM 718
#define RELAY_LOG_FILE_SYM 719
#define RELAY_LOG_POS_SYM 720
#define RELAY_THREAD 721
#define RELEASE_SYM 722
#define RELOAD 723
#define REMOVE_SYM 724
#define RENAME 725
#define REORGANIZE_SYM 726
#define REPAIR 727
#define REPEATABLE_SYM 728
#define REPEAT_SYM 729
#define REPLACE 730
#define REPLICATION 731
#define REQUIRE_SYM 732
#define RESET_SYM 733
#define RESIGNAL_SYM 734
#define RESOURCES 735
#define RESTORE_SYM 736
#define RESTRICT 737
#define RESUME_SYM 738
#define RETURNED_SQLSTATE_SYM 739
#define RETURNING_SYM 740
#define RETURNS_SYM 741
#define RETURN_SYM 742
#define REVERSE_SYM 743
#define REVOKE 744
#define RIGHT 745
#define ROLE_SYM 746
#define ROLLBACK_SYM 747
#define ROLLUP_SYM 748
#define ROUTINE_SYM 749
#define ROW_SYM 750
#define ROWS_SYM 751
#define ROW_COUNT_SYM 752
#define ROW_FORMAT_SYM 753
#define ROW_NUMBER_SYM 754
#define RTREE_SYM 755
#define SAVEPOINT_SYM 756
#define SCHEDULE_SYM 757
#define SCHEMA_NAME_SYM 758
#define SECOND_MICROSECOND_SYM 759
#define SECOND_SYM 760
#define SECURITY_SYM 761
#define SELECT_SYM 762
#define SENSITIVE_SYM 763
#define SEPARATOR_SYM 764
#define SERIALIZABLE_SYM 765
#define SERIAL_SYM 766
#define SESSION_SYM 767
#define SERVER_SYM 768
#define SERVER_OPTIONS 769
#define SET 770
#define SET_VAR 771
#define SHARE_SYM 772
#define SHIFT_LEFT 773
#define SHIFT_RIGHT 774
#define SHOW 775
#define SHUTDOWN 776
#define SIGNAL_SYM 777
#define SIGNED_SYM 778
#define SIMPLE_SYM 779
#define SLAVE 780
#define SLAVES 781
#define SLAVE_POS_SYM 782
#define SLOW 783
#define SMALLINT 784
#define SNAPSHOT_SYM 785
#define SOCKET_SYM 786
#define SOFT_SYM 787
#define SONAME_SYM 788
#define SOUNDS_SYM 789
#define SOURCE_SYM 790
#define SPATIAL_SYM 791
#define SPECIFIC_SYM 792
#define SQLEXCEPTION_SYM 793
#define SQLSTATE_SYM 794
#define SQLWARNING_SYM 795
#define SQL_BIG_RESULT 796
#define SQL_BUFFER_RESULT 797
#define SQL_CACHE_SYM 798
#define SQL_CALC_FOUND_ROWS 799
#define SQL_NO_CACHE_SYM 800
#define SQL_SMALL_RESULT 801
#define SQL_SYM 802
#define SQL_THREAD 803
#define REF_SYSTEM_ID_SYM 804
#define SSL_SYM 805
#define STARTING 806
#define STARTS_SYM 807
#define START_SYM 808
#define STATEMENT_SYM 809
#define STATS_AUTO_RECALC_SYM 810
#define STATS_PERSISTENT_SYM 811
#define STATS_SAMPLE_PAGES_SYM 812
#define STATUS_SYM 813
#define STDDEV_SAMP_SYM 814
#define STD_SYM 815
#define STOP_SYM 816
#define STORAGE_SYM 817
#define STORED_SYM 818
#define STRAIGHT_JOIN 819
#define STRING_SYM 820
#define SUBCLASS_ORIGIN_SYM 821
#define SUBDATE_SYM 822
#define SUBJECT_SYM 823
#define SUBPARTITIONS_SYM 824
#define SUBPARTITION_SYM 825
#define SUBSTRING 826
#define SUM_SYM 827
#define SUPER_SYM 828
#define SUSPEND_SYM 829
#define SWAPS_SYM 830
#define SWITCHES_SYM 831
#define SYSDATE 832
#define TABLES 833
#define TABLESPACE 834
#define TABLE_REF_PRIORITY 835
#define TABLE_SYM 836
#define TABLE_CHECKSUM_SYM 837
#define TABLE_NAME_SYM 838
#define TEMPORARY 839
#define TEMPTABLE_SYM 840
#define TERMINATED 841
#define TEXT_STRING 842
#define TEXT_SYM 843
#define THAN_SYM 844
#define THEN_SYM 845
#define TIES_SYM 846
#define TIMESTAMP 847
#define TIMESTAMP_ADD 848
#define TIMESTAMP_DIFF 849
#define TIME_SYM 850
#define TINYBLOB 851
#define TINYINT 852
#define TINYTEXT 853
#define TO_SYM 854
#define TRAILING 855
#define TRANSACTION_SYM 856
#define TRANSACTIONAL_SYM 857
#define TRIGGERS_SYM 858
#define TRIGGER_SYM 859
#define TRIM 860
#define TRUE_SYM 861
#define TRUNCATE_SYM 862
#define TYPES_SYM 863
#define TYPE_SYM 864
#define UDF_RETURNS_SYM 865
#define ULONGLONG_NUM 866
#define UNBOUNDED_SYM 867
#define UNCOMMITTED_SYM 868
#define UNDEFINED_SYM 869
#define UNDERSCORE_CHARSET 870
#define UNDOFILE_SYM 871
#define UNDO_BUFFER_SIZE_SYM 872
#define UNDO_SYM 873
#define UNICODE_SYM 874
#define UNINSTALL_SYM 875
#define UNION_SYM 876
#define UNIQUE_SYM 877
#define UNKNOWN_SYM 878
#define UNLOCK_SYM 879
#define UNSIGNED 880
#define UNTIL_SYM 881
#define UPDATE_SYM 882
#define UPGRADE_SYM 883
#define USAGE 884
#define USER_SYM 885
#define USE_FRM 886
#define USE_SYM 887
#define USING 888
#define UTC_DATE_SYM 889
#define UTC_TIMESTAMP_SYM 890
#define UTC_TIME_SYM 891
#define VALUES 892
#define VALUE_SYM 893
#define VARBINARY 894
#define VARCHAR 895
#define VARIABLES 896
#define VARIANCE_SYM 897
#define VARYING 898
#define VAR_SAMP_SYM 899
#define VIA_SYM 900
#define VIEW_SYM 901
#define VIRTUAL_SYM 902
#define WAIT_SYM 903
#define WARNINGS 904
#define WEEK_SYM 905
#define WEIGHT_STRING_SYM 906
#define WHEN_SYM 907
#define WHERE 908
#define WINDOW_SYM 909
#define WHILE_SYM 910
#define WITH 911
#define WITH_CUBE_SYM 912
#define WITH_ROLLUP_SYM 913
#define WORK_SYM 914
#define WRAPPER_SYM 915
#define WRITE_SYM 916
#define X509_SYM 917
#define XA_SYM 918
#define XML_SYM 919
#define XOR 920
#define YEAR_MONTH_SYM 921
#define YEAR_SYM 922
#define ZEROFILL 923
#define IMPOSSIBLE_ACTION 924
#define CONDITIONLESS_JOIN 925
#define ON_SYM 926

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:355  */

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;

  /* structs */
  LEX_STRING lex_str;
  LEX_SYMBOL symbol;
  struct sys_var_with_base variable;
  struct { int vars, conds, hndlrs, curs; } spblock;
  Lex_length_and_dec_st Lex_length_and_dec;
  Lex_cast_type_st Lex_cast_type;
  Lex_field_type_st Lex_field_type;
  Lex_dyncol_type_st Lex_dyncol_type;

  /* pointers */
  Create_field *create_field;
  CHARSET_INFO *charset;
  Condition_information_item *cond_info_item;
  DYNCALL_CREATE_DEF *dyncol_def;
  Diagnostics_information *diag_info;
  Item *item;
  Item_num *item_num;
  Item_param *item_param;
  Key_part_spec *key_part;
  LEX *lex;
  LEX_STRING *lex_str_ptr;
  LEX_USER *lex_user;
  List<Condition_information_item> *cond_info_list;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  List<Item> *item_list;
  List<Statement_information_item> *stmt_info_list;
  List<String> *string_list;
  List<LEX_STRING> *lex_str_list;
  Statement_information_item *stmt_info_item;
  String *string;
  TABLE_LIST *table_list;
  Table_ident *table;
  char *simple_string;
  const char *const_simple_string;
  chooser_compare_func_creator boolfunc2creator;
  class my_var *myvar;
  class sp_condition_value *spcondvalue;
  class sp_head *sphead;
  class sp_label *splabel;
  class sp_name *spname;
  class sp_variable *spvar;
  class With_clause *with_clause;
  class Virtual_column_info *virtual_column;

  handlerton *db_type;
  st_select_lex *select_lex;
  struct p_elem_val *p_elem_value;
  class Window_frame *window_frame;
  class Window_frame_bound *window_frame_bound;
  udf_func *udf;
  st_trg_execution_order trg_execution_order;

  /* enums */
  enum Condition_information_item::Name cond_info_item_name;
  enum enum_diag_condition_item_name diag_condition_item_name;
  enum Diagnostics_information::Which_area diag_area;
  enum Field::geometry_type geom_type;
  enum enum_fk_option m_fk_option;
  enum Item_udftype udf_type;
  enum Key::Keytype key_type;
  enum Statement_information_item::Name stmt_info_item_name;
  enum enum_field_types field_type;
  enum enum_filetype filetype;
  enum enum_tx_isolation tx_isolation;
  enum enum_var_type var_type;
  enum enum_yes_no_unknown m_yes_no_unk;
  enum ha_choice choice;
  enum ha_key_alg key_alg;
  enum ha_rkey_function ha_rkey_mode;
  enum index_hint_type index_hint;
  enum interval_type interval, interval_time_st;
  enum row_type row_type;
  enum sp_variable::enum_mode spvar_mode;
  enum thr_lock_type lock_type;
  enum enum_mysql_timestamp_type date_time_type;
  enum Window_frame_bound::Bound_precedence_type bound_precedence_type;
  enum Window_frame::Frame_units frame_units;
  enum Window_frame::Frame_exclusion frame_exclusion;
  enum trigger_order_type trigger_action_order_type;
  DDL_options_st object_ddl_options;

#line 2455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int MYSQLparse (THD *thd);

#endif /* !YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 1025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:358  */

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);

#line 2472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  646
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   75726

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  694
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  1109
/* YYNRULES -- Number of rules.  */
#define YYNRULES  3038
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  5196

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   926

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   687,     2,     2,     2,   681,   676,     2,
     684,   685,   679,   678,   686,   677,   691,   680,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   693,   690,
     674,   672,   673,     2,   692,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   682,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   688,   675,   689,   683,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  2099,  2099,  2109,  2108,  2133,  2140,  2142,  2146,  2147,
    2148,  2153,  2154,  2155,  2156,  2157,  2158,  2159,  2160,  2161,
    2162,  2163,  2164,  2165,  2166,  2167,  2168,  2169,  2170,  2171,
    2172,  2173,  2174,  2175,  2176,  2177,  2178,  2179,  2180,  2181,
    2182,  2183,  2184,  2185,  2186,  2187,  2188,  2189,  2190,  2191,
    2192,  2193,  2194,  2195,  2196,  2197,  2198,  2199,  2200,  2201,
    2202,  2203,  2204,  2205,  2206,  2207,  2208,  2212,  2221,  2222,
    2226,  2238,  2238,  2248,  2247,  2256,  2255,  2266,  2268,  2268,
    2279,  2280,  2284,  2295,  2294,  2311,  2310,  2319,  2320,  2324,
    2328,  2332,  2336,  2340,  2344,  2354,  2359,  2363,  2367,  2371,
    2375,  2379,  2384,  2388,  2393,  2420,  2424,  2428,  2433,  2436,
    2438,  2439,  2443,  2449,  2451,  2452,  2456,  2462,  2464,  2465,
    2469,  2476,  2480,  2495,  2499,  2505,  2511,  2517,  2527,  2531,
    2535,  2549,  2548,  2579,  2576,  2589,  2587,  2599,  2597,  2608,
    2607,  2620,  2619,  2628,  2634,  2640,  2644,  2648,  2648,  2655,
    2654,  2666,  2667,  2671,  2676,  2681,  2686,  2691,  2696,  2701,
    2709,  2708,  2740,  2739,  2746,  2753,  2754,  2760,  2766,  2776,
    2782,  2788,  2790,  2797,  2798,  2802,  2812,  2813,  2821,  2821,
    2865,  2879,  2890,  2908,  2909,  2913,  2914,  2919,  2921,  2923,
    2925,  2927,  2929,  2931,  2937,  2938,  2942,  2946,  2954,  2953,
    2966,  2968,  2971,  2973,  2977,  2981,  2988,  2990,  2994,  2995,
    3000,  2999,  3031,  3033,  3037,  3038,  3042,  3046,  3047,  3048,
    3049,  3053,  3054,  3058,  3059,  3064,  3067,  3086,  3085,  3156,
    3169,  3168,  3227,  3249,  3249,  3268,  3269,  3274,  3276,  3281,
    3296,  3304,  3308,  3327,  3328,  3332,  3336,  3342,  3348,  3354,
    3363,  3377,  3392,  3398,  3399,  3405,  3408,  3412,  3420,  3437,
    3439,  3457,  3463,  3465,  3467,  3469,  3471,  3473,  3475,  3477,
    3479,  3481,  3483,  3485,  3490,  3505,  3521,  3522,  3527,  3533,
    3542,  3548,  3557,  3566,  3575,  3584,  3586,  3595,  3600,  3606,
    3615,  3624,  3626,  3628,  3630,  3632,  3634,  3636,  3638,  3640,
    3642,  3644,  3646,  3648,  3653,  3665,  3680,  3681,  3694,  3695,
    3696,  3697,  3698,  3702,  3703,  3704,  3705,  3706,  3707,  3708,
    3712,  3713,  3714,  3715,  3720,  3719,  3730,  3730,  3783,  3782,
    3807,  3857,  3898,  3917,  3916,  3936,  3953,  3955,  3956,  3960,
    3974,  3991,  3993,  4009,  3991,  4028,  4030,  4031,  4036,  4035,
    4105,  4107,  4105,  4116,  4121,  4122,  4126,  4127,  4132,  4136,
    4131,  4157,  4161,  4156,  4180,  4190,  4194,  4195,  4200,  4199,
    4221,  4220,  4230,  4229,  4240,  4240,  4280,  4295,  4294,  4326,
    4325,  4345,  4359,  4368,  4367,  4375,  4374,  4383,  4382,  4393,
    4392,  4401,  4400,  4410,  4409,  4420,  4422,  4427,  4429,  4431,
    4448,  4453,  4459,  4466,  4467,  4475,  4481,  4490,  4496,  4502,
    4503,  4507,  4507,  4512,  4513,  4514,  4518,  4519,  4520,  4524,
    4528,  4529,  4530,  4534,  4535,  4536,  4537,  4538,  4539,  4540,
    4541,  4545,  4549,  4550,  4551,  4555,  4556,  4557,  4558,  4559,
    4563,  4567,  4568,  4569,  4573,  4574,  4575,  4576,  4577,  4578,
    4579,  4583,  4587,  4588,  4589,  4593,  4594,  4595,  4600,  4608,
    4616,  4624,  4637,  4650,  4655,  4660,  4668,  4676,  4684,  4692,
    4700,  4708,  4716,  4726,  4736,  4746,  4748,  4752,  4757,  4767,
    4768,  4807,  4806,  4809,  4815,  4817,  4816,  4819,  4818,  4820,
    4834,  4835,  4839,  4840,  4846,  4844,  4851,  4856,  4858,  4857,
    4860,  4859,  4864,  4901,  4902,  4907,  4906,  4925,  4940,  4939,
    4957,  4956,  4962,  4970,  4969,  4972,  4974,  4976,  4978,  4983,
    4984,  4990,  4991,  5008,  5009,  5013,  5014,  5018,  5034,  5044,
    5055,  5064,  5065,  5078,  5080,  5079,  5084,  5082,  5093,  5094,
    5098,  5113,  5125,  5126,  5139,  5148,  5170,  5171,  5176,  5175,
    5200,  5212,  5224,  5223,  5238,  5237,  5251,  5275,  5297,  5301,
    5330,  5342,  5343,  5348,  5359,  5347,  5384,  5385,  5389,  5402,
    5423,  5436,  5462,  5463,  5468,  5467,  5505,  5514,  5515,  5519,
    5520,  5524,  5526,  5532,  5538,  5540,  5542,  5544,  5546,  5548,
    5557,  5565,  5565,  5586,  5587,  5591,  5592,  5596,  5607,  5608,
    5612,  5613,  5617,  5618,  5622,  5623,  5628,  5631,  5639,  5642,
    5649,  5653,  5659,  5661,  5665,  5666,  5670,  5671,  5672,  5676,
    5691,  5696,  5701,  5706,  5711,  5716,  5721,  5736,  5742,  5757,
    5762,  5777,  5783,  5801,  5806,  5811,  5816,  5821,  5826,  5832,
    5831,  5857,  5858,  5859,  5864,  5869,  5874,  5876,  5878,  5880,
    5886,  5891,  5896,  5904,  5912,  5918,  5927,  5935,  5952,  5962,
    5973,  5974,  5975,  5976,  5977,  5978,  5979,  5983,  5984,  5985,
    5989,  5990,  5991,  5992,  5997,  6004,  6005,  6009,  6010,  6011,
    6015,  6017,  6023,  6022,  6030,  6029,  6037,  6036,  6044,  6043,
    6053,  6050,  6061,  6059,  6068,  6067,  6105,  6112,  6113,  6117,
    6130,  6131,  6135,  6136,  6140,  6145,  6144,  6180,  6180,  6182,
    6181,  6193,  6194,  6198,  6199,  6204,  6206,  6205,  6214,  6215,
    6220,  6223,  6227,  6231,  6238,  6239,  6243,  6244,  6248,  6254,
    6260,  6265,  6264,  6283,  6289,  6290,  6300,  6312,  6312,  6315,
    6316,  6324,  6325,  6326,  6342,  6346,  6350,  6354,  6358,  6363,
    6368,  6372,  6377,  6382,  6400,  6402,  6405,  6422,  6425,  6430,
    6435,  6446,  6451,  6456,  6461,  6463,  6465,  6467,  6469,  6471,
    6473,  6475,  6477,  6479,  6481,  6483,  6491,  6492,  6493,  6494,
    6495,  6496,  6497,  6498,  6502,  6506,  6507,  6511,  6512,  6516,
    6517,  6518,  6519,  6520,  6524,  6525,  6526,  6527,  6528,  6532,
    6537,  6539,  6545,  6547,  6554,  6555,  6556,  6560,  6564,  6565,
    6566,  6567,  6568,  6569,  6573,  6574,  6575,  6576,  6580,  6581,
    6585,  6586,  6590,  6591,  6595,  6596,  6600,  6601,  6605,  6606,
    6607,  6614,  6615,  6621,  6628,  6632,  6633,  6639,  6640,  6648,
    6656,  6662,  6671,  6672,  6676,  6681,  6685,  6686,  6690,  6691,
    6695,  6701,  6705,  6706,  6710,  6718,  6719,  6723,  6724,  6728,
    6729,  6733,  6734,  6735,  6742,  6749,  6750,  6751,  6752,  6753,
    6754,  6760,  6764,  6765,  6770,  6769,  6782,  6783,  6787,  6790,
    6791,  6792,  6793,  6797,  6805,  6812,  6813,  6817,  6827,  6828,
    6832,  6833,  6836,  6838,  6842,  6854,  6855,  6859,  6866,  6879,
    6880,  6882,  6884,  6890,  6895,  6901,  6907,  6914,  6924,  6925,
    6926,  6927,  6928,  6932,  6933,  6937,  6938,  6942,  6943,  6947,
    6948,  6949,  6953,  6954,  6958,  6962,  6974,  6975,  6979,  6980,
    6984,  6985,  6989,  6990,  6994,  6995,  6999,  7000,  7004,  7005,
    7010,  7011,  7012,  7016,  7018,  7023,  7025,  7027,  7035,  7043,
    7049,  7057,  7058,  7062,  7066,  7067,  7077,  7078,  7079,  7083,
    7087,  7094,  7100,  7112,  7113,  7117,  7118,  7122,  7124,  7134,
    7148,  7133,  7168,  7167,  7181,  7190,  7189,  7205,  7204,  7220,
    7219,  7235,  7229,  7246,  7245,  7280,  7285,  7290,  7295,  7301,
    7300,  7307,  7316,  7317,  7318,  7319,  7323,  7324,  7336,  7337,
    7341,  7342,  7345,  7347,  7355,  7363,  7365,  7367,  7368,  7376,
    7377,  7383,  7392,  7390,  7403,  7416,  7415,  7428,  7426,  7439,
    7446,  7456,  7457,  7484,  7491,  7495,  7501,  7499,  7518,  7520,
    7525,  7533,  7532,  7548,  7552,  7551,  7563,  7564,  7568,  7584,
    7585,  7589,  7597,  7602,  7607,  7612,  7616,  7621,  7630,  7638,
    7648,  7659,  7669,  7680,  7690,  7696,  7702,  7713,  7723,  7739,
    7753,  7758,  7762,  7767,  7768,  7771,  7773,  7774,  7775,  7776,
    7780,  7785,  7793,  7798,  7806,  7807,  7811,  7812,  7816,  7816,
    7819,  7821,  7825,  7826,  7830,  7831,  7840,  7841,  7842,  7846,
    7847,  7852,  7860,  7861,  7862,  7863,  7868,  7867,  7877,  7876,
    7884,  7891,  7901,  7918,  7921,  7928,  7932,  7939,  7943,  7947,
    7954,  7954,  7960,  7961,  7965,  7966,  7967,  7971,  7972,  7981,
    7988,  7989,  7994,  7993,  8005,  8006,  8007,  8011,  8012,  8012,
    8017,  8016,  8037,  8038,  8042,  8043,  8047,  8048,  8049,  8053,
    8054,  8059,  8058,  8079,  8080,  8084,  8089,  8090,  8097,  8099,
    8104,  8106,  8105,  8117,  8119,  8118,  8131,  8132,  8137,  8146,
    8147,  8148,  8152,  8159,  8169,  8177,  8186,  8187,  8187,  8191,
    8190,  8213,  8214,  8218,  8219,  8223,  8224,  8225,  8226,  8227,
    8228,  8232,  8233,  8238,  8237,  8258,  8259,  8260,  8265,  8264,
    8270,  8277,  8283,  8292,  8293,  8297,  8311,  8310,  8323,  8324,
    8328,  8329,  8333,  8343,  8353,  8354,  8359,  8358,  8369,  8370,
    8374,  8375,  8379,  8389,  8400,  8399,  8407,  8407,  8416,  8417,
    8422,  8423,  8432,  8441,  8442,  8443,  8444,  8448,  8449,  8450,
    8451,  8455,  8455,  8467,  8471,  8471,  8483,  8487,  8487,  8499,
    8504,  8504,  8516,  8522,  8520,  8527,  8539,  8537,  8544,  8554,
    8559,  8558,  8563,  8567,  8578,  8579,  8583,  8584,  8588,  8589,
    8590,  8594,  8595,  8596,  8600,  8601,  8602,  8603,  8604,  8608,
    8608,  8626,  8633,  8635,  8639,  8643,  8649,  8656,  8658,  8666,
    8667,  8671,  8672,  8689,  8708,  8710,  8717,  8728,  8729,  8730,
    8744,  8749,  8771,  8777,  8783,  8789,  8795,  8796,  8797,  8798,
    8799,  8803,  8804,  8805,  8809,  8810,  8811,  8815,  8816,  8821,
    8872,  8879,  8922,  8928,  8934,  8940,  8946,  8952,  8958,  8964,
    8970,  8976,  8982,  8988,  8994,  8998,  9004,  9013,  9019,  9027,
    9033,  9042,  9048,  9056,  9066,  9072,  9079,  9086,  9094,  9100,
    9109,  9113,  9119,  9125,  9131,  9137,  9143,  9149,  9155,  9161,
    9167,  9173,  9179,  9185,  9191,  9197,  9201,  9202,  9206,  9207,
    9211,  9212,  9216,  9217,  9221,  9222,  9223,  9224,  9225,  9226,
    9230,  9231,  9236,  9240,  9244,  9245,  9246,  9250,  9251,  9252,
    9253,  9254,  9255,  9259,  9260,  9261,  9266,  9265,  9271,  9279,
    9302,  9309,  9345,  9346,  9347,  9348,  9349,  9350,  9351,  9352,
    9353,  9354,  9355,  9362,  9368,  9392,  9402,  9410,  9416,  9423,
    9429,  9439,  9449,  9450,  9461,  9462,  9469,  9475,  9479,  9485,
    9491,  9497,  9513,  9519,  9525,  9534,  9543,  9549,  9555,  9561,
    9567,  9581,  9592,  9598,  9604,  9610,  9616,  9622,  9629,  9636,
    9642,  9648,  9654,  9660,  9666,  9672,  9678,  9684,  9690,  9698,
    9719,  9726,  9732,  9739,  9746,  9753,  9760,  9766,  9772,  9779,
    9785,  9792,  9798,  9804,  9810,  9816,  9822,  9840,  9846,  9852,
    9859,  9866,  9874,  9881,  9888,  9895,  9902,  9919,  9925,  9931,
    9937,  9943,  9950,  9956,  9962,  9971,  9982,  9989,  9995, 10001,
   10008, 10016, 10022, 10028, 10034, 10040, 10048, 10054, 10060, 10066,
   10072, 10080, 10092, 10099, 10114, 10120, 10127, 10134, 10141, 10148,
   10155, 10159, 10179, 10178, 10250, 10288, 10290, 10295, 10296, 10300,
   10301, 10305, 10306, 10310, 10317, 10325, 10352, 10358, 10364, 10370,
   10376, 10382, 10391, 10398, 10400, 10397, 10407, 10418, 10424, 10430,
   10436, 10442, 10448, 10454, 10460, 10466, 10473, 10472, 10491, 10500,
   10518, 10520, 10527, 10534, 10541, 10548, 10555, 10562, 10569, 10576,
   10583, 10590, 10601, 10608, 10619, 10628, 10638, 10637, 10649, 10659,
   10667, 10683, 10684, 10689, 10694, 10697, 10699, 10703, 10705, 10711,
   10710, 10727, 10730, 10729, 10733, 10738, 10739, 10743, 10744, 10745,
   10746, 10747, 10748, 10749, 10753, 10754, 10755, 10759, 10760, 10764,
   10771, 10779, 10780, 10784, 10791, 10799, 10800, 10804, 10805, 10809,
   10817, 10828, 10829, 10841, 10852, 10853, 10859, 10860, 10878, 10887,
   10885, 10903, 10901, 10912, 10922, 10920, 10938, 10937, 10947, 10958,
   10956, 10975, 10974, 10985, 10997, 10998, 10999, 11003, 11004, 11012,
   11013, 11017, 11032, 11033, 11037, 11037, 11073, 11137, 11177, 11178,
   11187, 11186, 11195, 11196, 11197, 11201, 11202, 11203, 11203, 11207,
   11213, 11221, 11221, 11236, 11258, 11267, 11284, 11267, 11291, 11295,
   11304, 11315, 11316, 11321, 11324, 11325, 11326, 11330, 11331, 11336,
   11335, 11341, 11340, 11348, 11349, 11352, 11354, 11354, 11358, 11358,
   11363, 11364, 11368, 11370, 11375, 11376, 11380, 11391, 11404, 11405,
   11406, 11407, 11408, 11409, 11410, 11411, 11412, 11413, 11414, 11415,
   11419, 11420, 11421, 11422, 11423, 11424, 11425, 11426, 11427, 11431,
   11432, 11433, 11434, 11437, 11439, 11440, 11444, 11445, 11453, 11455,
   11459, 11461, 11460, 11474, 11477, 11476, 11494, 11496, 11500, 11502,
   11507, 11508, 11525, 11548, 11549, 11555, 11556, 11560, 11573, 11572,
   11580, 11581, 11590, 11591, 11595, 11596, 11600, 11601, 11615, 11616,
   11620, 11630, 11639, 11646, 11653, 11663, 11664, 11671, 11681, 11682,
   11684, 11686, 11688, 11697, 11701, 11702, 11706, 11718, 11720, 11725,
   11724, 11774, 11776, 11781, 11782, 11783, 11787, 11788, 11792, 11805,
   11812, 11817, 11824, 11831, 11838, 11848, 11883, 11887, 11893, 11899,
   11908, 11917, 11921, 11928, 11929, 11933, 11934, 11935, 11939, 11940,
   11941, 11942, 11943, 11944, 11948, 11949, 11950, 11951, 11952, 11956,
   11957, 11958, 11959, 11960, 11964, 11965, 11966, 11967, 11968, 11972,
   11977, 11978, 11982, 11983, 11988, 11987, 12021, 12022, 12026, 12027,
   12031, 12041, 12041, 12052, 12053, 12056, 12076, 12080, 12094, 12099,
   12109, 12098, 12111, 12124, 12136, 12135, 12153, 12152, 12161, 12161,
   12178, 12184, 12199, 12215, 12223, 12227, 12232, 12231, 12240, 12245,
   12251, 12256, 12261, 12269, 12270, 12274, 12285, 12298, 12299, 12303,
   12315, 12319, 12328, 12331, 12338, 12339, 12347, 12355, 12346, 12365,
   12372, 12364, 12382, 12390, 12391, 12399, 12403, 12404, 12415, 12416,
   12420, 12430, 12431, 12432, 12434, 12433, 12444, 12446, 12450, 12451,
   12452, 12456, 12457, 12461, 12462, 12466, 12476, 12477, 12481, 12482,
   12487, 12486, 12500, 12501, 12505, 12510, 12518, 12519, 12525, 12533,
   12535, 12535, 12543, 12551, 12542, 12573, 12574, 12578, 12586, 12587,
   12591, 12601, 12602, 12609, 12608, 12624, 12635, 12623, 12638, 12637,
   12649, 12648, 12661, 12663, 12667, 12668, 12672, 12685, 12701, 12702,
   12706, 12707, 12711, 12712, 12713, 12718, 12717, 12738, 12740, 12743,
   12745, 12748, 12749, 12752, 12756, 12760, 12764, 12768, 12772, 12776,
   12780, 12784, 12792, 12795, 12805, 12804, 12820, 12827, 12835, 12843,
   12851, 12859, 12867, 12874, 12881, 12887, 12889, 12891, 12900, 12904,
   12909, 12908, 12915, 12914, 12919, 12928, 12935, 12940, 12945, 12950,
   12952, 12954, 12956, 12958, 12960, 12967, 12975, 12977, 12985, 12992,
   12999, 13006, 13012, 13017, 13025, 13033, 13037, 13042, 13049, 13054,
   13061, 13068, 13074, 13081, 13086, 13093, 13100, 13105, 13110, 13115,
   13122, 13144, 13146, 13148, 13153, 13154, 13157, 13159, 13163, 13164,
   13168, 13169, 13173, 13174, 13178, 13179, 13183, 13184, 13188, 13189,
   13197, 13209, 13208, 13224, 13223, 13233, 13234, 13235, 13236, 13237,
   13241, 13242, 13246, 13253, 13254, 13255, 13259, 13260, 13272, 13273,
   13274, 13289, 13288, 13301, 13300, 13312, 13316, 13317, 13330, 13333,
   13332, 13344, 13345, 13350, 13352, 13354, 13356, 13358, 13360, 13368,
   13370, 13372, 13374, 13379, 13381, 13389, 13391, 13393, 13395, 13411,
   13412, 13416, 13417, 13420, 13422, 13423, 13427, 13443, 13444, 13449,
   13448, 13458, 13459, 13463, 13463, 13467, 13466, 13472, 13476, 13477,
   13481, 13482, 13490, 13489, 13500, 13504, 13508, 13521, 13520, 13535,
   13536, 13537, 13541, 13542, 13543, 13552, 13553, 13557, 13561, 13569,
   13575, 13587, 13599, 13609, 13620, 13586, 13628, 13629, 13633, 13634,
   13638, 13639, 13647, 13651, 13652, 13653, 13656, 13658, 13662, 13663,
   13667, 13672, 13679, 13684, 13691, 13693, 13697, 13698, 13702, 13707,
   13715, 13716, 13720, 13722, 13730, 13731, 13735, 13736, 13737, 13741,
   13743, 13748, 13749, 13758, 13759, 13763, 13764, 13768, 13781, 13805,
   13817, 13824, 13843, 13851, 13856, 13869, 13878, 13894, 13920, 13921,
   13929, 13930, 13931, 13932, 13946, 13952, 13958, 13964, 13970, 13976,
   13994, 14004, 14014, 14020, 14029, 14041, 14047, 14053, 14063, 14064,
   14073, 14072, 14091, 14092, 14097, 14098, 14105, 14103, 14129, 14130,
   14136, 14141, 14150, 14165, 14166, 14170, 14179, 14194, 14198, 14249,
   14253, 14270, 14274, 14346, 14370, 14400, 14401, 14411, 14418, 14422,
   14428, 14434, 14444, 14450, 14459, 14469, 14470, 14495, 14509, 14523,
   14538, 14539, 14549, 14550, 14560, 14561, 14571, 14572, 14573, 14577,
   14590, 14620, 14630, 14630, 14632, 14642, 14643, 14644, 14645, 14646,
   14647, 14648, 14649, 14650, 14651, 14652, 14653, 14654, 14655, 14656,
   14657, 14658, 14659, 14660, 14661, 14662, 14663, 14664, 14665, 14666,
   14667, 14668, 14669, 14670, 14671, 14672, 14673, 14674, 14675, 14676,
   14677, 14678, 14679, 14680, 14681, 14682, 14683, 14684, 14685, 14686,
   14687, 14688, 14689, 14690, 14691, 14692, 14693, 14694, 14695, 14696,
   14697, 14698, 14699, 14700, 14701, 14702, 14703, 14704, 14705, 14706,
   14707, 14708, 14709, 14710, 14711, 14712, 14717, 14717, 14726, 14727,
   14728, 14729, 14730, 14731, 14732, 14733, 14734, 14735, 14736, 14737,
   14738, 14739, 14740, 14741, 14742, 14743, 14744, 14745, 14746, 14747,
   14748, 14749, 14750, 14751, 14752, 14753, 14754, 14755, 14756, 14757,
   14758, 14759, 14760, 14761, 14762, 14763, 14764, 14765, 14766, 14767,
   14768, 14769, 14770, 14771, 14772, 14773, 14774, 14779, 14780, 14781,
   14782, 14783, 14784, 14785, 14786, 14787, 14788, 14789, 14790, 14791,
   14792, 14793, 14794, 14795, 14796, 14797, 14798, 14799, 14800, 14801,
   14802, 14803, 14804, 14805, 14806, 14807, 14808, 14809, 14810, 14811,
   14812, 14813, 14814, 14815, 14816, 14817, 14818, 14819, 14820, 14821,
   14822, 14823, 14824, 14825, 14826, 14827, 14828, 14829, 14830, 14831,
   14832, 14833, 14834, 14835, 14836, 14837, 14838, 14839, 14840, 14841,
   14842, 14843, 14844, 14845, 14846, 14847, 14848, 14849, 14850, 14851,
   14852, 14853, 14854, 14855, 14856, 14857, 14858, 14859, 14860, 14861,
   14862, 14863, 14864, 14865, 14866, 14867, 14868, 14869, 14870, 14871,
   14872, 14873, 14874, 14875, 14876, 14877, 14878, 14879, 14880, 14881,
   14882, 14883, 14884, 14885, 14886, 14887, 14888, 14889, 14890, 14891,
   14892, 14893, 14894, 14895, 14896, 14897, 14898, 14899, 14900, 14901,
   14902, 14903, 14904, 14905, 14906, 14907, 14908, 14909, 14910, 14911,
   14912, 14913, 14914, 14915, 14916, 14917, 14918, 14919, 14920, 14921,
   14922, 14923, 14924, 14925, 14926, 14927, 14928, 14929, 14930, 14931,
   14932, 14933, 14934, 14935, 14936, 14937, 14938, 14939, 14940, 14941,
   14942, 14943, 14944, 14945, 14946, 14947, 14948, 14949, 14950, 14951,
   14952, 14953, 14954, 14955, 14956, 14957, 14958, 14959, 14960, 14961,
   14962, 14963, 14964, 14965, 14966, 14967, 14968, 14969, 14970, 14971,
   14972, 14973, 14974, 14975, 14976, 14977, 14978, 14979, 14980, 14981,
   14982, 14983, 14984, 14985, 14986, 14987, 14988, 14989, 14990, 14991,
   14992, 14993, 14994, 14995, 14996, 14997, 14998, 14999, 15000, 15001,
   15002, 15003, 15004, 15005, 15006, 15007, 15008, 15009, 15010, 15011,
   15012, 15013, 15014, 15015, 15016, 15017, 15018, 15019, 15020, 15021,
   15022, 15023, 15024, 15025, 15026, 15027, 15028, 15029, 15030, 15031,
   15032, 15033, 15034, 15035, 15036, 15037, 15038, 15039, 15051, 15050,
   15063, 15071, 15062, 15088, 15089, 15095, 15094, 15101, 15100, 15110,
   15109, 15120, 15119, 15125, 15133, 15135, 15140, 15140, 15149, 15148,
   15162, 15161, 15166, 15170, 15171, 15172, 15176, 15177, 15178, 15179,
   15183, 15184, 15185, 15186, 15191, 15215, 15241, 15252, 15269, 15283,
   15298, 15317, 15334, 15346, 15354, 15370, 15396, 15433, 15447, 15448,
   15449, 15450, 15454, 15472, 15490, 15491, 15495, 15496, 15497, 15498,
   15502, 15516, 15520, 15521, 15522, 15532, 15533, 15534, 15540, 15546,
   15558, 15557, 15570, 15571, 15575, 15576, 15580, 15598, 15599, 15600,
   15605, 15606, 15611, 15610, 15627, 15636, 15646, 15645, 15676, 15677,
   15681, 15682, 15686, 15687, 15688, 15689, 15691, 15690, 15703, 15704,
   15705, 15706, 15707, 15713, 15718, 15724, 15735, 15746, 15750, 15757,
   15766, 15768, 15773, 15778, 15785, 15797, 15809, 15816, 15828, 15829,
   15833, 15834, 15838, 15843, 15851, 15861, 15880, 15883, 15885, 15889,
   15890, 15897, 15899, 15903, 15904, 15909, 15908, 15912, 15911, 15915,
   15914, 15918, 15917, 15920, 15921, 15922, 15923, 15924, 15925, 15926,
   15927, 15928, 15929, 15930, 15931, 15932, 15933, 15934, 15935, 15936,
   15937, 15938, 15939, 15940, 15941, 15942, 15943, 15944, 15945, 15949,
   15950, 15954, 15955, 15959, 15966, 15973, 15983, 15994, 16003, 16012,
   16024, 16029, 16037, 16042, 16050, 16055, 16062, 16062, 16063, 16063,
   16066, 16073, 16078, 16084, 16090, 16096, 16100, 16104, 16105, 16109,
   16137, 16139, 16143, 16147, 16151, 16158, 16164, 16170, 16176, 16182,
   16191, 16192, 16196, 16197, 16202, 16203, 16207, 16208, 16212, 16213,
   16217, 16218, 16223, 16222, 16232, 16241, 16242, 16246, 16247, 16252,
   16253, 16254, 16259, 16260, 16261, 16265, 16266, 16270, 16282, 16291,
   16301, 16310, 16324, 16325, 16330, 16329, 16346, 16345, 16357, 16357,
   16378, 16379, 16386, 16394, 16395, 16396, 16409, 16416, 16417, 16421,
   16422, 16426, 16427, 16428, 16433, 16441, 16462, 16488, 16490, 16494,
   16495, 16499, 16500, 16508, 16509, 16510, 16511, 16517, 16523, 16533,
   16535, 16537, 16542, 16543, 16544, 16545, 16546, 16550, 16551, 16552,
   16553, 16554, 16555, 16565, 16566, 16571, 16584, 16600, 16602, 16604,
   16610, 16611, 16613, 16619, 16618, 16637, 16638, 16642, 16648, 16657,
   16657, 16682, 16683, 16684, 16685, 16690, 16691, 16693, 16695, 16706,
   16708, 16714, 16720, 16731, 16740, 16746, 16751, 16755, 16728, 16807,
   16808, 16812, 16832, 16853, 16857, 16863, 16869, 16828, 16928, 16940,
   16949, 16953, 16927, 16970, 16974, 16978, 16982, 16986, 16990, 16997,
   17004, 17011, 17021, 17022, 17026, 17027, 17028, 17032, 17033, 17038,
   17040, 17039, 17045, 17046, 17050, 17057, 17067, 17073, 17084
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "ATOMIC_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_ADD_SYM",
  "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM",
  "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONSTRAINT_CATALOG_SYM",
  "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM",
  "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CUME_DIST_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE",
  "CURRENT_POS_SYM", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM",
  "DELETE_DOMAIN_ID_SYM", "DELETE_SYM", "DENSE_RANK_SYM", "DESC",
  "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIAGNOSTICS_SYM",
  "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT",
  "DIV_SYM", "DOUBLE_SYM", "DO_DOMAIN_IDS_SYM", "DO_SYM", "DROP",
  "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM",
  "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXAMINED_SYM", "EXCLUDE_SYM",
  "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM", "EXPORT_SYM",
  "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM",
  "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM", "FIRST_VALUE_SYM",
  "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM",
  "FOLLOWS_SYM", "FOLLOWING_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM",
  "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "LAG_SYM", "LEAD_SYM", "HANDLER_SYM",
  "HARD_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM", "HEX_STRING",
  "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM",
  "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM", "ID_SYM", "IDENT",
  "IDENTIFIED_SYM", "IDENT_QUOTED", "IF_SYM", "IGNORE_DOMAIN_IDS_SYM",
  "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMMEDIATE_SYM", "IMPORT",
  "INDEXES", "INDEX_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "JSON_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM",
  "LANGUAGE_SYM", "LAST_SYM", "LAST_VALUE", "LE", "LEADING", "LEAVES",
  "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE",
  "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM",
  "MASTER_GTID_POS_SYM", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM",
  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM",
  "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_STATEMENT_TIME_SYM", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NTILE_SYM", "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM",
  "NTH_VALUE_SYM", "NVARCHAR_SYM", "OFFSET_SYM", "OLD_PASSWORD_SYM", "ON",
  "ONE_SYM", "ONLY_SYM", "ONLINE_SYM", "OPEN_SYM", "OPTIMIZE",
  "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM", "ORDER_SYM",
  "OR_OR_SYM", "OR_SYM", "OTHERS_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OVER_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PAGE_CHECKSUM_SYM", "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD_SYM", "PERCENT_RANK_SYM", "PERSISTENT_SYM", "PHASE_SYM",
  "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM", "POLYGON", "PORT_SYM",
  "POSITION_SYM", "PRECEDES_SYM", "PRECEDING_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "RANK_SYM", "READS_SYM", "READ_ONLY_SYM",
  "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM",
  "RECURSIVE_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLE_SYM", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROW_SYM", "ROWS_SYM", "ROW_COUNT_SYM",
  "ROW_FORMAT_SYM", "ROW_NUMBER_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM",
  "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM",
  "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM",
  "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM",
  "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLAVES", "SLAVE_POS_SYM", "SLOW",
  "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM",
  "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM",
  "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT",
  "SQL_BUFFER_RESULT", "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS",
  "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD",
  "REF_SYSTEM_ID_SYM", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATEMENT_SYM", "STATS_AUTO_RECALC_SYM", "STATS_PERSISTENT_SYM",
  "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STORED_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_CHECKSUM_SYM",
  "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIES_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM",
  "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM",
  "ULONGLONG_NUM", "UNBOUNDED_SYM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER_SYM", "USE_FRM", "USE_SYM", "USING", "UTC_DATE_SYM",
  "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES", "VALUE_SYM", "VARBINARY",
  "VARCHAR", "VARIABLES", "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM",
  "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM", "WAIT_SYM", "WARNINGS", "WEEK_SYM",
  "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE", "WINDOW_SYM", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "CONDITIONLESS_JOIN",
  "ON_SYM", "'='", "'>'", "'<'", "'|'", "'&'", "'-'", "'+'", "'*'", "'/'",
  "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'", "'}'", "';'",
  "'.'", "'@'", "':'", "$accept", "query", "$@1", "opt_end_of_input",
  "verb_clause", "statement", "deallocate", "deallocate_or_drop",
  "prepare", "prepare_src", "$@2", "execute", "$@3", "$@4",
  "execute_using", "$@5", "execute_var_list", "execute_var_ident", "help",
  "$@6", "change", "$@7", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "do_domain_id_list",
  "do_domain_id", "ignore_domain_id_list", "ignore_domain_id",
  "master_file_def", "optional_connection_name", "connection_name",
  "create", "$@8", "$@9", "$@10", "$@11", "$@12", "$@13", "$@14",
  "server_def", "$@15", "server_options_list", "server_option",
  "event_tail", "$@16", "ev_schedule_time", "$@17", "opt_ev_status",
  "ev_starts", "ev_ends", "opt_ev_on_completion", "ev_on_completion",
  "opt_ev_comment", "ev_sql_stmt", "$@18", "clear_privileges", "sp_name",
  "sp_a_chistics", "sp_c_chistics", "sp_chistic", "sp_c_chistic",
  "sp_suid", "call", "$@19", "opt_sp_cparam_list", "opt_sp_cparams",
  "sp_cparams", "sp_fdparam_list", "sp_fdparams", "sp_param_name_and_type",
  "@20", "sp_pdparam_list", "sp_pdparams", "sp_pdparam", "sp_opt_inout",
  "sp_proc_stmts", "sp_proc_stmts1", "sp_decls", "sp_decl", "$@21", "$@22",
  "sp_cursor_stmt", "$@23", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt_in_returns_clause", "sp_proc_stmt",
  "sp_proc_stmt_compound_ok", "sp_proc_stmt_if", "$@24",
  "sp_proc_stmt_statement", "$@25", "sp_proc_stmt_return", "$@26",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@27", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@28", "$@29", "$@30", "sp_elseifs",
  "case_stmt_specification", "$@31", "case_stmt_body", "$@32", "$@33",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@34", "$@35", "searched_when_clause", "$@36",
  "$@37", "else_clause_opt", "sp_opt_label", "sp_labeled_block", "$@38",
  "sp_unlabeled_block", "$@39", "sp_unlabeled_block_not_atomic", "$@40",
  "sp_block_content", "$@41", "loop_body", "while_body", "$@42",
  "repeat_body", "$@43", "pop_sp_label", "pop_sp_empty_label",
  "sp_labeled_control", "$@44", "$@45", "$@46", "sp_unlabeled_control",
  "$@47", "$@48", "$@49", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@50", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@51", "$@52", "$@53", "create_like", "opt_create_select",
  "create_select_query_expression", "$@54", "$@55", "$@56",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@57",
  "have_partitioning", "partition_entry", "$@58", "partition", "$@59",
  "part_type_def", "$@60", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@61",
  "$@62", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@63", "part_name", "opt_part_values", "$@64", "$@65", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@66", "$@67",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@68", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select_query_specification", "create_select_part2", "$@69",
  "create_select_part3", "create_select_part3_union_not_ready",
  "create_select_part4", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option",
  "opt_if_not_exists_table_element", "opt_if_not_exists",
  "create_or_replace", "opt_create_table_options",
  "create_table_options_space_separated", "create_table_options",
  "create_table_option", "$@70", "default_charset", "default_collation",
  "storage_engines", "known_storage_engines", "row_types",
  "merge_insert_types", "udf_type", "create_field_list", "field_list",
  "field_list_item", "column_def", "key_def", "$@71", "$@72", "$@73",
  "$@74", "$@75", "$@76", "$@77", "constraint_def", "opt_check_constraint",
  "check_constraint", "opt_constraint_no_id", "opt_constraint",
  "constraint", "field_spec", "@78", "field_type_or_serial", "$@79",
  "$@80", "opt_serial_attribute", "opt_serial_attribute_list", "field_def",
  "$@81", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "$@82", "parenthesized_expr", "virtual_column_func",
  "expr_or_literal", "column_default_expr", "field_type", "spatial_type",
  "char", "nchar", "varchar", "nvarchar", "int_type", "real_type",
  "srid_option", "float_options", "precision", "field_options",
  "field_length", "opt_field_length", "opt_field_length_default_1",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "serial_attribute", "charset", "charset_name", "charset_name_or_default",
  "opt_load_data_charset", "old_or_new_charset_name",
  "old_or_new_charset_name_or_default", "collation_name", "opt_collate",
  "collation_name_or_default", "opt_default", "charset_or_alias",
  "collate", "opt_binary", "opt_bin_mod", "ws_nweights", "$@83",
  "ws_level_flag_desc", "ws_level_flag_reverse", "ws_level_flags",
  "ws_level_number", "ws_level_list_item", "ws_level_list",
  "ws_level_range", "ws_level_list_or_range", "opt_ws_levels",
  "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "constraint_key_type", "key_or_index", "opt_key_or_index",
  "keys_or_index", "opt_unique", "fulltext", "spatial",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "opt_USING_key_algorithm", "opt_key_algorithm_clause", "key_using_alg",
  "all_key_opt", "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@84", "$@85", "$@86", "$@87", "$@88", "$@89",
  "$@90", "$@91", "$@92", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@93", "$@94", "$@95", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@96",
  "add_part_extra", "reorg_partition_rule", "$@97", "reorg_parts_rule",
  "$@98", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "opt_index_lock_algorithm",
  "alter_algorithm_option", "alter_lock_option", "opt_column",
  "opt_ignore", "alter_options", "$@99", "alter_options_part2",
  "alter_option_list", "alter_option", "opt_restrict", "opt_place",
  "opt_to", "slave", "$@100", "$@101", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@102",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@103", "opt_checksum_type",
  "repair_table_or_view", "$@104", "repair", "$@105", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "opt_view_repair_type", "analyze",
  "$@106", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@107", "persistent_index_stat_spec",
  "$@108", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check_view_or_table", "$@109", "check", "$@110",
  "opt_mi_check_type", "mi_check_types", "mi_check_type",
  "opt_view_check_type", "optimize", "$@111", "opt_no_write_to_binlog",
  "rename", "$@112", "rename_list", "table_to_table_list",
  "table_to_table", "keycache", "$@113", "keycache_list_or_parts",
  "keycache_list", "assign_to_keycache", "assign_to_keycache_parts",
  "key_cache_name", "preload", "$@114", "preload_list_or_parts",
  "preload_list", "preload_keys", "preload_keys_parts", "adm_partition",
  "$@115", "cache_keys_spec", "$@116", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "union_list_part2",
  "select_paren", "$@117", "select_paren_union_query_term", "$@118",
  "select_paren_view", "$@119", "select_paren_derived", "$@120",
  "select_init3", "$@121", "select_init3_union_query_term", "$@122",
  "select_init3_view", "$@123", "select_part3",
  "select_part3_union_query_term", "select_part3_view",
  "select_part3_union_not_ready", "select_part3_union_not_ready_noproc",
  "select_options_and_item_list", "$@124", "table_expression",
  "opt_table_expression", "from_clause", "table_reference_list",
  "select_options", "select_option_list", "select_option",
  "opt_select_lock_type", "select_item_list", "select_item",
  "remember_tok_start", "remember_tok_end", "remember_name",
  "remember_end", "select_alias", "opt_default_time_precision",
  "opt_time_precision", "optional_braces", "expr", "predicate", "bit_expr",
  "or", "and", "not", "not2", "comp_op", "all_or_any", "opt_dyncol_type",
  "dyncol_type", "numeric_dyncol_type", "temporal_dyncol_type",
  "string_dyncol_type", "$@125", "dyncall_create_element",
  "dyncall_create_list", "column_default_non_parenthesized_expr",
  "simple_expr", "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@126", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@127", "$@128", "$@129", "window_func_expr", "window_func",
  "simple_window_func", "window_name", "variable", "$@130", "variable_aux",
  "opt_distinct", "opt_gconcat_separator", "opt_gorder_clause",
  "gorder_list", "in_sum_expr", "$@131", "cast_type", "$@132",
  "cast_type_numeric", "cast_type_temporal", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@133", "$@134", "$@135", "$@136", "$@137", "$@138",
  "inner_join", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "table_primary_ident", "$@139", "table_primary_derived",
  "select_derived_union", "$@140", "union_list_derived_part2", "$@141",
  "union_list_derived", "select_init2_derived", "select_part2_derived",
  "$@142", "select_derived", "derived_query_specification",
  "select_derived2", "$@143", "$@144", "get_select_lex",
  "get_select_lex_derived", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@145",
  "$@146", "index_hints_list", "opt_index_hints_list", "$@147",
  "opt_key_definition", "$@148", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "opt_where_clause", "$@149", "opt_having_clause", "$@150",
  "opt_group_clause", "group_list", "olap_opt", "opt_window_clause",
  "window_def_list", "window_def", "window_spec", "$@151",
  "opt_window_ref", "opt_window_partition_clause",
  "opt_window_order_clause", "opt_window_frame_clause",
  "window_frame_units", "window_frame_extent", "window_frame_start",
  "window_frame_bound", "opt_window_frame_exclusion", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@152", "order_list", "order_dir", "opt_limit_clause",
  "limit_clause_init", "limit_clause", "limit_options", "limit_option",
  "limit_rows_option", "delete_limit_clause", "int_num", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "choice", "procedure_clause", "$@153", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@154",
  "select_var_list", "select_var_ident", "select_outvar", "into",
  "into_destination", "$@155", "$@156", "do", "$@157", "drop", "$@158",
  "$@159", "$@160", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists_table_element", "opt_if_exists",
  "opt_temporary", "insert", "$@161", "$@162", "replace", "$@163", "$@164",
  "insert_lock_option", "replace_lock_option", "insert2", "insert_table",
  "insert_field_spec", "$@165", "fields", "insert_values", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@166", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@167", "update", "$@168", "$@169", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@170", "single_multi", "$@171", "$@172", "$@173", "$@174",
  "opt_select_expressions", "table_wild_list", "table_wild_one",
  "opt_wild", "opt_delete_options", "opt_delete_option", "truncate",
  "$@175", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@176", "show_param",
  "$@177", "$@178", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@179", "$@180", "explainable_command",
  "describe_command", "analyze_stmt_command", "opt_extended_describe",
  "opt_format_json", "opt_describe_column", "flush", "$@181",
  "flush_options", "$@182", "opt_flush_lock", "flush_lock", "$@183",
  "flush_options_list", "flush_option", "opt_table_list",
  "opt_delete_gtid_domain", "delete_domain_id_list", "delete_domain_id",
  "optional_flush_tables_arguments", "reset", "$@184", "reset_options",
  "reset_option", "$@185", "$@186", "slave_reset_options",
  "master_reset_options", "purge", "$@187", "purge_options",
  "purge_option", "kill", "$@188", "kill_type", "kill_option",
  "opt_connection", "kill_expr", "shutdown", "use", "load", "$@189",
  "$@190", "$@191", "$@192", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "hex_or_bin_String", "param_marker",
  "signed_literal", "literal", "NUM_literal", "temporal_literal",
  "opt_with_clause", "with_clause", "$@193", "opt_recursive", "with_list",
  "with_list_element", "$@194", "opt_with_column_list", "with_column_list",
  "query_name", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident_table_alias", "ident", "label_ident", "ident_or_text",
  "user_maybe_role", "user_or_role", "user", "keyword_alias", "keyword",
  "keyword_sp", "set", "$@195", "$@196", "$@197",
  "set_stmt_option_value_following_option_type_list",
  "start_option_value_list", "$@198", "$@199", "$@200",
  "start_option_value_list_following_option_type", "$@201",
  "option_value_list_continued", "option_value_list", "$@202", "$@203",
  "option_value", "$@204", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "opt_for_user", "text_or_password", "set_expr_or_default", "lock",
  "$@205", "table_or_tables", "table_lock_list", "table_lock",
  "lock_option", "unlock", "$@206", "handler", "$@207",
  "handler_read_or_scan", "handler_scan_function", "handler_rkey_function",
  "$@208", "handler_rkey_mode", "revoke", "revoke_command",
  "admin_option_for_role", "grant", "grant_command", "opt_with_admin",
  "opt_with_admin_option", "role_list", "current_role", "grant_role",
  "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@209", "$@210", "$@211",
  "$@212", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "user_and_role_list",
  "via_or_with", "using_or_as", "grant_user", "opt_column_list",
  "column_list", "column_list_id", "opt_require_clause", "resource_option",
  "resource_option_list", "opt_resource_options", "opt_grant_options",
  "opt_grant_option", "grant_option_list", "grant_option", "begin",
  "$@213", "compound_statement", "opt_not", "opt_work", "opt_chain",
  "opt_release", "opt_savepoint", "commit", "rollback", "savepoint",
  "release", "union_clause", "union_list", "$@214", "union_list_view",
  "$@215", "union_order_or_limit", "$@216", "order_or_limit",
  "union_head_non_top", "union_option", "query_specification",
  "query_term_union_not_ready", "query_term_union_ready",
  "query_expression_body", "subselect", "subselect_start", "subselect_end",
  "opt_query_expression_options", "query_expression_option_list",
  "query_expression_option", "view_or_trigger_or_sp_or_event",
  "definer_tail", "no_definer_tail", "definer_opt", "no_definer",
  "definer", "view_algorithm", "view_suid", "view_tail", "$@217",
  "view_list_opt", "view_list", "view_select", "$@218",
  "query_expression_body_view", "view_check_option",
  "trigger_action_order", "trigger_follows_precedes_clause",
  "trigger_tail", "$@219", "$@220", "$@221", "$@222", "$@223", "udf_tail",
  "udf_tail2", "sf_tail", "$@224", "$@225", "$@226", "$@227", "$@228",
  "sp_tail", "$@229", "$@230", "$@231", "$@232", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@233", "opt_migrate", "install", "uninstall", "keep_gcc_happy", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   899,   900,   901,   902,   903,   904,
     905,   906,   907,   908,   909,   910,   911,   912,   913,   914,
     915,   916,   917,   918,   919,   920,   921,   922,   923,   924,
     925,   926,    61,    62,    60,   124,    38,    45,    43,    42,
      47,    37,    94,   126,    40,    41,    44,    33,   123,   125,
      59,    46,    64,    58
};
# endif

#define YYPACT_NINF -4625

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-4625)))

#define YYTABLE_NINF -2971

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
   10044,  1319,   746,    83,  -181,   818, 63791, -4625,   140,   627,
   -4625,   451,   787, -4625, -4625, -4625, -4625, -4625,  4098, -4625,
   64452,   134,  1083, -4625, 35335, -4625, -4625, -4625,   660, -4625,
     122,   627, -4625,   134, -4625, -4625, 63791, -4625,   876,  -137,
     134, -4625, -4625, -4625, 56520, -4625,   451, 63791,   855, -4625,
   -4625, 56520,   243,   220,   911,  1329, -4625, -4625, 63791, -4625,
    1147,  1372, -4625,  1622,  1600, -4625, -4625,  1269, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625,  2077, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, 36003, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625,  -133, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625,  1175, 63791,  1189, 63791,  1701, 63791,
   54537, 63791,  1647, -4625,  1720, -4625, -4625,  1806,  1260, -4625,
   -4625,   627,   466, -4625, -4625,  1926,   451, -4625, 54537, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625,  1310, -4625, -4625, -4625,
    1360,  1461, -4625, -4625, -4625,   887, -4625,  2044,  1869,  1634,
   63791,   120, 15034,  1647,  1647,  1647,  1856,  1903,  1647,  1647,
    1647, 63791, -4625,  1647,  1647,  1647,   627,    98, -4625, -4625,
   -4625,  1996, 42639, 63791,  1751,   226,   -90, 54537, -4625,  1518,
   63791,  1461,   711, -4625,  1899, -4625, -4625, -4625, 71723,   627,
   15034,  2113,  1964,  1006, 63791, -4625, -4625, -4625, 71723,   254,
    1264,  1558, -4625, -4625,  1671, -4625, 43300,   196, -4625, -4625,
   23961, 74574,  1671,  1685,  1461,   -68,  1690,  1461, -4625, -4625,
   63791,  1461,   627,  1937, -4625, 15034, -4625, -4625, -4625,   325,
     325,   325, -4625,   325, -4625,   325, -4625, -4625,  1550, 63791,
    2004, -4625,  2004, -4625, -4625,  2004,   395,  1767,  2037,  2046,
    2050,  1725,  1001,  1260,  1274, -4625, -4625, -4625,  1623, -4625,
    1632, -4625,   698, -4625,  1691, 47927, -4625, 63791, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625,  1347, -4625,  2139, -4625,
    1742,  1243,  1792,  2170, -4625, 54537, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625,  1657, 35335,  1664, 63791, -4625,
    2214, 15034,  1360, -4625,  1778, -4625, -4625, 35335, -4625, -4625,
   35335,   272,    34, 63791, -4625, -4625,  2378, -4625, -4625, -4625,
   57181,   120,  1702,  1705,  1707, 20538, -4625,  1711,  1716,  1726,
   15034,  1729,  1731,  1738,  1748,  1750,  1752,  1755,  1760,  1771,
    1775,  1780,  1788,  1801,  1810,  1816,  1816,  1816,  1822,  1836,
    1838,  1854,  -161,  1858, -4625,  1863,  1873,  1881,  1883, -4625,
    1886, -4625,  1890,  1896,  1901,  1907,  1911,  1944, -4625, -4625,
    1949,  1951,  1953, 15722,  1967,  1969,  1972, -4625, 31990,  1976,
    1984,  1988,  2001,  2020,  2025,  2027,  2039,  2045, -4625, -4625,
   15034,  1822,  2048, -4625, -4625,  2059,  2075, -4625,  2086,  2101,
    2103,  2111,  2112,  2114,  2117,  2120,  2123,  2124,  2125,  2130,
    2131,  2132,  2133,  2135,  2136,  2137,  2141,  2143,  1822, -4625,
    1121,  2145,  2147,  1161,  2149, -4625,  2150, -4625,   352,  2152,
    1816,  1822,  1822,  2153,  2154,  2164,  2165,  2172,  2173, 20538,
   20538, 20538, 15034, -4625, 63791, 63791, -4625,  8750,  1250,  2515,
   20538, -4625,   319, -4625, -4625, -4625, -4625, -4625,  2019, -4625,
    2110, -4625, -4625,  1765,  2000, -4625, -4625, -4625, -4625, -4625,
   -4625,  2176,  1872, 63791, 63791, 63791,  2461, 63791, 63791, 63791,
   -4625, 54537,  2118, 63791, -4625, -4625,  1647, -4625, 15034,  2055,
    8551, 27977,  2298,  2303,  1569,  1816, -4625, -4625,   647,   677,
     686,  2409, -4625, -4625,  2235,   699,  2432, -4625,   700,   215,
   -4625,   106,   705,   731, -4625, -4625, -4625, -4625, -4625, -4625,
    2252,  2469,  2177, -4625, -4625,   175, -4625, -4625, 63791, -4625,
    2698, 15034, -4625, -4625, -4625,  2621,  2336, -4625, -4625, -4625,
     241,  2820,   923, 35335,    83, 63791,  1107, 73706, 73706, 63791,
   -4625, 68418, -4625,  2184, -4625, -4625, 74441, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,  2183, -4625,
   -4625,  8750, -4625, -4625, -4625, -4625, -4625,  2578, -4625, -4625,
   51232, 35335,  1316, 72384, -4625, -4625, -4625, 32658, -4625, -4625,
    2827, -4625,  2194, -4625, -4625,  2000,  2929, -4625,  2484,  2298,
    2494, -4625,  2680, -4625,  2498,  2389,    34, 57842,  1244,  2379,
     625,  1297,  1299, 41973,   502, 54537,  1436,    91, 24630, 48588,
    2204, -4625, -4625, -4625,   508,  2371, -4625,  2723, -4625,   394,
   -4625,  2215,  1511,   394, 51893,  2612,   217, -4625,   188, -4625,
    2697, -4625, -4625, -4625, -4625,  2344,  2325,  2373, -4625,   304,
     519, -4625,  1461, -4625,   821, -4625,  2351,  2612,   394,   217,
   -4625,  2613,  2744,   365,  2709, -4625,  -153, -4625, -4625, -4625,
     579,  2825, -4625,  2236, -4625, -4625, -4625, 35335, -4625, -4625,
   -4625,  2621, -4625,  1053, 63791, -4625, -4625, -4625, -4625,  2237,
   -4625, -4625,  2530,  2352, -4625, -4625,    90,  2759, -4625,    83,
   63791, -4625, -4625, -4625,   247,  1087,  1806,  2004, -4625,  2004,
    2004,  2004,  2004,   466, 49249,  1605,   851,  1632,  2244,  2423,
   -4625, -4625, -4625,  2799,  2814,  1816,  2243, -4625, -4625, -4625,
   -4625, -4625,  2928, -4625, -4625,  2543,  2823,  2823,  2823,  2938,
   -4625, -4625, -4625, -4625, 47927, 35335, -4625, -4625, -4625,  1243,
   -4625,  2437,  2299, -4625, 63791,  1792, -4625, 35335, -4625,  2254,
    2681,  2261, -4625, -4625,  2532, 15034, -4625, -4625, 15034, 71723,
    2785,  8750, -4625, -4625,   132, -4625, -4625, 35335,   150, -4625,
    2891,  2485, -4625, -4625, -4625,  2928,  2823, 35335, -4625,  2267,
   -4625,  2263, -4625, 15034, 15034,   369,  2882,  2944,  2944,  2944,
    8750,  2306, 15034, 15034, 15034, 15034, 15034, 15034, 15034, 15034,
   15034, 15034, 15034, 15034,   377,  2274,  2275, -4625, -4625, -4625,
     204, -4625,  2277, 15034, 15034, -4625, 15034, 15034, 36671,  2278,
   -4625,  9811, 15034, 15034, 15034,   525,  2815, 15034, 15034, 15034,
   15034, 15034, 15034,  8147, 15034, 15034, 15034, 36671,  2955,  2280,
   -4625,  2283,   390, 15034, 15034,  1526, 15034, 15034, 15034, 15034,
   15034,  1610, -4625, 15034, 15034, 15034, 15034,  2286, 15034, 15034,
   20538, 15034,  2290, 15034, 15034, 15034, 15034, 15034,  2292,  2293,
   15034,  2944,  2944, 15034, 15034,  1675, -4625, -4625, 15034,  1894,
    1894, -4625, 15034, 10906, 15034, -4625, -4625,  2297, -4625, -4625,
   -4625, 36671,  2944,  2944, 15034, 15034, 15034,  2882,  2882,  2882,
    2300,  3035, -4625,  2328, 15034,  2301, 25299, -4625, -4625, 20538,
   -4625,  1505, -4625, -4625, -4625, -4625, 15034, -4625, -4625, -4625,
   15034, 15034, 16410, 20538,  2311, 20538, 20538,  2703,   985, 20538,
   20538, 20538, 20538, 20538, 20538, 21226, 21914, 20538, 20538, 20538,
   20538,  2882, 54537, 20538, 38668, 15034, -4625, -4625, 63791, -4625,
   -4625,  2305, -4625,  2608,  2118, -4625, 52554, -4625,   687,  2831,
   -4625, 51232, 35335, -4625,  2055,  8750, -4625, -4625,  2701, -4625,
    2702,  2704,  2708, -4625, -4625, -4625, -4625,  2950,  2711, -4625,
    1461,  2714, -4625, -4625,  2329, -4625, -4625, -4625, 23290, 54537,
   -4625,  2330, -4625,  2342, -4625, -4625, -4625, -4625, -4625, -4625,
    2443, -4625, -4625, -4625, -4625,  2343, -4625, 51232,  2343, -4625,
   -4625,  2343, -4625, -4625,  2343, 47927,   123,  9631, -4625, -4625,
   65774, -4625, 65113, -4625,  2783,  2403, -4625, 32658,  1461, -4625,
   17098, -4625, 17786, -4625, -4625, -4625,  2734,   239,  2345, -4625,
   -4625, -4625, -4625,  2822, 63791, -4625, -4625, -4625, 15034,  2726,
    2346, -4625, -4625, -4625,   190, 35335,  1548, -4625,   209,  2349,
   -4625,  2433,  2356, -4625,  2439, -4625, -4625, 35335,  2353, -4625,
   35335, -4625, -4625, -4625,  2629,  2448, -4625,  1461,  1264, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625,  2362,  2382,  2846,  2365, 51232, 47927,   149, -4625,
   63791, -4625,  2364,  2370, -4625,   508, -4625, 52554, 63791, -4625,
   -4625, -4625, -4625, -4625,  2984, 15034, -4625, 51232, -4625,   -34,
   -4625,    96,    99,   508, -4625, -4625, -4625, -4625, -4625, 63791,
   58503,  2372, 11594,  2502,  2798, -4625, -4625, -4625,  2383,  2004,
   63791, 63791, 63791, 35335, 63791, 51232, 35335, -4625,  1286,  1286,
   -4625, -4625, -4625, 46605, -4625, -4625, -4625,   394, 63791, 63791,
     394, 47927, -4625,   217,    26, 63791,   394, -4625,  2801,  2490,
   -4625, -4625, -4625,  2878, -4625, -4625,  2868,  2387, -4625,  2903,
   -4625, -4625,  2521,   217, -4625, -4625, 35335, -4625, -4625,   217,
   -4625,   217,   217, 15034,   394,   394,   394, -4625,   -51, -4625,
   -4625, -4625,  2550,   -68, -4625, -4625, -4625,  1355, -4625, -4625,
    2395, -4625,  2400, -4625,   325,  2663, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625,  2904, -4625, 52554, 47927,  2881,  2004,
    2004, -4625, -4625,  2924, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625,  2004, -4625, -4625, -4625, -4625, -4625, -4625,  1792, 54537,
   63791, 63791, 63791, 35335, -4625, -4625, -4625, -4625,   155,   192,
    3049, -4625,   207, -4625,  1382,   207,  2450,  2612, -4625,  2898,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625,  2428,   851, -4625, -4625,  2424,    18, -4625, -4625,   124,
   -4625, -4625, -4625,  1968,  2968, -4625, 54537,  1913,   -79,   797,
    1913,  2441,  1461,   322, -4625,   322, -4625,  2876, -4625,  2885,
    -125, -4625, -4625, -4625,   262,  2004, -4625, -4625,  2453, -4625,
    2706, -4625, -4625, 54537, 59164, 35335, -4625, -4625, -4625,   828,
    2444,  2456,  8750,  8750, 69079,  3078,  2491,  9661, -4625, -4625,
   35335, -4625,   173, -4625, -4625, -4625,  2518, -4625, -4625, -4625,
   -4625,  2190, -4625, -4625,  1032,  2517,  2464, -4625,  2629, -4625,
    1323, 63791,  2945, 39329, -4625,  3330,  2242, -4625,  2944,  2466,
   -4625,  2471,  2475,  2476, 15034,    87,  7744,  5382,  1317,  1517,
    5409,  3481,  5471,  3508, -4625,  1539,  3806,  3822,  3927,  1535,
   -4625,  2477,  2486, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625,  2482, -4625, -4625, -4625,  3950,  3981,  5489,  5546,
    2483, -4625,  2487, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625,  2947, -4625,  5605,  4006,  1572, -4625, -4625,
   -4625, -4625,  2492, -4625, -4625,  1789,  1793,  5691,  4041,  4064,
    4091,  2493,  5706,  2496,  4152,  1582,  1592,  2500, 36671, 63791,
    2944,  2503,  5903,  5919,  2944,  2504,  4195,  5946,  1607,  1619,
    1624,  5970,  4259,  5988,  6027, -4625,  4299,  1640,  1679,  6053,
   -4625,  4397,  4407,  6116,  4608,  4612, -4625, -4625,  6188,  2514,
    2516,  4631,  1966,  2944,  2519,  2167,  2497,  2520,  6228, 12282,
   12970, 13658,  2138,  4687, -4625,  2522, -4625,  2283,  2523,  2524,
    2459,   234,  6257, -4625, 15034,   892,  1449, 63791,    99, -4625,
    2654,   993, -4625, -4625, -4625, -4625,   883,   306,   291,  1610,
   -4625,  2526,   993,  2527,  1275, 15034,   813,     4, 20538, 20538,
    2528, 20538, 20538,  2495,  2495,   327,   327,  1092,  1832, 15722,
     381, 15722,   381,  2495,  2495,  2495, -4625, -4625,  2882, -4625,
   -4625, -4625, -4625,  8750,  2529,  1029, 63791, 35335,   687,  2531,
   -4625, -4625, -4625, -4625, -4625,   508, -4625,  2533,   156, 35335,
   -4625, 14346,  3063, -4625, -4625, -4625, -4625,  1461, -4625, -4625,
    8665, -4625, 35335,  2615,  2626,  2628, -4625, 29317, -4625, -4625,
   -4625, -4625, 29317,  1293, -4625, 63791, -4625,  2617, -4625, -4625,
   -4625,  -221, 33326, 33326, -4625, 33326, -4625, -4625, -4625, -4625,
   -4625,   215, -4625, -4625, -4625, -4625, -4625, -4625,    80,   184,
    1668,  2450, -4625, -4625, -4625, -4625, -4625, 15034, 38007,  8750,
   -4625, -4625, 35335, -4625,  2967,   -19, 35335, -4625, -4625,  2960,
    8750, -4625, -4625, -4625, -4625, -4625, -4625,  2535, -4625,   126,
     126,  2805,   808, 15034,  1461, -4625, 51232, 51232, 35335, 35335,
   35335,   444, 15034, -4625,  1867,  2539, -4625, -4625,  1653, -4625,
    3211, -4625,  2929, 23290, 52554,  3006,  3020, -4625,  2542, 33326,
   33326, 33326, -4625, 57842,  3025, 11594,  3026, -4625, 53215, -4625,
    8750,   508,  2547,  2548, -4625, -4625,  2948,   783, -4625,  2549,
    2553, -4625,  2545,  2554,  2558, 57842, 15034, -4625,    96, -4625,
   -4625, -4625, -4625, -4625, 20538,  1863, -4625,  8750, -4625, -4625,
    1461,  3027,  1461, 15034,  2555, 63791, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
    3062, -4625,  2755,   569, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625,   394, -4625, -4625, -4625, -4625, -4625, -4625, -4625,  2807,
    2612,   519,  2798, -4625,   394,   217, 35335,   394,   394,  8750,
   -4625, -4625, -4625, -4625, -4625, -4625,  2567, -4625,  2631, -4625,
   -4625, -4625, 63791,  2122,  2743, -4625,  2577, -4625, -4625, -4625,
   35335, -4625, 71723, 63791, 63791, -4625,  2579, -4625,  3060, -4625,
     145,  1036,  -125,  2004, -4625, 63791, 63791,  2004,  2004, 63791,
   -4625, -4625,   496,  2887,  2893, -4625, -4625, -4625, -4625,  2679,
    2679, -4625, 25968, -4625, -4625,  2644,  3032, -4625, 63791, -4625,
   -4625,  1159, -4625, -4625,  3068, -4625, -4625,  2890, -4625,  2610,
   -4625, 15034, -4625, -4625,  1694, -4625, -4625,  1475,  1605, -4625,
     508,   508,  2933, -4625,  1461,  2751,  2752,  2756,  2757,  2758,
    2796, -4625, -4625,  1461,  1461, -4625, -4625,   508, -4625,  1093,
   -4625, -4625, -4625, -4625,   873, -4625,   508,   508, -4625,   268,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625,   975, -4625,   157,
     284, 47927,  2650,  5376, -4625, -4625, 35335,  2920, 35335,  3105,
   -4625,  3181, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625,  2632, -4625, -4625, 15034,  2725, -4625, -4625,  2491,
   -4625,  2645,  2647,  2648,  2651,  2652,  2653,  2655,  2656,  2657,
    2658,  2659,  2662,  2664,  2667,  2668,  2669,  2682,  2683,  2688,
    2690,  2691,  2692,  2695,  2696,  2640, -4625, -4625, -4625,  2742,
   -4625, -4625, -4625,   508,   508,   508,   508, -4625,   973, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625,  3074,   707, 63791,
    2740, -4625, 39329, -4625, -4625,  1355, -4625,  2684, 18474, -4625,
    2693, -4625, 15034, -4625, -4625, -4625,  8025, 15034, 15034,  3215,
    1351, -4625, 53876, -4625, -4625, -4625, 15034, -4625, 15034, -4625,
   15034, 15034, 15034, 15034, 53876,  1351, 15034, -4625,  2710, -4625,
    3121,  3122, -4625, -4625, -4625, -4625, 15034, -4625, 15034, -4625,
   15034, 15034, -4625, 15034, -4625, 15034, -4625, 15034, 15034, 15034,
   15034,  2976, 15034, 15034, -4625, -4625, 20538, -4625,  2700,  2715,
   -4625, -4625, -4625,  2716, -4625, 15034, -4625, -4625, -4625, -4625,
   -4625, 15034, -4625, -4625, 15034, -4625, 15034, -4625, 15034, 15034,
   -4625, 15034, 15034, -4625, -4625, -4625, 19162, 15034, 15034,  2717,
   -4625, -4625, 15034, 15034, 15034, -4625, 15034,  8085, 15034,  8167,
   15034,  8182, 15034, -4625, 15034, -4625, -4625, -4625, -4625, 15034,
    1669,  1723,  1653,  2718, -4625,  1765, -4625,  2705,  1621, -4625,
    2766, -4625, -4625, -4625, 54537, 15034, -4625, -4625, -4625, -4625,
   -4625, 20538,  2607,  2724, 20538,     4,  2026, 15034,   903,     4,
    8147,  8147, 63791, 15034,  2728,  2707, -4625, 15034, 63791, -4625,
   -4625, -4625, 52554, -4625, 54537, 51232, -4625, -4625, -4625,   156,
    1863, -4625,  2713, -4625,  8750, -4625,  2722, -4625, -4625, -4625,
    2535,   274,  2736,  2729, -4625, -4625, -4625, -4625, -4625, -4625,
    1644, -4625, 47927,  3381, -4625,  2727, -4625,  2730,  2817,  2821,
    2826, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625,  2612, 71723,  1867,  8750, -4625, -4625,  2733, -4625,
   -4625,  2532,  2679,  2761,  3133,  3341, -4625, -4625, -4625, -4625,
   71723, 71723, 15034,  2749, -4625, -4625, -4625, -4625, -4625,  1723,
    2866, -4625,  3426,  8750, -4625,  2841, -4625, -4625, -4625,    62,
   -4625, -4625, -4625, -4625, -4625,   540,  8136, -4625,  2760,  2760,
   31322, -4625, -4625, -4625,  2934, 63791, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625,  2771, -4625, -4625,  3048, 51232,
   47927,  3239,  3240,  3245, -4625, 74311, -4625, 51232, -4625, -4625,
   -4625, -4625, -4625,  2864,  2870,  1454, -4625, -4625,  3186,  3007,
   -4625, -4625, -4625,   508,  8750, -4625,  2372,  2773, 26637, -4625,
    1004, -4625, -4625,  8750,   266, -4625, 49910,  3281, 49910, 49910,
   -4625, -4625,  3079, -4625, -4625,  3027, -4625,  2450,   217, -4625,
   -4625,   -51,  2271, -4625,  -123,  2777,  3193,  3196, -4625,  3065,
    1588,  3065, -4625, -4625,  2777, 36671,  1355,  2629, 69740, -4625,
    1667, -4625,  3447,  1653,  3125, -4625, -4625,   148,  3469, -4625,
    2650, 63791,  2793,   -98, -4625, -4625, 63791,  3275,   461,   461,
    3091, 35335, 35335,  9833, -4625, -4625, -4625, 54537,  2797, -4625,
   -4625, -4625, 15034, -4625,  2965, -4625, -4625, -4625,  2863, 15034,
    3435,  3262,  2612, -4625, -4625,  8750, -4625,  2800, -4625, -4625,
   -4625, -4625,   207, -4625, -4625, 53215, 50571, -4625, -4625, -4625,
   -4625,  3374, -4625,  3375,  1208, -4625, -4625,   349,   797, -4625,
    1461,  1461,  1461,  1461,  1653,  1461,  1461,  1712, -4625,   349,
     349,   322, -4625,   177, -4625, -4625, -4625, -4625,   -44, -4625,
   -4625, 54537,  2909,  2910, -4625, -4625,  2914, -4625, -4625,   176,
   -4625,  2089, -4625,   509,   508,  3421,  3087,   508,   508,  3421,
     508,  3092,  3093,   508,   508,  2908,  3366,   508,  3241,  2935,
    2129,  3243,   508,  3100, -4625,  2939,  3372,   508,   508,   508,
     508,   508,  3421,  3103,  3470,   508,   508, -4625,   508,  3106,
    3109,   182,  3108,  3112,   508,   508,   508,   508,   904, 63791,
     508,   508,  3113,   508, -4625, -4625, 75105, -4625, -4625, -4625,
   -4625, -4625, -4625,   829, 33999, -4625, -4625, -4625, -4625,   508,
   -4625,   211, -4625,  3051, -4625,  1879, 55198, 70401,  2840,  2847,
   59825,  8750, 71723, 15034, -4625,  2850,  2852,  2854,  1653,  1653,
    1461,  1461,  1004,  1461,  1653,  1461,  1461,  1461,  1461,  1461,
    1461,  1461,  1653,  1653,  1461,   564,  1181,  1461,  1653,  9661,
   -4625,  1461,  1723,   349,   349,  1032, -4625,  3318,   508, -4625,
     288, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625,  2849,  1355,  2450,  1444,  2450,  2865, -4625, 15722,  6267,
   -4625,  8750, 15034,  8750,  8236, -4625,  2858,  2858,  2858, -4625,
    2859,  2861, -4625,  2858,  3285,  2858,  3286,  2871, -4625, -4625,
    2872,  1744,  8537, -4625,  1757,  8569,  6320,  2873,  2874,  1765,
   -4625, 15034, 15034,  6344,  2672,  6392,   610,  6517,  6534,  4736,
    5192,  2919, -4625,  6768,  6793,  2016, -4625, -4625,  6810,  6814,
    6828,  6852,  6879,  5207,  6944,  1762, 15722,  6954,  3269,  3163,
   -4625,  7035,  5294,  5329,  7095, 15034,  7105, 15034,  7169, 15034,
    7266,  7280,  7303,  2877,  2877,   199, -4625,  2869, -4625, -4625,
   -4625,  2880, -4625,  2898, -4625,  1397,  2705,  2875,  3042, -4625,
     207,  1694, -4625,   892, -4625,  2879,  8750,  2883,   993, -4625,
   15034, -4625,     4, 20538,  3244,  2884, 20538, -4625, -4625,  3134,
   -4625,  8750, -4625, -4625,  2886,  1765, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, 14346,  2888, -4625,  3116, -4625, -4625,  2923,
   29317, -4625, 63791,  1122,  3166,  2894, 39990, 47927, 47927, 47927,
    2892, -4625, 66435,  3184, 35335, -4625,  3333, -4625, -4625, -4625,
   -4625, 63791, 73706, 73706, 73706, 73706, 63791, 20538, -4625,  3525,
    2895,  2896,  2911,  2901, 51232,  3221, -4625, -4625,  3115, 36671,
   -4625,  2900, -4625,  2900,  1597,  2902,  1764,  3083, -4625, -4625,
   -4625,  2906, -4625,  1783, -4625, 23290,  3387,  2533, -4625, 47927,
   47927, 47927, -4625, -4625,  2915,  2916,   166,  3144, -4625, -4625,
   -4625, -4625, 11594, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625,  2612, -4625, -4625, -4625, -4625, 49910,
   -4625, -4625, -4625, -4625, -4625,   394, -4625,  2927, -4625,  2917,
   -4625,  2921,  1214,  1621, -4625,  1355,  2328,   116, -4625, -4625,
   -4625,  3332,  3065,  3065,  2777,  3337,  1754,  2922, -4625,   508,
   -4625,  2622,  2956, -4625, 63791,  2930, -4625, -4625, 47927, -4625,
    3126, -4625,   862,  2931, 63791, -4625,  3497, -4625, -4625, -4625,
   -4625, -4625, 35335, -4625, -4625, 35335, 29986, -4625, -4625,  3202,
   -4625,  8643,  2175, -4625, 25968,  8750,  2936,  1058,  3267,  2937,
   -4625, -4625,  8750, 15034, -4625,  2966, -4625, -4625, 55859, -4625,
   40651,   997, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625,   873, -4625, -4625, -4625,
     975, -4625,  3036, -4625,   178, -4625, -4625, -4625, -4625,   224,
    1653,  1653,  1653,  1181,   -48, -4625,  2089, -4625, 34667,  2004,
   -4625, -4625,   205, -4625,  2004,   828,   828,  3382, 60486, 37339,
     134,  1004,  1653,  1856,  1653, 61147,   134,  1461,  1461,  2175,
     508,  1653, -4625, -4625,   127,  3350,  1647,  3192,  1856,  1856,
   -4625, 54537, 63791, -4625,   508,  1608,  1653, 61808,  1004,  1004,
    1856,   134, 36671,  1474,  1687, -4625,  1461,   134, -4625, -4625,
   -4625, -4625, 35335,   134,   134,   915,  1706,  1845,  1983, -4625,
   -4625, -4625,  1653,  1687, 61147, -4625, -4625, 75057, -4625, -4625,
   -4625, 30654, 63791,  1170,  3168, -4625,  2940, 44622,  2946,    83,
    1415,  3030,   307, -4625,   183, -4625, -4625, -4625,  3407,  2953,
     383, -4625,  2943, -4625, 61147, -4625,  2949, -4625,  2954, -4625,
   67096,  8750,  1653,  1653,  1653, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, 63791,   349,   707, -4625, 39329,  2450,
    2890, -4625, -4625,  8147, -4625,  8750, 15034,   316, -4625, -4625,
   -4625, -4625,   934, -4625, -4625, -4625,  3253, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625,  1203, -4625, -4625,  1351,
   -4625, -4625, -4625,  2957,  8147,  8147, -4625, -4625, 15034, -4625,
    3591,  3140, -4625, -4625, 15034, 15034, -4625, 15034, -4625, -4625,
     935,  2969,  2994, -4625, -4625, -4625, -4625, -4625, 15034, -4625,
   -4625,  8147, -4625, 15034, -4625, -4625, 15034, -4625, 15034, 15034,
   -4625,  7427, -4625,  7445, -4625,  7518, -4625, -4625, -4625,  1723,
    2970,  3368, -4625, -4625, -4625,  1723,  3169, -4625, -4625,  1723,
    1653, -4625,  2428,  1397, -4625,  2971,  1225, -4625, -4625, -4625,
   -4625, -4625,  3038, 63791, -4625, -4625,  1785,   993, -4625, 15034,
   -4625,     4,  3610,  3264, 55859, -4625, -4625, -4625,  1004,  3477,
    3369, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625,  3446, -4625, -4625,
   -4625, -4625,  -125,  -125,  -125, 14346,  2094,  3513, -4625, -4625,
   -4625,  3333,  3391, -4625,    92,  2987, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625,  2989,  2990, -4625, -4625, -4625,  2515,  3386,
    3261, -4625, -4625,  1723, 63791, -4625, -4625, -4625,  2995, -4625,
     508, 14346,  2760,  2328, -4625,   899,  1597, 36671, -4625, 40651,
     837,   851, -4625, 63791, -4625, 47927,  2542,  2542,  2542, -4625,
   -4625, -4625, -4625, -4625, -4625, 26637, 57842, -4625, -4625,  2612,
   -4625,  1461,  1807, -4625,  3700, -4625, -4625,  2766,   207,  2577,
     892, -4625,  2777,  3412,  3414, -4625,  2777, -4625, -4625, 36671,
    2450, 14346, -4625, -4625, -4625, -4625, -4625, 63791, -4625, -4625,
   -4625, -4625,  3152, -4625,  1959,  3296,  3028, -4625,  3005,  3010,
   -4625, 37339, 35335,  3011,  3012,  3004, -4625, -4625, -4625, -4625,
     250, -4625, 10056, -4625, 50571, -4625, -4625, 15034, -4625, -4625,
   -4625, -4625,  3013,  1604,  1058, 15034, 63791, -4625, 62469, -4625,
   -4625, -4625, -4625,  1216, -4625,  3017, -4625, -4625, -4625, -4625,
   -4625, -4625,  1461, -4625, -4625, -4625, -4625, -4625, -4625,  1455,
   -4625, -4625,    83, -4625, -4625,   134,  3018,  3417,  3430,   828,
   -4625,  2004, 37339, -4625,  2004,  2004,    83, -4625, -4625, -4625,
     409, 61147, -4625, -4625, 37339, -4625, -4625, -4625,  3009, -4625,
   -4625,  1723, -4625, -4625, 50571,  1461, -4625, 37339,  1856, 63791,
    3431, 37339, 37339, -4625,  3050,  1461, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, 37339, 61147,  3024, -4625,  1058,
   -4625, -4625, -4625, -4625, -4625,  2113, -4625, 61147, -4625, -4625,
   61147, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,  3029,  1552,
    2038, -4625,  3031, -4625, 63791, -4625, -4625, 35335, -4625, 10203,
   63791, -4625, -4625, -4625, -4625, 63791,  3692, -4625,  3282, 15034,
   15034,  3324, 63791,  3328, -4625,  3639, -4625, -4625,  3474,  3523,
   63791, 74913,  3524,  3527, -4625,  3052, -4625, 59825,  3143,  1796,
   -4625, -4625,  1798, -4625, -4625,  1811, -4625, -4625, -4625, -4625,
   -4625,  2684, -4625,  3448,  1241,  8750,  3054,  3057,  3058,  3059,
     212,  1813,  3067, -4625,  2858, -4625,  2859, -4625, -4625, -4625,
    3671, -4625, -4625,  2858,  3484, -4625, -4625, -4625, -4625, -4625,
   -4625,  3061, -4625,  3064,  3066,  7544, 15034,   325,  3069,  7561,
    5363,  1830,  3396,  3479, -4625,  3311, -4625,  7604,  1289,  7625,
    7642,  7646,  7669, -4625, -4625, -4625, -4625, -4625,  3072, -4625,
   -4625,   504, -4625,  3073,  2610, -4625, -4625, -4625,  2898,  2766,
   -4625, -4625,  1833, 15034,  3708,   -25, -4625, -4625,  1839, -4625,
   -4625,  3743,  3365,  3107,  3107,  3107,  1841, -4625, 71723, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625,  3504, 63791, -4625, 63791,
    3080,  1213, -4625,  1844, -4625, -4625,  3082, 36671, 14346,  3084,
    3085, -4625,  2863, -4625, -4625, -4625,   837,  3077,   207,  1475,
     207, -4625,  2428, -4625, -4625,  2542, -4625, -4625, -4625, -4625,
   -4625, -4625,   851, -4625,   892, -4625, -4625, -4625,  2340,  3137,
    2777,  2777,  2499,  3139, 15034,  3089, -4625,  2890, -4625, -4625,
      77, -4625,  3090,  3096, -4625, -4625,  1461,   788, -4625, -4625,
     117,  3274, 54537,  3094, 63791, 63791,  3104,   902, -4625, 30654,
   -4625,  3757, -4625, -4625,  3704,  1058, 15034,  3111,  3099, -4625,
   -4625, -4625, 15034, -4625, -4625,  8750,  3770,  3114, -4625, -4625,
   -4625, 41312,  1605,  3017,  3117,  3290, -4625, -4625, -4625,  3611,
   -4625, 15034,  2004, -4625, -4625, 37339,  3159,  -186, 37339, 37339,
    3617,  3668,  3670, -4625, 37339,  2190, 63791, -4625,  2984, -4625,
   -4625, 37339,  3009, -4625, -4625,   228,  3223, -4625,  1170, -4625,
   36671, -4625, -4625, -4625, 63791, -4625, 35335, -4625, -4625,  3123,
   -4625,  2858,  2858,  2858, -4625, -4625,  2858, -4625,  2859,  3378,
    3128,  2859,  2859, -4625, -4625, -4625, -4625, -4625, -4625,   212,
     358, -4625, -4625,   212, -4625, -4625, -4625,   159,  1499,  2859,
   -4625, -4625, -4625, -4625, -4625,  3130, -4625,  2858,  2858,  2858,
   -4625, -4625,   212,  2858, -4625,  2858,  3740, -4625,  2859,   416,
    2858,  2858,  2858,  2858,  2861,  3119, -4625,  1847, -4625, -4625,
    8750,  8147,  3731, -4625, -4625,  3294,  1461,  3667, 63791,   186,
   -4625, -4625,  3688,  1532, -4625, -4625, -4625, 71723, -4625,  1653,
   -4625,  1653, -4625,  1653, 47266, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625,   214, -4625, 53215, -4625, 53876,  1727, -4625, -4625,
    3439, -4625, -4625, -4625, -4625, -4625,   212, -4625, -4625, -4625,
   -4625,  3141,  1058, -4625, -4625, -4625, 15034, -4625, -4625,  3480,
    3642, -4625, -4625, -4625, -4625, -4625, -4625,  3146, -4625,  1653,
    2890, -4625, -4625,  3147, 15034, -4625, -4625,  3149, 10167, -4625,
    1004,  3696, -4625, -4625,  2386, -4625, -4625, -4625, -4625, 14346,
   71062, -4625,  3571,  3265, -4625, -4625, -4625,  3167,  3426, 63791,
   -4625,  3261, -4625, -4625, -4625, -4625, -4625, -4625,   207, -4625,
   -4625, -4625, -4625, -4625, -4625,  2610,  2428, -4625,  3162, -4625,
    3219, -4625, -4625, -4625,  3220,  8750, 63791,  3448, -4625,   296,
   -4625, -4625, 63791, 74913, -4625, -4625, -4625, -4625,  3170,  3171,
   -4625, 63791, -4625, -4625, -4625,  3464,  1415,  3460, 63791,  1892,
    1058,  3174,  1921, -4625,  2863, -4625, 75105, -4625, -4625,  1211,
     129,  3569, -4625,  8750, -4625, -4625,  1058,  3176, 63791, -4625,
   -4625,   207,  1594,   207,  3178,    18, -4625, 37339,   619,  7695,
   37339,  3159,   421,   461, -4625,   461, -4625, -4625, -4625, -4625,
   22602,  1170, -4625, -4625, -4625, -4625, -4625, 35335, -4625,   134,
   -4625, -4625,  3009,   540,  3179, 63791,  3537, -4625, -4625, -4625,
   -4625, -4625,  1018, -4625,   325,  1018,  1018, -4625,  2379, -4625,
    3224,   212, -4625, -4625,  3226, -4625, -4625, -4625,  1018,  1238,
     325,   212, -4625, -4625, -4625, -4625,  1018, -4625, -4625,  8447,
    3321, -4625,   212,  3835,   212,  3835,  1018,  1018, 63791, -4625,
   63791, -4625,  2328, -4625, -4625, -4625, -4625, -4625,  1923, -4625,
   -4625, -4625, -4625, 43961, 15034, -4625, -4625, -4625, -4625, -4625,
    2328, 67757, -4625, -4625, -4625,  3694,  3380,  3393, -4625, -4625,
   -4625, -4625, -4625, -4625,  3199, -4625, 15034, -4625,  7726, -4625,
   -4625, -4625,  3200,  2612,  2936, -4625, 74274,  3394,  2615,  2626,
    2628,  3458,  3710, -4625,  3461, -4625,  3828,  3496, -4625,  2386,
   -4625, -4625,  3268, 35335, -4625, -4625,  3213,   128, -4625, -4625,
   -4625,  2863,  2610,  3700, 15034,  3214, 15034,  3216,  1930, -4625,
   -4625, -4625,   828,   828, -4625,   296,  3228,  3413, -4625, -4625,
   -4625,  1171, -4625, -4625,  3324,  3222,  1933,   197, 63791, -4625,
    3528,  1188, -4625, -4625,  3202, -4625,  3864,  3865,  3759,  3870,
     129, -4625,   865, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
    3663, -4625, -4625, -4625, -4625,  1605,  3740,  1723,  3261, -4625,
   -4625, -4625, -4625,   461, -4625,  3242, -4625,  3247,  3248,  3249,
    1181,  1181, 15034, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625,  3664, -4625, -4625,  1935, -4625,   889,  3535, -4625,  3259,
    3310, -4625,  1941, -4625, -4625, -4625, -4625, -4625, -4625,  1461,
   -4625,  3662, -4625,  1238, -4625, -4625,  3665,  3555,   508,  1960,
   -4625, -4625, -4625, 54537, 22602,  3923, -4625,  3313,  3813, -4625,
    3928, -4625,  2604, -4625, -4625,  3277, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625,   998,  3398, -4625, 71723, -4625,
   63791, 63130, -4625, -4625,  9263, -4625, -4625, -4625,  3745, -4625,
    8750, -4625, -4625,  3773,  2428, -4625, -4625,  1058, -4625, -4625,
     207,   832, -4625,  3938,   857, -4625, -4625,   221, -4625, -4625,
   -4625, -4625, -4625, 36671,  2629, 20538,  3388, 63791, -4625,  1649,
    3019, -4625,  2898, -4625,  8750, 63791,  8750, 63791, -4625,  3754,
    3754, -4625, -4625, -4625, -4625, -4625, -4625,   307, -4625,   873,
     160,  1461,   508,  3546,   982,   197, -4625, -4625,   508,  1058,
    3276,   982,  1188, -4625, -4625,   250,   325,   325,  3913,   325,
   -4625,  3914,  3915,   865, -4625,  2863,   207, -4625, -4625, -4625,
   -4625,  1963,  3289,  3291, -4625, 63791,  3293, 63791, 63791, 15034,
   -4625, -4625,  3284, -4625,  3295, -4625, 63791, -4625, -4625, -4625,
     115, -4625, -4625, -4625,   212,   325, -4625, -4625, -4625, -4625,
   -4625, 45283,   212, -4625, -4625, -4625,  3589,  3336,  3297, -4625,
    3595, -4625,  3298,  3329, 15034,  3815, -4625, -4625, -4625,  1977,
   -4625, -4625, 43961, -4625, -4625, -4625,  2610, -4625, -4625, -4625,
   74274, -4625,  3489, -4625,  3583, -4625,  3301, -4625,   508, -4625,
   -4625,  1723, -4625,  1981, -4625, -4625, -4625,  3400,   508,   508,
    3845,  3846,   508,   508,   508,   508,  3309,  3019, -4625,  3826,
   -4625,  1990,  1998,  1365, -4625, -4625, 74913,  2788, 35335,  3639,
    2015,   461,   461,   982,   160, -4625, -4625, -4625, -4625,  1653,
    1551, -4625,  3699,  3988, -4625, 45944, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625,   325, -4625,   325,   325, -4625, -4625, -4625,
   -4625, 63791, 63791,  3317,  2033, 63791,  2061,  2063,  5378, -4625,
    3261, -4625,  1011,  1011, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625,  3322, -4625, -4625, -4625,   837,  3298,  3320,  3500,   301,
   -4625,  8750, 15034, -4625, -4625, 63130, -4625, -4625, -4625, -4625,
   36671, 14346,  2175,  3323, -4625, -4625, 63791,  3325, -4625,  1461,
    1461,   508,   508,  2106,  2106,  1723, 54537,  3440, -4625, -4625,
     508, -4625, -4625,  3962, -4625,  3964,  3331,  3335, -4625, -4625,
   -4625,  3877, 71723,  3823,  3876, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625,  2065,  2068, 63791,   160,  2076,   197,  1188, 15034,  2078,
   -4625,  4025, -4625,   959,  3644,  3646,   939, -4625,   922, -4625,
    1475,   207,   207,  3352,   928, -4625,  3972,  3647,  3973,  8750,
   -4625, -4625, -4625, -4625, -4625,  3388, -4625,  3357, -4625, -4625,
     -50, -4625, -4625,  1461,  1461, -4625, -4625, -4625, -4625, -4625,
    2088, -4625, 54537, -4625, -4625, 59825, 59825, -4625, -4625, -4625,
   -4625, -4625,  3168,   160,  2090, -4625,   160, -4625, -4625,  2919,
   -4625, -4625, -4625, -4625,  3416,  3912, -4625,  3367, -4625, -4625,
   -4625,   136,   207,  3434, -4625, -4625,  1694, -4625, -4625,   837,
    3654, -4625,  3660,  3564, -4625, -4625,  2093, -4625, 19850, -4625,
   -4625, -4625, -4625, -4625, 54537, -4625,  3440, -4625,  3376,  2095,
    2788, -4625, -4625, -4625, -4625,   160, -4625,  1011,  1011, -4625,
   -4625,   136, -4625, -4625,  3449, -4625,   207,  1475, -4625, -4625,
   -4625, -4625,  3832,  3704, -4625,  3357, -4625,  3389, -4625,  2515,
    3019, -4625, -4625, -4625, -4625, 73045,  3908, -4625, -4625, -4625,
   -4625, -4625,   998, -4625, -4625,  4024,  3569, -4625, 19850,  3392,
   -4625, -4625,  3585, -4625,   325,  3839, -4625, -4625, -4625, -4625,
    3703,  3403,   932,   767, 27306,  3574, -4625, -4625, 54537, -4625,
   -4625, -4625, -4625, -4625, 54537,  2098, -4625, -4625, 36671, -4625,
   -4625, 71723, -4625, -4625, 28646,  3405, -4625,   508, -4625, -4625,
   36671, -4625, -4625, 14346, -4625, -4625
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    2228,   969,  2076,  2892,     0,     0,     0,   348,     0,     0,
    1169,  2897,   610,    68,  1943,  2070,  2071,  1854,  1884,     2,
       0,  1185,   276,   180,     0,    83,   324,  1886,     0,  2137,
       0,     0,   389,  1185,   731,   508,     0,  2132,     0,     0,
    1185,   393,  1889,  2119,   253,   180,  2897,     0,  2668,  1984,
    2149,     0,     0,     0,  1967,     0,  2752,  1932,     0,   391,
    2232,     0,  3038,     0,     3,     8,    21,     0,    43,    26,
      31,    16,    20,    15,    56,    50,    28,  2894,   320,   321,
     322,   323,    41,   141,    40,    11,    59,    60,    18,    47,
      12,    14,    17,    39,    46,    35,    42,    54,    24,    25,
      32,    48,    64,    22,    61,    57,    23,  2076,    13,    27,
      49,    44,    36,    58,    65,    37,     0,  2229,    55,    38,
      63,    30,    51,    29,     9,    10,    19,    52,    53,    45,
      66,    33,    62,    34,     0,  1000,     0,     0,     0,     0,
       0,     0,  1882,  1078,   981,  2963,  2964,  2965,     0,  1187,
    1186,     0,  2228,  1361,  1360,     0,  2897,  2267,     0,  1164,
    1196,  2358,  2360,  2359,  2361,  2362,  2363,  2364,  2365,  2366,
    2286,  2367,  2368,  2369,  2371,  2370,  2372,  2373,  2374,  2287,
    2288,  2289,  2375,  2376,  2378,  2377,  2379,  2290,  2291,  2380,
    2381,  2382,  2383,  2292,  2294,  2293,  2384,  2386,  2385,  2295,
    2387,  2388,  2389,  2391,  2296,  2297,  2298,  2299,  2300,  2390,
    2301,  2392,  2302,  2393,  2394,  2395,  2396,  2397,  2398,  2399,
    2401,  2400,  2303,  2402,  2403,  2405,  2406,  2407,  2404,  2408,
    2410,  2409,  2411,  2412,  2413,  2304,  2414,  2415,  2416,  2417,
    2418,  2419,  2420,  2421,  2305,  2422,  2423,  2424,  2443,  2306,
    2425,  2428,  2427,  2426,  2429,  2430,  2431,  2433,  2432,  2434,
    2435,  2307,  2308,  2309,  2436,  2437,  2438,  2439,  2441,  2440,
    2445,  2446,  2447,  2310,  2311,  2312,  2313,  2442,  2444,  2646,
    2448,  2449,  2451,  2450,  2452,  2314,  2454,  2453,  2315,  2456,
    2455,  2316,  2317,  2457,  2458,  2459,  2265,  2460,  2266,  2461,
    2462,  2464,  2465,  2466,  2472,  2318,  2463,  2467,  2468,  2469,
    2470,  2471,  2473,  2319,  2475,  2474,  2476,  2477,  2478,  2479,
    2480,  2481,  2482,  2483,  2484,  2497,  2498,  2488,  2489,  2491,
    2492,  2495,  2490,  2496,  2501,  2500,  2502,  2503,  2504,  2505,
    2506,  2499,  2486,  2493,  2494,  2487,  2507,  2508,  2485,  2509,
    2511,  2510,  2512,  2513,  2514,  2515,  2516,  2517,  2518,  2519,
    2520,  2522,  2521,  2523,  2524,  2525,  2526,  2527,  2528,  2529,
    2531,  2530,  2532,  2533,  2535,  2534,  2537,  2538,  2320,  2536,
    2539,  2540,  2541,  2542,  2543,  2545,  2544,  2321,  2323,  2322,
    2324,  2325,  2546,  2547,  2326,  2548,  2550,  2549,  2551,  2552,
    2553,  2555,  2554,  2556,  2557,  2327,  2328,  2329,  2330,  2558,
    2559,  2560,  2561,  2562,  2563,  2564,  2565,  2566,  2567,  2568,
    2569,  2570,  2571,  2573,  2572,  2574,  2575,  2576,  2577,  2578,
    2579,  2580,  2331,  2581,  2332,  2582,  2583,  2333,  2584,  2334,
    2585,  2586,  2587,  2588,  2589,  2335,  2590,  2591,  2594,  2592,
    2593,  2595,  2336,  2596,  2597,  2598,  2337,  2600,  2599,  2601,
    2338,  2603,  2339,  2340,  2602,  2342,  2343,  2604,  2605,  2606,
    2341,  2607,  2344,  2608,  2609,  2611,  2610,  2612,  2613,  2614,
    2345,  2615,  2616,  2346,  2617,  2347,  2618,  2619,  2620,  2621,
    2623,  2622,  2624,  2625,  2626,  2627,  2629,  2631,  2630,  2628,
    2632,  2633,  2634,  2635,  2348,  2639,  2640,  2641,  2642,  2636,
    2637,  2638,  2349,  2643,  2644,  2645,  2352,  2647,  2648,  2650,
    2649,  2350,  2351,  2651,  2652,  2355,  2653,  2654,  2658,  2655,
    2667,  2656,  2657,  2660,  2659,  2661,  2662,  2357,  2663,  2353,
    2664,  2354,  2665,  2666,   198,  2272,   182,  2356,  2273,  2285,
     350,   128,  2743,  2742,  1122,     0,  2898,  2899,     0,     0,
       0,  1960,     0,  1882,  1882,  1882,  1880,     0,  1882,  1882,
    1882,     0,  1885,  1882,  1882,  1882,     0,    71,    73,  2081,
     277,     0,     0,     0,     0,     0,  2264,     0,   341,  1892,
       0,     0,  2139,  2156,     0,  2157,  2151,  2740,   326,     0,
       0,     0,     0,     0,     0,   180,  1188,  1130,   326,  1941,
       0,   243,   252,   254,   255,   251,     0,  2899,  2910,  2670,
       0,  2050,   255,     0,   128,  1103,     0,   128,  1968,  1965,
       0,     0,     0,  1941,  2150,     0,  2233,  2230,  3022,     0,
       0,     0,  3018,     0,  3023,     0,     1,     5,     0,     0,
     608,   924,   608,   925,   923,   608,  2965,     0,     0,     0,
       0,     0,  2438,  2313,  2550,  2063,  2075,  2061,  2259,  1269,
    1231,  1222,     0,   972,  1001,     0,   977,     0,   975,  2278,
    2277,  2276,   989,   988,   987,   985,     0,   461,     0,   180,
       0,  1080,  2970,     0,   979,     0,  1141,  2065,  2066,  2067,
    2068,  2069,  2072,   372,  2893,     0,     0,   200,     0,   361,
     364,     0,   353,   356,     0,   129,   130,     0,  1167,  1170,
       0,     0,  2902,     0,   611,   146,     0,  1964,  1963,  1962,
       0,  1960,  2359,  2286,  2374,     0,  2218,     0,     0,     0,
    1605,     0,  2292,     0,  2387,  2389,  2296,  2297,  2298,  2299,
    2300,  2303,     0,     0,     0,  1307,  1307,  1307,  1304,     0,
       0,     0,  2412,  2413,  2223,     0,     0,     0,     0,  2214,
       0,  2224,  2313,  2451,  2452,     0,     0,     0,  2216,  2217,
    2458,     0,     0,     0,  2474,     0,  2479,  2221,     0,     0,
    2517,  2519,     0,     0,  2523,  2524,  2525,  2526,  2199,  1363,
       0,  1304,     0,  2213,  2220,     0,  2542,  2207,  2551,     0,
    2556,  2557,     0,  2566,     0,     0,     0,  2588,     0,  2594,
    2592,     0,  2598,     0,     0,  2620,     0,     0,  1304,  2198,
    2639,  2640,  2641,  2642,     0,  2215,  2349,  2222,     0,  2653,
    1307,  1304,  1304,     0,     0,     0,  2661,  2662,  2666,     0,
       0,     0,  2935,  1362,     0,     0,  1566,  1599,  1324,  1340,
       0,  1412,  1355,  1393,  1394,  1396,  1503,  1395,  1400,  1401,
       0,  1550,  1399,  1855,  2210,  1398,  1397,  2211,  2212,  1392,
    2249,  2272,  2248,     0,     0,     0,     0,     0,     0,     0,
     180,     0,  2046,     0,   180,  1866,  1882,    75,     0,    77,
       0,     0,  2801,  2816,  2817,  1307,  2813,  2818,  2432,  2309,
    2445,     0,  2815,  2807,     0,  2561,  2565,  2811,  2580,  2583,
    2805,     0,  2339,  2624,  2837,  2809,  2814,  2795,  2782,  2796,
       0,     0,  2799,  2803,  2261,  1723,  2755,  2756,     0,    84,
       0,     0,  1894,  1895,  1893,  1076,     0,  3035,  2140,  2141,
    2145,     0,  2160,     0,   370,     0,   336,     0,     0,     0,
     328,   326,   313,     0,   312,   314,  2228,   308,   315,   316,
     317,   318,   319,   309,   310,   382,   311,  2274,     0,  2275,
    1183,   732,   510,   509,    71,  2045,  2044,     0,  2133,  2911,
       0,     0,     0,   326,   382,  1897,  1942,     0,  1896,  2125,
       0,  2123,  2120,  2122,   244,     0,     0,   274,  2360,  2801,
    2565,  2773,     0,  2781,     0,  2905,  2902,     0,   843,     0,
       0,  2693,  2694,  2531,  2551,  2589,  2695,  2636,     0,     0,
    2715,  2669,  2679,  2675,     0,     0,  2006,     0,   843,  2058,
    2007,     0,     0,  2058,     0,  1786,  2048,  2051,     0,  2697,
    2020,   921,   920,   919,  2698,  2044,     0,  1992,  2008,     0,
    1969,  2013,   128,  2699,     0,  2047,     0,  1786,  2058,     0,
    1985,     0,     0,     0,     0,  1292,     0,   250,  1110,  1110,
       0,     0,  1102,  1104,  1105,  1110,  1110,     0,  3036,  3037,
    2753,  1076,   382,     0,     0,  2206,  2204,  2205,  2268,  3019,
    2203,  2202,  3027,  3029,  3015,  3017,  3024,     6,    67,     0,
       0,   180,   180,   142,  1294,  1294,  2965,   608,   148,   608,
     608,   608,   608,  2228,  2078,  1272,  1277,  1231,     0,     0,
    2968,  2969,  2967,   859,     0,  1307,  2279,  2282,  2966,  2283,
     183,   986,     0,   462,   183,     0,     0,     0,     0,     0,
     463,   464,   400,  1883,     0,     0,  1084,  1085,  1079,  1081,
    1083,     0,     0,   982,     0,  2970,  2077,     0,   374,     0,
       0,  1198,  1200,  1199,  1216,   202,   199,   181,     0,   326,
       0,   351,   357,    85,  1124,  1873,  1875,     0,  1171,  2901,
       0,     0,  2903,  2907,   145,     0,     0,     0,  1944,  1948,
    1954,  1958,  1961,     0,     0,  1728,  1415,  1728,  1728,  1728,
    1606,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1728,     0,     0,  1452,  1424,  1425,
       0,  1453,     0,     0,     0,  2225,     0,     0,     0,     0,
    2935,     0,     0,     0,     0,     0,  1571,     0,     0,     0,
       0,     0,  2935,     0,     0,     0,     0,     0,     0,  1601,
    1603,  2248,  1728,     0,     0,  1728,     0,     0,     0,     0,
       0,  1312,  1458,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1728,  1728,     0,     0,  1728,  1466,  2227,     0,     0,
       0,  2226,     0,     0,     0,  2200,  2219,     0,  1469,  1471,
    1470,     0,  1728,  1728,     0,     0,     0,  1418,  1417,  1419,
       0,   734,   733,  2228,     0,     0,     0,  1359,  1358,     0,
    1365,     0,  1367,  1369,  1357,  1356,     0,  1364,  1366,  1368,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1420,     0,     0,     0,     0,  2201,  1512,     0,  1860,
    1868,  1862,  1881,     0,  2046,  1863,     0,  1872,   475,     0,
    1869,     0,     0,  1856,    77,    72,    78,    74,     0,  2106,
       0,     0,     0,  2100,  2102,  2105,  2101,     0,     0,  2107,
     128,     0,  2103,  2082,  2085,  2092,  1292,  2083,     0,     0,
     275,   278,   280,     0,   283,  2802,  2800,  2834,  2833,  2838,
       0,  2835,  2831,  2794,  2824,  2865,  2828,     0,  2865,  2830,
    2829,  2865,  2825,  2832,  2865,     0,  2797,     0,  1724,  1725,
       0,  2754,     0,  2260,     0,     0,  1077,     0,     0,  2146,
       0,  2138,     0,  1206,  2161,  2162,  2158,  1723,  2741,  2744,
     374,   335,   338,     0,     0,   331,   330,   332,     0,     0,
       0,   223,   327,   390,     0,     0,   519,    70,     0,  1190,
    2284,     0,  1189,  1193,     0,  1128,  1131,     0,   379,   394,
       0,  1900,  1890,  1899,  1639,  2130,  2127,   128,     0,   242,
     267,   262,   270,   264,   266,   265,   271,   272,   273,   268,
     263,   269,   256,     0,     0,  2800,     0,     0,  2797,  2906,
       0,  2908,     0,  2671,  2673,     0,   842,     0,     0,   845,
     847,  1917,  1916,   846,   855,     0,   844,     0,  2730,     0,
    2713,     0,  2700,     0,   851,   853,   852,  2708,   850,     0,
       0,  2684,     0,     0,  2054,  1292,  1292,  2019,     0,   608,
       0,     0,     0,     0,     0,  2032,     0,  1986,     0,     0,
     659,  1788,  2012,     0,  1787,  2052,  2053,  2058,     0,     0,
    2058,     0,  2025,  2048,  2058,     0,  2058,  1981,     0,     0,
    1973,  1978,  1974,     0,  1980,  1979,  1982,  1970,  1971,     0,
    1999,  2027,     0,  2048,  2011,  2018,     0,  1998,  2005,     0,
    2016,  2048,  2048,     0,  2058,  2058,  2058,  1098,  1114,  1096,
    1108,  1109,     0,     0,  1101,  1100,  1966,  1644,   392,   377,
    2231,  2234,  2238,  2242,     0,     0,  3016,  3030,  3014,  3025,
    3026,  3013,     7,     4,     0,   139,     0,     0,     0,   608,
     608,  1294,  2962,     0,  2950,  2957,  2958,  2961,  3000,  2960,
    2959,   608,  2956,  2949,  2952,  2953,  2955,  2954,  2970,     0,
       0,     0,     0,     0,  2064,  2062,  2079,  2080,  1644,  1841,
       0,  1223,  1284,  1261,  1273,  1284,  1730,  1786,  2921,  1272,
    1264,  2948,  2943,  2942,  2945,  2946,  1283,  2947,  1282,  2944,
    2941,  1294,  1278,  1280,  1281,     0,  1224,  1269,   860,   859,
     602,   605,   604,     0,     0,  2281,     0,   978,     0,  2046,
     976,     0,     0,  2046,   411,  2046,   465,  2282,  2864,     0,
    2870,  2852,   970,  1082,     0,   608,   983,   980,  1142,  1143,
    1146,   373,   225,     0,     0,     0,   507,  1216,  1202,  1218,
       0,   203,   205,   362,   326,     0,     0,     0,  1126,  1125,
       0,  1123,  1181,  1179,  1178,  1176,     0,  1177,  1175,  1166,
    1172,  1173,  2900,  2904,  2046,   403,  1950,  1877,  1639,  1879,
    2259,     0,     0,     0,  1956,     0,     0,  1729,  1728,     0,
    1579,     0,     0,     0,     0,  1607,     0,     0,     0,     0,
       0,     0,     0,     0,  1390,     0,     0,     0,     0,     0,
    1533,     0,  1579,  1556,  1308,  1830,  1831,  1815,  1816,  1814,
    1817,  1305,     0,  1818,  1829,  1481,     0,     0,     0,     0,
       0,  1554,     0,  1699,  1700,  1701,  1702,  1710,  1703,  1704,
    1705,  1712,  1717,  1706,  1707,  1713,  1714,  1715,  1708,  1716,
    1711,  1709,  1718,     0,  1698,     0,     0,     0,  1721,  1719,
    1722,  1720,     0,  1572,  1546,     0,     0,     0,     0,     0,
     734,     0,  1599,     0,     0,     0,     0,     0,     0,     0,
    1728,     0,     0,     0,  1728,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1555,     0,     0,     0,     0,
    1553,     0,     0,     0,     0,     0,  1495,  1552,     0,     0,
       0,     0,     0,  1728,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1448,     0,  2251,  2250,     0,     0,
       0,   890,     0,  1414,     0,     0,     0,     0,  2700,  1567,
    1569,  1321,  1315,  1319,  1313,  1317,     0,  1310,  1309,  1311,
    1370,  2366,  1322,     0,     0,  2935,  1334,  1338,     0,     0,
       0,     0,     0,  1352,  1353,  1343,  1344,  1341,  1342,     0,
    1346,     0,  1345,  1349,  1350,  1351,  1354,  1413,  1416,  1748,
    1548,  1549,  1565,  1600,  1294,  2252,     0,     0,   475,  1865,
    2792,   478,   477,  1870,   476,  1918,  2850,  1864,  1086,     0,
      76,     0,  2111,  2094,  2093,  2095,  2099,   128,  2104,  2096,
       0,  2108,  2109,  2412,  2639,  2642,   287,     0,   260,   259,
     261,   284,     0,     0,  2827,     0,  2808,     0,  2812,  2806,
    2810,  2790,     0,     0,  2798,     0,  2836,  2819,  2823,  2822,
    2820,     0,  2821,  2826,  2804,  2270,  1727,  2271,  2446,  2534,
       0,  1730,  2758,   325,   342,  1887,  3034,  2459,  2653,  2147,
    2143,  2142,     0,  2159,     0,     0,     0,   371,   337,     0,
     329,   376,   224,   368,   383,   387,   385,  1184,   520,     0,
       0,   531,     0,     0,     0,  2134,     0,     0,     0,     0,
       0,  1132,     0,  1898,  2228,     0,  1876,  1640,     0,  2126,
    2128,  2121,     0,     0,     0,     0,     0,  2854,  2779,     0,
       0,     0,  2909,     0,     0,     0,  2711,  2717,     0,  2710,
    2709,     0,     0,     0,  2732,  2714,     0,     0,  2678,  2718,
    2719,  2722,     0,     0,     0,     0,     0,  2716,  2636,  2680,
    2681,  2686,  2676,  2738,  2739,  2736,  2737,  2735,  2705,  2026,
       0,  2056,     0,     0,     0,     0,  2038,  2030,  2029,  2023,
    2031,  2033,  2024,  2043,  2042,  2041,  1996,  1995,  1798,  1799,
       0,  1797,  1789,  1792,  1796,  1795,  1989,  2049,  2037,  2035,
     180,  2058,  1994,  1993,  2036,  2034,  1975,  1976,  1977,     0,
    1786,     0,  2054,  2028,  2058,  2048,     0,  2058,  2058,  2039,
    2040,  2015,  2017,  1099,  1116,  1115,  1111,  1112,  1117,  1107,
    1106,  1668,     0,  1614,     0,  1616,  1613,  1612,  1611,  1642,
       0,  1643,   326,     0,     0,  2236,  3020,  3028,  3032,   609,
     859,  2788,  2870,   608,  2999,     0,     0,   608,   608,     0,
    2951,   149,   940,     0,     0,   131,  1276,  1274,  1275,     0,
       0,  1853,     0,  1848,  1779,     0,     0,  1245,     0,  1262,
    1266,  1267,  1243,  1731,  1736,  2920,  1273,  1777,  1289,  1270,
    1288,     0,  1279,  1233,  2923,  1225,  1226,     0,  1272,   603,
    1918,  1918,     0,  2280,     0,     0,     0,     0,     0,     0,
       0,   184,   193,     0,     0,   409,   410,  1918,   408,   451,
     452,   455,   456,   457,     0,   458,  1918,  1918,   405,   431,
     432,   435,   436,   437,   438,   439,   401,     0,   406,     0,
       0,     0,  2882,   859,  2971,  2972,     0,   992,     0,     0,
    1145,   221,  1165,  1205,  1197,  1204,  1201,  1216,  1214,  1203,
     916,   915,     0,  1217,   201,     0,     0,   349,   358,   352,
     354,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    86,    87,   108,  1874,     0,
    1168,  1180,  1174,  1918,  1918,  1918,  1918,   407,   440,   441,
     444,   445,   446,   447,   450,   448,   449,     0,  2046,     0,
       0,  1945,     0,  2262,  1955,  1644,  1959,  1958,     0,  1477,
       0,  1526,     0,  1528,  1529,  1530,     0,     0,     0,     0,
       0,  1478,     0,  1422,  1479,  1480,     0,  1474,     0,  1475,
       0,     0,     0,     0,     0,     0,     0,  1532,     0,  1306,
       0,     0,  1426,  1427,  1410,  1403,     0,  1558,     0,  1505,
       0,     0,  1563,     0,  1561,     0,  1428,     0,     0,     0,
       0,  1485,     0,     0,  1506,  1602,     0,  1604,  2252,     0,
    1538,  1487,  1433,     0,  1536,     0,  1434,  1507,  1508,  1509,
    1557,     0,  1489,  1490,     0,  1511,     0,  1491,     0,     0,
    1494,     0,     0,  1436,  1542,  1540,     0,     0,     0,     0,
    1544,  1438,     0,     0,     0,  1437,     0,     0,     0,     0,
       0,     0,     0,  1440,     0,  1411,  1541,  1543,  1497,     0,
       0,     0,     0,     0,  1449,   735,  1661,  1240,  1284,  2931,
    2932,  2936,  1404,  2253,     0,     0,  1316,  1320,  1314,  1318,
    2935,     0,     0,     0,     0,  1333,     0,  2935,  1336,  1339,
       0,     0,  1750,     0,     0,  1522,  1523,  1597,     0,  1861,
    1858,  1871,     0,  1919,     0,     0,  1088,  1087,  1867,  1086,
    1927,  1928,    79,    81,  1926,    82,     0,  2097,  2098,  2091,
    2110,  2086,     0,   279,   288,   281,   285,   286,   282,  2869,
       0,  2868,     0,     0,  2787,  2846,  2849,  2259,     0,     0,
       0,  2762,  2769,  2765,  2770,  2763,  2764,  2768,  2771,  2772,
    2759,  2766,  1786,   326,  2228,  2144,  2148,  1207,  1209,  1210,
    1208,  1216,     0,     0,  2747,  2748,  2746,  2745,   333,   374,
     326,   326,     0,     0,  1294,   518,   517,   516,   515,     0,
     533,   513,   521,  2136,  2135,     0,  1191,  1194,  1195,  1139,
    1137,  1136,  1138,  1127,  1133,  1134,     0,  1904,     0,     0,
    2228,  1910,  1891,  1901,     0,     0,  1812,  1813,  1809,  1810,
    1808,  1811,  2131,  2129,  2124,     0,   257,  2780,     0,     0,
       0,     0,     0,     0,  2674,  2228,  2704,     0,   858,   857,
     856,   854,  2731,     0,     0,     0,  2724,  2725,     0,     0,
    2701,  2702,  2703,     0,  2706,  2683,  2684,  2685,     0,  2055,
       0,  2000,  2059,  2060,     0,  2022,     0,     0,     0,     0,
    2021,  1991,     0,  2014,  1972,  2056,  1990,  1730,  2048,  1987,
    1988,  1114,     0,  1097,  1668,  1644,     0,     0,  1634,  1671,
       0,  1671,  1636,  1637,  1644,     0,  1644,  1639,   326,  2235,
       0,  2240,     0,     0,     0,  3031,   140,   859,     0,   144,
    2882,     0,     0,   182,  3008,  2993,     0,     0,     0,     0,
       0,     0,     0,   612,  2269,  1852,  1849,     0,  1842,  1844,
    1845,  1847,     0,  1285,     0,  1834,  1263,  1268,  2912,     0,
       0,  1733,  1786,  1778,  1294,  1295,  1295,  2248,  2925,  2924,
    2914,  2919,  1284,  1255,  1254,     0,     0,   974,   187,   190,
     188,     0,   189,     0,     0,   460,   459,     0,  2046,   453,
       0,     0,     0,     0,     0,     0,     0,     0,   151,     0,
       0,  2046,   433,   412,   413,   416,   417,   418,     0,  2856,
    2857,     0,     0,     0,  2874,  2872,     0,  2873,  2871,  2839,
    2853,     0,   991,  1074,  1918,  1074,     0,  1918,  1918,  1074,
    1918,     0,     0,  1918,  1918,     0,     0,  1918,     0,     0,
    1074,     0,  1918,     0,  1061,     0,     0,  1918,  1918,  1918,
    1918,  1918,  1074,     0,     0,  1918,  1918,   507,  1918,     0,
       0,  1092,     0,     0,  1918,  1918,  1918,  1918,     0,     0,
    1918,  1918,     0,  1918,  1008,  1060,   614,   641,   642,   971,
    1007,  1009,  1021,   503,     0,  1039,  1063,  1064,  1062,     0,
    2973,     0,   994,   996,  1144,     0,     0,   326,     0,     0,
    1690,   204,   326,     0,   355,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1182,     0,     0,     0,     0,  2046,   442,     0,  1918,   402,
     419,   420,   423,   424,   425,   426,   427,   430,   428,   429,
    1878,  1958,  1644,  1730,  2260,  1730,     0,  1957,     0,     0,
    1527,  1580,     0,  1608,     0,  1407,   818,   818,   818,  1594,
     804,   822,  1587,   818,  1588,   818,  1590,     0,  1585,  1586,
       0,     0,  1372,  1391,     0,     0,     0,     0,     0,  1534,
    1531,     0,     0,     0,     0,     0,  1575,     0,     0,     0,
       0,     0,  1421,  1600,     0,  1517,  1539,  1537,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1545,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   879,   885,   888,   889,   891,
     883,     0,  1499,  1272,  1660,  2937,  1240,     0,     0,  2929,
    1284,  2923,  2933,     0,  2934,   965,  1568,     0,  1331,  1327,
       0,  1325,  1335,     0,     0,     0,     0,  1348,  1347,  1752,
    1751,  1295,  1513,  1294,     0,  1598,  2254,  1859,  2793,   474,
     658,  2851,  1857,     0,     0,  2089,     0,  2084,  2087,     0,
       0,  2866,     0,  2886,     0,     0,     0,     0,     0,     0,
       0,  2757,   326,  1929,     0,  1216,  1220,  2152,  2750,  2751,
    2749,     0,   366,   366,   366,   366,   523,     0,   532,     0,
     544,     0,     0,     0,     0,     0,  1129,  1135,     0,     0,
    1920,  1908,  1912,  1909,  2228,     0,     0,     0,  1907,  2244,
    2243,  2250,   591,     0,  1696,     0,     0,  2778,  2855,     0,
       0,     0,  2672,  2712,     0,     0,     0,     0,  2729,  2723,
    2720,  2721,     0,  2682,  2688,  2687,  2690,  2692,  1822,  1823,
    1821,  1819,  1820,  2057,  1786,  2010,  2009,  1800,  1791,     0,
    1794,  1793,  1983,  2002,  2004,  2058,  1113,     0,  1120,  1118,
    1670,     0,  2918,  1284,  1669,  1644,     0,     0,  1638,  1635,
    1672,     0,  1671,  1671,  1644,     0,  1618,  1933,  1936,     0,
    1617,  1723,     0,  2239,     0,     0,  3021,  3033,     0,   143,
       0,  3002,     0,     0,     0,   160,     0,   956,   958,   957,
     942,   941,     0,   135,   137,     0,   702,   132,   489,   503,
     613,   616,   848,  1846,     0,  2247,  1780,  1783,     0,     0,
    1244,  2913,  1732,     0,  1734,  1743,  1265,  1287,  1296,  1290,
       0,     0,  1232,   657,   656,   192,   191,   196,   197,  1826,
    1827,  1824,  1825,   466,   479,  1828,   480,   454,   155,   154,
     156,   157,   159,   158,   153,   990,     0,   467,   468,   434,
       0,   414,     0,  2860,  2862,  2845,  2844,  2843,  2840,     0,
       0,     0,     0,     0,     0,  2881,  2883,  1075,   963,   608,
    1043,  1045,     0,   703,   608,   917,   917,   606,     0,     0,
    1185,     0,     0,  1880,     0,     0,  1185,     0,     0,     0,
    1918,     0,  1054,  1003,  1880,     0,  1882,     0,  1880,  1880,
    1055,     0,     0,  1004,  1918,     0,     0,     0,     0,     0,
    1880,  1185,     0,     0,     0,   505,     0,  1185,  1023,  1095,
    1093,  1094,     0,  1185,  1185,     0,     0,     0,     0,   647,
     648,   646,     0,     0,     0,   639,   615,   859,  1005,   504,
    1006,   702,     0,  1089,   680,   705,  2255,     0,  2975,  2895,
       0,     0,   165,  1148,     0,  1147,   236,   235,     0,   227,
     304,   375,     0,   226,     0,  1693,     0,  1694,  1691,  1692,
     326,   359,   113,   117,   109,    93,    94,    89,   121,   122,
      91,    92,    97,    96,    98,    99,   102,   103,   100,    95,
     101,    90,   125,   127,   126,   104,   123,   124,    88,   473,
     472,   471,   470,   443,     0,     0,  2046,   421,     0,  1730,
    1777,  2263,  1949,     0,  1450,  1609,     0,     0,   819,  1581,
    1582,  1596,     0,  1592,   806,   805,     0,   823,  1593,  1584,
    1589,  1595,  1591,  1406,  1423,  1472,     0,  1389,  1473,     0,
    1504,  1409,  1408,     0,     0,     0,  1456,  1483,     0,  1457,
       0,  1573,  1564,  1562,     0,     0,  1430,     0,  1486,  1432,
       0,     0,  1519,  1488,  1560,  1510,  1459,  1492,     0,  1435,
    1402,     0,  1460,     0,  1465,  1463,     0,  1439,     0,     0,
    1446,     0,  1444,     0,  1445,     0,  1447,  1496,  1498,     0,
       0,   890,   876,   877,   878,     0,   880,   882,   884,     0,
       0,  2926,  1294,  2938,  2940,     0,  2918,  1661,  2927,  2922,
    1659,  1655,  1656,     0,  1570,  1323,     0,  1332,  1329,     0,
    1326,  1337,     0,  1754,  1296,  1524,  1514,    80,  2113,     0,
       0,   296,   291,   299,   293,   295,   294,   300,   301,   302,
     303,   297,   292,   298,   290,   289,  2867,     0,  2786,  2791,
    2848,  2847,  2870,  2870,  2870,     0,   345,     0,  1888,  1211,
    1216,  1220,     0,  1212,  2163,   334,   339,   369,   367,   381,
     384,   388,   386,     0,   524,   525,   527,  1295,   541,   519,
       0,   511,   514,     0,   523,  1192,  1140,   380,  1905,  1914,
       0,  1922,     0,  2228,  1902,   497,  2228,     0,   591,     0,
    1272,  1277,   507,     0,   258,     0,  2775,  2776,  2774,  2734,
    2733,  2727,  2726,  2728,  2707,     0,     0,  2001,  1790,  1786,
    1997,     0,     0,  1665,  1723,  1649,  1650,  1652,  1284,  1663,
       0,  1615,  1644,     0,     0,  1623,  1644,  1619,  1621,     0,
    1730,     0,  1688,   378,  2241,  1292,  2789,   206,   672,   673,
     671,   670,     0,  3009,     0,     0,     0,   133,     0,     0,
     490,   963,     0,     0,     0,   674,   675,   677,   678,   679,
    2163,   502,   859,   617,     0,  1850,  1843,     0,  1784,  1785,
    1782,  1286,  1294,  1740,  1783,     0,     0,  1271,     0,  1291,
    1300,  1299,  2245,  2252,  1269,  1234,  2915,   152,   415,  2861,
    2859,  2858,     0,  2841,  2877,  2875,  2876,  2879,  1805,     0,
    2878,  2880,     0,   704,   964,  1185,     0,     0,     0,   917,
     696,   608,   963,   918,   608,   608,     0,  1041,  1070,  1071,
       0,     0,   625,   622,     0,   634,  1024,  1015,  1025,  1036,
    1038,     0,   624,   649,     0,     0,   637,     0,  1880,     0,
       0,     0,     0,   619,     0,     0,   668,   669,   667,   643,
     650,  1072,  1073,   620,   621,     0,     0,  1773,  1775,  1783,
     627,   626,  1833,  1832,   636,     0,   623,     0,  1058,  1031,
       0,   665,   663,   660,   662,   661,   666,   664,   638,   629,
     628,   631,   630,   633,   632,   635,   651,  1020,     0,  1074,
    1074,  1040,     0,  2258,     0,  1091,  1042,     0,   681,     0,
       0,   655,   654,   652,   653,     0,     0,  2896,     0,     0,
       0,   993,     0,   168,   166,   176,  1150,  1151,     0,     0,
       0,     0,     0,     0,   222,     0,  1219,     0,     0,     0,
     114,   116,     0,   118,   120,     0,   110,   112,   404,   469,
     422,  1958,  1951,  1801,     0,  1610,     0,     0,     0,     0,
     865,     0,     0,   784,   818,  1383,   804,  1379,  1381,  1377,
       0,   785,  1380,   818,     0,  1386,  1388,  1373,  1374,  1375,
    1376,     0,  1535,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1405,     0,  1515,     0,     0,     0,
       0,     0,     0,  1443,  1441,  1442,   874,  1501,     0,   887,
     881,   879,   886,     0,  1662,  2939,  1242,  2928,  1272,     0,
     966,  1328,     0,     0,     0,  1756,  1525,  2116,     0,  2114,
    2090,  2117,     0,  2884,  2884,  2884,     0,  1925,   326,   341,
     344,  1930,  1213,  1221,  2165,  2164,     0,     0,   528,     0,
       0,     0,   548,     0,   546,   522,     0,     0,     0,     0,
    1923,  1911,     0,  2918,  1903,  1906,  1272,  2252,  1284,  1273,
    1284,   596,  1294,  1641,  1697,  2777,  2689,  2691,  2003,  1119,
    1121,  1664,  1277,  1646,     0,  1654,  1653,  2936,     0,  1611,
    1644,  1644,     0,  1611,     0,     0,  1935,  1777,  1937,  1645,
    1685,  2935,     0,   207,   209,   210,     0,   217,   396,   395,
       0,     0,     0,     0,     0,     0,     0,   484,   481,   702,
     483,   598,   618,   849,  2166,  1783,     0,     0,  1837,  1839,
    1741,  1742,     0,  1737,  1739,  1735,     0,  1744,  1746,  1298,
    1297,     0,  1272,  1234,     0,     0,  2863,  1807,  1806,     0,
    1026,     0,   608,   913,   914,   963,   938,  2255,   963,   963,
       0,     0,     0,  1014,     0,  1171,     0,  1019,   855,   644,
    1050,     0,  1010,  1052,  1053,  1086,     0,   645,  1089,  1012,
       0,  1776,   506,  1011,  1033,  1017,  2109,  1044,  1090,   895,
     798,   820,   820,   818,   746,   745,   818,   754,   804,   800,
       0,   804,   804,   777,   776,   794,   775,   780,   762,   865,
     865,   761,   797,   865,   781,   779,   783,     0,   785,   804,
     790,   778,   782,   799,   709,     0,   796,   818,   818,   818,
     758,   795,   865,     0,   788,   818,   697,   707,   804,   820,
     820,     0,     0,   818,   822,  2257,  2977,     0,  2979,   175,
     164,     0,     0,   995,   997,     0,     0,   998,  1156,     0,
     230,   305,   306,     0,   233,  1215,  1695,   326,   106,     0,
     107,     0,   105,     0,     0,  1946,  1451,   816,   814,   817,
     815,   862,   868,   866,     0,   863,     0,   872,   871,  1583,
       0,  1385,  1382,   786,  1384,  1378,   865,  1476,  1454,  1455,
    1484,  1576,  1783,  1574,  1547,  1482,     0,  1431,  1516,     0,
       0,  1493,  1461,  1464,  1462,  1467,  1468,     0,  1500,     0,
    1777,  1658,  1330,  1753,     0,  1759,  1758,     0,     0,  2112,
       0,     0,  2088,  2887,     0,  2784,  2785,  2783,  2767,     0,
     326,   346,     0,     0,   340,   526,   529,     0,   521,     0,
     545,     0,   512,  1913,  1915,  1921,   499,   501,  1284,   594,
     593,   496,   597,   595,   494,   592,  1294,  1651,     0,  1624,
       0,  1628,  1633,  1629,     0,  1620,     0,  1801,  1689,     0,
    1293,  3003,     0,     0,  3001,   220,   218,   219,     0,   213,
     215,     0,   399,   397,   398,     0,     0,     0,     0,     0,
    1783,   961,     0,   491,     0,  2918,   612,   676,   599,  2228,
       0,  2174,  1781,  1295,  1835,  1294,  1783,     0,     0,  2246,
    1227,  1284,  1273,  1284,     0,  1228,  1269,     0,  1028,     0,
     963,   938,  2255,     0,   682,     0,   686,   688,   607,  1057,
       0,  1089,  1016,  1037,  1059,  1051,  1049,     0,  1048,  1185,
    1774,  1032,  1034,  1132,     0,     0,   899,   821,   749,   744,
     759,   757,   808,   801,     0,   808,   808,   768,   784,   763,
       0,   865,   774,   767,   786,   789,   791,   793,   808,   711,
       0,   865,   756,   755,   765,   752,   808,   706,   698,   824,
     802,   787,   865,   872,   865,   872,   808,   808,     0,  2976,
       0,  2974,  2228,   162,   167,   177,   178,   984,     0,  1157,
    1153,  1154,  1149,     0,     0,   228,   229,   241,   240,   232,
    2228,   326,   115,   119,   111,     0,  1802,  1952,   869,   864,
     861,   873,   870,   867,     0,  1387,     0,  1578,     0,  1518,
    1520,   875,     0,  1786,  1755,  1749,     0,     0,     0,     0,
       0,     0,  1768,  1760,     0,  2115,     0,     0,  2891,  2885,
    2889,  1924,     0,     0,  1294,   534,     0,   551,   550,   547,
     590,  2912,  1666,  1723,     0,     0,     0,     0,     0,  1934,
    1677,  1678,     0,     0,  1683,  1687,     0,     0,   208,   211,
    3010,   217,   216,  1294,   173,     0,     0,   928,     0,   960,
       0,   930,   486,   488,   503,   493,     0,     0,     0,     0,
    2167,  2169,     0,  1851,  1840,  1838,  1738,  1747,  1745,  1248,
    1267,  1246,  1236,  1229,  1230,  1272,     0,     0,     0,  1027,
     699,   694,   690,     0,   939,     0,   684,     0,     0,     0,
       0,     0,  2935,   739,   740,  1056,   737,   738,  1047,   507,
    1013,     0,  1018,   640,     0,   898,     0,   903,   809,   810,
     811,   769,     0,   967,   771,   743,   764,   792,   770,     0,
     893,   728,   710,   712,   837,   714,     0,     0,     0,     0,
     766,   753,   831,     0,     0,     0,   828,     0,     0,   708,
       0,   715,   825,   827,   834,     0,   760,   747,   748,   750,
     751,   741,   742,  2256,  2978,     0,   169,   999,   326,  1152,
       0,  1159,   249,   247,   326,   237,   245,   239,     0,   246,
     307,   234,  1803,     0,  1294,  1947,   807,  1783,  1429,  1502,
    1284,     0,  1765,     0,     0,  1763,  1762,     0,  1757,  1764,
    2118,  2890,  2888,     0,  1639,     0,   542,     0,   556,     0,
     577,   495,  1272,  1647,  1625,     0,  1630,     0,  1622,  1673,
    1673,  1684,  2237,  3004,   185,   214,  2994,   165,   174,     0,
     926,     0,  1918,     0,  1065,   929,   954,   936,     0,  1783,
       0,  1065,   931,   953,   934,  2163,     0,     0,     0,     0,
    2168,     0,     0,  2175,  2177,  2912,  1284,  1257,  1256,  1046,
    1030,     0,     0,     0,   692,     0,     0,     0,     0,     0,
    2209,  2208,     0,  1022,     0,   896,     0,   900,   901,   902,
       0,   894,   812,   813,   865,     0,   730,   729,   713,   836,
     835,     0,   865,   833,   829,   719,     0,     0,     0,   826,
       0,  1269,  1237,  2985,     0,   171,   179,  1158,  1163,     0,
    1160,  1162,     0,   231,   248,  1804,  1953,  1577,  1241,  1766,
       0,  1767,     0,  1770,     0,  1771,  1931,  1939,     0,  2153,
    1295,     0,   535,     0,   538,   540,   554,     0,  1918,  1918,
       0,     0,  1918,  1918,  1918,  1918,   570,   578,   580,     0,
    1667,     0,     0,     0,  1681,  1679,     0,  3011,     0,   176,
       0,     0,     0,  1065,   927,   952,   951,   932,   946,     0,
       0,   136,  1067,  1066,   937,     0,   959,   962,   138,   935,
     482,  2172,  2173,     0,  2170,     0,     0,  2176,  1247,  1235,
    1029,     0,     0,     0,     0,     0,     0,     0,     0,   736,
       0,   897,     0,     0,   772,   968,   841,   840,   838,   839,
     773,  1301,   832,   716,   803,  1272,  1237,     0,     0,     0,
    2980,   170,     0,   163,  1155,     0,   238,  1761,  1769,  1772,
       0,     0,   848,     0,   543,   536,     0,     0,   552,     0,
       0,  1918,  1918,     0,     0,     0,     0,     0,   549,   579,
    1918,  1627,  1632,     0,  1674,     0,     0,     0,  3005,   194,
     186,     0,   326,     0,     0,   150,   944,   943,   134,   933,
     945,   955,  1069,  1068,   950,   949,   947,   948,  2171,  2179,
    2178,     0,     0,     0,   926,     0,   928,   930,     0,     0,
     909,     0,   908,     0,   905,   904,     0,   830,   720,  2981,
    1273,  1284,  1284,     0,  2982,  1269,     0,     0,     0,   172,
    1161,  1938,  1940,  2154,   530,   542,   539,   563,   555,   559,
       0,   589,   583,     0,     0,   585,   586,   584,   581,   574,
       0,   572,     0,  1676,  1675,  1690,     0,   185,   195,  3012,
    1294,   178,     0,   926,     0,   683,   926,   687,   689,     0,
    1035,   911,   912,   910,     0,     0,  1302,     0,   722,   723,
     721,   724,  1284,  1249,  1252,  1239,  2923,  2984,  2983,  1272,
       0,  2986,     0,  2180,   537,   563,     0,   561,     0,   557,
     553,   558,   587,   588,     0,   571,     0,   582,     0,     0,
    3006,  2995,   161,   695,   691,   926,   685,     0,     0,  1303,
     717,   725,   727,  1253,     0,  2916,  1284,  1273,  1258,  1259,
    2987,  2988,     0,  2166,   560,     0,   568,   564,   566,   569,
     577,   576,   573,  1682,  1680,     0,     0,   693,   907,   906,
     726,  1251,     0,  1238,  1260,     0,  2174,   562,     0,     0,
     575,  3007,     0,  2917,     0,  2182,   567,   565,  2996,  2181,
       0,  2186,  2991,     0,     0,  2193,  2989,  2990,     0,  2997,
    2184,  2185,  2183,  2188,     0,     0,  2190,  2191,     0,  2155,
    2992,   326,  2192,  2187,     0,  2194,  2196,     0,  2998,  2189,
       0,  1294,  2195,     0,  1295,  2197
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4625, -4625, -4625, -4625,  1407,  3127, -4625, -4625, -4625,  3110,
   -4625, -4625, -4625, -4625,  2712, -4625, -4625,   986, -4625, -4625,
   -4625, -4625, -4625,  1136, -4625,  -145, -4625,  -136, -4625,  -135,
   -2554,  -482,  3040, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625,  -632,   794,  2996, -4625,  -254, -4625,  -624,
   -4625, -4625, -4625, -3707,  -755,  -936, -4625,    32,    20,  2972,
    -930, -4529, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -2329, -4625, -4625, -4625,  -443, -4625, -4625,  -585, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625,  -701,  -109,  2014,
   -4625, -4625, -4625,  4074, -4625,  3509, -4625, -1945,  2024, -4625,
   -4625, -4625, -4625, -4625,  2119, -1887, -4625, -4625, -4625,  1012,
   -4625, -4625, -4625, -1002,  -954,    56, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
     130, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625,  1794, -4625, -4625,  3433, -4625, -4625, -4625,  1000,
   -4625, -4625, -4625, -4625, -4625, -4625, -1321, -4625,  1519,  1515,
   -4625,  1521, -4625,  -355,  -584, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625,  2961, -4625, -4625, -4625, -2480, -4625, -4625, -2687,
    2434, -4625, -2065, -4625, -4625, -2148, -4625, -4625, -2031,  -697,
   -4625, -4625,  -108,   784, -4625, -1621, -2167, -2163, -4625, -4625,
   -4625, -2254, -2242,  -805,  2169, -1253, -2602, -4625, -4625, -4625,
   -4625, -4625,  -597,  -219, -4625, -4625, -4625,  -412,  1251,  1840,
   -4625, -2797, -4625, -4625,   320, -4625, -4625, -4625,   517,  -150,
     518, -4625,   152,  2097, -1920, -4625, -4625, -4625, -4625, -4625,
   -4625,  -768,  -536,  -842, -4625, -4291,  -134, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -3197, -4625, -4625, -4625,  -964,
   -4625, -4625,  -911, -4625, -4625,  -944, -4625,  -669,   929,   521,
   -4625, -4625,   161, -3721, -4625, -4625,  1970, -1540, -4625,  -636,
   -4625,  -180,  1292, -2999, -2187, -4625, -1017, -1012,  -843, -4625,
   -4625, -4625, -4625,   790, -4625,   113,  1290, -2691, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -2686, -4625, -3939, -4625, -4625,
   -4625, -3542, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4624, -4625, -4625,  -409,  -601, -4625,
    -445, -3698, -4625, -3320,   704,    38, -4625, -4625, -4625, -4625,
   -1799, -2874, -1864, -2712, -2815, -1961,     5, -4625, -4625,  -442,
   -3348,  -615, -2343, -2641,  -717, -4625, -4625,  -427,    93, -2688,
   -4625,   -24,   -27, -3836, -2430,  1169, -4625, -4625,   666, -4625,
   -1512,   667, -4625, -4625, -4625,   674, -4625,  -815, -4625, -4625,
   -4625, -4625, -3373, -4625, -1698, -3084, -4625, -4625,  4157,  4158,
   -3145,  -754,  -753, -4625, -4625, -4625,  -156, -4625, -4625, -2421,
    -628,  -503,  -494, -2689, -3906,  -315, -3580, -4625,  -196, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625,  1342, -2227, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -3522, -3191, -4625, -4625,
     849, -4370, -2253, -2248, -2685,  3172, -4625, -4625, -4625, -4625,
    3098, -2466, -3803, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
    2635,  1090, -4625, -4625,  1528, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625,  -158,  1611, -4625, -4625, -4625, -4625,
   -4625,  1934, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
    -668, -4625, -4625, -4625, -4625, -4625,   133,  2507, -4625, -4625,
   -4625, -4625,     3, -4625, -4625, -4625, -4625,  2181, -4625, -4625,
   -4625, -4625,  2525, -4625, -4625, -4625, -4625, -4625, -4625,  1137,
   -4625,  1652, -4625, -1673, -4625, -4625,   648,  -148, -4625, -4625,
    3153, -4625,   168, -4625,  -644, -4625,  1207, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625,  2006, -3766, -1654,
   -4625, -1108, -1655, -4625, -4625, -3155, -4625,  2584, -1660, -3426,
    1493, -1330, -4625,  -142, -2714,   694, -4625,  -374,   533,  6115,
   -1205, -1245, -4625, -4625,    -2, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625,  1859,  1864, -3360,  -612, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,  1190,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625,  2941, -1323, -4625,
   -4625, -4625, -4625, -4625, -4625,  -992, -4625, -2280, -4625, -4625,
   -4625, -4625,  -507, -4625,  3034, -4625, -4625, -4625, -2569, -1559,
    1546,  1069, -4625, -4625, -4625, -4625, -4625, -4625, -4625,  1555,
   -4625, -1731, -4625, -3034, -4625, -4625, -4625, -4625, -4625,   244,
   -4625, -3340, -4625,   720, -4625, -4625, -4625, -4625, -4625, -4625,
    1565, -4625, -4625, -2298,  -430, -4625,  -252, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625,  -744,   397,  -740, -3737, -1213,  1492,
   -4625, -4625, -1425,  3086, -1951, -4625, -4625, -4625, -4625,   318,
   -4625, -4625, -4625,   -76,   -78, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625,    16,  -515, -4625, -4625, -4625,   181, -3307, -2189,
   -4625,    29, -3545, -1034, -4625, -1025, -4625, -1504,  1109,   -23,
   -4625, -1700, -1215, -2523, -3315, -2734, -4625,   925,  2064, -4625,
   -4625, -4625,   -53, -4625, -4625, -4625,  1060, -4625, -1634, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,  -556,  -959,
   -4625, -4625,  1936, -2094,  -502,  4253,    24, -4625, -4625,    28,
   -4625, -4625, -4625, -4625,  2897,  2848,  1733, -4625, -4625, -2875,
    1678, -4625,   312, -1013,  1168,   679, -4625, -4625,   684, -3493,
   -4625, -4625,    37, -4625, -4625, -4625,   642, -4625,  -582,  3726,
      39, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,  2580,
   -1153,  3629, -4625, -4625, -4625, -4625, -4625, -4625,  2178, -4625,
   -4625, -4625, -4625, -4625, -4625,  2795,  3746,  -618, -1440, -4625,
    -824,  2174,  1643,  -921, -4625, -4625, -4625,  3251,  3750, -4625,
   -4625,  4269, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625,  2367,   222, -4625, -4625,    79, -4625, -4625, -4625, -4625,
    2889, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625,  2932, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625,   747,  -735, -4625,  -187,  -751,
   -4625,  -366, -4625, -4625, -4625, -4625, -4625,  -786, -4625, -4625,
    -791, -4625, -1112,  3562, -1516, -4625, -1380, -2859, -4625, -1296,
    1177, -4625, -4625, -4625,  2186, -4625, -4625, -4625, -4625,   734,
    2142, -3135,  -723, -1282, -1303, -2708,   -15, -4625, -4625,  3985,
     147,   345, -1949, -4625,    -6,  -869,  -127,  -626,  -631,  -891,
    2964, -4625,  -544, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625,  1710, -4625, -4625, -4625,   722, -4625,
    3792, -4625,  2479, -1492,  3800,  -574,  2285,  1728,  1732, -4625,
   -4625, -4625, -4625, -1966, -4625, -4625,   174, -4625,  2360, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625,
   -4625, -4625, -4625, -4625, -4625, -4625,  2786,  -496,  -498,  2918,
    3818,  3428, -4625,  2998, -4625, -4625, -4625, -4625, -4625,  1110,
   -4625,  -112,  1759, -1342, -2852, -4625, -4625,  2121,   733, -4625,
    1322, -2106, -2539, -4625,  1681, -1211, -4625, -4625,   -84, -4625,
   -4625, -4625,  1027,   351,  3831,  3436, -4625, -4625, -4625, -4625,
   -4625, -3579, -1669, -4625,  -665, -4625, -3128, -4625, -1625,  1228,
   -3000, -4625, -2891, -2890,   751, -1180,  1719,   398, -4625, -4625,
   -2749, -4625, -4625, -4625,    30,  3798,  3802,  3803, -4625,  -849,
   -4625, -4625, -4625, -4625, -4625,  -686, -4625, -4625, -4625,  3353,
   -4625, -4625, -4625, -4625, -4625, -4625,  2819,  3358, -4625, -4625,
   -4625, -4625, -4625,  3360, -4625, -4625, -4625, -4625, -4625,  1850,
   -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625, -4625
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    63,   648,  1643,    64,    65,    66,    67,    68,   897,
     898,    69,   899,  1384,  1387,  2001,  2572,  2573,    70,   587,
      71,  1757,  2375,  2376,  3915,  3916,  3909,  3910,  3912,  3913,
    2377,   714,   715,    72,  2773,  4083,  3728,  3729,  2230,   656,
     657,  1118,  2767,  2827,  2828,  1652,  3725,  3891,  4676,  3895,
    4815,  4933,  4737,  2922,  4227,  4677,  4678,   582,  2762,  1717,
    4867,  2291,  4970,  2292,    73,   707,  1176,  1750,  1751,  4072,
    4073,  4074,  4353,  4358,  4359,  4360,  4361,  2927,   961,  2331,
    2928,  3901,  4483,  4489,  4490,  3428,  4684,  4685,  4686,  4487,
    1005,  4687,    74,   613,   614,  1007,  1512,  2016,  1513,    75,
      76,   581,  1410,  1411,  1412,  1413,  2588,  2017,  2583,  2584,
    3614,  3429,  4485,   962,   963,   964,    78,   588,   965,   966,
     967,  1468,   968,   969,   970,   971,  3141,   972,  1464,  3635,
     940,   941,  2613,  3626,  4010,    79,   550,   710,   711,  1756,
    2349,   712,  2350,  2933,  3908,   713,  1178,  2346,  1180,  3639,
     973,  2629,   974,  1460,    80,  1168,  1741,  1742,   975,  1092,
    2222,   994,  2092,  3640,  1473,   976,  2630,  2632,  2631,    81,
     598,   635,   608,  4080,  4365,   683,   684,   725,  2398,   685,
    1194,  1141,  1719,  2316,  2317,  2833,  2834,  2969,  2970,  2971,
    2308,  2309,  2310,  2387,  2388,  2389,  2298,  2299,  2300,  1723,
    2295,  2296,   686,  1142,  1152,  2311,  2312,  2313,  2975,  2391,
    2392,  2393,  2394,  2314,  1993,  2315,  3303,  3267,  4376,  4374,
    4375,  3268,  4090,  2661,  4541,  4032,  4033,  3740,  3741,  3409,
    3845,  2338,    82,   601,   983,  1476,  2081,  3151,  2082,  3153,
    3643,  3644,  3645,  2635,  2636,  4535,  2640,  3150,  4716,  5025,
    4843,  4844,  3647,  4842,  3651,  4023,  4024,  4319,  4537,  4720,
    5030,  4947,  5090,  5028,  5086,  5029,  5088,  5149,  5127,  5128,
    4958,  5040,  5041,  5094,  5130,  4856,  4857,  4858,  3165,  3670,
    3671,  4328,  4038,  4331,  4379,  2756,  1709,  1710,  3797,  1110,
      83,  3269,  2905,  3270,  3271,  3868,  2907,  2908,  3109,  1569,
    3858,  3829,  3722,  3734,  3735,  3736,  3737,  3738,  4605,  4776,
    4607,  4608,  4773,  4903,  4772,  3739,  4457,  3790,  3367,  3342,
    3343,  3414,  3879,  4206,  4459,  4449,  4642,  4643,  4659,  5008,
    4660,  5071,  5110,  5111,  4644,    84,   600,  1320,  4613,  4614,
    4615,  4207,  4208,  4209,  4210,  4211,  4212,  4213,  4214,  4666,
    3493,  3494,  4631,  3488,  3489,  4428,  3498,  4661,  4662,  4663,
    4664,  4256,  1533,  1534,  3745,  1546,  1547,  2689,  2119,  2690,
    1713,  4257,  4258,  4259,  4503,  3560,  4287,  3566,  3567,  3568,
    3065,  3066,  3067,  3068,  3069,  2523,  4646,  3878,  4426,  4624,
    4627,  4791,  5004,  3791,  3344,  3794,  1069,   658,  3345,  3346,
    4873,  4744,  4751,  4874,  4752,  4745,  4404,  2770,  4875,  4876,
    4877,  4754,  4747,  3260,  4369,  4370,  3783,  3584,  4632,    85,
     143,  2323,  1133,  1144,  1140,  1165,   692,  2327,  1145,  2923,
    3422,  4477,   673,  2909,  4419,  4135,  4423,  2910,  3807,  2911,
    4398,  4599,  2912,  4154,  4421,  4621,  3808,  3809,  2913,  2914,
    2915,  4881,  4882,  4883,  3347,  1447,   690,   691,  1158,  1159,
    1160,  2568,  3876,  3392,    86,  2208,  2203,    87,  1082,  1083,
    1084,  1617,  1618,  2206,  2207,  2733,  3219,    88,   717,  1761,
    1486,  2090,    89,   992,  2653,  2654,  2655,  3156,    90,  1167,
    1738,  1739,  2330,  3425,  3898,  4228,  4482,  4681,  4478,  4819,
    4820,    91,   719,  1187,    92,   555,  1769,  1770,  1771,  2380,
      93,  1475,   151,    94,   991,  1479,  1482,  1483,    95,   706,
    1170,  1171,  1172,  1173,  2334,    96,  2062,  2617,  2618,  2619,
    2620,  1747,  2929,  1748,  1749,  2343,  3633,    97,   671,  3766,
    1128,  1129,  4114,  4115,  4927,  4928,  3077,  3078,  1681,  2788,
    4390,  4765,  5009,  5114,  2802,  4766,  5116,  1682,  1683,  1125,
    1126,  2266,  1685,  1686,  2247,  1701,  1702,  1703,  4332,  2269,
    2270,  1614,  4556,  2271,  3288,  3759,  5007,  1231,  1227,   857,
     858,   859,  1340,  1341,  1348,   860,  1342,  1953,  3507,  3947,
    3948,  3949,  3950,  4266,  1804,  1805,   861,   862,   863,   864,
     865,   866,   867,  1984,  3531,  3532,  3966,  2554,  2555,  2556,
     868,  2436,  3513,  2451,   869,   870,   871,  4106,   872,  1326,
    1939,  1864,  3958,  3521,  4271,  1789,  2412,  3007,  3930,  3008,
    3009,  3104,  2525,  1258,  1259,  1211,  2419,  1795,  2213,  2214,
    2215,  2216,  2217,  4064,  4065,  4544,  4340,  4546,  4344,  2743,
    2744,  2096,  2097,  2218,  2219,  2220,  2221,  3221,  4054,  3580,
    3989,  3082,  3073,  3074,  3075,  3222,  3223,  4051,  4052,  4722,
    2734,  3225,  3693,  3231,  4864,  4553,  4554,  4967,  4966,  4555,
    4348,  4349,  4069,  4070,  3436,  3437,  3438,  3173,  1853,  1854,
    1862,  1440,  1441,  1790,  2264,  2789,  3285,  3755,  2791,  3753,
    4103,  3757,  4107,  4108,  1981,  2552,  3099,  3593,  3995,  4297,
    4298,  4522,  4702,  4703,  4708,  2918,  3837,  3838,  2792,  1687,
    2782,  3276,  3750,  1572,  1573,  1688,  2172,  3207,  3208,  4245,
    3780,  4488,  3070,  3997,  3304,  1823,  1824,  3844,  2259,  3279,
    4097,  4098,  4099,  2251,  2252,  2778,  2779,  2780,  1689,  2253,
    3272,  4094,    98,   562,    99,  1999,  3107,  1382,  2580,  1185,
    1491,  1776,  1777,   887,   689,   576,   100,   589,  2614,   101,
     609,  2094,   945,   997,  1492,  1493,  2662,  3159,  3166,  2663,
    3161,  3658,  3659,  2563,  2564,  3162,  3661,  4029,  4006,  2575,
    3628,  4312,   102,   633,  3710,  3237,  3238,  4836,  4837,   998,
     103,   561,  1198,  2983,  4497,  1782,  2400,  4695,  1199,  1200,
    2403,   730,   731,   104,  1087,   629,  1596,  1597,  1598,  2190,
     105,   621,  1070,  3204,  3689,  2166,   987,  1379,  1577,  1073,
    1578,  2151,  2711,  1557,   106,  1124,  1123,   702,   107,   108,
     665,   152,  1675,   109,   900,  1403,  2012,  3117,  3118,  3599,
    1404,  1405,  2581,  2577,  3998,  3999,  4302,   110,   610,  1002,
    1003,  1497,  1495,  2674,  2099,   111,   603,   988,  2085,   112,
     592,   950,  1451,  1452,  2060,   113,   114,   115,   952,  3634,
    4942,  5083,   596,  2064,  1456,  4091,  4381,  4580,  4581,  4583,
    4763,  4764,  5123,  5161,  5172,  5165,  5175,  5176,  5179,  5185,
    5186,   874,  1099,  1100,   875,  4617,   876,   877,   878,   116,
     117,  1094,   637,  1630,  1631,  2752,  2225,  2750,  1632,  3168,
    3169,  3277,   879,  3170,   880,  3784,  1186,  1779,   585,   545,
     680,  1101,  2775,  2046,   882,   978,  1136,  1480,  1728,  1729,
     547,   548,   549,   118,   620,  1017,  2114,  1523,  1031,  1551,
    1541,  1550,  2139,  2706,  2142,  2707,  2708,  3685,  3195,  3686,
    3196,  1076,  2135,  1524,  3197,  1525,  2128,  2129,  2130,  2131,
    3189,  1539,  2125,  2148,   119,   953,   554,  1458,  1459,  2626,
     120,   632,   121,  1442,  2051,  2052,  2610,  3130,  2611,   122,
    1011,  1012,   123,   928,  2759,  2594,  1989,  1139,  1990,  2035,
     931,  1416,   932,   933,  1431,  1425,  1434,  1428,  3329,  2848,
    2849,  2598,  1997,  1730,  2108,  2841,  3772,  1731,  2026,  2590,
    2591,  2322,  4528,  3336,  2852,  4305,  3618,  4529,  4530,   124,
     156,   125,  4971,   557,   722,  1193,  1520,   126,   127,   128,
     129,  3280,  3281,  3291,  5077,  5142,  2276,  2277,  1690,  3083,
    2800,  2528,  2529,  2530,  2531,  1322,  1323,  3084,  3572,  3573,
    1704,  1113,  1663,  1654,   144,   145,   146,   147,  1162,  1163,
    3418,  3886,  4217,  4471,  4472,  4813,  4930,  5168,  5169,  1656,
    3254,  4868,  5136,  5162,  5181,  1657,  1658,  1659,  3717,  4557,
    4866,  5047,  5135,  1660,  3253,  4077,  4734,  4972,   130,  1102,
     645,  1641,  1636,  1638,  2228,  2755,   131,   132,   133
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     546,   155,   693,  1072,   697,  1029,  1068,  1470,  1926,   584,
    1535,  1538,  1676,   682,   578,  1822,  1111,  1684,   586,  1112,
    1574,  1552,  2257,   993,   579,  2262,   544,  1935,  2019,  1925,
     602,   705,  2065,  1604,  2267,  1898,   599,  2275,   615,  1470,
    1871,   618,  1574,   607,  1138,   615,  1034,  2401,  1784,  1137,
    2260,  2342,   634,  2278,   979,   873,    77,  2174,  2140,  2261,
    1832,   883,   884,   885,   979,  1260,   889,   890,   891,  2173,
    2916,   893,   894,   895,  2339,  2917,  2011,   616,  2793,  3010,
    3261,  3579,  3289,  3305,   930,  2018,   929,  1378,  1465,  1466,
    3385,  3017,   667,  2031,  3695,  3305,  3305,  3465,  2301,  1481,
    2612,   668,  3882,  3112,  1963,  1964,  1965,  1966,  1967,  1968,
    1970,  1972,  1973,  1974,  1975,  1976,  1711,  3293,  1013,  2248,
     929,  1712,  1567,  1206,  1941,  1994,  2760,  3497,  1626,   674,
    2582,   546,  4007,   546,   681,   687,  2906,  1952,  1954,  2067,
    1956,  1957,  1079,  2181,  2976,  1086,  3984,  1605,  3754,  2686,
    2836,   159,   681,  2390,  2837,  3018,  2977,   676,  2676,   678,
    2638,  1184,  3340,  2194,  1188,  3294,  3227,  3341,  4007,  2279,
    3349,  2197,  2198,  3923,  3353,  3236,   698,   694,  3218,  4372,
     699,  3824,  3490,  3491,  4223,  3369,  3945,  3203,  3499,   700,
    3501,   701,  3581,  3582,  3328,  1438,  3896,  3380,  3770,  4480,
    3705,  2633,  3389,  4232,  2306,   597,  3415,  2838,  1740,  4104,
    2566,  1763,  4126,   606,   721,  1791,  1792,  1793,  4068,  4639,
    3562,  2736,  4444,  1432,  2073,  2152,  2153,  3317,  3318,  3305,
    3305,  2973,  1811,   626,  4251,  2974,  4251,  1317,  1318,  1319,
    2966,   593,  2083,  4741,  2832,  1606, -2760,  2417,  1361,  4252,
    3681,  1327,  1328,  4912,  2520,  4362,   623,  1708,  1648,  1438,
    1579,  4718,  3795,  4253, -2462,  1655,  1664,  4458,  2819,  3155,
    1881,  3786,  3743,  1885,  1038,  1019,  1038,  1019,  1708, -1686,
    4741,  1708,  2566,  3477,  1429,  4254,  2623,  5089,  3495,  3664,
    -973,  2842,  4576,  4148,  4151,  2306,   936,  4142,  3419,  1909,
    1910,  2776,  4577,  1914, -2259,  2232, -2918,  4771,  1327,  1328,
    2246,  -600,  3335,  1555,  -601,  2306,  1737,  2132,  1758,  4334,
    1928,  1929, -1686,  1327,  1328,   696,  3574,  3676,  3677,  3678,
    4832,  1189,  1449,  2032,  1815,  3778,  1764,  4014,  4969,  3563,
    1765, -1726, -2842,  4437,  4442,  4418,  4391,  4443,  2249,  2306,
   -2761,  2842,  2320,  3321,  1766,  2122,  5016,  4055, -2677,  2109,
    1639,  3471,  3472,  2126,  1095,   727,  4454,  5017, -2760,  2737,
     886,  2383,   594,  4363,   669,  3322,  1585,  2379,  2293,   153,
    4251,  4888,  1787,  1080,  3220,  2123,  2738,  3594,  3252,   995,
    1787,  1095,  1362,  2133,  1383,  4252,  2324,   617,  2672,  2739,
     296,  1816,   298,  1787,  1329,  1615,   157,   134,  3787,  4253,
    1489,  2255,  1191,   979,   979,  2204,  -492,   979, -2918,  3449,
    1038,  4438,  4295,  4405,  1575,   728,  1235,  1272,   149,  2297,
    4505,  4254,  2624,  4742,  1817,  2593, -2046,   296,  3205,   298,
    1609,   552,  4833,  3235,   553,  1330,  3926,  5112,  3987,   979,
    1724,  1725,   726,  3893,  1296,   927, -2046,  1649,   153,   154,
     939,  1329,  4566,   892,   551,  2321,  2303,  1309,  1310,  3894,
    4742,  4296, -2761,  3902,  3777,  2968,  1329,  1349,  3115,  1815,
    1576,  1669,  2740,  1670,  1671,  1672,  1673,  5140,  1616,   927,
    1996,  1767,  2843,   605,  2074,  4014,  3903,  2205,  4550,  1775,
    1331,  1192,  1330,  4978,  2256,  3880,  1818,   704,  1628,  2307,
    3257,   158,  2115,  1332,   150,  1830,  4042,  1330,  1788,  2521,
    2297,  2396,  2226,  1236,  2325,  3562,  1810,  4578,  1727,   136,
    2136,  1349,  1587, -2935,  1260,  4324,  2027,  2294,  1347,  1880,
    2297,  4551, -2677,  3323, -1726,  4401,  1816,  2127,  4406,  4407,
    4382,   670,  2843,  2124,   687,  1096,  1097,  1331,  3415,   996,
    2033,  2321,  -701,  4131,  1588,   687,   729,  4015,  1166,  1988,
    1332,  4969,  1331,  1640,  2297,  -702,   681,   934,  1759,  3299,
    1599,   681,  1096,  1097,   946,  1332,  2110,  1819,  1081,   296,
    3337,   298,  4411,   708,  1754,  5018,  1768,  2250,   989,  4834,
    2307,   938,  3338,  1333,    14,  4636,  2741,  4540,  4618,  4548,
     681,  2134,  4095,   157,  1030,  4650,  4335,  1589,  3927,  4999,
    2307,  2684,  1590,  2804,  1088,  2106,  4667,  2787,  4669,  3779,
    2650,  1762,  4422,  1334,  5085,   979,  1335,   990,  2567,  2274,
    3788,  3800,  2625,  1108,  3563,  1858,  2121,  1991,  1859,  4291,
    1190,  3300,  2801,  2265,  2307,  4559,  2176,  4769,  2844,  2179,
    1333,  2384,  1574,  2182,  2075,  2185,  2836,  1991,  4059,   681,
    2837,  1143,  4063,  3137,  2161,  1333,  3462,   937,  2301,  1556,
    2742,  1555,  1350,  3305,  1650,  2020,  1450,  3564,  3258,   681,
   -1726,  1174,  1711,  2200,  2201,  2202,  2835,  1712,   716,  3928,
     668,  1991,  1177,  3415,  2034,  4124,  1537,  1798,  1799, -1686,
    2567,   668,  -702,  3420,   668,  4579,  2976,  1143,   651,  2906,
    1363,  1154,    27,  2019,  1201,  4015,  2650,  4507,  2977,   720,
    2034, -2462,  3301, -2760,  2306,  1994,  1350,  1857,   947,  2418,
    1430,  3305,  4913,  4092,  4364,   627,  1580,  1873,  1760,  1875,
     896,  1978,  1433,  2545,  2546,  2727,  2548,  2549,  4641,  2340,
    4347,  1888,  1889,  1890,  1377,  4719,  3319,  2390,   624,  4871,
   -2760,   716,  1897,   980,   716,  2543,  3214,  2972,  1089,  3682,
    2018,  3390,  1261,  2341,  1591,  2196,   595,  3307, -2462,  3920,
    2383,  4034,  2846,  4872,  1161,  1015,  2410,  3781,  2664,  4445,
    1470,  2378,  2839,  2973,  1610,  3701,  1090,  2974,  2084,  1727,
    2634,  3771,  4835,  2840,  -973,  1820,  4531,  3473,  1760,  2240,
    4601,  4272,  3071,  4045,  3985,  4569,  1998,  3789,  3802,  4767,
    1065,  4255, -2842,  4255,  2845,  -600,  1760, -2761,  -601,  2211,
    3768,  4586,  1760,  2212,   625,  2076,  2985,  1439,  1324,  1325,
    1065,  1651,  2846,  4743,  3391,  3833,  3834,  4738,  3754,  1760,
    4440,  1592,  1586,  3320,  1691, -1726, -2842,  3897,  3079,  4904,
    4481,  4906,  4907,  3919, -2761,  4043,  3565,  1369,   546,  1371,
     929,  1373,  1143,   546,  1065,   681,  2107,   546,  2469,  1821,
    2651,  1137,  2473, -2970,  2968,  1414,  1536,  4336,  1540,  1336,
   -1726,  1543,  1548,  3080,  1370,  4327,  1337,  1338,  1339,  1375,
    4542,  1439,  1098,  1380,  2302,  3206,  1992,  1570,  2008,  2077,
    2522,  2499,  1376,  2155,  4132,  3339,  1381,  3929,  4552,  1593,
    3116,  2091,  1443,  4020,  3703,  3704,  1992,   948,  1457,  1305,
    -492,    42,  3463,  1611,  -702,  4413,  2847,   668,  3136,  1461,
    2180,   148,   155,  1467,  2831,  1137,  1336,  2718,  4914,  2297,
    3302,  3259,  4721,  1337,  1338,  1339,  4920,  4386,  1612,  2395,
    1992,  1620,  1653,  1653,  3476,   697,  1484,  4255,  1337,  1338,
    1339,  3962,  1494,  4513,   681,   668,  2651,  2544,  4861,  2820,
    4862,   668,  3564,  3718,  2854,  4991,  4992,  4439,  4204,  4995,
    1692,  3851,  2306,  3852,  1355,  1356,  1357,  1358,  1359,  1360,
    3520,  1030,  1454,  2235,  2236,  2100,  3241,   681,  1531,   681,
    1959,  1727,   681,   681,  1531,  2239,  4341,  4342,  1343,  2116,
    4603,   929,  3480,  4829,  3482,  2641,  4597, -2836,   681,  2307,
     149,  1130,  4355,   985,  1678,   653,  2303,  1556,  3853,  2297,
    4616,  4356,  3399,  3246,  1594,  1600,  2383,  5170,  4831,  4461,
    1357,  1358,  1359,  1360,  3926,  5000,  1991, -2819,   160,  1815,
    1327,  1328,  2536,  3854,  1407,  2652, -2823,  3096,  2340,  3748,
    2384,   668,  2642,  1693,   590,   558,  1991,  5054,  1633, -2822,
   -2820,  3464,  5062,    57,  1595, -2821,  4134,  4787,  2281,  2326,
    3487,  4645,  2341,  4093,  1645,  2768,  2821,  1644,  2692,  4140,
     556,  3855,  3880,  4144,  4145,  2383,  1527,  1860,  1677,  4261,
    1861, -2826,    60,  3719,  3312,  1571,   150,  3415,  4264,  2769,
    1760,  -702,  5166,  4058,  3198,  2396,  1816,  4062,  4050, -2073,
    1732, -2046,  3292,  1646,  1647,  2979,  1668,   698,   681,   668,
     929,   699,  4827,  2836,  2916,  2467,  2723,  2837,   546,  2917,
     700,   668,   701,  3581,  3582,  1574,  1487,  2616,  4968,  1817,
    1684,  2652,  3368,  4138,  1532,  2696,  1991,  3867,  3340,  3874,
    1532,   668,  1778,  3341,  1736,  3369,  4898,  -500,   153,   559,
    -487,  1780,   580,   591,  4357,  2645,  2646,  2301,  3749,  1940,
    2174,  3199,  2174,  2174,  4886,   552,  1629,  3905,   553,   716,
     979,   716,  2835,  1711,  3210,  3211, -2918,  2279,  1712,  1366,
    2906,  3035,  2976,  1329,  3495,  2297,  3684,  2297,  1455,  3951,
    3674,  3652,  1261,  2582,  2977,  1977,  3927,  1680,  3445,  3446,
    1621,  1818,  1349,   949,  3451,  2887,  3400,  4573,  1960,   927,
    3123,  1261,  3459,  3460,  2987,  2719,  1344, -2073,  3467,  3804,
    2721, -2046,  4706,  5171,  1330,  2537,  3933,  4594,  4826,  1065,
    3817,  4741,  1961,  2726,  3821,  3822,  2729,  2730,   153,  2879,
    1345,  2822,  2021,  1131,  2297,  1343,  3835,  4709,  3215,  1228,
    1229,  2793,  2823,  2541,  4616,  4798,  1365,  1661,  2890,  -500,
    2824,  3963,  -487,  4598,  4788,  1927,  3200,  2307,  3142,  2973,
    1343,   764,  1132,  2974,  1462,  3720,  1528,  3931,  2664,  1331,
     681,  4639,  1819,  3934, -1185,  3856,  3935, -1185, -2918,  1946,
     986,   134,  1332, -2836,  3936,  1992,  3088,  3097,  3098,  3092,
    3497,  5063,  3297,  5068,  2390,  2297,  2384,  1347,  4430,  2972,
    1499,  4431,  1991,  1146,  3937,  1992,   681,  1926,  1982,  1065,
    3087,  5167,  1985, -2819,  3167,  3875,   560,  3095,   153,  1740,
     681,  4697, -2823,  1308,  3857,   681,   668,   604,   771,  1601,
    2020,  3415,  4451,  4452,  4453, -2822, -2820,  3201,  2996,  5001,
    4456, -2821,  1694,  1695,  1696,  1697,  1698,  1699,  4466,  2526,
     927,  3938,  1261,   681,  2825,  2384,   638,  1147,   157,   619,
    1691,  1991, -2074,  4789,  2997,  1700,  4761, -2826,  3571,  1679,
    3578,   681,  1333,  3479,  3148,  4355,  3415,  3721,   296,   681,
     298,  2385,  1494,  4415,  4356,   135,  2050,  1347,  1423,  3889,
    4317,   668,  1926,  2569,  2697,  1992,  1962,  1350,  5022,  4427,
    4427,  4762,  1334,   136,  1346,  1335,  3495,   639,  2069,  3495,
    3495,  4742,  3631,  3239,  3939,   552,  1327,  1328,   553,   668,
    3298,  2998,  1991,  -212,  2999,  1494, -2073,  3495,   296,  1463,
     298,   668,  3000,   787,   668,  5069,  4917,  4318,  1156,  2538,
    2385,  4455,   628,  5002,  2302, -2965,  3495,  4427,  4427,  4464,
    4465,  1148,  3001,  2826,  3764,  4811,  2539,  1195, -2073,  2237,
     681,   681,  -892,  1344,  2112,  3407,  4003,  4004,  4005,   927,
    -498,   681,  2117,  -485,  1650,  2578,  5003,  1347,  3922,   137,
   -2074,   681,  1206,   718,  2649,  1065,   640,  1345,  1344,  1787,
    5005,  4628,  2241,  2137,  1030,  3929,  1692,   716,  2159,  5076,
    1820,  2162,  1327,  1328,   546,   546,   546,   668,   546,   681,
     668,  2703,  1345,  3697,   804,  2303,  4499,  2175,  3940,  5070,
    4985,  3941,  2177,   546,  4133,   681,  2527,  4357,  3131,   546,
    2156,  2157,  2158,  2395,  2160,  2163,  4963,  1574,   999,  2283,
    2386,  2195,  3890,  2978,  1065,  2056,  2258,  2761,  3698,  2178,
     668,  2765,  2766,   636,  2666,  2184,  2677,  3840,   929,  4149,
    1351,  1352,  3002,   153,   154,  3202,  2332,   138,  -702,  1329,
    4153,  1992,   646,  4155,  5066,   153,   154,  1559, -2073,  1693,
    3774,  3775,  3776,  3337,  1161,  4964,  1157,  2748,  5035,  5036,
     681,   681,  1679,  4629,   716,  3338,  2164,  3793,  3793,  2386,
     153,   154,  3803,   942,  3805,  1065,  3942, -2073,  2245,  2965,
    1330,  3816,  2666,   681,  2242,  2243,  2244,   668,  1715,  4584,
    1571,  2667,  1374,  4640,  3111,  1884,  3830,  2586,   979,  4416,
    1992,  3765,  4812,  3841,  3843, -2073,  4630,  1560,  1787,  4596,
    3192,  1651,  2758,  2174,  1942,  1727,  3860,  3862,  3864,  2835,
    5194,   649,  3865,  3843,  2668,  1329,  3063,  2798,  1297,  1000,
     681,  1346,  2396,  2557,  4604,  1331,  4606,  2979,  1336,  3003,
    2558,  1561,  2562,  1149,  4141,  1337,  1338,  1339,  1332,  2667,
    2337,  2183,  3064, -2970,  5138,  5139,  1346,   681,  2335,   668,
    1711,  1992,  3911,  3914,  3917,  1712,  1330,  3470,  1301, -2074,
     943,  4780,  4781,   630,   668,  -702,   139,  4117,  3286,  4067,
   -2292,   651,  2668,  1571,  4501,  4965,   647,  1574,  1354,  1355,
    1356,  1357,  1358,  1359,  1360,  1201,  2669,  2407,  3617,  2818,
    1329, -2074,  1680,  2666,  1347,  3622,  3623,  3624,  1996,  1001,
    2587,   296,   837,   298,  1470,  2019,  3183,  1150,  3943,  1151,
    4254,  1331,  2340,  3826,   641,  1298,  1327,  1328,  2321,  1347,
    1327,  1328,  1678, -2454,  1332, -2481,  3712,  2666,  1333,  2258,
    3842,  1330,  4783,   944,  1913,  2255,  2341,   642,  3944,  1349,
    5087,  3481,   140,  5091,  2669,  3081,  2666,  2078,  4118,  3859,
    2079,  2737,  2553,  2799,  2165,  1302, -2930,   672,  1334,  5055,
    2667,  1335,  2018,  1815,  1679,  2972,  1926,  2670,  2738,  2736,
    4641,   675,   631,  2601,   643,  1679, -2965,    60,  2664,  2305,
    3983,  3232,  1261,  2468,  3004,  1680,  1331,  3660,  2793,  2602,
     153,   154,  1571,  2668,  2667,  3827,  5078,  1943,  3587,  1332,
     688,  3591,  3423,  1571,   552,  3663, -1294,   553,   141, -1648,
    2557, -2074,  3648,  2667,  1333,  3186,  3417,  4111,  5104,  1571,
   -2930,  5106,  4846,  4500,  4774,  2670, -2292,  2668,  2256,  2460,
    1816,  2599,   677,  2600,  3014,   644,  4246,  3187,  5147,  3019,
   -2074,  2533,   695,  4847,  1334, -2292,  2668,  1335,  1694,  1695,
     136,  1697,  2486,  1699,  3026,  2603,  3005,  2604,  1562,   142,
    2422,   703, -2601,  1817,  3424,  2669, -1958,  3136, -2074,  1329,
    5137,  1700,  1485,  1329,  3188, -2965,  1727,  2460,  4078, -2454,
    3167, -2481,  2560,  3432,  4282,  2666,  3006,   927,  3861,  1333,
    2559,   668,  1349,  1327,  1328,  3045,  3828,  -702, -2454,  2669,
   -2481,  2691,  4079,   668,  1680,  2080,  2284,  2681,  2682,  2683,
    1330,   708,  2423,  1365,  1330,  1680,   668,  2737,  2669, -1958,
    2285,  1414,   709,  2302,  2402,  4040,  1414,  2596,  2596,  2589,
    2596,  1680,  1837,  4558,  2738,  1818,  2597,  2597,  3132,  2597,
    1038,  1019,  4562,  4668,  1350,  4670,  2670,  2739,  4056,  2211,
    2605,  2280,  2667,  2212,  3093,  4041,   993,  2621,   157,  3178,
    3105,  1457,   681,  3979,  1137,  1331,   668,  3981,   612,  1331,
     668,  1343,   721,  1418,  3108,   612,   929,  3305,  1332,   979,
    2670,   611,  1332,  1484,  2648,  2668,  5115, -1958,  3233,  1926,
     681,   681,   668,   668,   668,  2671,   979,   979,   653,  2670,
     723,  3793,  1563,  1029,  2596,  2596,  2596,  1261,   681,   886,
    3839,  2793,  2606,  2597,  2597,  2597,  1819,  1030, -2601,   724,
    4112,  1944,   681,  2666,  1336,  1564,  3863,  2357,  2358,  3337,
    2740,  1337,  1338,  1339,   888,  2781,  4943, -2601,  1945,  1030,
   -1958,  3364,  1841,  2371,  1034,  2986,  1329,  4262,  2532,  4446,
     901,  1565,  4447,  2671,  3707,   935,  4746,  2669,  1419,  2715,
    4753,  3305,  2742,  1420,   716,  1327,  1328,  1566,  1333,   951,
    2395,  2028,  1333,   982,  2029,  2978,  1349,  2030,  2434,  1619,
    3687,   984,  3368,  2497,  -702,  1624,  1625,  1330,  1470,  1574,
    2667,  2728,  4976,  4977,  1327,  1328,  1006,  1350,  1334,  2286,
     668,  1335,  1334,   650,  4047,  1335,  1004,  1351,  1352,  1421,
    1336,  4429,  2424,  1365,   979,  2747,  2735,  1337,  1338,  1339,
    3337,  1078,  2720,  2668,   668,  1422,  1085,  1633,  2751,  3305,
    3305,  2435,  3364,  2979,  2429,  2430,  3711,  2736,  2670,  2763,
     546,  2644,  1331,   546,  2658,  2659,  1815,  1038,  1019,  1842,
    1107,  3365,   996,  1845,  2741,  1332,   681,  1109,  4462,  4463,
    1846,  1763,  2785,    60,  4008,  4009,  2764,  2449,  1365,  1327,
    1328,  4100,  4101,  3655,  2671,  2797,  2287,  2464,  1365,  4053,
    3924,  2373,  2374,  3638,  3638,  3638,  3638,  2465,  1878,  3530,
    1117,  3663,  1337,  1338,  1339,  2669,   651,  1119,  2340,  1344,
    4102,  2288,  2477,  1365,  3690,  1536,  1120,  2709,  2671,  2712,
    1121,  3953,  3954,  1816,  2478,  1365,  1122,  1536,  1329,  2479,
    1365,  2920,  2341,  1345,   938,   681,  1127,  2671,  2742,  1134,
     668,  1153,   668,  1155,  4746,  2485,  1365,  -922,  3968,  3121,
    3122,  4753,  3365,  4290,  1820,  1333,  3299,  1329,  1847,  1161,
    2607,  2608,  2609,  1169,  3976,  2512,  1164,  3440,  1175,  1330,
    1351,  1352,  3243,  3244,  1353,  1354,  1355,  1356,  1357,  1358,
    1359,  1360,  2289,  4326,  1926,  1334,  2670,  3167,  1335,  4432,
    2664,  1350,  4435,  4436,  1179,  2737,  1764,  1183,  1330,  2340,
    1765,  4330,  2657,   979,  1196,  4071,  1203,  3708,   979,  1204,
    4448,  1205,  2738,  2981,  1766,  1207,  2984,  3315,  3316,  1849,
    1208,   153,   154,  2341,  1331,  2739,  1926,  3085,  3300,  4460,
    1209,  4041,  1329,  1212,  4333,  1213,   681,  1332,  3330,  3331,
    1327,  1328,  1214,  3332,  3333,  3334, -1551,  3239,   681,  3505,
    2430,  2808,  1215,  1331,  1216,   927,  1217,  3110,  4025,  1218,
    2815,  2816,  3508,  1365,  1219,  2736,  1332,  3540,  1365,  3666,
    3667,  1365,  2020,  1330,  1336,  1220,  2671,  4393,  1336,  1221,
    2290,  1337,  1338,  1339,  1222,  1337,  1338,  1339,  3672,  3673,
    3991,  1365,  1223,  -700,  2452,  2453,  1327,  1328,  2454,  2455,
    5195,  4238,  4239,  4240,  4241,  1224,  1470,  1346,  2740,  3301,
    1103,  1104,  3147,  1105,  1225,  1106,  4242,  4243,  4249,  4260,
    1226,  1727,  1727,  1727,  2658,  2659,  1230,  1333,  1331,  1355,
    1356,  1357,  1358,  1359,  1360,  4277,  1365,  1364,  4292,  1365,
    1232,  1332,  1233,    60,  4299,  4300,  4308,  4309,   681,  4320,
    4321,  1767,  4469,  4470,  1351,  1352,  1333,  1334,  1234,  3911,
    1335,  3914,  1237,  3917,  1850,  3366,  3100,  1238,  2107,  2107,
    2107,  2660,  3106,  1137,  1137,  1137,   681,  1239,   681,   681,
    1347,  1852,  4039,  1368,  -700,  1240,  1334,  1241,   652,  1335,
    1242,  4634,  4635,  1329,  1243,  4746,  4753,  4567,  4568,  3217,
    1244,  2357,  2358,  3586,  4638,  1245,   681,  1098,   979,  4512,
    -147,  1246,  4651,  2737,  2671,  1247,  4137,  2371,   979,   979,
     979,   979,  4671,  4672,  2736,  4527,  4571,  4568,  4679,  4680,
    2738,  1333,  2741,   653,  1330,  4728,  3673,  3716,  4740,  4568,
    4785,  4786,  1137,  2739,  1327,  1328,  4794,  4795,  1248,  1329,
    4983,  1336,  4652,  1249,  4982,  1250,  1768,  1251,  1337,  1338,
    1339,  1334,  1438,  1372,  1335,  4802,  4795,  4028,  4900,  4321,
    3273,  1254,  2498,  1255,  3171,  4048,  1256,  3744, -1884,  3174,
    1262,   572,  4934,  4935,  1574,  1349,  4945,  4946,  1263,  1331,
    1330,  2978,  1264,   681,   681,  4961,  3673,  4653,  2691,  1536,
    1065,   681,  1332,  4962,  3673,  1265,  2742,  4639,  1386,  1327,
    1328,  1353,  1354,  1355,  1356,  1357,  1358,  1359,  1360,   654,
    4975,  3316,  1030,  3785,  1266,  4572,  2740,   655,  3792,  1267,
    2175,  1268,  2175,  2175,  3324,  3330,  3331,  3302,  4994,  4568,
    3332,  3333,  3334,  1269,  1926,  1331,  4593, -1726,  2174,  1270,
    4339,  4589,  1273,  4591,  1415,  2373,  2374,  4654,  1332,  1927,
    4496,    77,  4595,  1274,  3814,  3660,  4996,  4568,  4997,  4568,
    5052,  4568,  2737,  5053,  4568,  3250,  3263,  3264,  2260,  1275,
     546,  5056,  4568,  5060,  4321,   668,   668,  4590,  3481,  2738,
    1276,   681,  1333,  5095,  5096,  5105,  4568,  1329,  5124,  5125,
    5134,  3907,  2739,  5183,  5184,  1277,  3255,  1278, -1726,  3641,
    3642,  1916,  1917,  4306,  4307,  1279,  1280,  1417,  1281,   681,
     681,  1282,  1334,  1336,  1283,  1335,  1424,  1284,  1285,  1286,
    1337,  1338,  1339,  1426,  1287,  1288,  1289,  1290,  1330,  1291,
    1292,  1293,  1427,  2513, -1726,  1294, -1726,  1295,  1333,  1299,
    2741,  1300,  1336,  1303,  1304,   681,  1307,  1311,  1312,  1337,
    1338,  1339,  1329, -1726,   296,  4273,   298,  1926,  1313,  1314,
   -1726,  1435,  2501,  2502,  4729,  4730,  1315,  1316,  1334,  1436,
    1367,  1335,  1444,  1437,  3819,  2740,  1446, -1726,  3839,  1448,
    1350,  2284,  1453,  1331,  1471, -1726,  1474,  1478,  -892,  1496,
    1498,  1514, -1726,  1330,  1516,  2285,  1332,  1517,  1518,  4343,
    1519,  4350, -1726,  3401,  1526,  1549,   979,  1553,  1554,  1558,
    1571,  1581,  1582,  1583,  2742, -1726,  1584,  1336,  3416,  1603,
   -1726,  1608,  1607,  1613,  1337,  1338,  1339,  1622,  4524, -1726,
    3430,  1635,  1623,  1634,  3439,  1642,  1637,  2409,  4039,  1706,
    1707, -2895,  1708,  1714,  1718,  1716,  1327,  1328,  1331,  1721,
    4768,  1722,  1726,  1734,  1744,  1735,  1743,  1745,  1746,  1755,
    1772,  1332,  1773,  1781,  1783,  1362,  2787,  1787,  1794,  1813,
    1814,  2553,  1825,  1831,  1863,  1877,  1878,  3308,  3309,  3310,
    3311,  1895,  3313,  3314,  1879,  1900,  1333,  1906,  1907,   153,
     154,  3601,  1924,  4839,    60,  1933,  4656,  1500, -1726,  2741,
    1958,  3602,  1937,  2054,  4657,  1955,  1986,  1501,  1987,  1995,
    2002,  2003,  2006,  2004,  4392,  3603,  1334,  2005,  4473,  1335,
    2007,  1502, -1726,  2009,  2023,  2010,  2022,  3604,  3605,  3606,
    3961,  2024, -1726,  1503,  1504,  1505,  2053,  2025,  2063,  2068,
    2071,  2066,  2087,  1351,  1352,  2086,  2072,  3607,  2089,  4640,
    4828,  1333,  2088,  1506,  2107,  2095, -2652,  2098,  2102,  1137,
    2104,  2105,  1327,  1328,  2103,  1528,  2113,  2118,  2141, -1726,
    2149,  2150,  2154,  2742,  2286,  2186,  2187,  4860,  1336,  2188,
    1029,  1334,  2189,  2191,  1335,  1337,  1338,  1339,  2192,  2193,
    2209,  2223,  3992,  2664,  2224,  2227,  2229,  3447,  3448,  1329,
    3450,  2233,  3452,  3453,  3454,  3455,  3456,  3457,  3458,  2254,
    2238,  3461,  4848,  2263,  3466,  1678,  4899,  2268,  3469,  2273,
    4849,  1034, -1726,  2282,  1414,  4658,  2589, -2284,  4723,  3630,
    1443,   681,   681,   681,  1336,  2304,  2319,  2329,   668,  2344,
    1330,  1337,  1338,  1339,  2347,  3636,  4704, -1726,  4850,  2328,
    3646,  2287,  2345,  2348,  2518,  2519,  2381,  2781,   681,  2397,
    2399,  2411,  2405,  1927,  2446,  4125,  2413,  4925,  4128,  4129,
    2414,  2415,  2437,   153,   154,  2438,  2288,  2439,  2444,  1261,
    2535,  2460,  2445,   681,   681,   681,  4675,  1360,  2450,  4980,
    1327,  1328,  2462,  2503,  2466,  1331, -1726, -2046,  2470,  2474,
    1353,  1354,  1355,  1356,  1357,  1358,  1359,  1360,  1332,  2494,
    2576,  2495,  1235,  2175,  2500,  1329,  2504,  2515,  2516,  2517,
   -1371,  2540,  2547,  1297, -1521,  1301,  2592,  2562,  2622,  2565,
    2628,  1760,  2639,  2665,  2673,  2678,  4641,  2679,  2680,  2685,
    2687,  2693,  2694,  2695,  2710,  2698,  2700,  2289,  3714,  2699,
    2714,  2716,   681, -1726,  3823,  2701,  1330,  3727,   546,  2702,
    3730,  2717,  2722,  2731, -1726, -1726,   668,  2732,  2745,   668,
    3416,  1327,  1328,  2746,  2754,  2753,  2774,  3608,   681,  4851,
    5011,  2783,  1336,  1507,  3724, -1726, -1726,  2771, -1726,  1337,
    1338,  1339,  3761,  2772,  3763,  3609,  1327,  1328,  1333,  2790,
    1680,  1508,  3089,  3090,  1439,  2784,  2794,  2807,  2809,  2810,
    5012,  1331,  2814,  2811,  2812,  2813,  2851, -1726, -1726,  2925,
    2921, -1726, -1726,  2926,  1332,  2932,  2930,  2935,  1334,  2936,
    2937,  1335,  4633,  2938,  2939,  2940,  2959,  2941,  2942,  2943,
    2944,  2945,  3416,  1329,  2946,  2290,  2947,  1336,  4633,  2948,
    2949,  2950,  3799,  3416,  1337,  1338,  1339,  1327,  1328,  3810,
    4852,  5073,  5074,  3801,  2951,  2952,  1470,  3517,  3518,  3811,
    2953,  5079,  2954,  2955,  2956,   681,  3810,  2957,  2958,  4853,
    2960,  3832,  2967,  2982,  1330,  2986,  1927,  3848,  2990,  2995,
    3021,  3022,  4770, -1559,  3836,  5072,   668,  3081,  3124,  3076,
    3847,  2558,  4854,  3103,  3114,  3020,  3849,  3850,  3810,  3113,
    3036,  3037,  3050,  3072,  1333,  3416,  3873,  3610,  3119,  3091,
    1926,  3884,  5113,  3102,  1329,  3120,  3127,  3887,  3125,  3134,
    3128,  3126,  3138,  4310,  5118,  3129,  3611,  3139,  3810,  1331,
    3140,  4838,  1509,  3146,  1334,  3760,  3149,  1335,  3152,  1329,
    3154,  3172,  1332,  3175,  3160,  3176,  3179,  3180,  2805,  2806,
    4704,  3184,  3181,  2126,  5119,  1330,  5143,  3185,  2127,  3194,
    3209,  2211,  3212,  3228,   979,  2817,  3229,  3245,  3918,  3230,
    3648,  3247,  3921,  3543,  2829,  2830,  3248,  3251,  3256,  4700,
    1330,  3262,  3278,  3274,  2274,  3283,  4400,  4392,  1574,  3612,
    3284,  3290,  5144,  3295,  3296,  1510,  3325,  3326,  1327,  1328,
    1329,  3327,  3337,  3350,  3812,  3813,  3613,  3359,  3355,  3356,
    1331,  3360,  1511,  3362,  3363,  3370,  3372,  3374,  3373,  3381,
    3382,  3421,  3387,  1332,  3393,  1327,  1328,  3388,  3394,  3404,
    3433,  3434,  1333,  3846,  3442,  1331,  3443,  1470,  3444,  3474,
    3478,  1330,  3487,  3492,  2406,  3496,  3500,  3502,  1332,  3577,
    3592,  2961,  2962,  2963,  2964,  3569,  3503,  3504,  3511,  3512,
    3576,  3559,  1334,  3619,  3883,  1335,  3570,  3600,  3585,  3590,
    3583,  3596,  3598,  3620,  3627,  3649,  3625,  3990,  3632,  3650,
    2634,  1065,  3656,  3653,  1336,  3654,  3662,  3665,  3761,  3657,
    3668,  1337,  1338,  1339,  3675,  3683,  1331,  3669,  4855,  3691,
    3679,  3680,  3702,  3692,  3526,  3527,  3694,  3706,  3709,  1332,
    4096,  3713,  3252,  1333,  3715,  3723,  3726,  1536,  2887,  3751,
    3756,  3752,  3747,  3769,  3818,  3796,  4944,  3820,  3877,  3892,
    3885,  3880,  3899,  3904,  3906,  4801,  3932,  1926,  1333,  3900,
    3907,  3956,  3952,  1334,  4891,  4892,  1335,  4894,  3646,  3957,
    3965,  1329,  4491,  2521,  3964,  3977,  3986,  3564,  4838, -1657,
    3993,  3171,  4000,  4037,  3994,  4002,  4001,  4044,  1334,   681,
    4011,  1335,  4013,  4017,  4018,  2078,  4019,  4022,  1329,  1030,
    1030,  4027,  4060,  4915,  4061,  4076,  4081,  1536,  4082,  4084,
    4089,  4122,  1330,   979,  4085,  4136,  4087,  4088, -1836,  1333,
    1336,  4113,  4121,  1927,  4123,  4143,  4146,  1337,  1338,  1339,
    4150,  4075,  4218,  4156,  4222,  4219,  4157,  4086,  4225,  1330,
    1438,  1934,  4226,  4229,  4816,  3416,   668,  4230,  4233,  1334,
    4823,  4234,  1335,  4237,  4263,  4885,  4244,  4235,   681,  4247,
    5037,  3760,  4248,  4249,  4250,  4265,  4267,  1331,  4278,  4268,
    1982,  4269,  4110,  4260,  4274,  4279,  4280,  4288,  4294,  4289,
    1332,  4301,  4303,  4304,  4313,  4316,   979,  4322,  4111,  4325,
   -1626,  4309, -1631,  4346,  1331,  4351,  4366,  4378,  4368,  4380,
    4119,  4988,  4352,  4989,  4990,  4385,  4127,  1332,  4120,  4373,
    4387,  5067,  4403,  4397,  4130,  3810,  4384,  4396,  3416,  4408,
    4388,  4409,  4395,  4410,  4417, -1726,  3786,  4425,   681,  4433,
    4468,  3416,  4434,  3810,  4450,  3416,  3416,  5010,  3419,  4474,
    4476,  4484,  4504,  1327,  1328,  4941,  4510,  4506,  1336,  3416,
    3810,  4511,  4509,  4102,  4515,  1337,  1338,  1339,  4049,  1327,
    1328,  3810,  4526,  5129,  3810,  4532,  4533,  4543,  3545,  3546,
    1333,  4534,  4545,  4547,  4563,  4560,  4565,  4561,  4570,  4582,
    1979,  1926,  4159,  4592,  4623,  4626, -1726,  4461,  4158,  4637,
    4665,   668,  4501,  4692,  4215,  1926,  4693,  1333,  4694,  4216,
    1334,  1926,  5177,  1335,  4696,  4699,   546,  1926,  4706,  4705,
    4707,  4709,  4710,  4711,  4231,  4713,  5187,  4717,  4725,  4733,
    4727,  3439,  5177,  5129, -1726,  4109,  4739,  1334,  5187,  1336,
    1335,  4750,  4224,  4732,  4756,  4757,  1337,  1338,  1339,  4116,
    4759, -1726,  4758,  1679,  4784,  4790,  4775,  4792, -1726,  3588,
    3589,  4777,  4778,  4779,  1336,  4793,  4797,  4800,  4805,  4799,
    4806,  1337,  1338,  1339,  1327,  1328,  4807,   979,  4808,  4810,
    4814,  4824,  4825, -1726,  3544,  4367,  4830,  4841,  4863,  4880,
   -1726,  4887,  4139,  4893,  4895,  4896,  4921,  1327,  1328,  4909,
   -1726,  5117,  4147,  4901,  4922,  4902,  1329,  4905,  4924,  4910,
    4932,  4612,  4926, -1726,  4938,  4929,  4939,  4940, -1726,  4948,
    4951,  4952,  1329,  4957,  4960,  1336,  2879, -1726,  1327,  1328,
    2854,  4993,  1337,  1338,  1339,  5014,  5006,  5015,  5024,  5027,
    5039,  4314,  5043,  3646,  5044,  5045,  2408,  1330,  5049,  5046,
    5048,  1927,  3348,  1327,  1328,  3351,  3352,  5050,  3354,  5051,
    5061,  3357,  3358,  1330,  5064,  3361,  5065,  5075,  5080,  5082,
    3371,  5085,  5159,  5107,  5081,  3375,  3376,  3377,  3378,  3379,
    5108,  5120,  5109,  3383,  3384, -1250,  3386,  5121,  1327,  1328,
    5122,  5133,  3395,  3396,  3397,  3398, -1726,  5152,  3402,  3403,
    5076,  3405,  1331,  5145,  5154,  5148,   681,  5157,  4371,  4371,
    5158,  1327,  1328,  3416,  5160,  1332,  5163,  5164,  1331,  5178,
   -1726,  5190,  3182,  1472,  1477,  3468,  2000,  1329,  4494,  3597,
   -1726,  1332,  4859,  4492,  1602,  3106,  4493,  4870,  1327,  1328,
    3767,  1662,  4564,  4869,  4974,  5102,  1720,  5100,  4735,  4402,
    1329,  4936,  3416,  3416,  4486,   622,  2675,  2691,  3416,  1536,
    3810,  1077,  3615,  5151,   979,  3416,  3475, -1726,  1330,  4311,
     979,  2585,  3637,  2934,  1927,  1182,  1336,  3145,  3810,  3143,
     668,  1329,  3144,  1337,  1338,  1339,  1774,  2561,  4890,  2318,
    4575,  1330,  4755,  2904,  3408,  4152,  4021,  2426,  4536,  1327,
    1328,  4315,  4026,  1336,  5191,  1333,  1329,  2637,  5026,  4840,
    1337,  1338,  1339,  5084,  5156,  5132,  5150,  4539,  4959,  4036,
   -1726,  1333,  1330,  1331,  2428,  3733,  4574,  4329,  3406,  5097,
    2757,  3872,  4377,  4782,  3413,  1334,  1332,  4923,  1335,  4804,
    3946,  1329,  1327,  1328,   563, -1726,  1331,  1330,  4441,  4467,
    4809,  1334,  4479,  4354,  1335,  5023,  4803,  5188,  4498,  1332,
    4502,  4414,  3980,  3561,  1329,  3978,  3982,  5103,  2175,  4859,
     659,   660,  5057,  4096,  5058,  4602,  4979,  1331,   681,  4889,
     681,  4884,  1330,  4749,  4649,  3410,  3871,  1733,  2210,  3216,
    1332,  1329,  2924,  1627, -1726,  4622,  3157,  5020,  4412,  2647,
    2336,  3629,  1331,  3135,   564,  1330,  1327,  1328,  2382,  4012,
    1705,  4394,  5013,  3575,  2803,  1332,  2272,  3287,  3996,  3013,
    3011,  1876,  3240,  3595,  3699,  3234,  1333,  3988,  4337,  3224,
    4865,  5098,  1330,  4731,  4236,  1980,  5099,  1331,   565,  4587,
    1812,  4293,  4588,  4538,  4523,  4937,  1327,  1328,  3688,  1333,
    1332, -1726,  1329,  4514,  4549,  2786,  1334,  3744,  3866,  1335,
    1331,  4420,  4585, -1726,  3746,  2980,   661,  3163,  2093,  4323,
    3174,  4031,  4691,  1332,  2055,  4030,  4075,  3133,   566,  1334,
    1333,  4066,  1335, -1726, -1726,  4075, -1726,  1331,  5021,  1091,
    1202,  2404,  4371,  1330,  2167,  1329,  2725,  1071,  3213,  2724,
    1332,  1074,  1439,  4475,  1674,  1333,   666,  2579,  4424,  4525,
    1334,  4016,  1982,  1335,  2061, -1726, -1726,  2101,  5146, -1726,
   -1726,  3416,  4715,  4760,  3416,  5155,   567,  4897,  5189,  5192,
    1306,  4035,  4619,  3700,  2047,  1334,  1330,  4046,  1335,  2749,
    1333,   668,  1032,  2796,  1327,  1328,  3193,  2534,  1331,  4625,
    1033,  4736,  4620,  2705,  1327,  1328,  2627,  3191,   979,  1329,
    3190,  1332,  2231,  1333,  1014,  2044,  2111,  1515,  3177,  3773,
    1334,  3249,  2850,  1335,  3616,  4712,  3888,  4647,  1016,  5141,
    3696,  4057,  1521,  3226,  1114,  4338,  5153,  4647,  1115,  1116,
    1333,  1331,  4673,  1334,  4674,     0,  1335,  2234,  1665,  1329,
    1330,  1336,     0,  1666,  1332,  1667,     0,  4689,  1337,  1338,
    1339,  4688,     0,     0,     0,     0,     0,  1336,     0,     0,
    1334,     0,  2431,  1335,  1337,  1338,  1339,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2432,     0,
    1330,     0,  4859,     0,     0,     0,     0,     0,  4714,     0,
       0,  1333,     0,     0,     0,  1331,  2691,   668,  3815,     0,
     -69,     0,     0,     0,     0,   568,     0,     0,  1332,     0,
       0,     0,  3825,     0,     0,     0,     0,   881,     0,     0,
       0,  1334,     0,     0,  1335,     0,     0,     0,     0,     0,
       0,     0,  4371,     0,  1333,  1331,     0,  1329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1329,  1332,     0,
       0,     0,     0,   977,     0,   881,     0,     0,     0,   569,
       0,   979,  1336,   977,  1334,     0,     0,  1335,     0,  1337,
    1338,  1339,     0,     0,     0,     0,  1075,     0,  1330,     0,
       0,   570,     0,  2433,     0,  1336,     0,     0,  1330,     0,
     881,     0,  1337,  1338,  1339,  1327,  1328,     0,  1333,  1327,
    1328,     0,     0,     0,     0,     0,  2440,   979,     0,     0,
       0,  4647,     0,     0,     0,     0,  1336,   681,  1327,  1328,
       0,     0,     0,  1337,  1338,  1339,     0,     0,  1334,     0,
    4647,  1335,     0,  1331,     0,     0,     0,  2441,  1333,     0,
       0,  1336,     0,  1331,  4817,  4821,  1332,   571,  1337,  1338,
    1339,     0,   572,     0,     0,     0,  1332,     0,     0,     0,
       0,     0,  2448,     0,     0,     0,   881,     0,  1334,     0,
       0,  1335,   573,     0,  1327,  1328,  1336,  1927,     0,     0,
       0,  4845,     0,  1337,  1338,  1339,     0,     0,     0,  3174,
     881,  3174,     0,     0,     0,   881,     0,  2457,   574,  1336,
       0,     0,     0,     0,     0,     0,  1337,  1338,  1339,     0,
       0,     0,     0,     0,   575,     0,     0,     0,     0,     0,
    2458,     0,     0,  1327,  1328,     0,  1336,     0,     0,     0,
       0,     0,     0,  1337,  1338,  1339,  1333,     0,   881,  4371,
       0,  4371,  4371,     0,     0,     0,  1333,  2459,  1329,     0,
    4911,     0,  1329,     0,     0,   881,  4796,     0,     0,     0,
       0,     0,     0,     0,     0,  4919,  1334,     0,     0,  1335,
       0,  1329,     0,     0,     0,     0,  1334,     0,     0,  1335,
       0,     0,     0,     0,     0,     0,  4689,  1336,     0,  1330,
    4688,     0,     0,  1330,  1337,  1338,  1339,     0,     0,  5038,
       0,     0,     0,     0,   881,   881,   881,   881,  2463,     0,
       0,     0,  1330,     0,     0,   881,     0,     0,     0,     0,
       0,     0,     0,  4973,     0,     0,     0,  1329,     0,     0,
    1336,     0,   668,     0,     0,  3887,     0,  1337,  1338,  1339,
       0,     0,     0,     0,  1331,     0,     0,     0,  1331,  4987,
       0,  2475,     0,   881,     0,  1406,     0,  1332,  4878,     0,
       0,  1332,     0,     0,     0,  4371,  4371,  1331,  1330,  4371,
       0,     0,     0,     0,     0,     0,  1329,     0,  5101,     0,
    1332,     0,     0,     0,     0,  3110,     0,     0,     0,     0,
       0,     0,     0,     0,  1336,     0,   881,     0,     0,  4821,
       0,  1337,  1338,  1339,  1927,     0,     0,     0,     0,     0,
    4845,     0,   977,   977,     0,  2481,   977,  1330,  4918,     0,
     681,     0,     0,  1331,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1336,     0,  1332,  5131,     0,     0,
       0,  1337,  1338,  1339,     0,     0,     0,  1333,   977,     0,
       0,  1333,     0,     0,     0,  2484,     0,  4371,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1333,     0,  1331,     0,     0,     0,     0,  1334,     0,     0,
    1335,  1334,     0,     0,  1335,  1332,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1334,     0,  4986,  1335,     0,     0,   681,     0,     0,  3439,
    3439,  5180,     0,     0,     0,     0,     0,  5182,     0,  5193,
       0,     0,     0,     0,     0,     0,  1333,     0,     0,     0,
       0,     0,  1336,     0,     0,     0,     0,     0,     0,  1337,
    1338,  1339,  1336,     0,     0,     0,     0,     0,     0,  1337,
    1338,  1339,     0,  2488,     0,     0,  1334,     0,   681,  1335,
       0,     0,     0,  2489,     0,     0,  5031,  5032,  3887,     0,
       0,     0,     0,     0,     0,  1333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1334,     0,     0,  1335,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1927,     0,
     881,     0,   681,   881,   977,     0,     0,     0,   681,     0,
       0,     0,  1927,     0,     0,     0,     0,     0,  1927,     0,
    5092,  5093,     0,     0,  1927,     0,     0,     0,   881,   881,
       0,     0,     0,     0,     0,     0,     0,   881,   881,   881,
     881,   881,   881,   881,   881,   881,   881,   881,   881,  1327,
    1328,     0,     0,     0,     0,     0,     0,     0,   881,   881,
       0,   881,   881,     0,  1327,  1328,     0,   881,   881,   881,
       0,     0,   881,   881,   881,   881,   881,   881,     0,   881,
     881,   881,     0,     0,     0,     0,     0,     0,   881,   881,
       0,   881,   881,   881,   881,   881,     0,     0,   881,   881,
     881,   881,     0,   881,   881,   881,   881,     0,   881,   881,
     881,   881,   881,  1336,     0,   881,     0,  1336,   881,   881,
    1337,  1338,  1339,   881,  1337,  1338,  1339,   881,   881,   881,
       0,     0,     0,     0,  2491,     0,  1336,     0,  2492,   881,
     881,   881,     0,  1337,  1338,  1339,     0,     0,     0,   881,
       0,  1327,  1328,     0,   881,     0,     0,  2496,     0,     0,
       0,   881,     0,     0,     0,   881,   881,   881,   881,     0,
     881,   881,     0,     0,   881,   881,   881,   881,   881,   881,
     881,   881,   881,   881,   881,   881,  1327,  1328,   881,     0,
     881,     0,  1336,     0,     0,     0,     0,     0,     0,  1337,
    1338,  1339,  1329,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2514,     0,     0,     0,  1329,     0,     0,
    1327,  1328,  2853,     0,     0,     0,     0,     0,  2854,     0,
    2855,     0,  2856,     0,     0,  1327,  1328,     0,     0,  1327,
    1328,  1336,     0,  1330,  2857,     0,  2858,     0,  1337,  1338,
    1339,     0,     0,     0,     0,     0,     0,     0,  1330,     0,
       0,     0,  3524,     0,     0,  2045,  1327,  1328,     0,     0,
       0,     0,     0,     0,     0,   881,  2859,   881,     0,     0,
       0,  2860,  2861,     0,     0,     0,     0,  2862,     0,     0,
       0,     0,     0,   881,     0,     0,     0,     0,  1331,  2863,
       0,     0,     0,     0,  1329,     0,     0,  2864,     0,     0,
       0,  1332,     0,  1331,     0,     0,     0,  2865,     0,     0,
       0,     0,     0,     0,     0,     0,  1332,     0,  1327,  1328,
       0,     0,     0,     0,     0,  2866,     0,     0,     0,  1329,
       0,     0,     0,     0,     0,  1330,  1327,  1328,     0,  1708,
       0,     0,  2867,     0,     0,     0,     0,     0,     0,     0,
     881,     0,  2868,  2869,     0,     0,     0,     0,     0,     0,
    2870,     0,     0,  1329,     0,     0,     0,   881,  2871,     0,
    1330,     0, -1002,     0,  2872,     0,     0,     0,  1329,     0,
       0,     0,  1329,     0,  2873,     0,     0,     0,     0,     0,
    1331,  1333,     0,  1327,  1328,     0,     0,     0,     0,     0,
       0,     0,     0,  1332,  1330,     0,  1333,     0,  2874,  1329,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1330,
       0,  1334,     0,  1330,  1335,  1331,     0,     0,   881,     0,
       0,     0,     0,     0,     0,     0,  1334,     0,  1332,  1335,
       0,     0,     0,     0,     0,     0,   296,     0,   298,     0,
    1330,     0,  1327,  1328,  2875,     0,  2876,     0,     0,  1331,
       0,     0,     0,  2877,     0,     0,     0,     0,     0,     0,
       0,  1329,  1332,     0,  1331,     0,     0,     0,  1331,  2878,
       0,     0,     0,     0,     0,     0,     0,  1332,     0,  1329,
       0,  1332,     0,  1333,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2879,     0,  1331,     0,     0,     0,     0,
       0,     0,  1330,     0,     0,     0,     0,     0,  1332,     0,
       0,     0,     0,  1334,     0,     0,  1335,     0,  1333,     0,
    1330,     0,     0,     0,     0,     0,     0,  2880,  1327,  1328,
       0,     0,     0,     0,     0,     0,  1329,     0,     0,     0,
       0,     0,     0,  1327,  1328,     0,  2881,     0,  1334,     0,
    2882,  1335,  1333,     0,     0,     0,     0,  1331,     0,   977,
       0,     0,     0,     0,     0,     0,     0,  1333,     0,     0,
    1332,  1333,     0,     0,     0,  1331,     0,  1330,     0,     0,
       0,     0,  1334,     0,     0,  1335,     0,     0,  1332,     0,
       0,  2883,     0,     0,     0,  1329,  2884,  1334,  1333,   881,
    1335,  1334,     0,     0,  1335,  2885,     0,  2886,     0,     0,
       0,     0,  2887,     0,     0,  2888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1334,     0,
       0,  1335,  1331,     0,     0,     0,  1330,     0,     0,     0,
       0,     0,     0,     0,     0,  1332,     0,     0,     0,     0,
    2889,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1333,     0,     0,     0,     0,  2890,  2891,  2892,  2893,     0,
       0,     0,     0,     0,     0,     0,     0,  1336,  1333,     0,
       0,  1329,     0,     0,  1337,  1338,  1339,     0,     0,     0,
    1334,  1331,  1336,  1335,  2894,     0,  1329,     0,  3525,  1337,
    1338,  1339,     0,     0,  1332,     0,     0,     0,  1334,     0,
       0,  1335,     0,  3538,     0,     0,     0,     0,     0,     0,
       0,     0,  1330,     0,   881,   881,   881,     0,     0,     0,
    4879,     0,     0,     0,     0,  1333,     0,  1330,     0,   881,
    1327,  1328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2895,  2896,  2897,     0,     0,  1327,  1328,  2898,     0,
     881,     0,     0,   881,   881,  1334,   881,   881,  1335,     0,
       0,     0,     0,     0,   881,  2899,   881,  1331,  2900,  1336,
       0,     0,     0,  1327,  1328,     0,  1337,  1338,  1339,     0,
    1332,     0,  1331,     0,  1333,     0,     0,     0,  2901,     0,
    3548,     0,     0,  2902,     0,  1332,   881,  1327,  1328,     0,
       0,     0,     0,     0,  1336,  1406,     0,  2903,     0,     0,
       0,  1337,  1338,  1339,  1334,  1327,  1328,  1335,     0,     0,
       0,     0,     0,     0,     0,  3549,  4949,  4950,     0,     0,
    4953,  4954,  4955,  4956,     0,     0,     0,     0,  1336,     0,
       0,     0,     0,     0,     0,  1337,  1338,  1339,     0,     0,
       0,     0,   881,  1336,  1327,  1328,     0,  1336,     0,  4276,
    1337,  1338,  1339,     0,  1337,  1338,  1339,     0,     0,     0,
    1333,     0,     0,     0,  4998,     0, -1002,  2421,   881,     0,
    1327,  1328,     0,  1329,  1336,  1333,     0,   881,     0,     0,
       0,  1337,  1338,  1339,     0,     0,     0,     0,     0,  1329,
    1334,     0,     0,  1335,  2425,     0,     0,     0,     0,     0,
     881,     0,     0,     0,     0,  1334,     0,     0,  1335,     0,
       0,     0,     0,     0,  1330,     0,  1329,     0,     0,  5033,
    5034,   881,     0,     0,     0,     0,     0,     0,  5042,   881,
    1330,     0,     0,  1327,  1328,     0,  1336,     0,   881,     0,
    1329,     0,     0,  1337,  1338,  1339,     0,     0,     0,     0,
       0,     0,     0,     0,  1336,     0,  2427,  1330,  1329,     0,
       0,  1337,  1338,  1339,     0,     0,     0,     0,     0,  1331,
       0,     0,     0,     0,  2442,     0,     0,     0,     0,     0,
       0,  1330,  1332,     0,     0,  1331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1329,  1332,  1330,
       0,     0,     0,     0,     0,  1327,  1328,   977,     0,     0,
       0,  1336,  1331,     0,     0,     0,     0,     0,  1337,  1338,
    1339,     0,     0,  1329,     0,  1332,     0,     0,     0,     0,
       0,  2443,     0,     0,     0,     0,  1331,     0,  1330,     0,
       0,     0,     0,     0,     0,  1327,  1328,     0,     0,  1332,
       0,     0,     0,     0,  1331,     0,   881,     0,     0,     0,
       0,     0,     0,     0,  1330,     0,     0,  1332,     0,     0,
    1336,     0,  1333,     0,  1327,  1328,     0,  1337,  1338,  1339,
       0,     0,     0,     0,  1327,  1328,  1329,     0,  1333,     0,
    2447,     0,     0,  1331,     0,     0,     0,     0,     0,     0,
       0,     0,  1334,     0,     0,  1335,  1332,     0,  2919,     0,
       0,     0,     0,     0,     0,  1333,     0,     0,  1334,  1331,
       0,  1335,     0,     0,     0,     0,     0,  1330,     0,     0,
     881,     0,  1332,     0,     0,     0,     0,  1327,  1328,  1333,
       0,     0,     0,     0,     0,  1334,     0,     0,  1335,     0,
       0,     0,     0,     0,     0,     0,  1336,  1333,  1329,     0,
       0,  1327,  1328,  1337,  1338,  1339,     0,     0,     0,  1334,
       0,  1336,  1335,     0,     0,     0,  2456,     0,  1337,  1338,
    1339,     0,  1331,     0,     0,     0,     0,  1334,     0,     0,
    1335,  2461,     0,   881,     0,  1332,  1333,   881,  1329,  1330,
       0,     0,   881,   881,     0,     0,     0,     0,     0,  1327,
    1328,   881,     0,   881,     0,   881,   881,   881,   881,     0,
       0,   881,  1333,     0,     0,     0,  1334,  1329,     0,  1335,
       0,   881,     0,   881,     0,   881,   881,  1329,   881,  1330,
     881,     0,   881,   881,   881,   881,     0,   881,   881,     0,
       0,   881,  1334,     0,  1331,  1335,     0,     0,     0,     0,
     881,     0,     0,     0,     0,     0,   881,  1332,  1330,   881,
       0,   881,     0,   881,   881,     0,   881,   881,  1330,     0,
       0,   881,   881,   881,     0,  1333,     0,   881,   881,   881,
    1329,   881,     0,   881,  1331,   881,     0,   881,     0,   881,
       0,     0,     0,     0,   881,     0,     0,  1332,     0,     0,
       0,     0,     0,     0,  1329,  1334,     0,     0,  1335,     0,
     881,     0,     0,  1331,     0,     0,   881,     0,     0,   881,
       0,  1330,   881,  1331,  1327,  1328,  1332,     0,   881,     0,
       0,     0,   881,     0,     0,     0,  1332,     0,     0,     0,
       0,  1327,  1328,     0,     0,  1330,     0,  1333,     0,     0,
       0,     0,  1329,     0,     0,     0,     0,     0,  1336,     0,
       0,     0,     0,     0,     0,  1337,  1338,  1339,     0,     0,
       0,     0,     0,     0,  1336,     0,  1331,  1334,  2471,     0,
    1335,  1337,  1338,  1339,     0,     0,     0,  1333,   977,  1332,
       0,     0,     0,  1330,  2472,     0,     0,     0,     0,     0,
    1331,  1336,     0,     0,     0,   977,   977,   881,  1337,  1338,
    1339,     0,     0,  1332,     0,     0,  1333,  1334,     0,     0,
    1335,  2476,     0,     0,     0,  1336,  1333,     0,     0,     0,
       0,     0,  1337,  1338,  1339,     0,     0,     0,     0,     0,
       0,     0,     0,  1336,     0,  2480,  1334,     0,  1331,  1335,
    1337,  1338,  1339,     0,     0,     0,  1334,     0,     0,  1335,
       0,  1332,     0,  2482,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1329,     0,  1333,
       0,     0,  1336,     0,     0,     0,     0,     0,     0,  1337,
    1338,  1339,     0,     0,  1329,     0,     0,     0,     0,     0,
       0,     0,  2483,  1333,     0,   981,     0,     0,  1336,  1334,
       0,     0,  1335,     0,     0,  1337,  1338,  1339,  1330,     0,
       0,     0,     0,   977,     0,     0,     0,     0,  2487,     0,
       0,     0,     0,  1334,     0,  1330,  1335,     0,     0,     0,
    1093,     0,     0,     0,     0,     0,     0,     0,  2919,     0,
       0,  1333,     0,     0,     0,     0,     0,   881,     0,     0,
       0,     0,     0,     0,   881,     0,     0,     0,     0,     0,
       0,  1336,     0,  1331,     0,  1327,  1328,     0,  1337,  1338,
    1339,  1334,     0,     0,  1335,     0,  1332,     0,     0,     0,
    1331,  2490,  3306,     0,     0,     0,     0,     0,     0,     0,
    1327,  1328,     0,  1332,  3306,  3306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1181,  1327,  1328,     0,
       0,  1327,  1328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1327,  1328,     0,     0,     0,
       0,     0,     0,  1336,     0,  1210,     0,     0,     0,     0,
    1337,  1338,  1339,     0,     0,     0,     0,     0,     0,  1327,
    1328,     0,     0,  2493,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1333,     0,     0,     0,
       0,  2919,     0,  1336,     0,     0,  1327,  1328,  1253,     0,
    1337,  1338,  1339,  1333,     0,     0,     0,     0,     0,     0,
       0,     0,   977,  2505,     0,  1271,  1334,   977,   881,  1335,
       0,     0,  1336,     0,     0,     0,     0,     0,     0,  1337,
    1338,  1339,  1336,  1334,     0,     0,  1335,     0,  1329,  1337,
    1338,  1339,  2524,     0,     0,     0,     0,     0,  3306,  3306,
       0,     0,  3484,     0,     0,     0,     0,     0,     0,     0,
       0,  1327,  1328,  1329,     0,     0,     0,  1321,     0,     0,
       0,  1327,  1328,   881,     0,     0,     0,   881,     0,  1330,
    1329,     0,     0,     0,  1329,  1336,     0,     0,     0,     0,
       0,     0,  1337,  1338,  1339,     0,     0,     0,  1329,     0,
       0,     0,     0,     0,  1330,  3510,   881,   881,     0,  1336,
       0,     0,     0,  1385,     0,     0,  1337,  1338,  1339,     0,
       0,  1330,  1329,     0,     0,  1330,     0,     0,     0,  3516,
       0,   881,     0,     0,  1331,     0,     0,     0,     0,  1330,
     881,     0,   881,     0,   881,     0,     0,  1332,     0,  1329,
       0,     0,  1327,  1328,     0,     0,  1445,  1336,     0,  1331,
       0,     0,     0,  1330,  1337,  1338,  1339,     0,     0,     0,
       0,     0,  1332,     0,     0,   881,  1331,  3519,   881,     0,
    1331,   881,     0,     0,     0,     0,     0,     0,     0,  1332,
    1330,     0,     0,  1332,  1331,     0,     0,     0,   881,     0,
       0,     0,     0,     0,     0,     0,     0,  1332,     0,     0,
       0,     0,  1327,  1328,  1329,     0,     0,   977,  1331,     0,
       0,     0,  1327,  1328,  1329,     0,     0,   977,   977,   977,
     977,  1332,   881,     0,     0,     0,     0,  1333,     0,     0,
       0,     0,     0,     0,     0,  1331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1330,     0,     0,  1332,     0,
       0,     0,  1333,     0,     0,  1330,     0,  1334,     0,     0,
    1335,     0,     0,     0,     0,     0,     0,   881,     0,  1333,
       0,     0,  1336,  1333,     0,     0,  1327,  1328,     0,  1337,
    1338,  1339,  1334,     0,     0,  1335,     0,  1333,     0,  1336,
       0,     0,  3522,     0,     0,  1329,  1337,  1338,  1339,  1334,
    1331,     0,  1335,  1334,     0,     0,  1335,     0,     0,  3523,
    1331,  1333,     0,  1332,     0,     0,     0,  1334,     0,     0,
    1335,     0,     0,  1332,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1330,     0,  1333,     0,
       0,  1334,     0,     0,  1335,     0,  2919,     0,     0,     0,
       0,     0,     0,     0,     0,  1329,     0,     0,   881,     0,
       0,     0,     0,     0,     0,  1329,     0,     0,  1334,     0,
       0,  1335,     0,  1327,  1328,     0,     0,     0,     0,     0,
    1752,     0,     0,  1753,     0,     0,     0,  1327,  1328,     0,
       0,  1331,     0,     0,     0,     0,  1330,     0,     0,     0,
       0,     0,     0,  1333,  1332,     0,  1330,     0,  1785,  1786,
    1327,  1328,     0,  1333,     0,     0,     0,  1796,  1797,     0,
       0,  1800,  1801,  1802,  1803,  1806,  1807,  1808,  1809,  1329,
       0,     0,     0,  1334,     0,     0,  1335,     0,  1826,  1827,
       0,  1828,  1829,  1334,     0,     0,  1335,  1855,  1856,     0,
       0,  1331,  1865,  1866,  1867,  1868,  1869,  1870,     0,  1872,
    1874,  1331,     0,     0,  1332,     0,     0,     0,  1882,  1883,
    1330,  1886,  1887,     0,  1332,     0,     0,     0,  1891,  1892,
    1893,  1894,  2919,  1896,     0,     0,  1899,     0,  1901,  1902,
    1903,  1904,  1905,     0,  1333,  1908,     0,     0,  1911,  1912,
       0,     0,     0,  1915,     0,     0,     0,  1918,  1922,  1923,
       0,     0,     0,     0,     0,   977,     0,     0,     0,  1930,
    1931,  1932,     0,  1336,  1334,  1331,  1329,  1335,     0,  1936,
    1337,  1338,  1339,     0,  1327,  1328,     0,     0,  1332,     0,
    1329,  1947,     0,  3528,     0,  1948,  1949,     0,  1336,     0,
    3306,     0,  1327,  1328,  1333,  1337,  1338,  1339,     0,     0,
       0,   881,     0,  1329,  1333,  1336,     0,  1330,  3529,  1336,
    1983,     0,  1337,  1338,  1339,     0,  1337,  1338,  1339,     0,
       0,  1330,     0,  1336,  1334,  3533,     0,  1335,     0,  3534,
    1337,  1338,  1339,   881,  1334,     0,     0,  1335,     0,   881,
     881,     0,   881,  3535,  1330,     0,     0,  1336,     0,     0,
       0,     0,     0,   881,  1337,  1338,  1339,     0,   881,     0,
       0,   881,  1331,   881,   881,  1327,  1328,  3536,  1333,     0,
       0,     0,     0,     0,  1336,  1332,  1331,     0,     0,     0,
       0,  1337,  1338,  1339,     0,     0,     0,     0,     0,  1332,
       0,  1327,  1328,     0,  3537,  2059,     0,  2059,  1334,  1331,
       0,  1335,     0,     0,   881,     0,     0,     0,  1327,  1328,
       0,     0,  1332,  2070,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1336,
     881,     0,     0,     0,     0,  1329,  1337,  1338,  1339,  1336,
       0,  1327,  1328,     0,     0,     0,  1337,  1338,  1339,  3539,
       0,     0,     0,     0,     0,  1333,     0,     0,  1330,  3542,
       0,     0,  1327,  1328,     0,     0,   881,     0,     0,  1333,
    2120,     0,     0,     0,     0,     0,  1330,     0,     0,  1327,
    1328,     0,     0,  1327,  1328,  1334,     0,  2147,  1335,     0,
       0,     0,  1333,     0,     0,     0,     0,     0,     0,  1334,
       0,     0,  1335,     0,     0,     0,  1327,  1328,  1329,     0,
       0,     0,     0,  1331,     0,     0,   881,     0,     0,     0,
    1336,     0,  1334,     0,     0,  1335,  1332,  1337,  1338,  1339,
       0,  1331,  1327,  1328,  1329,     0,     0,     0,     0,     0,
    3547,     0,     0,     0,  1332,     0,     0,  2919,  2199,  1330,
       0,  1329,   881,     0,     0,     0,     0,     0,     0,     0,
     881,     0,     0,  1327,  1328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1330,     0,     0,     0,     0,
    1336,  1327,  1328,     0,  2420,     0,     0,  1337,  1338,  1339,
    1336,     0,  1330,     0,  1329,     0,     0,  1337,  1338,  1339,
    3550,     0,     0,     0,  1331,     0,     0,     0,     0,     0,
    3552,     0,     0,     0,     0,  1329,  1333,  1332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1331,     0,  1329,     0,  1333,  1330,  1329,     0,     0,     0,
       0,     0,     0,  1332,     0,     0,  1334,  1331,     0,  1335,
       0,     0,     0,     0,  1336,     0,  1330,     0,     0,  1329,
    1332,  1337,  1338,  1339,  1334,     0,     0,  1335,     0,     0,
       0,     0,     0,  1330,  3554,     0,     0,  1330,     0,     0,
       0,     0,     0,     0,     0,  1329,     0,     0,     0,     0,
    1331,     0,     0,     0,   881,   881,     0,     0,     0,     0,
    1330,     0,     0,  1332,     0,     0,     0,  1333,     0,     0,
       0,  1331,     0,     0,     0,     0,  1329,     0,     0,     0,
       0,     0,     0,     0,  1332,     0,  1330,     0,  1331,  2416,
       0,     0,  1331,  1333,  1329,     0,     0,  1334,     0,     0,
    1335,  1332,     0,     0,     0,  1332,     0,     0,     0,     0,
    1333,  1336,     0,     0,     0,  1331,     0,  1330,  1337,  1338,
    1339,   881,     0,  1334,     0,  1336,  1335,     0,  1332,     0,
       0,  3556,  1337,  1338,  1339,  1330,     0,     0,     0,     0,
    1334,  1331,     0,  1335,     0,  3557,     0,     0,  1336,     0,
       0,     0,     0,  1333,  1332,  1337,  1338,  1339,   881,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3558,     0,
       0,     0,  1331,   977,  1333,     0,     0,     0,     0,     0,
       0,     0,     0,  1334,     0,  1332,  1335,     0,     0,     0,
    1331,  1333,     0,   881,     0,  1333,     0,     0,     0,     0,
       0,     0,     0,  1332,  1334,     0,     0,  1335,     0,     0,
       0,     0,     0,     0,  2507,  2509,  2511,     0,  1333,     0,
       0,  1334,  1327,  1328,  1335,  1334,     0,     0,  1335,   881,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1333,     0,     0,     0,  1334,     0,
    2542,  1335,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   881,     0,     0,  2550,     0,  2551,   881,     0,     0,
       0,     0,  1336,     0,  1334,  1333,     0,  1335,     0,  1337,
    1338,  1339,  1327,  1328,     0,     0,   881,     0,     0,     0,
    1336,     0,  3973,  1333,     0,     0,  2574,  1337,  1338,  1339,
       0,     0,     0,     0,     0,  1334,     0,     0,  1335,     0,
    3974,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1334,     0,     0,  1335,     0,     0,     0,
       0,     0,     0,  1327,  1328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1327,  1328,     0,     0,     0,     0,
       0,     0,  2615,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1336,  1327,  1328,     0,     0,     0,     0,
    1337,  1338,  1339,     0,     0,  1329,     0,     0,  2643,  1327,
    1328,     0,     0,  3975,     0,     0,     0,  2656,     0,  1336,
       0,     0,     0,     0,     0,     0,  1337,  1338,  1339,     0,
       0,     0,   977,     0,     0,     0,  1336,     0,     0,  4270,
    2147,     0,     0,  1337,  1338,  1339,  1330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4275,     0,     0,     0,
       0,  2704,     0,  1327,  1328,  1329,     0,     0,     0,     0,
       0,   881,     0,     0,     0,     0,     0,     0,  2713,  1336,
       0,  1833,  1834,  1835,  1836,  1837,  1337,  1338,  1339,   881,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4281,
    1336,  1331,  3055,     0,   881,   977,  1330,  1337,  1338,  1339,
    3158,     0,     0,     0,  1332,     0,  1329,  1336,     0,     0,
    4283,  1336,     0,     0,  1337,  1338,  1339,  1329,  1337,  1338,
    1339,     0,     0,     0,     0,     0,     0,  4284,     0,     0,
       0,  4285,     0,     0,  1336,     0,     0,  1329,     0,     0,
       0,  1337,  1338,  1339,     0,     0,     0,  1330,     0,     0,
       0,  1331,  1329,     0,  4286,     0,     0,     0,  1330,     0,
    1336,  2919,     0,     0,  1332,     0,     0,  1337,  1338,  1339,
       0,     0,     0,     0,  3057,     0,     0,     0,  1330,     0,
    4600,     0,  1838,  1839,  1840,  1841,  2795,     0,     0,  3059,
       0,  1336,     0,  1330,  1333,   881,     0,     0,  1337,  1338,
    1339,     0,  1331,     0,     0,     0,  1329,     0,     0,  1336,
       0,  4698,     0,  1331,     0,  1332,  1337,  1338,  1339,     0,
       0,     0,     0,     0,  1334,     0,  1332,  1335,     0,     0,
       0,     0,     0,  1331,  4648,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4648,     0,  1332,  1330,  1331,     0,
       0,     0,     0,     0,  1333,     0,     0,     0,     0,     0,
    2931,  1332,     0,     0,     0,     0,     0,  -718,     0,   881,
       0,     0,     0,     0,     0,  4652,   977,     0,     0,     0,
       0,     0,     0,     0,  1334,     0,     0,  1335,     0,     0,
       0,   881,  1842,     0,  1843,  1844,  1845,     0,     0,     0,
       0,     0,  1331,  1846,     0,  1333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1332,  1333,     0,     0,     0,
    4653,     0,     0,  2989,     0,     0,     0,  2991,     0,   881,
    4639,   881,  2993,  2994,     0,  1334,  1333,     0,  1335,     0,
       0,  1803,     0,  3012,     0,  1803,  1334,  3015,  3016,  1335,
       0,  1333,  4748,     0,  1327,  1328,  4748,  3506,     0,     0,
       0,  3023,     0,  3024,     0,  3025,  1334,     0,  3027,  1335,
    3028,     0,  3029,  3030,  3031,  3032,     0,  3033,  3034,     0,
    4654,  1334,     0,     0,  1335,     0,  1327,  1328,  1388,  3509,
    3038,  1847,     0,     0,     0,     0,  3039,   881,     0,  3040,
       0,  3041,     0,  3042,  3043,  1333,  3044,     0,     0,     0,
       0,  3047,  3048,  3049,     0,  2992,     0,  3051,  3052,  3053,
       0,  3054,     0,  3056,     0,  3058,     0,  3060,  4648,  3061,
       0,     0,     0,     0,  3062,  1334,     0,     0,  1335,   881,
       0,     0,     0,     0,     0,     0,     0,  4648,     0,     0,
    3086,  1848,  1849,     0,     0,     0,     0,     0,     0,     0,
    4655,     0,  3094,   977,     0,     0,     0,     0,  3101,   977,
       0,  2857,     0,  2858,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   296,     0,   298,
    1336,     0,     0,  1389,     0,     0,     0,  1337,  1338,  1339,
     881,     0,  1388,     0,     0,  -859,  -859,  1329,  2860,     0,
       0,     0,     0,     0,     0,     0,  -859,     0,     0,  1390,
       0,  -892,  1391,     0,     0,  4748,  2863,     0,     0,     0,
    4748,     0,     0,     0,  2864,     0,     0,  4748,     0,  1329,
       0,     0,     0,     0,     0,     0,     0,  1093,  1330,     0,
    1336,     0,     0,     0,     0,     0,     0,  1337,  1338,  1339,
       0,     0,  2866,  1392,   881,     0,     0,  1327,  1328,     0,
       0,     0,     0,     0,     0,     0,  1708,     0,     0,  2867,
    1330,     0,     0,     0,     0,  1393,     0,     0,     0,     0,
       0,   296,     0,   298,     0,     0,     0,  1850,     0,   881,
       0,  1336,     0,  1331,     0,     0,     0,  1389,  1337,  1338,
    1339,  2872,  1336,  1851,  1852,     0,  1332,     0,     0,  1337,
    1338,  1339,   153,   154,     0,     0,  3486,     0,     0,  4656,
       0,     0,  1336,  1390,     0,  1331,  1391,  4657,     0,  1337,
    1338,  1339,     0,     0,     0,     0,     0,  1336,  1332,     0,
    1394,     0,     0,     0,  1337,  1338,  1339,     0,     0,  4748,
       0,     0,     0,     0,     0,  4981,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1395,     0,  1392,     0,     0,
       0,     0,  4640,   296,     0,   298,     0,     0,     0,     0,
       0,     0,     0,  2876,     0,     0,     0,  3275,     0,  1393,
    2877,  1336,     0,     0,  3282,   296,  1333,   298,  1337,  1338,
    1339,     0,     0,     0,     0,     0,  2878,   881,     0,     0,
    1329,     0,     0,     0,     0,     0,   881,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1334,     0,  1333,  1335,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   977,  4658,     0,
       0,  1330,     0,     0,  1394,     0,     0,     0,  1334,     0,
       0,  1335,     0,     0,  2880,     0,     0,     0,     0,  4748,
       0,  4748,  4748,   881,     0,     0,     0,  1396,     0,  1395,
       0,     0,     0,  2881,     0,     0,  1397,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1398,     0,     0,  1331,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1332,
       0,  1399,     0,     0,     0,     0,     0,     0,  4748,     0,
       0,  4748,     0,     0,     0,     0,     0,     0,  3441,     0,
       0,     0,  2885,     0,  2886,     0,     0,     0,     0,     0,
       0,     0,  2888,     0,     0,     0,     0,     0,     0,  4641,
       0,     0,     0,   881,     0,     0,  1400,     0,     0,  1401,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4748,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1396,     0,  3483,     0,     0,     0,  3485,     0,  1402,
    1397,     0,     0,     0,     0,     0,     0,     0,     0,  1333,
     977,     0,     0,     0,     0,     0,     0,  1398,     0,   552,
       0,     0,   553,   881,     0,     0,  3514,  3515,     0,     0,
       0,  2894,     0,     0,     0,  1399,     0,     0,     0,  1334,
       0,     0,  1335,     0,     0,     0,     0,     0,     0,     0,
       0,  3541,     0,     0,     0,     0,   977,     0,     0,     0,
    3551,     0,  3553,     0,  3555,     0,     0,     0,   881,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1400,     0,     0,  1401,     0,     0,     0,     0,  2895,  2896,
    2897,     0,  1336,     0,     0,  2898,     0,     0,     0,  1337,
    1338,  1339,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2899,  1402,     0,  2900,     0,     0,  2574,     0,
       0,     0,     0,     0,  1336,     0,     0,     0,     0,     0,
       0,  1337,  1338,  1339,     0,  2901,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2903,     0,     0,     0,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,     0,     0,   954,     0,     0,
       0,     0,     0,     0,     0,   182,     0,  2147,   183,   184,
     185,     0,   186,     0,     0,     0,     0,     0,   189,     7,
       0,   190,   191,     0,   192,     0,     0,     0,     0,  3742,
     196,   197,   198,   955,   200,   201,     0,   202,   203,     0,
       0,     0,     0,     0,     0,   209,     0,   211,     0,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
       0,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,     0,     0,     0,     0,     0,   236,  3275,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,  1336,     0,     0,     0,   245,
     246,   247,  1337,  1338,  1339,   248,     0,     0,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,     0,     0,     0,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,   956,   270,     0,   271,   272,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
       0,   286,     0,   287,     0,     0,     0,     0,     0,   289,
     290,     0,     0,     0,     0,     0,     0,   293,     0,     0,
       0,   294,   295,   296,   297,   298,    26,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,     0,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,   957,     0,   311,     0,   312,     0,     0,     0,
     314,   315,     0,     0,   316,   958,     0,   317,   318,     0,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,    32,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,  3925,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,  3955,   374,   375,   376,   377,     0,  3959,
    3960,     0,   379,     0,     0,   903,     0,   380,     0,     0,
     381,   382,   383,  3967,   384,   385,   386,   959,  3969,     0,
       0,  3970,     0,  3971,  3972,     0,     0,     0,     0,     0,
       0,     0,   392,   393,     0,     0,     0,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
       0,     0,     0,     0,     0,     0,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,     0,     0,   433,   904,   435,    41,     0,   436,
    2574,     0,     0,   438,     0,     0,   440,   441,     0,   442,
     960,   443,     0,     0,   444,     0,   446,   447,   448,     0,
     449,   450,     0,   451,     0,   453,   454,     0,   455,   906,
       0,     0,     0,   457,   458,   459,  2574,     0,     0,     0,
     461,     0,     0,     0,     0,   907,     0,   464,     0,     0,
     467,   468,     0,   469,     0,   471,     0,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,  2036,   477,     0,
       0,   478,  2037,  2351,     0,   479,     0,   481,     0,     0,
       0,   482,     0,     0,  2038,   484,  2574,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     911,   502,   503,     0,     0,   505,   506,   507,   508,     0,
       0,  2857,  3275,  2858,   509,   510,   511,     0,     0,     0,
    4105,   513,   514,   515,     0,     0,   517,   518,     0,   519,
     520,   912,     0,     0,     0,     0,   523,   913,     0,   524,
       0,     0,     0,   526,   527,  -859,  -859,     0,  2860,     0,
       0,   528,     0,     0,   529,  2352,  -859,  2353,   530,   531,
     532,   533,   534,   535,   536,     0,  2863,     0,    59,     0,
       0,     0,   538,     0,  2864,   540,     0,   542,   914,     0,
     543,     0,     0,     0,     0,  1833,  1834,  1835,  1836,  1837,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4822,
       0,     0,  2866,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1708,  2354,  2355,  2867,
    2356,  2357,  2358,  2359,  2360,     0,  2361,  2362,  2363,  2364,
    2365,  2366,  2367,  2368,  2369,     0,  2370,  2371,  2372,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2872,     0,     0,  4220,  4221,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1838,  1839,  1840,  1841,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,  2039,
       0,  3275,     0,   296,     0,   298,     0,     0,     3,     0,
       0,     0,     4,  2876,  2857,     0,  2858,     0,     0,     0,
    2877,   917,     0,     0,     0,     0,     5,     6,     0,  2040,
       7,     0,     0,     0,     8,     0,  2878,  2041,  3275,     9,
      10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3265,  2860,     0,     0,     0,  2373,  2374,     0,     0,    11,
       0,     0,     0,     0,     0,     0,     0,     0,   920,  2863,
       0,     0,     0,  2574,     0,     0,     0,  2864,    12,     0,
       0,   921,  2042,     0,     0,     0,  1842,     0,  1843,  1844,
    1845,     0,     0,     0,  2880,     0,     0,  1846,     0,     0,
       0,     0,     0,    13,     0,  2866,     0,     0,     0,  4345,
       0,     0,    14,  2881,    15,    16,     0,     0,     0,  1708,
       0,     0,  2867,     0,     0,     0,     0,    17,    18,     0,
       0,     0,  4516,     0,  2043,     0,   736,     0,     0,     0,
      19,  4383,     0,     0,     0,     0,     0,  3275,     0,     0,
       0,     0,     0,     0,  2872,    20,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   924,  4399,     0,     0,  4160,
    4161,     0,  2885,    21,  2886,  4162,     0,  4163,     0,  4164,
    4165,     0,  2888,     0,     0,  1847,     0,     0,   925,     0,
     926,    22,     0,    23,     0,     0,  3933,     0,     0,    24,
       0,     0,     0,    25,     0,     0,  4517,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,     0,     0,
    4518,     0,     0,     0,     0,     0,   296,   764,   298,     0,
      27,     0,    28,     0,     0,     0,  2876,     0,     0,     0,
       0,     0,     0,  2877,     0,  1848,  1849,     0,     0,    29,
       0,     0,     0,  4166,     0,     0,  4167,     0,     0,  2878,
       0,  2894,     0,     0,  4168,     0,     0,    30,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,     0,  4169,     0,   769,     0,     0,     0,
       0,     0,     0,     0,   771,     0,     0,     0,     0,     0,
       0,     0,  4170,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2880,  2895,  2896,
    2897,  4508,     0,     0,     0,  2898,     0,   778,   779,  4171,
       0,  4172,     0,     0,     0,     0,  2881,     0,     0,  3275,
       0,     0,  2899,     0,     0,  2900,     0,  4173,  4174,     0,
       0,     0,     0,     0,  2574,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2901,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2903,     0,     0,     0,    34,     0,
      35,  1850,     0,     0,  4175,  2885,     0,  2886,     0,   787,
       0,     0,     0,     0,  4176,  2888,    36,  1851,  1852,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,  4177,     0,     0,     0,     0,     0,
       0,     0,     0,  4178,  4179,     0,  4180,     0,     0,     0,
       0,    38,     0,     0,    39,     0,    40,  3266,    41,    42,
       0,     0,    43,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,   798,     0,    46,     0,     0,     0,
       0,  4181,  4182,  4183,     0,    47,     0,     0,     0,   803,
     804,     0,     0,     0,  2894,     0,     0,     0,     0,    48,
    4184,  4185,  4186,     0,    49,    50,    51,     0,  4187,     0,
       0,  4188,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4189,     0,
    4190,     0,     0,     0,     0,     0,     0,    52,     0,  4690,
       0,     0,     0,     0,     0,    53,     0,     0,     0,     0,
       0,  2895,  2896,  2897,     0,     0,     0,     0,  2898,     0,
       0,  3275,     0,     0,     0,     0,     0,     0,  4191,  4192,
       0,     0,     0,     0,     0,  2899,     0,     0,  2900,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    54,     0,     0,     0,     0,  4193,     0,  2901,  4724,
       0,  4726,     0,     0,    55,     0,     0,     0,    56,     0,
       0,    57,     0,     0,     0,     0,    58,  2903,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    59,
      60,     0,     0,     0,     0,     0,     0,    61,     0,     0,
       0,     0,     0,    62,  4194,     0,     0,     0,  4195,     0,
       0,     0,     0,     0,     0,     0,     0,  1321,     0,     0,
       0,     0,  4196,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   829,     0,     0,     0,     0,  4519,
       0,     0,  4520,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   835,     0,     0,     0,     0,   837,  4521,
       0,     0,   838,     0,     0,     0,     0,     0,     0,     0,
       0,  4197,     0,     0,     0,  4198,     0,     0,  4199,  4200,
    4201,  4202,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4203,  4204,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4205,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4908,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   161,     0,   162,   732,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   733,  4931,
     171,   172,   173,   174,   175,   176,   177,   734,   179,     0,
     180,     0,     0,   735,   181,   736,   737,   738,   182,   739,
       0,   183,   184,   185,  1919,   186,     0,   187,   188,     0,
       0,   189,   740,   741,   190,   191,     0,   192,   742,   743,
     194,   195,     0,   196,   197,   198,   199,   744,   201,     0,
     745,   203,   746,   747,   748,   749,   750,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   751,   223,     0,   224,   752,   753,   225,
       0,     0,   226,   754,   755,   227,   756,   757,   228,     0,
     229,   758,   759,     0,   230,   231,   232,   760,   761,   762,
       0,     0,     0,     0,   763,   235,   764,     0,     0,   765,
     236,     0,   237,     0,     0,   766,     0,  5019,   238,     0,
     239,   240,   241,   242,   243,     0,  2574,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,   767,     0,
     264,   265,   266,   267,   768,   769,   268,   269,     0,   270,
     770,   271,   272,   771,     0,   273,   274,   275,     0,     0,
       0,   772,   277,  5059,   278,     0,   279,     0,   280,   281,
     773,   283,   774,   285,   286,     0,   287,     0,   775,   776,
     777,   288,   289,   290,     0,   291,   778,   779,     0,   292,
     293,     0,     0,     0,   780,   295,   296,   297,   298,   781,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,   782,   304,   305,   783,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   784,     0,  1920,   316,     0,   785,
     317,   318,     0,     0,     0,     0,     0,   786,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,   787,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   788,   346,   347,   348,   349,   789,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   790,   358,     0,     0,   791,   360,   792,   361,     0,
     362,   793,   794,   795,   796,   797,   367,   368,   369,   370,
     371,   372,     0,   798,   373,     0,     0,   374,   375,   376,
     377,   799,   800,   801,   378,   379,     0,   802,   803,   804,
     380,     0,   805,   381,   382,   806,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,  2574,   390,
       0,     0,     0,     0,   391,   392,   393,     0,   807,   394,
       0,   395,     0,   396,   397,   808,   809,   399,   400,   401,
     402,   810,   811,   405,   812,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     813,   418,   419,     0,   814,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
     815,   816,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   817,     0,   818,   444,   445,   446,
     447,   819,     0,   820,   450,   821,   451,   452,   453,   454,
       0,   822,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   823,   824,   483,   484,   485,
       0,   486,   487,   825,   489,   490,   491,   826,   827,   492,
     493,   494,   495,   828,   496,   497,     0,     0,   498,   499,
     500,   501,     0,   829,   502,   503,     0,   504,   830,   831,
     832,   833,     0,     0,     0,     0,  1921,   509,   510,   511,
       0,   834,   835,   836,   513,   514,   515,   837,   516,   517,
     518,   838,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   839,   527,     0,     0,
     840,   841,   842,   843,   528,     0,     0,   529,   844,     0,
     845,   530,   531,   532,   533,   534,   846,   847,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,     0,   848,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   849,   850,     0,     0,     0,     0,   851,
     852,     0,     0,   853,   854,     0,     0,   855,   856,   161,
       0,   162,   732,   164,   165,   166,   167,  2143,     0,   168,
       0,     0,     0,   169,     0,     0,   733,     0,   171,   172,
     173,   174,   175,   176,   177,   734,   179,     0,   180,     0,
       0,  2144,   181,   736,   737,   738,   182,   739,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
     740,   741,   190,   191,     0,   192,   742,   743,   194,   195,
       0,   196,   197,   198,   199,   744,   201,     0,   745,   203,
     746,   747,   748,   749,   750,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   751,   223,     0,   224,   752,   753,   225,     0,     0,
     226,   754,   755,   227,   756,   757,   228,     0,   229,   758,
     759,     0,   230,   231,   232,   760,   761,   762,     0,     0,
       0,     0,   763,   235,   764,     0,     0,  2145,   236,     0,
     237,     0,     0,   766,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,   767,     0,   264,   265,
     266,   267,   768,   769,   268,   269,     0,   270,   770,   271,
     272,   771,     0,   273,   274,   275,     0,     0,     0,   772,
     277,     0,   278,     0,   279,     0,   280,   281,   773,   283,
     774,   285,   286,     0,   287,     0,   775,   776,   777,   288,
     289,   290,     0,   291,   778,   779,     0,   292,   293,     0,
       0,     0,   780,   295,   296,   297,   298,   781,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
     782,   304,   305,   783,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   784,     0,     0,   316,     0,   785,   317,   318,
       0,     0,     0,     0,     0,   786,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,   787,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   788,   346,   347,   348,   349,   789,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   790,
     358,     0,     0,   791,   360,   792,   361,     0,   362,   793,
     794,   795,   796,   797,   367,   368,   369,   370,   371,   372,
       0,   798,   373,     0,     0,   374,   375,   376,   377,   799,
     800,   801,   378,   379,     0,   802,   803,   804,   380,     0,
     805,   381,   382,   806,  2146,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,   807,   394,     0,   395,
       0,   396,   397,   808,   809,   399,   400,   401,   402,   810,
     811,   405,   812,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   813,   418,
     419,     0,   814,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,   815,   816,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   817,     0,   818,   444,   445,   446,   447,   819,
       0,   820,   450,   821,   451,   452,   453,   454,     0,   822,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   823,   824,   483,   484,   485,     0,   486,
     487,   825,   489,   490,   491,   826,   827,   492,   493,   494,
     495,   828,   496,   497,     0,     0,   498,   499,   500,   501,
       0,   829,   502,   503,     0,   504,   830,   831,   832,   833,
       0,     0,     0,     0,     0,   509,   510,   511,     0,   834,
     835,   836,   513,   514,   515,   837,   516,   517,   518,   838,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   839,   527,     0,     0,   840,   841,
     842,   843,   528,     0,     0,   529,   844,     0,   845,   530,
     531,   532,   533,   534,   846,   847,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
       0,   848,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   849,   850,     0,     0,     0,     0,   851,   852,     0,
       0,   853,   854,     0,     0,   855,   856,   161,     0,   162,
     732,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   733,     0,   171,   172,   173,   174,
     175,   176,   177,   734,   179,     0,   180,     0,     0,   735,
     181,   736,   737,   738,   182,   739,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,   740,   741,
     190,   191,     0,   192,   742,   743,   194,   195,     0,   196,
     197,   198,   199,   744,   201,     0,   745,   203,   746,   747,
     748,   749,   750,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   751,
     223,     0,   224,   752,   753,   225,     0,     0,   226,   754,
     755,   227,   756,   757,   228,     0,   229,   758,   759,     0,
     230,   231,   232,   760,   761,   762,     0,     0,     0,     0,
     763,   235,   764,     0,     0,   765,   236,     0,   237,     0,
       0,   766,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,   767,     0,   264,   265,   266,   267,
     768,   769,   268,   269,     0,   270,   770,   271,   272,   771,
       0,   273,   274,   275,     0,     0,     0,   772,   277,  2506,
     278,     0,   279,     0,   280,   281,   773,   283,   774,   285,
     286,     0,   287,     0,   775,   776,   777,   288,   289,   290,
       0,   291,   778,   779,     0,   292,   293,     0,     0,     0,
     780,   295,   296,   297,   298,   781,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,   782,   304,
     305,   783,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     784,     0,     0,   316,     0,   785,   317,   318,     0,     0,
       0,     0,     0,   786,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,   787,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     788,   346,   347,   348,   349,   789,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   790,   358,     0,
       0,   791,   360,   792,   361,     0,   362,   793,   794,   795,
     796,   797,   367,   368,   369,   370,   371,   372,     0,   798,
     373,     0,     0,   374,   375,   376,   377,   799,   800,   801,
     378,   379,     0,   802,   803,   804,   380,     0,   805,   381,
     382,   806,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,   807,   394,     0,   395,     0,   396,
     397,   808,   809,   399,   400,   401,   402,   810,   811,   405,
     812,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   813,   418,   419,     0,
     814,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,   815,   816,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     817,     0,   818,   444,   445,   446,   447,   819,     0,   820,
     450,   821,   451,   452,   453,   454,     0,   822,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   823,   824,   483,   484,   485,     0,   486,   487,   825,
     489,   490,   491,   826,   827,   492,   493,   494,   495,   828,
     496,   497,     0,     0,   498,   499,   500,   501,     0,   829,
     502,   503,     0,   504,   830,   831,   832,   833,     0,     0,
       0,     0,     0,   509,   510,   511,     0,   834,   835,   836,
     513,   514,   515,   837,   516,   517,   518,   838,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   839,   527,     0,     0,   840,   841,   842,   843,
     528,     0,     0,   529,   844,     0,   845,   530,   531,   532,
     533,   534,   846,   847,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,     0,   848,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   849,
     850,     0,     0,     0,     0,   851,   852,     0,     0,   853,
     854,     0,     0,   855,   856,   161,     0,   162,   732,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   733,     0,   171,   172,   173,   174,   175,   176,
     177,   734,   179,     0,   180,     0,     0,   735,   181,   736,
     737,   738,   182,   739,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,   740,   741,   190,   191,
       0,   192,   742,   743,   194,   195,     0,   196,   197,   198,
     199,   744,   201,     0,   745,   203,   746,   747,   748,   749,
     750,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   751,   223,     0,
     224,   752,   753,   225,     0,     0,   226,   754,   755,   227,
     756,   757,   228,     0,   229,   758,   759,     0,   230,   231,
     232,   760,   761,   762,     0,     0,     0,     0,   763,   235,
     764,     0,     0,   765,   236,     0,   237,     0,     0,   766,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,   767,     0,   264,   265,   266,   267,   768,   769,
     268,   269,     0,   270,   770,   271,   272,   771,     0,   273,
     274,   275,     0,     0,     0,   772,   277,  2508,   278,     0,
     279,     0,   280,   281,   773,   283,   774,   285,   286,     0,
     287,     0,   775,   776,   777,   288,   289,   290,     0,   291,
     778,   779,     0,   292,   293,     0,     0,     0,   780,   295,
     296,   297,   298,   781,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,   782,   304,   305,   783,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   784,     0,
       0,   316,     0,   785,   317,   318,     0,     0,     0,     0,
       0,   786,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   787,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   788,   346,
     347,   348,   349,   789,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   790,   358,     0,     0,   791,
     360,   792,   361,     0,   362,   793,   794,   795,   796,   797,
     367,   368,   369,   370,   371,   372,     0,   798,   373,     0,
       0,   374,   375,   376,   377,   799,   800,   801,   378,   379,
       0,   802,   803,   804,   380,     0,   805,   381,   382,   806,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   807,   394,     0,   395,     0,   396,   397,   808,
     809,   399,   400,   401,   402,   810,   811,   405,   812,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   813,   418,   419,     0,   814,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,   815,   816,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   817,     0,
     818,   444,   445,   446,   447,   819,     0,   820,   450,   821,
     451,   452,   453,   454,     0,   822,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   823,
     824,   483,   484,   485,     0,   486,   487,   825,   489,   490,
     491,   826,   827,   492,   493,   494,   495,   828,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   829,   502,   503,
       0,   504,   830,   831,   832,   833,     0,     0,     0,     0,
       0,   509,   510,   511,     0,   834,   835,   836,   513,   514,
     515,   837,   516,   517,   518,   838,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     839,   527,     0,     0,   840,   841,   842,   843,   528,     0,
       0,   529,   844,     0,   845,   530,   531,   532,   533,   534,
     846,   847,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,     0,   848,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   849,   850,     0,
       0,     0,     0,   851,   852,     0,     0,   853,   854,     0,
       0,   855,   856,   161,     0,   162,   732,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     733,     0,   171,   172,   173,   174,   175,   176,   177,   734,
     179,     0,   180,     0,     0,   735,   181,   736,   737,   738,
     182,   739,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,   740,   741,   190,   191,     0,   192,
     742,   743,   194,   195,     0,   196,   197,   198,   199,   744,
     201,     0,   745,   203,   746,   747,   748,   749,   750,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   751,   223,     0,   224,   752,
     753,   225,     0,     0,   226,   754,   755,   227,   756,   757,
     228,     0,   229,   758,   759,     0,   230,   231,   232,   760,
     761,   762,     0,     0,     0,     0,   763,   235,   764,     0,
       0,   765,   236,     0,   237,     0,     0,   766,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
     767,     0,   264,   265,   266,   267,   768,   769,   268,   269,
       0,   270,   770,   271,   272,   771,     0,   273,   274,   275,
       0,     0,     0,   772,   277,  2510,   278,     0,   279,     0,
     280,   281,   773,   283,   774,   285,   286,     0,   287,     0,
     775,   776,   777,   288,   289,   290,     0,   291,   778,   779,
       0,   292,   293,     0,     0,     0,   780,   295,   296,   297,
     298,   781,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,   782,   304,   305,   783,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   784,     0,     0,   316,
       0,   785,   317,   318,     0,     0,     0,     0,     0,   786,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
     787,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   788,   346,   347,   348,
     349,   789,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   790,   358,     0,     0,   791,   360,   792,
     361,     0,   362,   793,   794,   795,   796,   797,   367,   368,
     369,   370,   371,   372,     0,   798,   373,     0,     0,   374,
     375,   376,   377,   799,   800,   801,   378,   379,     0,   802,
     803,   804,   380,     0,   805,   381,   382,   806,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
     807,   394,     0,   395,     0,   396,   397,   808,   809,   399,
     400,   401,   402,   810,   811,   405,   812,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   813,   418,   419,     0,   814,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,   815,   816,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   817,     0,   818,   444,
     445,   446,   447,   819,     0,   820,   450,   821,   451,   452,
     453,   454,     0,   822,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,   823,   824,   483,
     484,   485,     0,   486,   487,   825,   489,   490,   491,   826,
     827,   492,   493,   494,   495,   828,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   829,   502,   503,     0,   504,
     830,   831,   832,   833,     0,     0,     0,     0,     0,   509,
     510,   511,     0,   834,   835,   836,   513,   514,   515,   837,
     516,   517,   518,   838,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   839,   527,
       0,     0,   840,   841,   842,   843,   528,     0,     0,   529,
     844,     0,   845,   530,   531,   532,   533,   534,   846,   847,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,     0,   848,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   849,   850,     0,     0,     0,
       0,   851,   852,     0,     0,   853,   854,     0,     0,   855,
     856,   161,     0,   162,   732,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   733,     0,
     171,   172,   173,   174,   175,   176,   177,   734,   179,     0,
     180,     0,     0,   735,   181,   736,   737,   738,   182,   739,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,   740,   741,   190,   191,     0,   192,   742,   743,
     194,   195,     0,   196,   197,   198,   199,   744,   201,     0,
     745,   203,   746,   747,   748,   749,   750,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   751,   223,     0,   224,   752,   753,   225,
       0,     0,   226,   754,   755,   227,   756,   757,   228,     0,
     229,   758,   759,     0,   230,   231,   232,   760,   761,   762,
       0,     0,     0,     0,   763,   235,   764,     0,     0,  2570,
     236,     0,   237,     0,     0,   766,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,   767,     0,
     264,   265,   266,   267,   768,   769,   268,   269,     0,   270,
     770,   271,   272,   771,     0,   273,   274,   275,     0,     0,
       0,   772,   277,     0,   278,     0,   279,     0,   280,   281,
     773,   283,   774,   285,   286,     0,   287,     0,   775,   776,
     777,   288,   289,   290,     0,   291,   778,   779,     0,   292,
     293,     0,     0,     0,   780,   295,   296,   297,   298,   781,
       0,  2571,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,   782,   304,   305,   783,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   784,     0,     0,   316,     0,   785,
     317,   318,     0,     0,     0,     0,     0,   786,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,   787,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   788,   346,   347,   348,   349,   789,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   790,   358,     0,     0,   791,   360,   792,   361,     0,
     362,   793,   794,   795,   796,   797,   367,   368,   369,   370,
     371,   372,     0,   798,   373,     0,     0,   374,   375,   376,
     377,   799,   800,   801,   378,   379,     0,   802,   803,   804,
     380,     0,   805,   381,   382,   806,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,   807,   394,
       0,   395,     0,   396,   397,   808,   809,   399,   400,   401,
     402,   810,   811,   405,   812,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     813,   418,   419,     0,   814,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
     815,   816,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   817,     0,   818,   444,   445,   446,
     447,   819,     0,   820,   450,   821,   451,   452,   453,   454,
       0,   822,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   823,   824,   483,   484,   485,
       0,   486,   487,   825,   489,   490,   491,   826,   827,   492,
     493,   494,   495,   828,   496,   497,     0,     0,   498,   499,
     500,   501,     0,   829,   502,   503,     0,   504,   830,   831,
     832,   833,     0,     0,     0,     0,     0,   509,   510,   511,
       0,   834,   835,   836,   513,   514,   515,   837,   516,   517,
     518,   838,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   839,   527,     0,     0,
     840,   841,   842,   843,   528,     0,     0,   529,   844,     0,
     845,   530,   531,   532,   533,   534,   846,   847,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,     0,   848,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   849,   850,     0,     0,     0,     0,   851,
     852,     0,     0,   853,   854,     0,     0,   855,   856,   161,
       0,   162,   732,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   733,     0,   171,   172,
     173,   174,   175,   176,   177,   734,   179,     0,   180,     0,
       0,   735,   181,   736,   737,   738,   182,   739,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
     740,   741,   190,   191,     0,   192,   742,   743,   194,   195,
       0,   196,   197,   198,   199,   744,   201,     0,   745,   203,
     746,   747,   748,   749,   750,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   751,   223,     0,   224,   752,   753,   225,     0,     0,
     226,   754,   755,   227,   756,   757,   228,     0,   229,   758,
     759,     0,   230,   231,   232,   760,   761,   762,     0,     0,
       0,     0,   763,   235,   764,     0,     0,   765,   236,     0,
     237,     0,     0,   766,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,   767,     0,   264,   265,
     266,   267,   768,   769,   268,   269,     0,   270,   770,   271,
     272,   771,     0,   273,   274,   275,     0,     0,     0,   772,
     277,     0,   278,     0,   279,     0,   280,   281,   773,   283,
     774,   285,   286,     0,   287,     0,   775,   776,   777,   288,
     289,   290,     0,   291,   778,   779,     0,   292,   293,     0,
       0,     0,   780,   295,   296,   297,   298,   781,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
     782,   304,   305,   783,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   784,     0,     0,   316,     0,   785,   317,   318,
       0,     0,     0,     0,     0,   786,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,   787,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   788,   346,   347,   348,   349,   789,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   790,
     358,     0,     0,   791,   360,   792,   361,     0,   362,   793,
     794,   795,   796,   797,   367,   368,   369,   370,   371,   372,
       0,   798,   373,     0,     0,   374,   375,   376,   377,   799,
     800,   801,   378,   379,     0,   802,   803,   804,   380,     0,
     805,   381,   382,   806,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,   807,   394,     0,   395,
       0,   396,   397,   808,   809,   399,   400,   401,   402,   810,
     811,   405,   812,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   813,   418,
     419,     0,   814,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,   815,   816,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   817,     0,   818,   444,   445,   446,   447,   819,
       0,   820,   450,   821,   451,   452,   453,   454,     0,   822,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   823,   824,   483,   484,   485,     0,   486,
     487,   825,   489,   490,   491,   826,   827,   492,   493,   494,
     495,   828,   496,   497,     0,     0,   498,   499,   500,   501,
       0,   829,   502,   503,     0,   504,   830,   831,   832,   833,
       0,     0,     0,     0,     0,   509,   510,   511,     0,   834,
     835,   836,   513,   514,   515,   837,   516,   517,   518,   838,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   839,   527,     0,     0,   840,   841,
     842,   843,   528,     0,     0,   529,   844,     0,   845,   530,
     531,   532,   533,   534,   846,   847,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
       0,   848,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   849,   850,     0,     0,     0,     0,   851,   852,     0,
       0,   853,   854,     0,     0,   855,   856,   161,     0,   162,
     732,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   733,     0,   171,   172,   173,   174,
     175,   176,   177,   734,   179,     0,   180,     0,     0,   735,
     181,   736,   737,   738,   182,   739,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,   740,   741,
     190,   191,     0,   192,   742,   743,   194,   195,     0,   196,
     197,   198,   199,   744,   201,     0,   745,   203,   746,   747,
     748,   749,   750,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   751,
     223,     0,   224,   752,   753,   225,     0,     0,   226,   754,
     755,   227,   756,   757,   228,     0,   229,   758,   759,     0,
     230,   231,   232,   760,   761,   762,     0,     0,     0,     0,
     763,   235,   764,     0,     0,   765,   236,     0,   237,     0,
       0,   766,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,   767,     0,   264,   265,   266,   267,
     768,   769,   268,   269,     0,   270,   770,   271,   272,   771,
       0,   273,   274,   275,     0,     0,     0,   772,   277,     0,
     278,     0,   279,     0,   280,   281,   773,   283,   774,   285,
     286,     0,   287,     0,   775,   776,   777,   288,   289,   290,
       0,   291,   778,   779,     0,   292,   293,     0,     0,     0,
     780,   295,   296,   297,   298,   781,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,   782,   304,
     305,   783,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     784,     0,     0,   316,     0,   785,   317,   318,     0,     0,
       0,     0,     0,   786,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,   787,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     788,   346,   347,   348,   349,   789,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   790,   358,     0,
       0,   791,   360,   792,   361,     0,   362,   793,   794,   795,
     796,   797,   367,   368,   369,   370,   371,   372,     0,   798,
     373,     0,     0,   374,   375,   376,   377,   799,   800,   801,
     378,   379,     0,   802,   803,   804,   380,     0,   805,   381,
     382,   806,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,   807,   394,     0,   395,     0,   396,
     397,   808,   809,   399,   400,   401,   402,   810,   811,   405,
     812,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   813,   418,   419,     0,
     814,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,   815,   816,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     817,     0,   818,   444,   445,   446,   447,   819,     0,   820,
     450,   821,   451,   452,   453,   454,     0,   822,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   823,   824,   483,   484,   485,     0,   486,   487,   825,
     489,   490,   491,   826,   827,   492,   493,   494,   495,   828,
     496,   497,     0,     0,   498,   499,   500,   501,     0,   829,
     502,   503,     0,   504,   830,   831,   832,   833,     0,     0,
       0,     0,     0,   509,   510,   511,     0,   834,   835,   836,
     513,   514,   515,   837,   516,   517,   518,   838,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   839,   527,     0,     0,   840,   841,   842,   843,
     528,     0,     0,   529,   844,     0,   845,   530,   531,   532,
     533,   534,   846,   847,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,     0,   848,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   849,
     850,     0,     0,     0,     0,   851,  1252,     0,     0,   853,
     854,     0,     0,   855,   856,   161,     0,   162,   732,   164,
     165,   166,   167,  1950,     0,   168,     0,     0,     0,  1951,
       0,     0,   733,     0,   171,   172,   173,   174,   175,   176,
     177,   734,   179,     0,   180,     0,     0,   735,   181,   736,
     737,   738,   182,   739,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,   740,   741,   190,   191,
       0,   192,   742,   743,   194,   195,     0,   196,   197,   198,
     199,   744,   201,     0,   745,   203,   746,   747,   748,   749,
     750,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   751,   223,     0,
     224,   752,   753,   225,     0,     0,   226,   754,   755,   227,
     756,   757,   228,     0,   229,   758,   759,     0,   230,   231,
     232,   760,   761,   762,     0,     0,     0,     0,   763,   235,
     764,     0,     0,   765,   236,     0,   237,     0,     0,   766,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,   767,     0,   264,   265,   266,   267,   768,   769,
     268,   269,     0,   270,   770,   271,   272,   771,     0,   273,
     274,   275,     0,     0,     0,   772,   277,     0,   278,     0,
     279,     0,   280,   281,   773,   283,   774,   285,   286,     0,
     287,     0,   775,   776,   777,   288,   289,   290,     0,   291,
     778,   779,     0,   292,   293,     0,     0,     0,   780,   295,
     296,   297,   298,   781,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,   782,   304,   305,   783,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   784,     0,
       0,   316,     0,   785,   317,   318,     0,     0,     0,     0,
       0,   786,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   787,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   788,   346,
     347,   348,   349,   789,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   790,   358,     0,     0,   791,
     360,   792,   361,     0,   362,   793,   794,   795,   796,   797,
     367,   368,   369,   370,   371,   372,     0,   798,   373,     0,
       0,   374,   375,   376,   377,   799,     0,   801,   378,   379,
       0,   802,   803,   804,   380,     0,   805,   381,   382,   806,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   807,   394,     0,   395,     0,   396,   397,   808,
     809,   399,   400,   401,   402,   810,   811,   405,   812,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   813,   418,   419,     0,   814,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,   815,   816,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   817,     0,
     818,   444,   445,   446,   447,   819,     0,   820,   450,   821,
     451,   452,   453,   454,     0,   822,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   823,
     824,   483,   484,   485,     0,   486,   487,   825,   489,   490,
     491,   826,   827,   492,   493,   494,   495,   828,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   829,   502,   503,
       0,   504,   830,   831,   832,   833,     0,     0,     0,     0,
       0,   509,   510,   511,     0,   834,   835,   836,   513,   514,
     515,   837,   516,   517,   518,   838,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     839,   527,     0,     0,   840,   841,   842,   843,   528,     0,
       0,   529,   844,     0,   845,   530,   531,   532,   533,   534,
     846,   847,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,     0,   848,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   849,   850,     0,
       0,     0,     0,   851,   852,     0,     0,   853,   854,     0,
       0,   855,   856,   161,     0,   162,   732,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     733,     0,   171,   172,   173,   174,   175,   176,   177,   734,
     179,     0,   180,     0,     0,   735,   181,   736,   737,   738,
     182,   739,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,   740,   741,   190,   191,     0,   192,
     742,   743,   194,   195,     0,   196,   197,   198,   199,   744,
     201,     0,   745,   203,   746,   747,   748,   749,   750,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   751,   223,     0,   224,   752,
     753,   225,     0,     0,   226,   754,   755,   227,   756,   757,
     228,     0,   229,   758,   759,     0,   230,   231,   232,   760,
     761,   762,     0,     0,     0,     0,   763,   235,   764,     0,
       0,   765,   236,     0,   237,     0,     0,   766,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
     767,     0,   264,   265,   266,   267,   768,   769,   268,   269,
       0,   270,   770,   271,   272,   771,     0,   273,   274,   275,
       0,     0,     0,   772,   277,     0,   278,     0,   279,     0,
     280,   281,   773,   283,   774,   285,   286,     0,   287,     0,
     775,   776,   777,   288,   289,   290,     0,   291,   778,   779,
       0,   292,   293,     0,     0,     0,   780,  2057,   296,   297,
     298,   781,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,   782,   304,   305,   783,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   784,     0,     0,   316,
       0,   785,   317,   318,     0,     0,     0,     0,     0,   786,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
     787,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   788,   346,   347,   348,
     349,   789,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   790,   358,     0,     0,   791,   360,   792,
     361,     0,   362,   793,   794,   795,   796,   797,   367,   368,
     369,   370,   371,   372,     0,   798,   373,     0,     0,   374,
     375,   376,   377,   799,   800,   801,   378,   379,     0,   802,
     803,   804,   380,     0,   805,   381,   382,   806,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
     807,   394,     0,   395,     0,   396,   397,   808,   809,   399,
     400,   401,   402,   810,   811,   405,   812,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   813,   418,   419,     0,   814,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,   815,   816,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   817,     0,   818,   444,
     445,   446,   447,   819,     0,   820,   450,   821,   451,   452,
     453,   454,     0,   822,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,   823,   824,   483,
     484,   485,     0,   486,   487,   825,   489,   490,   491,   826,
     827,   492,   493,   494,   495,   828,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   829,   502,   503,     0,   504,
     830,   831,   832,   833,     0,     0,     0,     0,     0,   509,
     510,   511,     0,   834,   835,   836,   513,   514,   515,   837,
     516,   517,   518,   838,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,  2058,   527,
       0,     0,   840,   841,   842,   843,   528,     0,     0,   529,
     844,     0,   845,   530,   531,   532,   533,   534,   846,   847,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,     0,   848,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   849,   850,     0,     0,     0,
       0,   851,   852,     0,     0,   853,   854,     0,     0,   855,
     856,   161,     0,   162,   732,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   733,     0,
     171,   172,   173,   174,   175,   176,   177,   734,   179,     0,
     180,     0,     0,   735,   181,   736,   737,   738,   182,   739,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,   740,   741,   190,   191,     0,   192,   742,   743,
     194,   195,     0,   196,   197,   198,   199,   744,   201,     0,
     745,   203,   746,   747,   748,   749,   750,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   751,   223,     0,   224,   752,   753,   225,
       0,     0,   226,   754,   755,   227,   756,   757,   228,     0,
     229,   758,   759,     0,   230,   231,   232,   760,   761,   762,
       0,     0,     0,     0,   763,   235,   764,     0,     0,   765,
     236,     0,   237,     0,     0,   766,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,   767,     0,
     264,   265,   266,   267,   768,   769,   268,   269,     0,   270,
     770,   271,   272,   771,     0,   273,   274,   275,     0,     0,
       0,   772,   277,     0,   278,     0,   279,     0,   280,   281,
     773,   283,   774,   285,   286,     0,   287,     0,   775,   776,
     777,   288,   289,   290,     0,   291,   778,   779,     0,   292,
     293,     0,     0,     0,   780,   295,   296,   297,   298,   781,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,   782,   304,   305,   783,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   784,     0,     0,   316,     0,   785,
     317,   318,     0,     0,     0,     0,     0,   786,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,   787,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   788,   346,   347,   348,   349,   789,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   790,   358,     0,     0,   791,   360,   792,   361,     0,
     362,   793,   794,   795,   796,   797,   367,   368,   369,   370,
     371,   372,     0,   798,   373,     0,     0,   374,   375,   376,
     377,   799,   800,   801,   378,   379,     0,   802,   803,   804,
     380,     0,   805,   381,   382,   806,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,   807,   394,
       0,   395,     0,   396,   397,   808,   809,   399,   400,   401,
     402,   810,   811,   405,   812,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     813,   418,   419,     0,   814,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
     815,   816,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   817,     0,   818,   444,   445,   446,
     447,   819,     0,   820,   450,   821,   451,   452,   453,   454,
       0,   822,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   823,   824,   483,   484,   485,
       0,   486,   487,   825,   489,   490,   491,   826,   827,   492,
     493,   494,   495,   828,   496,   497,     0,     0,   498,   499,
     500,   501,     0,   829,   502,   503,     0,   504,   830,   831,
     832,   833,     0,     0,     0,     0,     0,   509,   510,   511,
       0,   834,   835,   836,   513,   514,   515,   837,   516,   517,
     518,   838,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,  2058,   527,     0,     0,
     840,   841,   842,   843,   528,     0,     0,   529,   844,     0,
     845,   530,   531,   532,   533,   534,   846,   847,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,     0,   848,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   849,   850,     0,     0,     0,     0,   851,
     852,     0,     0,   853,   854,     0,     0,   855,   856,   161,
       0,   162,   732,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   733,     0,   171,   172,
     173,   174,   175,   176,   177,   734,   179,     0,   180,     0,
       0,   735,   181,   736,   737,   738,   182,   739,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
     740,   741,   190,   191,     0,   192,   742,   743,   194,   195,
       0,   196,   197,   198,   199,   744,   201,     0,   745,   203,
     746,   747,   748,   749,   750,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   751,   223,     0,   224,   752,   753,   225,     0,     0,
     226,   754,   755,   227,   756,   757,   228,     0,   229,   758,
     759,     0,   230,   231,   232,   760,   761,   762,     0,     0,
       0,     0,   763,   235,   764,     0,     0,   765,   236,     0,
     237,     0,     0,   766,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,   767,     0,   264,   265,
     266,   267,   768,   769,   268,   269,     0,   270,   770,   271,
     272,   771,     0,   273,   274,   275,     0,     0,     0,   772,
     277,     0,   278,     0,   279,     0,   280,   281,   773,   283,
     774,   285,   286,     0,   287,     0,   775,   776,   777,   288,
     289,   290,     0,   291,   778,   779,     0,   292,   293,     0,
       0,     0,   780,   295,   296,   297,   298,   781,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
     782,   304,   305,  2988,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   784,     0,     0,   316,     0,   785,   317,   318,
       0,     0,     0,     0,     0,   786,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,   787,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   788,   346,   347,   348,   349,   789,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   790,
     358,     0,     0,   791,   360,   792,   361,     0,   362,   793,
     794,   795,   796,   797,   367,   368,   369,   370,   371,   372,
       0,   798,   373,     0,     0,   374,   375,   376,   377,   799,
     800,   801,   378,   379,     0,   802,   803,   804,   380,     0,
     805,   381,   382,   806,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,   807,   394,     0,   395,
       0,   396,   397,   808,   809,   399,   400,   401,   402,   810,
     811,   405,   812,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   813,   418,
     419,     0,   814,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,   815,   816,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   817,     0,   818,   444,   445,   446,   447,   819,
       0,   820,   450,   821,   451,   452,   453,   454,     0,   822,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   823,   824,   483,   484,   485,     0,   486,
     487,   825,   489,   490,   491,   826,   827,   492,   493,   494,
     495,   828,   496,   497,     0,     0,   498,   499,   500,   501,
       0,   829,   502,   503,     0,   504,   830,   831,   832,   833,
       0,     0,     0,     0,     0,   509,   510,   511,     0,   834,
     835,   836,   513,   514,   515,   837,   516,   517,   518,   838,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   839,   527,     0,     0,   840,   841,
     842,   843,   528,     0,     0,   529,   844,     0,   845,   530,
     531,   532,   533,   534,   846,   847,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
       0,   848,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   849,   850,     0,     0,     0,     0,   851,   852,     0,
       0,   853,   854,     0,     0,   855,   856,   161,     0,   162,
     732,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   733,     0,   171,   172,   173,   174,
     175,   176,   177,   734,   179,     0,   180,     0,     0,   735,
     181,   736,   737,   738,   182,   739,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,   740,   741,
     190,   191,     0,   192,   742,   743,   194,   195,     0,   196,
     197,   198,   199,   744,   201,     0,   745,   203,   746,   747,
     748,   749,   750,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   751,
     223,     0,   224,   752,   753,   225,     0,     0,   226,   754,
     755,   227,   756,   757,   228,     0,   229,   758,   759,     0,
     230,   231,   232,   760,   761,   762,     0,     0,     0,     0,
     763,   235,   764,     0,     0,   765,   236,     0,   237,     0,
       0,   766,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,   767,     0,   264,   265,   266,   267,
     768,   769,   268,   269,     0,   270,   770,   271,   272,   771,
       0,   273,   274,   275,     0,     0,     0,   772,   277,     0,
     278,     0,   279,     0,   280,   281,   773,   283,   774,   285,
     286,     0,   287,     0,   775,   776,   777,   288,   289,   290,
       0,   291,   778,   779,     0,   292,   293,     0,     0,     0,
     780,   295,   296,   297,   298,   781,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,   782,   304,
     305,  3046,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     784,     0,     0,   316,     0,   785,   317,   318,     0,     0,
       0,     0,     0,   786,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,   787,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     788,   346,   347,   348,   349,   789,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   790,   358,     0,
       0,   791,   360,   792,   361,     0,   362,   793,   794,   795,
     796,   797,   367,   368,   369,   370,   371,   372,     0,   798,
     373,     0,     0,   374,   375,   376,   377,   799,   800,   801,
     378,   379,     0,   802,   803,   804,   380,     0,   805,   381,
     382,   806,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,   807,   394,     0,   395,     0,   396,
     397,   808,   809,   399,   400,   401,   402,   810,   811,   405,
     812,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   813,   418,   419,     0,
     814,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,   815,   816,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     817,     0,   818,   444,   445,   446,   447,   819,     0,   820,
     450,   821,   451,   452,   453,   454,     0,   822,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   823,   824,   483,   484,   485,     0,   486,   487,   825,
     489,   490,   491,   826,   827,   492,   493,   494,   495,   828,
     496,   497,     0,     0,   498,   499,   500,   501,     0,   829,
     502,   503,     0,   504,   830,   831,   832,   833,     0,     0,
       0,     0,     0,   509,   510,   511,     0,   834,   835,   836,
     513,   514,   515,   837,   516,   517,   518,   838,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   839,   527,     0,     0,   840,   841,   842,   843,
     528,     0,     0,   529,   844,     0,   845,   530,   531,   532,
     533,   534,   846,   847,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,     0,   848,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   849,
     850,     0,     0,     0,     0,   851,   852,     0,     0,   853,
     854,     0,     0,   855,   856,   161,     0,   162,   732,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   733,     0,   171,   172,   173,   174,   175,   176,
     177,   734,   179,     0,   180,     0,     0,   735,   181,   736,
     737,   738,   182,   739,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,   740,   741,   190,   191,
       0,   192,   742,   743,   194,   195,     0,   196,   197,   198,
     199,   744,   201,     0,   745,   203,   746,   747,   748,   749,
     750,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   751,   223,     0,
     224,   752,   753,   225,     0,     0,   226,   754,   755,   227,
     756,   757,   228,     0,   229,   758,   759,     0,   230,   231,
     232,   760,   761,   762,     0,     0,     0,     0,   763,   235,
     764,     0,     0,   765,   236,     0,   237,     0,     0,   766,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,   767,     0,   264,   265,   266,   267,   768,   769,
     268,   269,     0,   270,   770,   271,   272,   771,     0,   273,
     274,   275,     0,     0,     0,   772,   277,     0,   278,     0,
     279,     0,   280,   281,   773,   283,   774,   285,   286,     0,
     287,     0,   775,   776,   777,   288,   289,   290,     0,   291,
     778,   779,     0,   292,   293,     0,     0,     0,   780,   295,
     296,   297,   298,   781,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,   782,   304,   305,   783,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   784,     0,
       0,   316,     0,   785,   317,   318,     0,     0,     0,     0,
       0,   786,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   787,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   788,   346,
     347,   348,   349,   789,   350,   351,   352,  5126,     0,     0,
       0,   353,   354,   355,   356,   790,   358,     0,     0,   791,
     360,   792,   361,     0,   362,   793,   794,   795,   796,   797,
     367,   368,   369,   370,   371,   372,     0,   798,   373,     0,
       0,   374,   375,   376,   377,   799,     0,   801,   378,   379,
       0,   802,   803,   804,   380,     0,   805,   381,   382,   806,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   807,   394,     0,   395,     0,   396,   397,   808,
     809,   399,   400,   401,   402,   810,   811,   405,   812,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   813,   418,   419,     0,   814,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,   815,   816,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   817,     0,
     818,   444,   445,   446,   447,   819,     0,   820,   450,   821,
     451,   452,   453,   454,     0,   822,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   823,
     824,   483,   484,   485,     0,   486,   487,   825,   489,   490,
     491,   826,   827,   492,   493,   494,   495,   828,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   829,   502,   503,
       0,   504,   830,   831,   832,   833,     0,     0,     0,     0,
       0,   509,   510,   511,     0,   834,   835,   836,   513,   514,
     515,   837,   516,   517,   518,   838,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     839,   527,     0,     0,   840,   841,   842,   843,   528,     0,
       0,   529,   844,     0,   845,   530,   531,   532,   533,   534,
     846,   847,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,     0,   848,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   849,   850,     0,
       0,     0,     0,   851,   852,     0,     0,   853,   854,     0,
       0,   855,   856,   161,     0,   162,   732,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     733,     0,   171,   172,   173,   174,   175,   176,   177,   734,
     179,     0,   180,     0,     0,   735,   181,   736,   737,   738,
     182,   739,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,   740,   741,   190,   191,     0,   192,
     742,   743,   194,   195,     0,   196,   197,   198,   199,   744,
     201,     0,   745,   203,   746,   747,   748,   749,   750,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   751,   223,     0,   224,   752,
     753,   225,     0,     0,   226,   754,   755,   227,   756,   757,
     228,     0,   229,   758,   759,     0,   230,   231,   232,   760,
     761,   762,     0,     0,     0,     0,   763,   235,   764,     0,
       0,   765,   236,     0,   237,     0,     0,   766,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
     767,     0,   264,   265,   266,   267,   768,   769,   268,   269,
       0,   270,   770,   271,   272,   771,     0,   273,   274,   275,
       0,     0,     0,   772,   277,     0,   278,     0,   279,     0,
     280,   281,   773,   283,   774,   285,   286,     0,   287,     0,
     775,   776,   777,   288,   289,   290,     0,   291,   778,   779,
       0,   292,   293,     0,     0,     0,   780,   295,   296,   297,
     298,   781,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,   782,   304,   305,   783,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   784,     0,     0,   316,
       0,   785,   317,   318,     0,     0,     0,     0,     0,   786,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
     787,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   788,   346,   347,   348,
     349,   789,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   790,   358,     0,     0,   791,   360,   792,
     361,     0,   362,   793,   794,   795,   796,   797,   367,   368,
     369,   370,   371,   372,     0,   798,   373,     0,     0,   374,
     375,   376,   377,   799,     0,   801,   378,   379,     0,   802,
     803,   804,   380,     0,   805,   381,   382,   806,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
     807,   394,     0,   395,     0,   396,   397,   808,   809,   399,
     400,   401,   402,   810,   811,   405,   812,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   813,   418,   419,     0,   814,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,   815,   816,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   817,     0,   818,   444,
     445,   446,   447,   819,     0,   820,   450,   821,   451,   452,
     453,   454,     0,   822,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,   823,   824,   483,
     484,   485,     0,   486,   487,   825,   489,   490,   491,   826,
     827,   492,   493,   494,   495,   828,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   829,   502,   503,     0,   504,
     830,   831,   832,   833,     0,     0,     0,     0,     0,   509,
     510,   511,     0,   834,   835,   836,   513,   514,   515,   837,
     516,   517,   518,   838,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   839,   527,
       0,     0,   840,   841,   842,   843,   528,     0,     0,   529,
     844,     0,   845,   530,   531,   532,   533,   534,   846,   847,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,     0,   848,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   849,   850,     0,     0,     0,
       0,   851,   852,     0,     0,   853,   854,     0,     0,   855,
     856,   161,     0,   162,   732,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   733,     0,
     171,   172,   173,   174,   175,   176,   177,   734,   179,     0,
     180,     0,     0,   735,   181,   736,   737,   738,   182,   739,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,   740,   741,   190,   191,     0,   192,   742,   743,
     194,   195,     0,   196,   197,   198,   199,   744,   201,     0,
     745,   203,   746,   747,   748,   749,   750,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   751,   223,     0,   224,   752,   753,   225,
       0,     0,   226,   754,   755,   227,   756,   757,   228,     0,
     229,   758,   759,     0,   230,   231,   232,   760,   761,   762,
       0,     0,     0,     0,   763,   235,   764,     0,     0,   765,
     236,     0,   237,     0,     0,   766,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,   767,     0,
     264,   265,   266,   267,   768,   769,   268,   269,     0,   270,
     770,   271,   272,   771,     0,   273,   274,   275,     0,     0,
       0,   772,   277,     0,   278,     0,   279,     0,   280,   281,
     773,   283,   774,   285,   286,     0,   287,     0,   775,   776,
     777,   288,   289,   290,     0,   291,   778,   779,     0,   292,
     293,     0,     0,     0,   780,   295,   296,   297,   298,   781,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,   782,   304,   305,  1969,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   784,     0,     0,   316,     0,   785,
     317,   318,     0,     0,     0,     0,     0,   786,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,   787,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   788,   346,   347,   348,   349,   789,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   790,   358,     0,     0,   791,   360,   792,   361,     0,
     362,   793,   794,   795,   796,   797,   367,   368,   369,   370,
     371,   372,     0,   798,   373,     0,     0,   374,   375,   376,
     377,   799,     0,   801,   378,   379,     0,   802,   803,   804,
     380,     0,   805,   381,   382,   806,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,   807,   394,
       0,   395,     0,   396,   397,   808,   809,   399,   400,   401,
     402,   810,   811,   405,   812,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     813,   418,   419,     0,   814,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
     815,   816,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   817,     0,   818,   444,   445,   446,
     447,   819,     0,   820,   450,   821,   451,   452,   453,   454,
       0,   822,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   823,   824,   483,   484,   485,
       0,   486,   487,   825,   489,   490,   491,   826,   827,   492,
     493,   494,   495,   828,   496,   497,     0,     0,   498,   499,
     500,   501,     0,   829,   502,   503,     0,   504,   830,   831,
     832,   833,     0,     0,     0,     0,     0,   509,   510,   511,
       0,   834,   835,   836,   513,   514,   515,   837,   516,   517,
     518,   838,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   839,   527,     0,     0,
     840,   841,   842,   843,   528,     0,     0,   529,   844,     0,
     845,   530,   531,   532,   533,   534,   846,   847,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,     0,   848,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   849,   850,     0,     0,     0,     0,   851,
     852,     0,     0,   853,   854,     0,     0,   855,   856,   161,
       0,   162,   732,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   733,     0,   171,   172,
     173,   174,   175,   176,   177,   734,   179,     0,   180,     0,
       0,   735,   181,   736,   737,   738,   182,   739,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
     740,   741,   190,   191,     0,   192,   742,   743,   194,   195,
       0,   196,   197,   198,   199,   744,   201,     0,   745,   203,
     746,   747,   748,   749,   750,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   751,   223,     0,   224,   752,   753,   225,     0,     0,
     226,   754,   755,   227,   756,   757,   228,     0,   229,   758,
     759,     0,   230,   231,   232,   760,   761,   762,     0,     0,
       0,     0,   763,   235,   764,     0,     0,   765,   236,     0,
     237,     0,     0,   766,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,   767,     0,   264,   265,
     266,   267,   768,   769,   268,   269,     0,   270,   770,   271,
     272,   771,     0,   273,   274,   275,     0,     0,     0,   772,
     277,     0,   278,     0,   279,     0,   280,   281,   773,   283,
     774,   285,   286,     0,   287,     0,   775,   776,   777,   288,
     289,   290,     0,   291,   778,   779,     0,   292,   293,     0,
       0,     0,   780,   295,   296,   297,   298,   781,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
     782,   304,   305,  1971,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   784,     0,     0,   316,     0,   785,   317,   318,
       0,     0,     0,     0,     0,   786,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,   787,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   788,   346,   347,   348,   349,   789,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   790,
     358,     0,     0,   791,   360,   792,   361,     0,   362,   793,
     794,   795,   796,   797,   367,   368,   369,   370,   371,   372,
       0,   798,   373,     0,     0,   374,   375,   376,   377,   799,
       0,   801,   378,   379,     0,   802,   803,   804,   380,     0,
     805,   381,   382,   806,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,   807,   394,     0,   395,
       0,   396,   397,   808,   809,   399,   400,   401,   402,   810,
     811,   405,   812,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   813,   418,
     419,     0,   814,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,   815,   816,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   817,     0,   818,   444,   445,   446,   447,   819,
       0,   820,   450,   821,   451,   452,   453,   454,     0,   822,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   823,   824,   483,   484,   485,     0,   486,
     487,   825,   489,   490,   491,   826,   827,   492,   493,   494,
     495,   828,   496,   497,     0,     0,   498,   499,   500,   501,
       0,   829,   502,   503,     0,   504,   830,   831,   832,   833,
       0,     0,     0,     0,     0,   509,   510,   511,     0,   834,
     835,   836,   513,   514,   515,   837,   516,   517,   518,   838,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   839,   527,     0,     0,   840,   841,
     842,   843,   528,     0,     0,   529,   844,     0,   845,   530,
     531,   532,   533,   534,   846,   847,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
       0,   848,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   849,   850,     0,     0,     0,     0,   851,   852,     0,
       0,   853,   854,     0,     0,   855,   856,   161,     0,   162,
     732,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   733,     0,   171,   172,   173,   174,
     175,   176,   177,   734,   179,     0,   180,     0,     0,     0,
     181,   736,   737,   738,   182,   739,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,   740,   741,
     190,   191,     0,   192,   742,   743,   194,   195,     0,   196,
     197,   198,   199,   744,   201,     0,   745,   203,   746,   747,
     748,   749,   750,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   751,
     223,     0,   224,   752,   753,   225,     0,     0,   226,   754,
     755,   227,   756,   757,   228,     0,   229,   758,   759,     0,
     230,   231,   232,   760,   761,   762,     0,     0,     0,     0,
     763,   235,   764,     0,     0,   765,   236,     0,   237,     0,
       0,   766,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,   767,     0,   264,   265,   266,   267,
     768,   769,   268,   269,     0,   270,   770,   271,   272,   771,
       0,   273,   274,   275,     0,     0,     0,   772,   277,     0,
     278,     0,   279,     0,   280,   281,   773,   283,   774,   285,
     286,     0,   287,     0,   775,   776,   777,   288,   289,   290,
       0,   291,   778,   779,     0,   292,   293,     0,     0,     0,
     780,   295,   296,   297,   298,   781,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,   782,   304,
     305,  4609,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     784,     0,     0,   316,     0,   785,   317,   318,     0,     0,
       0,     0,     0,   786,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,   787,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     788,   346,   347,   348,   349,   789,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   790,   358,     0,
       0,   791,   360,   792,   361,     0,   362,   793,   794,   795,
     796,   797,   367,   368,   369,   370,   371,   372,     0,   798,
     373,     0,     0,   374,   375,   376,   377,     0,     0,   801,
     378,   379,     0,   802,   803,   804,   380,     0,   805,   381,
     382,   806,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,   807,   394,     0,   395,     0,   396,
     397,   808,   809,   399,   400,   401,   402,   810,   811,   405,
     812,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   813,   418,   419,     0,
     814,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,   815,   816,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     817,     0,   818,   444,   445,   446,   447,   819,     0,   820,
     450,   821,   451,   452,   453,   454,     0,   822,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   823,   824,   483,   484,   485,     0,   486,   487,   825,
     489,   490,   491,   826,   827,   492,   493,   494,   495,   828,
     496,   497,     0,     0,   498,   499,   500,   501,     0,   829,
     502,   503,     0,   504,   830,   831,   832,   833,     0,     0,
       0,     0,     0,   509,   510,   511,     0,   834,   835,   836,
     513,   514,   515,   837,   516,   517,   518,   838,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   839,   527,     0,     0,   840,   841,   842,   843,
     528,     0,     0,   529,   844,     0,   845,   530,   531,   532,
     533,   534,   846,   847,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,     0,   848,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4610,
    4611,     0,     0,     0,     0,     0,  4612,     0,     0,     0,
     854,     0,     0,   855,   856,   161,     0,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,   736,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,  2013,     0,     0,     0,     0,   234,   235,
     764,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,   769,
     268,   269,     0,   270,     0,   271,   272,   771,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
     778,   779,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   787,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,   798,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,   803,   804,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   829,   502,   503,
       0,   504,  2014,   506,   507,  2015,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,   835,   512,   513,   514,
     515,   837,   516,   517,   518,   838,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,     0,   543,     0,     0,
       0,     0,     0,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,   855,   856,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,  1018,  1019,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,  1020,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
     273,   274,   275,     0,     0,     0,   276,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,  1021,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,     0,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,  1022,     0,   322,     0,   323,
     324,     0,     0,     0,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,  1023,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,   378,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
    1024,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,  1025,   445,   446,   447,   448,     0,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,  1026,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,  1027,   510,   511,     0,     0,     0,   512,   513,
     514,   515,     0,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,     0,   543,     0,
       0,     0,     0,     0,     0,   161,     0,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,  1028,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,   679,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   157,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,     0,   543,     0,     0,
       0,     0,     0,     0,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,  1542,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,   679,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,   157,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,     0,   543,     0,     0,     0,
       0,     0,     0,   161,     0,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,  1938,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,     0,     0,
       0,     0,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   679,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   157,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,     0,   543,     0,     0,     0,     0,
       0,     0,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
    2777,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,  1018,
    1019,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
    1020,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,  1021,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,  1022,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
    1023,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,  1024,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,  1025,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,  1026,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,     0,   543,     0,     0,     0,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,  1028,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,     0,   543,     0,     0,     0,     0,     0,     0,
       0,     0,   161,     0,   162,   163,   164,   165,   166,   167,
       0,  5173,   168,     0,     0,     0,   169,   855,  5174,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,  1408,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,     0,   543,     0,     0,     0,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,  1409,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,     0,   543,     0,     0,     0,     0,     0,     0,
       0,     0,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,   855,  5174,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,     0,   543,     0,     0,     0,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,  1409,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,  3731,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,   651,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,  2340,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
    2341,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,  3732,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456, -2228,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,   653,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,    60,     0,     0,   538,   539,     0,   540,   541,
     542,     0,     0,   543,     0,     0,     0,     0,     0,   161,
       0,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,  3412,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,  3731,   219,   220,
     221,   222,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,   235,     0,     0,     0,     0,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,   651,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,  2340,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,  2341,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
     653,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,     0,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
       0,   543,     0,     0,     0,     0,     0,   161,     0,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,  3412,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,    60,     0,
       0,   538,   539,     0,   540,   541,   542,     0,     0,   543,
       0,     0,     0,     0,     0,   161,     0,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,  3164,     0,   169,
       0,     0,   170,   855,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,     0,   543,     0,     0,
       0,     0,     0,   161,     0,   162,   163,   164,   165,   166,
     167,     0,     0,   168,  1257,     0,     0,   169,     0,     0,
     170,   855,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,     0,     0,
       0,     0,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,  1490,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,     0,   543,     0,     0,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,   583,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,     0,   543,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   161,  2595,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,   583,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,     0,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,     0,   543,     0,     0,     0,
       0,     0,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   168,  3411,     0,     0,   169,     0,     0,   170,
    3412,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
    3782,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,     0,   543,     0,     0,     0,     0,     0,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,  3412,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,     0,   543,     0,     0,     0,     0,     0,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,   583,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   662,
     267,     0,     0,   268,   269,     0,   270,     0,   271,   272,
       0,     0,   273,   274,   275,     0,     0,     0,   663,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,     0,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,     0,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     664,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
       0,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
     512,   513,   514,   515,     0,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,     0,
     543,     0,     0,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,   583,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
     273,   274,   275,     0,     0,     0,   276,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,     0,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,   378,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,   512,   513,
     514,   515,     0,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,     0,   543,     0,
       0,     0,     0,     0,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,   855,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,     0,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,     0,   543,     0,     0,     0,
       0,     0,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
    3412,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,  1135,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,   679,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,   157,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,   161,   543,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,  1307,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,     0,     0,
       0,     0,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,   161,   543,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,  1979,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,     0,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,   161,   543,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,  2406,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,   161,   543,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,  3621,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
     273,   274,   275,     0,     0,     0,   276,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,     0,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,   378,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,   512,   513,
     514,   515,     0,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,   161,   543,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
    3762,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,   161,   543,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,  4389,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
    1529,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,  1530,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,     0,   270,     0,   271,   272,
       0,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,     0,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,   679,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,  1531,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     157,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
     512,   513,   514,   515,     0,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,     0,
     543,     0,     0,     0,   161,  1532,   162,   163,   164,   165,
     166,   167,   902,   903,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,   904,     0,   226,     0,     0,   227,     0,
     905,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,   906,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,   907,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   908,   259,   260,   261,   262,
     909,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   910,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,   911,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,   912,
       0,   303,     0,     0,     0,   913,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,   679,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,   914,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   915,   413,   414,
     415,   916,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,   917,
       0,   426,   427,   428,   429,   430,     0,   918,   432,     0,
     433,   434,   435,     0,     0,   919,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,   920,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,   921,
     922,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   923,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,   157,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,   924,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,   925,   525,   926,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,   161,   543,  1008,   163,   164,
     165,   166,   167,  1009,   903,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,   904,     0,   226,     0,     0,   227,
       0,   905,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,   906,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,   907,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   908,   259,   260,   261,
     262,   909,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   910,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,   911,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
     912,     0,   303,     0,     0,     0,   913,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,   679,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,   914,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   915,   413,
     414,   415,  1010,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
     917,     0,   426,   427,   428,   429,   430,     0,   918,   432,
       0,   433,   434,   435,     0,     0,   919,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,   920,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
     921,   922,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   923,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   157,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,   924,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,   925,   525,   926,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,   161,   543,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,  2666,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,  2667,     0,
     273,   274,   275,     0,     0,     0,   276,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,  2668,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,  2669,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,   153,   154,     0,   378,
     379,     0,     0,     0,  2670,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,  4682,
     611,  4683,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,   512,   513,
     514,   515,  2671,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,   161,   543,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,  1815,     0,     0,  3881,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,  1816,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,  3299,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,  3300,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,  3301,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,   157,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,  3302,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,   161,   543,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,  1815,     0,     0,  4916,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,     0,   270,     0,   271,   272,
    1816,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,  3299,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,     0,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,  3300,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,  3301,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     157,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
     512,   513,   514,   515,  3302,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,   161,
     543,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,   235,  1815,     0,     0,  4984,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,  1816,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,  3299,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,  3300,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,  3301,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,   157,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,  3302,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
     161,   543,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,  2168,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,  2169,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   807,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,  2170,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,  2171,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,   161,   543,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,  2168,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,  2169,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,   807,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,  4495,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,  2171,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,   161,   543,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,  1135,   905,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,   679,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,   157,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,   161,   543,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,  1544,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,     0,     0,
       0,  1545,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   679,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   157,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,   161,   543,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,  1095,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,  1096,
    1097,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,  1098,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,   161,   543,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,  2168,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,  2169,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   807,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,  2171,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,   161,   543,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,  1529,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,  1530,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
     273,   274,   275,     0,     0,     0,   276,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,     0,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,   679,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,   378,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,   157,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,   512,   513,
     514,   515,     0,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,   161,   543,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,  1135,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,   679,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,   157,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,   161,   543,
     162,   163,   164,   165,   166,   167,  1568,     0,   168,     0,
       0,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,     0,   270,     0,   271,   272,
       0,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,     0,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,   679,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
     157,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
     512,   513,   514,   515,     0,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,   161,
     543,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,   905,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,   235,     0,     0,     0,     0,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
     679,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,   157,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
     161,   543,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,  2688,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,   679,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   157,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,   161,   543,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,  1529,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,   679,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,   157,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,   161,   543,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,   679,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,   157,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,   161,   543,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,  3426,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,     0,     0,
       0,     0,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,  3427,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,   161,   543,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,  3758,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,   157,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,   161,   543,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,   611,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,   161,   543,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
     273,   274,   275,     0,     0,     0,   276,   277,  1197,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,     0,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,   378,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,   512,   513,
     514,   515,     0,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,   161,   543,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,     0,     0,     0,  1522,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,   161,   543,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,  1522,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,     0,   270,     0,   271,   272,
       0,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,     0,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,     0,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
       0,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,  2138,   510,   511,     0,     0,     0,
     512,   513,   514,   515,     0,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,   161,
     543,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,   235,     0,     0,     0,  2333,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,     0,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,   537,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
     161,   543,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
    3435,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,   537,
       0,     0,     0,     0,   538,   539,     0,   540,   541,   542,
       0,   161,   543,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,  3798,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
     537,     0,     0,     0,     0,   538,   539,     0,   540,   541,
     542,     0,   161,   543,   162,   163,   164,   165,   166,   167,
    3806,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     244,     0,     0,   245,   246,   247,     0,     0,     0,   248,
       0,   249,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,     0,
     270,     0,   271,   272,     0,     0,   273,   274,   275,     0,
       0,     0,   276,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,     0,   287,     0,     0,
       0,     0,   288,   289,   290,     0,   291,     0,     0,     0,
     292,   293,     0,     0,     0,   294,   295,   296,   297,   298,
       0,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,   305,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,     0,     0,   311,     0,
     312,     0,     0,   313,   314,   315,     0,     0,   316,     0,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,   378,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   406,   407,     0,   408,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
     440,   441,     0,   442,     0,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   449,   450,     0,   451,   452,   453,
     454,     0,   455,   456,     0,     0,     0,   457,   458,   459,
     460,     0,     0,     0,   461,     0,     0,     0,   462,     0,
     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,     0,     0,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,   512,   513,   514,   515,     0,   516,
     517,   518,     0,   519,   520,     0,   521,   522,     0,     0,
     523,     0,     0,   524,     0,   525,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,     0,
       0,   537,     0,     0,     0,     0,   538,   539,     0,   540,
     541,   542,     0,   161,   543,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,   235,     0,     0,
       0,  3831,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,   537,     0,     0,     0,     0,   538,   539,     0,
     540,   541,   542,     0,   161,   543,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   244,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,   249,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,     0,   270,     0,   271,   272,     0,     0,   273,   274,
     275,     0,     0,     0,   276,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,   285,   286,     0,   287,
       0,     0,     0,     0,   288,   289,   290,     0,   291,     0,
       0,     0,   292,   293,     0,     0,     0,   294,   295,   296,
     297,   298,     0,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,   305,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,     0,     0,
     311,     0,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,   378,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   406,   407,
       0,   408,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,   432,     0,
     433,   434,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,   440,   441,     0,   442,     0,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   449,   450,     0,   451,
     452,   453,   454,     0,   455,   456,     0,     0,     0,   457,
     458,   459,   460,     0,     0,     0,   461,     0,     0,     0,
     462,     0,   463,   464,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,     0,     0,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,   157,   502,   503,     0,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,   512,   513,   514,   515,
       0,   516,   517,   518,     0,   519,   520,     0,   521,   522,
       0,     0,   523,     0,     0,   524,     0,   525,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,   537,     0,     0,     0,     0,   538,   539,
       0,   540,   541,   542,     0,   161,   543,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,   235,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,  4818,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,   537,     0,     0,     0,     0,   538,
     539,     0,   540,   541,   542,     0,   161,   543,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   244,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,   249,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,     0,   270,     0,   271,   272,     0,     0,
     273,   274,   275,     0,     0,     0,   276,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
       0,   287,     0,     0,     0,     0,   288,   289,   290,     0,
     291,     0,     0,     0,   292,   293,     0,     0,     0,   294,
     295,   296,   297,   298,     0,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,   305,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
       0,     0,   311,     0,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,   378,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     406,   407,     0,   408,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
     432,     0,   433,   434,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,   440,   441,     0,   442,     0,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   449,   450,
       0,   451,   452,   453,   454,     0,   455,   456,     0,     0,
       0,   457,   458,   459,   460,     0,     0,     0,   461,     0,
       0,     0,   462,     0,   463,   464,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
       0,     0,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,   512,   513,
     514,   515,     0,   516,   517,   518,     0,   519,   520,     0,
     521,   522,     0,     0,   523,     0,     0,   524,     0,   525,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,   537,     0,     0,     0,     0,
     538,   539,     0,   540,   541,   542,     0,   161,   543,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,   235,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   577,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,   537,     0,     0,     0,
       0,   538,   539,     0,   540,   541,   542,     0,   161,   543,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   244,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,   249,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,     0,   270,     0,  2048,   272,
       0,     0,   273,   274,   275,     0,     0,     0,   276,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,     0,   287,     0,     0,     0,     0,   288,   289,
     290,     0,   291,     0,     0,     0,   292,   293,     0,     0,
       0,   294,   295,   296,   297,   298,     0,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,   305,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,     0,     0,   311,     0,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,     0,   317,   318,     0,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,  2049,   376,   377,     0,     0,
       0,   378,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   406,   407,     0,   408,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,   432,     0,   433,   434,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,   440,   441,     0,   442,
       0,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     449,   450,     0,   451,   452,   453,   454,     0,   455,   456,
       0,     0,     0,   457,   458,   459,   460,     0,     0,     0,
     461,     0,     0,     0,   462,     0,   463,   464,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,     0,     0,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
       0,   502,   503,     0,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
     512,   513,   514,   515,     0,   516,   517,   518,     0,   519,
     520,     0,   521,   522,     0,     0,   523,     0,     0,   524,
       0,   525,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,   537,     0,     0,
       0,     0,   538,   539,     0,   540,   541,   542,     0,   161,
     543,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,   235,     0,     0,     0,     0,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,     0,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,     0,     0,
       0,     0,     0,   538,   539,     0,   540,   541,   542,     0,
     161,   543,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,     0,     0,   954,
       0,     0,     0,     0,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,     0,     0,     0,     0,
     189,     7,     0,   190,   191,     0,   192,     0,     0,     0,
       0,     0,   196,   197,   198,   955,   200,   201,     0,   202,
     203,     0,     0,     0,     0,     0,     0,   209,     0,   211,
       0,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,     0,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,     0,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   245,   246,   247,     0,  -343,  -343,   248,     0,  -343,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,     0,     0,     0,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,   956,   270,     0,
     271,   272,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,     0,   286,     0,   287,     0,     0,     0,     0,
       0,   289,   290,     0,     0,     0,     0,     0,     0,   293,
       0,     0,     0,   294,   295,   296,   297,   298,    26,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,     0,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,   957,     0,   311,     0,   312,     0,
       0,     0,   314,   315,     0,     0,   316,   958,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,    32,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,     0,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   959,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   392,   393,     0,     0,     0,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,     0,     0,     0,     0,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,     0,     0,   433,     0,   435,    41,
       0,   436,     0,     0,     0,   438,     0,     0,   440,   441,
       0,   442,   960,   443,     0,     0,   444,     0,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   453,   454,     0,
     455,     0,     0,     0,     0,   457,   458,   459,     0,     0,
       0,     0,   461,     0,     0,     0,     0,     0,     0,   464,
       0,     0,   467,   468,     0,   469,     0,   471,     0,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,     0,   481,
       0,     0,     0,   482,     0,     0,     0,   484,     0,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,     0,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,     0,   513,   514,   515,     0,     0,   517,   518,
       0,   519,   520,     0,     0,     0,     0,     0,   523,     0,
       0,   524,     0,     0,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
      59,     0,     0,     0,   538,     0,     0,   540,     0,   542,
       0,   161,   543,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
     954,     0,     0,     0,     0,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,     0,     0,     0,
       0,   189,     7,     0,   190,   191,     0,   192,     0,     0,
       0,     0,     0,   196,   197,   198,   955,   200,   201,     0,
     202,   203,     0,     0,     0,     0,     0,     0,   209,     0,
     211,     0,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,     0,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,     0,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,     0,
       0,     0,   245,   246,   247,     0,  -363,     0,   248,     0,
    -363,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,     0,     0,     0,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,   956,   270,
       0,   271,   272,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,     0,   286,     0,   287,     0,     0,     0,
       0,     0,   289,   290,     0,     0,     0,     0,     0,     0,
     293,     0,     0,     0,   294,   295,   296,   297,   298,    26,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,     0,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,   957,     0,   311,     0,   312,
       0,     0,     0,   314,   315,     0,     0,   316,   958,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
      32,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,     0,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     959,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   392,   393,     0,     0,     0,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,     0,     0,     0,     0,     0,     0,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,     0,     0,   433,     0,   435,
      41,     0,   436,     0,     0,     0,   438,     0,     0,   440,
     441,     0,   442,   960,   443,     0,     0,   444,     0,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
       0,   455,     0,     0,     0,     0,   457,   458,   459,     0,
       0,     0,     0,   461,     0,     0,     0,     0,     0,     0,
     464,     0,     0,   467,   468,     0,   469,     0,   471,     0,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,     0,
     481,     0,     0,     0,   482,     0,     0,     0,   484,     0,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,     0,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,     0,   513,   514,   515,     0,     0,   517,
     518,     0,   519,   520,     0,     0,     0,     0,     0,   523,
       0,     0,   524,     0,     0,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,  -363,     0,
       0,    59,     0,     0,     0,   538,     0,     0,   540,     0,
     542,     0,   161,   543,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,     0,
       0,   954,     0,     0,     0,     0,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,     0,     0,
       0,     0,   189,     7,     0,   190,   191,     0,   192,     0,
       0,     0,     0,     0,   196,   197,   198,   955,   200,   201,
       0,   202,   203,     0,     0,     0,     0,     0,     0,   209,
       0,   211,     0,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,     0,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,     0,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,     0,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
       0,     0,     0,   245,   246,   247,     0,  -360,     0,   248,
       0,  -360,   250,     0,   251,   252,   253,     0,   254,   255,
       0,   256,   257,   258,   259,   260,     0,     0,     0,     0,
       0,   264,   265,   266,   267,     0,     0,   268,   269,   956,
     270,     0,   271,   272,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   277,     0,   278,     0,   279,     0,   280,
     281,   282,   283,   284,     0,   286,     0,   287,     0,     0,
       0,     0,     0,   289,   290,     0,     0,     0,     0,     0,
       0,   293,     0,     0,     0,   294,   295,   296,   297,   298,
      26,     0,     0,   299,   300,   301,   302,     0,     0,   303,
       0,     0,     0,     0,   304,     0,     0,     0,     0,   306,
       0,   307,   308,     0,   309,   310,   957,     0,   311,     0,
     312,     0,     0,     0,   314,   315,     0,     0,   316,   958,
       0,   317,   318,     0,     0,     0,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,     0,     0,     0,
       0,    32,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,   347,   348,   349,
       0,   350,   351,   352,     0,     0,     0,     0,   353,   354,
     355,   356,   357,   358,     0,     0,   359,   360,     0,   361,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,   373,     0,     0,   374,   375,
     376,   377,     0,     0,     0,     0,   379,     0,     0,     0,
       0,   380,     0,     0,   381,   382,   383,     0,   384,   385,
     386,   959,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   392,   393,     0,     0,
       0,     0,   395,     0,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,     0,     0,     0,     0,     0,     0,
     409,   410,     0,   411,     0,   412,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,   422,     0,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,     0,   431,     0,     0,   433,     0,
     435,    41,     0,   436,     0,     0,     0,   438,     0,     0,
     440,   441,     0,   442,   960,   443,     0,     0,   444,     0,
     446,   447,   448,     0,   449,   450,     0,   451,     0,   453,
     454,     0,   455,     0,     0,     0,     0,   457,   458,   459,
       0,     0,     0,     0,   461,     0,     0,     0,     0,     0,
       0,   464,     0,     0,   467,   468,     0,   469,     0,   471,
       0,   473,   474,     0,     0,     0,     0,     0,     0,   475,
     476,     0,   477,     0,     0,   478,     0,     0,     0,   479,
       0,   481,     0,     0,     0,   482,     0,     0,     0,   484,
       0,     0,   486,   487,   488,   489,   490,   491,     0,     0,
     492,   493,   494,   495,     0,   496,   497,     0,     0,   498,
     499,   500,   501,     0,     0,   502,   503,     0,     0,   505,
     506,   507,   508,     0,     0,     0,     0,     0,   509,   510,
     511,     0,     0,     0,     0,   513,   514,   515,     0,     0,
     517,   518,     0,   519,   520,     0,     0,     0,     0,     0,
     523,     0,     0,   524,     0,     0,     0,   526,   527,     0,
       0,     0,     0,     0,     0,   528,     0,     0,   529,     0,
       0,     0,   530,   531,   532,   533,   534,   535,   536,  -360,
       0,     0,    59,     0,     0,     0,   538,     0,     0,   540,
       0,   542,     0,   161,   543,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
       0,     0,   954,     0,     0,     0,     0,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,     0,
       0,     0,     0,   189,     7,     0,   190,   191,     0,   192,
       0,     0,     0,     0,     0,   196,   197,   198,   955,   200,
     201,     0,   202,   203,     0,     0,     0,     0,     0,     0,
     209,     0,   211,     0,   213,   214,   215,   216,     0,   217,
     218,     0,   219,   220,   221,     0,   223,     0,   224,     0,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,   229,     0,     0,     0,   230,   231,   232,     0,
       0,   233,     0,     0,     0,     0,   234,     0,     0,     0,
       0,     0,   236,     0,   237,     0,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,  1469,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     956,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   957,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     958,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   959,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   960,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,    59,     0,     0,     0,   538,     0,     0,
     540,     0,   542,     0,   161,   543,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   954,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   955,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
       0,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,     0,     0,     0,   245,   246,   247,     0,     0,
       0,   248,     0,  -365,   250,     0,   251,   252,   253,     0,
     254,   255,     0,   256,   257,   258,   259,   260,     0,     0,
       0,     0,     0,   264,   265,   266,   267,     0,     0,   268,
     269,   956,   270,     0,   271,   272,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   277,     0,   278,     0,   279,
       0,   280,   281,   282,   283,   284,     0,   286,     0,   287,
       0,     0,     0,     0,     0,   289,   290,     0,     0,     0,
       0,     0,     0,   293,     0,     0,     0,   294,   295,   296,
     297,   298,    26,     0,     0,   299,   300,   301,   302,     0,
       0,   303,     0,     0,     0,     0,   304,     0,     0,     0,
       0,   306,     0,   307,   308,     0,   309,   310,   957,     0,
     311,     0,   312,     0,     0,     0,   314,   315,     0,     0,
     316,   958,     0,   317,   318,     0,     0,     0,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,     0,
       0,     0,     0,    32,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,   347,
     348,   349,     0,   350,   351,   352,     0,     0,     0,     0,
     353,   354,   355,   356,   357,   358,     0,     0,   359,   360,
       0,   361,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,   373,     0,     0,
     374,   375,   376,   377,     0,     0,     0,     0,   379,     0,
       0,     0,     0,   380,     0,     0,   381,   382,   383,     0,
     384,   385,   386,   959,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   392,   393,
       0,     0,     0,     0,   395,     0,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,     0,     0,     0,     0,
       0,     0,   409,   410,     0,   411,     0,   412,   413,   414,
     415,   416,     0,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,   422,     0,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,   431,     0,     0,
     433,     0,   435,    41,     0,   436,     0,     0,     0,   438,
       0,     0,   440,   441,     0,   442,   960,   443,     0,     0,
     444,     0,   446,   447,   448,     0,   449,   450,     0,   451,
       0,   453,   454,     0,   455,     0,     0,     0,     0,   457,
     458,   459,     0,     0,     0,     0,   461,     0,     0,     0,
       0,     0,     0,   464,     0,     0,   467,   468,     0,   469,
       0,   471,     0,   473,   474,     0,     0,     0,     0,     0,
       0,   475,   476,     0,   477,     0,     0,   478,     0,     0,
       0,   479,     0,   481,     0,     0,     0,   482,     0,     0,
       0,   484,     0,     0,   486,   487,   488,   489,   490,   491,
       0,     0,   492,   493,   494,   495,     0,   496,   497,     0,
       0,   498,   499,   500,   501,     0,     0,   502,   503,     0,
       0,   505,   506,   507,   508,     0,     0,     0,     0,     0,
     509,   510,   511,     0,     0,     0,     0,   513,   514,   515,
       0,     0,   517,   518,     0,   519,   520,     0,     0,     0,
       0,     0,   523,     0,     0,   524,     0,     0,     0,   526,
     527,     0,     0,     0,     0,     0,     0,   528,     0,     0,
     529,     0,     0,     0,   530,   531,   532,   533,   534,   535,
     536,     0,     0,     0,    59,     0,     0,     0,   538,     0,
       0,   540,     0,   542,     0,   161,   543,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,     0,     0,   954,     0,     0,     0,     0,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,     0,     0,     0,     0,   189,     7,     0,   190,   191,
       0,   192,     0,     0,     0,     0,     0,   196,   197,   198,
     955,   200,   201,     0,   202,   203,     0,     0,     0,     0,
       0,     0,   209,     0,   211,     0,   213,   214,   215,   216,
       0,   217,   218,     0,   219,   220,   221,     0,   223,     0,
     224,     0,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,   229,     0,     0,     0,   230,   231,
     232,     0,     0,   233,     0,     0,     0,     0,   234,     0,
       0,     0,     0,     0,   236,     0,   237,     0,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,  3242,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,     0,
       0,     0,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,   956,   270,     0,   271,   272,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,     0,   286,     0,
     287,     0,     0,     0,     0,     0,   289,   290,     0,     0,
       0,     0,     0,     0,   293,     0,     0,     0,   294,   295,
     296,   297,   298,    26,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,     0,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,   957,
       0,   311,     0,   312,     0,     0,     0,   314,   315,     0,
       0,   316,   958,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,    32,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,     0,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   959,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   392,
     393,     0,     0,     0,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,     0,
       0,     0,     0,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,     0,
       0,   433,     0,   435,    41,     0,   436,     0,     0,     0,
     438,     0,     0,   440,   441,     0,   442,   960,   443,     0,
       0,   444,     0,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   453,   454,     0,   455,     0,     0,     0,     0,
     457,   458,   459,     0,     0,     0,     0,   461,     0,     0,
       0,     0,     0,     0,   464,     0,     0,   467,   468,     0,
     469,     0,   471,     0,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,     0,   481,     0,     0,     0,   482,     0,
       0,     0,   484,     0,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,     0,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,     0,   513,   514,
     515,     0,     0,   517,   518,     0,   519,   520,     0,     0,
       0,     0,     0,   523,     0,     0,   524,     0,     0,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,    59,     0,     0,     0,   538,
       0,     0,   540,     0,   542,     0,   161,   543,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,     0,     0,   954,     0,     0,     0,     0,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,     0,     0,     0,     0,   189,     7,     0,   190,
     191,     0,   192,     0,     0,     0,     0,     0,   196,   197,
     198,   955,   200,   201,     0,   202,   203,     0,     0,     0,
       0,     0,     0,   209,     0,   211,     0,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,     0,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
       0,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,     0,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,     0,     0,     0,   245,   246,   247,
       0,     0,     0,   248,     0,  3431,   250,     0,   251,   252,
     253,     0,   254,   255,     0,   256,   257,   258,   259,   260,
       0,     0,     0,     0,     0,   264,   265,   266,   267,     0,
       0,   268,   269,   956,   270,     0,   271,   272,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   277,     0,   278,
       0,   279,     0,   280,   281,   282,   283,   284,     0,   286,
       0,   287,     0,     0,     0,     0,     0,   289,   290,     0,
       0,     0,     0,     0,     0,   293,     0,     0,     0,   294,
     295,   296,   297,   298,    26,     0,     0,   299,   300,   301,
     302,     0,     0,   303,     0,     0,     0,     0,   304,     0,
       0,     0,     0,   306,     0,   307,   308,     0,   309,   310,
     957,     0,   311,     0,   312,     0,     0,     0,   314,   315,
       0,     0,   316,   958,     0,   317,   318,     0,     0,     0,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,     0,     0,     0,     0,    32,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,   347,   348,   349,     0,   350,   351,   352,     0,     0,
       0,     0,   353,   354,   355,   356,   357,   358,     0,     0,
     359,   360,     0,   361,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,   373,
       0,     0,   374,   375,   376,   377,     0,     0,     0,     0,
     379,     0,     0,     0,     0,   380,     0,     0,   381,   382,
     383,     0,   384,   385,   386,   959,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     392,   393,     0,     0,     0,     0,   395,     0,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,     0,     0,
       0,     0,     0,     0,   409,   410,     0,   411,     0,   412,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,   422,     0,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,   431,
       0,     0,   433,     0,   435,    41,     0,   436,     0,     0,
       0,   438,     0,     0,   440,   441,     0,   442,   960,   443,
       0,     0,   444,     0,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   453,   454,     0,   455,     0,     0,     0,
       0,   457,   458,   459,     0,     0,     0,     0,   461,     0,
       0,     0,     0,     0,     0,   464,     0,     0,   467,   468,
       0,   469,     0,   471,     0,   473,   474,     0,     0,     0,
       0,     0,     0,   475,   476,     0,   477,     0,     0,   478,
       0,     0,     0,   479,     0,   481,     0,     0,     0,   482,
       0,     0,     0,   484,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,   492,   493,   494,   495,     0,   496,
     497,     0,     0,   498,   499,   500,   501,     0,     0,   502,
     503,     0,     0,   505,   506,   507,   508,     0,     0,     0,
       0,     0,   509,   510,   511,     0,     0,     0,     0,   513,
     514,   515,     0,     0,   517,   518,     0,   519,   520,     0,
       0,     0,     0,     0,   523,     0,     0,   524,     0,     0,
       0,   526,   527,     0,     0,     0,     0,     0,     0,   528,
       0,     0,   529,     0,     0,     0,   530,   531,   532,   533,
     534,   535,   536,     0,     0,     0,    59,     0,     0,     0,
     538,     0,     0,   540,     0,   542,     0,   161,   543,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,     0,     0,   954,     0,     0,     0,
       0,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,     0,     0,     0,     0,   189,     7,     0,
     190,   191,     0,   192,     0,     0,     0,     0,     0,   196,
     197,   198,   955,   200,   201,     0,   202,   203,     0,     0,
       0,     0,     0,     0,   209,     0,   211,     0,   213,   214,
     215,   216,     0,   217,   218,     0,   219,   220,   221,     0,
     223,     0,   224,     0,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,   229,     0,     0,     0,
     230,   231,   232,     0,     0,   233,     0,     0,     0,     0,
     234,     0,     0,     0,     0,     0,   236,     0,   237,     0,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,     0,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,  -347,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,     0,     0,     0,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,   956,   270,     0,   271,   272,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,     0,
     286,     0,   287,     0,     0,     0,     0,     0,   289,   290,
       0,     0,     0,     0,     0,     0,   293,     0,     0,     0,
     294,   295,   296,   297,   298,    26,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
       0,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,   957,     0,   311,     0,   312,     0,     0,     0,   314,
     315,     0,     0,   316,   958,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,    32,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
       0,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   959,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   392,   393,     0,     0,     0,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,     0,
       0,     0,     0,     0,     0,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,     0,     0,   433,     0,   435,    41,     0,   436,     0,
       0,     0,   438,     0,     0,   440,   441,     0,   442,   960,
     443,     0,     0,   444,     0,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   453,   454,     0,   455,     0,     0,
       0,     0,   457,   458,   459,     0,     0,     0,     0,   461,
       0,     0,     0,     0,     0,     0,   464,     0,     0,   467,
     468,     0,   469,     0,   471,     0,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,     0,   481,     0,     0,     0,
     482,     0,     0,     0,   484,     0,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,     0,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,     0,
     513,   514,   515,     0,     0,   517,   518,     0,   519,   520,
       0,     0,     0,     0,     0,   523,     0,     0,   524,     0,
       0,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,     0,    59,     0,     0,
       0,   538,     0,     0,   540,     0,   542,     0,   161,   543,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,     0,     0,   954,     0,     0,
       0,     0,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,     0,     0,     0,     0,   189,     7,
       0,   190,   191,     0,   192,     0,     0,     0,     0,     0,
     196,   197,   198,   955,   200,   201,     0,   202,   203,     0,
       0,     0,     0,     0,     0,   209,     0,   211,     0,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
       0,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,     0,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,     0,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,     0,     0,     0,   245,
     246,   247,     0,     0,     0,   248,     0,     0,   250,     0,
     251,   252,   253,     0,   254,   255,     0,   256,   257,   258,
     259,   260,     0,     0,     0,     0,     0,   264,   265,   266,
     267,     0,     0,   268,   269,   956,   270,     0,   271,   272,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   277,
       0,   278,     0,   279,     0,   280,   281,   282,   283,   284,
       0,   286,     0,   287,     0,     0,     0,     0,     0,   289,
     290,     0,     0,     0,     0,     0,     0,   293,     0,     0,
       0,   294,   295,   296,   297,   298,    26,     0,     0,   299,
     300,   301,   302,     0,     0,   303,     0,     0,     0,     0,
     304,     0,     0,     0,     0,   306,     0,   307,   308,     0,
     309,   310,   957,     0,   311,     0,   312,     0,     0,     0,
     314,   315,     0,     0,   316,   958,     0,   317,   318,     0,
       0,     0,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,     0,     0,     0,     0,    32,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,   347,   348,   349,     0,   350,   351,   352,
       0,     0,     0,     0,   353,   354,   355,   356,   357,   358,
       0,     0,   359,   360,     0,   361,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,   373,     0,     0,   374,   375,   376,   377,     0,     0,
       0,     0,   379,     0,     0,     0,     0,   380,     0,     0,
     381,   382,   383,     0,   384,   385,   386,   959,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   392,   393,     0,     0,     0,     0,   395,     0,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
       0,     0,     0,     0,     0,     0,   409,   410,     0,   411,
       0,   412,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,   422,     0,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,   431,     0,     0,   433,     0,   435,    41,     0,   436,
       0,     0,     0,   438,     0,     0,   440,   441,     0,   442,
     960,   443,     0,     0,   444,     0,   446,   447,   448,     0,
     449,   450,     0,   451,     0,   453,   454,     0,   455,     0,
       0,     0,     0,   457,   458,   459,     0,     0,     0,     0,
     461,     0,     0,     0,     0,     0,     0,   464,     0,     0,
     467,   468,     0,   469,     0,   471,     0,   473,   474,     0,
       0,     0,     0,     0,     0,   475,   476,     0,   477,     0,
       0,   478,     0,     0,     0,   479,     0,   481,     0,     0,
       0,   482,     0,     0,     0,   484,     0,     0,   486,   487,
     488,   489,   490,   491,     0,     0,   492,   493,   494,   495,
       0,   496,   497,     0,     0,   498,   499,   500,   501,     0,
       0,   502,   503,     0,     0,   505,   506,   507,   508,     0,
       0,     0,     0,     0,   509,   510,   511,     0,     0,     0,
       0,   513,   514,   515,     0,     0,   517,   518,     0,   519,
     520,     0,     0,     0,     0,     0,   523,     0,     0,   524,
       0,     0,     0,   526,   527,     0,     0,     0,     0,     0,
       0,   528,     0,     0,   529,     0,     0,     0,   530,   531,
     532,   533,   534,   535,   536,     0,     0,     0,    59,     0,
       0,     0,   538,     0,     0,   540,     0,   542,     0,   161,
     543,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,     0,   954,     0,
       0,     0,     0,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,     0,     0,     0,     0,   189,
       7,     0,   190,   191,     0,   192,     0,     0,     0,     0,
       0,   196,   197,   198,   955,   200,   201,     0,   202,   203,
       0,     0,     0,     0,     0,     0,   209,     0,   211,     0,
     213,   214,   215,   216,     0,   217,   218,     0,   219,   220,
     221,     0,   223,     0,   224,     0,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   229,     0,
       0,     0,   230,   231,   232,     0,     0,   233,     0,     0,
       0,     0,   234,     0,     0,     0,     0,     0,   236,     0,
     237,     0,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,     0,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,     0,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,     0,     0,     0,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,   956,   270,     0,   271,
     272,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,     0,   286,     0,   287,     0,     0,     0,     0,     0,
     289,   290,     0,     0,     0,     0,     0,     0,   293,     0,
       0,     0,   294,   295,   296,   297,   298,    26,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,     0,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,   957,     0,   311,     0,   312,     0,     0,
       0,   314,   315,     0,     0,   316,   958,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,    32,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,     0,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   959,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   392,   393,     0,     0,     0,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,     0,     0,     0,     0,     0,     0,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,     0,     0,   433,     0,   435,    41,     0,
     436,     0,     0,     0,   438,     0,     0,   440,   441,     0,
     442,   960,   443,     0,     0,   444,     0,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   453,   454,     0,   455,
       0,     0,     0,     0,   457,   458,   459,     0,     0,     0,
       0,   461,     0,     0,     0,     0,     0,     0,   464,     0,
       0,   467,   468,     0,   469,     0,   471,     0,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,     0,   481,     0,
       0,     0,   482,     0,     0,     0,   484,     0,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,     0,   502,   503,     0,     0,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,     0,   513,   514,   515,     0,     0,   517,   518,     0,
     519,   520,     0,     0,     0,     0,     0,   523,     0,     0,
    1488,     0,     0,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,     0,    59,
       0,     0,     0,   538,     0,     0,   540,     0,   542,     0,
     161,   543,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,     0,     0,   954,
       0,     0,     0,     0,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,     0,     0,     0,     0,
     189,     7,     0,   190,   191,     0,   192,     0,     0,     0,
       0,     0,   196,   197,   198,     0,   200,   201,     0,   202,
     203,     0,     0,     0,     0,     0,     0,   209,     0,   211,
       0,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,     0,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,     0,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,     0,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,     0,     0,     0,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,     0,   286,     0,   287,     0,     0,     0,     0,
       0,   289,   290,     0,     0,     0,     0,     0,     0,   293,
       0,     0,     0,   294,   295,   296,   297,   298,    26,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,     0,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,     0,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,    32,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,     0,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   392,   393,     0,     0,     0,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,     0,     0,     0,     0,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,     0,     0,   433,     0,   435,    41,
       0,   436,     0,     0,     0,   438,     0,     0,   440,   441,
       0,   442,   960,   443,     0,     0,   444,     0,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   453,   454,     0,
     455,     0,     0,     0,     0,   457,   458,   459,     0,     0,
       0,     0,   461,     0,     0,     0,     0,     0,     0,   464,
       0,     0,   467,   468,     0,   469,     0,   471,     0,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,     0,   481,
       0,     0,     0,   482,     0,     0,     0,   484,     0,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,     0,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,     0,   513,   514,   515,     0,     0,   517,   518,
       0,   519,   520,     0,     0,     0,     0,     0,   523,     0,
       0,   524,     0,     0,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
      59,     0,     0,     0,   538,     0,     0,   540,     0,   542,
       0,   161,   543,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,     0,     0,     0,
       0,   189,     0,     0,   190,   191,     0,   192,     0,     0,
       0,     0,     0,   196,   197,   198,     0,   200,   201,     0,
     202,   203,     0,     0,     0,     0,     0,     0,   209,     0,
     211,     0,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,     0,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,     0,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,     0,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
       0,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,     0,     0,     0,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,     0,   286,     0,   287,     0,     0,     0,
       0,     0,   289,   290,     0,     0,     0,     0,     0,     0,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,     0,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,     0,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,     0,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   392,   393,     0,     0,     0,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,     0,     0,     0,     0,     0,     0,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,     0,     0,   433,     0,   435,
       0,     0,   436,     0,     0,     0,   438,     0,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,     0,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   453,   454,
       0,   455,     0,     0,     0,     0,   457,   458,   459,     0,
       0,     0,     0,   461,     0,     0,     0,     0,     0,     0,
     464,     0,     0,   467,   468,     0,   469,     0,   471,     0,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,     0,
     481,     0,     0,     0,   482,     0,     0,     0,   484,     0,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,     0,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   736,   513,   514,   515,     0,     0,   517,
     518,     0,   519,   520,     0,     1,     0,     2,     0,   523,
       0,     0,   524,     0,     0,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     3,     0,   529,     0,     4,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
       0,     0,     0,     5,     6,   538,     0,     7,   540,     0,
     542,     8,     0,   543,     0,     0,     9,    10,     0,     0,
       0,     0,     0,  4517,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    11,  4518,     0,     0,
       0,     0,     0,     0,   764,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,     0,     0,     0,     0,     0,     0,     0,     0,    14,
       0,    15,    16,     0,     0,     1,     0,     2,     0,     0,
       0,     0,     0,   769,    17,    18,     0,     0,     0,     0,
       0,   771,     0,     0,     0,     0,     0,     0,     0,     4,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    20,     5,     6,     0,     0,     0,     0,     0,
       0,     8,     0,     0,   778,   779,     9,    10,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    11,     0,    22,     0,
      23,     0,     0,     0,     0,     0,    24,     0,     0,     0,
      25,     0,     0,     0,     0,    12,     0,     0,     0,     0,
       0,     0,     0,     0,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,    28,
      13,     0,     0,     0,     0,     0,   787,     0,     0,    14,
       0,    15,    16,     0,     0,     0,    29,  1035,     0,     0,
       0,     0,     0,     0,    17,    18,     0,     0,     0,     0,
    1036,     0,     0,     0,    30,     0,     0,     0,    31,     0,
       0,   985,  1037,     0,     0,    32,     0,     0,     0,     0,
       0,     0,    20,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1038,  1019,     0,     0,
      21,   798,     0,     0,     0,     0,     0,     0,  1039,     0,
       0,     0,     0,     0,     0,     0,   803,   804,    22,     0,
      23,     0,     0,     0,     0,     0,    24,     0,     0,     0,
      25,     0,     0,     0,  1040,     0,  1041,     0,  1042,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1043,     0,     0,     0,     0,     0,    27,     0,    28,
       0,     0,     0,     0,     0,     0,    33,     0,     0,     0,
       0,     0,     0,     0,    15,    16,    29,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,    35,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,    31,     0,
       0, -2046,  1044,    36,     0,     0,  1045,     0,     0,  1046,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,    39,  1047,    40,  1048,    41,    42,     0,     0,    43,
      44,     0,  1049,     0,  1050,     0,     0,     0,     0,     0,
      45,     0,     0,    46,     0,     0,     0,     0,     0,     0,
       0,     0,    47,     0,   296,     0,   298,     0,     0,     0,
       0,     0,     0,  1051,  1052,     0,    48,     0,     0,     0,
       0,    49,    50,    51,     0,     0,    33,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1053,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,    35,     0,     0,
       0,   829,     0,     0,    52,     0,  4519,     0,  1054,  4520,
       0,     0,    53,    36,     0,     0,     0,     0,     0,     0,
     835,     0,     0,     0,    37,   837,  4701,     0,     0,   838,
       0,     0,     0,     0,     0,     0,     0,     0,  1055,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,    39,     0,    40,     0,     0,    42,     0,    54,    43,
      44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    55,     0,    46,     0,    56,     0,     0,    57,     0,
       0,     0,    47,    58,     0,     0,     0,     0,     0,  4160,
    4161,     0,     0,     0,     0,  4162,    48,  4163,     0,  4164,
    4165,    49,    50,    51,     0,     0,    59,    60,  1056,     0,
       0,     0,     0,     0,    61,     0,  3933,     0,     0,     0,
      62,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    52,     0,     0,  1057,     0,     0,
       0,     0,    53,     0,     0,     0,     0,     0,     0,     0,
    1058,  1059,     0,     0,  1060,  1061,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4166,     0,     0,  4167,  1062,     0,     0,
       0,     0,     0,     0,  4168,     0,     0,     0,    54,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    55,     0,  3869,  4169,    56,     0,     0,    57,  2854,
       0,  2855,     0,    58,     0,     0,     0,     0,     0,     0,
       0,     0,  4170,     0,     0,  2857,  1063,  2858,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    60,     0,  1064,
       0,     0,     0,     0,    61,     0,     0,     0,     0,  4171,
      62,  4172,     0,     0,     0,     0,     0,  2859,     0,     0,
       0,     0,  2860,     0,     0,     0,     0,  4173,  4174,     0,
       0,     0, -2696,  2857,     0,  2858,  1065,     0,     0,     0,
    2863,     0,     0,     0,     0,     0,     0,     0,  2864,     0,
       0,     0,     0,     0,     0,  1066,     0,     0,  2865,     0,
       0,     0,     0,     0,     0,     0,     0,  -859,  -859,     0,
    2860,     0,     0,     0,  4175,     0,  2866,     0,  -859,     0,
       0,     0,     0,     0,  4176,     0,     0,     0,  2863,     0,
    1708,     0,     0,  2867,     0,     0,  2864,     0,     0,     0,
       0,     0,     0,  2868,  4177,     0,     0,     0,     0,     0,
       0,  3870,     0,  4178,  4179, -2696,  4180,     0,     0,  2871,
       0,     0,     0,  1067,  2866,  2872,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1708,     0,
       0,  2867,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4181,  4182,  4183,     0,     0,     0,     0,     0,  2874,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4184,  4185,  4186,  2872,     0,     0,     0,     0,  4187,     0,
       0,  4188,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   296,  4189,   298,
    4190,     0,     0,     0,     0,     0,     0,  2876,     0,     0,
       0,     0,     0,     0,  2877,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2878,     0,     0,     0,     0,     0,     0,     0,  4191,  4192,
       0,     0,     0,     0,     0,   296,     0,   298,     0,     0,
       0,     0,     0,     0,  2879,  2876,     0,     0,     0,     0,
       0,     0,  2877,     0,     0,     0,  4193,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2878,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2880,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2881,     0,     0,
       0,  2882,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4195,     0,
       0,     0,     0,     0,     0,     0,  2880,     0,     0,     0,
       0,     0,  4196,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2881,     0,  2884,     0,     0,
       0,     0,     0,     0,     0,     0,  2885,     0,  2886,     0,
       0,     0,     0,     0,     0,     0,  2888,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4197,     0,     0,     0,  4198,     0,     0,  4199,  4200,
    4201,  4202,     0,     0,  2885,     0,  2886,     0,     0,     0,
       0,     0,     0,     0,  2888,     0,     0,  2891,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4203,  4204,     0,  2894,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4205,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2894,     0,     0,     0,     0,     0,     0,
       0,     0,  2895,  2896,  2897,     0,     0,     0,     0,  2898,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2899,     0,     0,  2900,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2901,
    2895,  2896,  2897,     0,     0,     0,     0,  2898,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2903,     0,
       0,     0,     0,     0,  2899,     0,     0,  2900,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2901,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2903
};

static const yytype_int16 yycheck[] =
{
       6,     3,   144,   621,   152,   620,   621,   961,  1311,    24,
    1023,  1024,  1124,   140,    20,  1230,   652,  1125,    24,   655,
    1045,  1034,  1682,   608,    21,  1685,     6,  1323,  1408,  1311,
      36,   158,  1457,  1067,  1689,  1280,    33,  1706,    44,   993,
    1253,    47,  1067,    40,   675,    51,   620,  1778,  1201,   675,
    1684,  1749,    58,  1707,   598,   562,     0,  1573,  1550,  1684,
    1240,   563,   564,   565,   608,   788,   568,   569,   570,  1573,
    2323,   573,   574,   575,  1747,  2323,  1406,    45,  2267,  2422,
    2769,  3081,  2796,  2817,   582,  1408,   582,   892,   957,   958,
    2887,  2434,   107,  1435,  3222,  2829,  2830,  2956,  1719,   990,
    2051,   107,  3417,  2569,  1349,  1350,  1351,  1352,  1353,  1354,
    1355,  1356,  1357,  1358,  1359,  1360,  1133,  2805,   616,  1678,
     616,  1133,  1043,   735,  1329,  1378,  2232,  3001,  1087,   135,
    2017,   137,  3625,   139,   140,   141,  2323,  1342,  1343,  1460,
    1345,  1346,   624,  1583,  2398,   627,  3572,  1068,  3283,  2115,
    2317,     4,   158,  1774,  2317,  2435,  2398,   137,  2103,   139,
    2080,   717,  2853,  1603,   720,  2806,  2735,  2853,  3661,  1709,
    2855,  1611,  1612,  3480,  2859,  2744,   152,   147,  2732,  4085,
     152,  3372,  2997,  2998,  3891,  2870,  3506,  2710,  3003,   152,
    3005,   152,  3083,  3083,    18,    20,    13,  2882,    20,    13,
    3234,    75,    20,  3901,    27,    31,  2914,    50,  1167,  3754,
      54,    61,  3792,    39,    18,  1207,  1208,  1209,  3711,    83,
      21,   105,    63,   117,    34,  1555,  1556,  2829,  2830,  2963,
    2964,  2398,  1224,    13,    22,  2398,    22,   849,   850,   851,
    2388,   119,    33,    83,  2309,  1069,   166,   160,   860,    37,
      84,    17,    18,   138,    20,   138,    13,   133,    11,    20,
      72,   133,  3346,    51,   166,  1114,  1115,  4206,  2299,   207,
    1262,    66,  3271,  1265,    62,    63,    62,    63,   133,   202,
      83,   133,    54,  2970,    69,    73,   305,   337,  3000,  3164,
     166,    67,   163,  3835,  3839,    27,    70,  3819,    87,  1291,
    1292,  2250,   173,  1295,   394,  1647,   288,  4598,    17,    18,
     155,   166,  2851,   287,   166,    27,  1165,   218,   186,  4040,
    1312,  1313,   245,    17,    18,   151,  3075,  3179,  3180,  3181,
     109,    59,    91,   210,   130,   383,   186,   245,  4867,   140,
     190,   166,   166,  4179,  4180,  4148,  4112,  4183,   156,    27,
     166,    67,   477,  2833,   204,   389,    55,  3697,   267,   210,
     270,  2963,  2964,   267,    39,   245,  4202,    66,   288,   253,
     243,    83,   250,   256,   507,   419,    72,   204,   457,   375,
      22,  4751,    13,   451,   507,   419,   270,  3101,   486,   135,
      13,    39,    73,   294,   896,    37,   134,    46,  2098,   283,
     240,   197,   242,    13,   170,   558,   587,    12,   203,    51,
     994,   204,   378,   957,   958,   466,   166,   961,   400,  2942,
      62,    63,   447,   609,   207,   305,   587,   801,   294,   252,
    4266,    73,   451,   273,   230,   656,   168,   240,   172,   242,
      75,   578,   221,  2741,   581,   211,   130,  5071,  3576,   993,
    1147,  1148,   560,   146,   828,   582,   168,   210,   375,   376,
     587,   170,  4368,   571,   324,   686,  1719,   841,   842,   162,
     273,   496,   288,    90,  3333,   187,   170,   150,   204,   130,
     263,  1117,   366,  1119,  1120,  1121,  1122,  5111,   641,   616,
    1381,   341,   268,   630,   304,   245,   113,   548,   202,  1196,
     266,   467,   211,  4873,   297,   691,   302,   156,  1092,   332,
      49,   692,  1525,   279,   380,  1238,  3671,   211,   149,   285,
     252,  1774,  1634,   684,   262,    21,   149,   398,  1154,   134,
    1543,   150,    13,   656,  1257,  4028,  1427,   616,   534,   149,
     252,   245,   451,   587,   305,  4125,   197,   451,  4128,  4129,
    4095,   684,   268,   587,   560,   230,   231,   266,  3266,   305,
     437,   686,   435,   154,    45,   571,   446,   475,   695,  1374,
     279,  5100,   266,   483,   252,    66,   582,   583,   446,   230,
    1062,   587,   230,   231,   590,   279,   437,   383,   656,   240,
      81,   242,  4134,   691,  1179,   294,   446,   405,   604,   378,
     332,   691,    93,   369,   138,  4441,   490,  4328,  4411,  4346,
     616,   512,  3747,   587,   620,  4451,  4042,    98,   302,  4910,
     332,  2113,   103,  2278,   630,  1516,  4462,  2261,  4464,   677,
     186,  1187,  4154,   399,   684,  1179,   402,   605,   482,   621,
     435,  3349,   661,   649,   140,   120,  1537,   379,   123,  3989,
     378,   302,  2277,  1687,   332,  4353,  1577,  4596,   374,  1580,
     369,   373,  1687,  1584,   474,  1586,  2833,   379,  3702,   675,
    2833,   677,  3706,  2622,  1565,   369,   112,   451,  2299,   653,
     564,   287,   355,  3417,   437,  1408,   445,   488,   227,   695,
     451,   706,  1709,  1614,  1615,  1616,  2317,  1709,   551,   383,
     706,   379,   708,  3411,   581,  3789,   204,  1214,  1215,   632,
     482,   717,   203,   502,   720,   586,  2970,   723,   209,  2906,
     401,   689,   256,  2103,   730,   475,   186,  4272,  2970,   555,
     581,   633,   383,   653,    27,  1988,   355,  1244,   591,   652,
     525,  3475,   627,  3742,   627,   525,   558,  1254,   686,  1256,
     576,  1363,   646,  1958,  1959,  2195,  1961,  1962,   622,   250,
    4067,  1268,  1269,  1270,   891,   637,  2831,  2388,   525,   609,
     690,   624,  1279,   599,   627,  1955,  2727,  2398,   631,   613,
    2103,   599,   788,   274,   265,  1609,   664,  2818,   690,  3476,
      83,  3666,   568,   633,   547,   599,  1788,  3336,  2094,   640,
    1754,  1760,   645,  2970,   439,   689,   632,  2970,   599,  1435,
     684,   633,   591,   656,   690,   611,  4309,  2965,   686,  1668,
    4400,  3956,  2522,  3675,  3573,  4370,  1382,   622,  3351,  4595,
     562,   619,   656,   619,   550,   690,   686,   653,   690,   684,
    3320,  4386,   686,   688,   601,   655,  2405,   672,   854,   855,
     562,   604,   568,   656,   672,  3378,  3379,  4564,  3993,   686,
    4180,   342,   558,   686,    13,   690,   690,   684,  2528,  4775,
     684,  4777,  4778,  3475,   690,  3672,   677,   883,   884,   885,
    1376,   887,   888,   889,   562,   891,  1517,   893,  1880,   685,
     446,  1517,  1884,   646,   187,   901,  1023,  4052,  1025,   665,
     661,  1028,  1029,  2528,   884,  4033,   672,   673,   674,   889,
    4336,   672,   587,   893,  1719,   649,   648,  1044,  1400,  1475,
     686,  1913,   890,  1559,   515,   416,   894,   611,   632,   410,
     656,  1487,   938,  3647,  3232,  3233,   648,   226,   953,   587,
     690,   475,   378,   578,   435,  4136,   662,   953,  2621,   955,
    1581,   205,   954,   959,   686,  1581,   665,   388,  4794,   252,
     611,   500,  4541,   672,   673,   674,  4802,  4102,   603,  1774,
     648,   392,  1114,  1115,   686,  1123,   991,   619,   672,   673,
     674,    46,   997,  4290,   990,   991,   446,   174,  4725,   116,
    4727,   997,   488,   131,    12,  4901,  4902,   639,   640,  4905,
     149,    86,    27,    88,   677,   678,   679,   680,   681,   682,
     400,  1017,    89,  1649,  1650,  1497,  2747,  1023,   516,  1025,
      35,  1647,  1028,  1029,   516,  1661,  4060,  4061,    35,  1527,
     609,  1527,  2983,   201,  2985,   227,   417,   390,  1044,   332,
     294,   343,   254,    37,   207,   536,  2299,   653,   133,   252,
    4410,   263,   148,  2753,   535,   234,    83,   290,   201,   643,
     679,   680,   681,   682,   130,    54,   379,   390,   250,   130,
      17,    18,   189,   158,   900,   631,   390,   174,   250,    21,
     373,  1087,   274,   232,   424,   298,   379,  4993,  1094,   390,
     390,   527,   133,   627,   575,   390,  3804,   208,  1713,  1735,
     684,  4449,   274,  3744,  1110,   609,   233,  1109,  2121,  3817,
     659,   196,   691,  3821,  3822,    83,   491,   592,  1124,  3934,
     595,   390,   656,   261,  2824,   288,   380,  3835,  3943,   633,
     686,   622,   200,  3702,   130,  2388,   197,  3706,  3692,   138,
    1155,   168,  2802,  1111,  1112,  2398,  1116,  1123,  1154,  1155,
    1646,  1123,  4697,  3320,  3407,  1878,  2190,  3320,  1164,  3407,
    1123,  1167,  1123,  4054,  4054,  2190,   992,  2058,  4866,   230,
    2278,   631,  2870,  3814,   672,   392,   379,  3404,  3869,     9,
     672,  1187,  1197,  3869,  1164,  3870,  4765,   288,   375,   402,
     288,  1197,   109,   533,   406,  2086,  2087,  2818,   140,  1326,
    2716,   197,  2718,  2719,  4749,   578,   153,  3434,   581,  1062,
    1754,  1064,  2833,  2230,  2718,  2719,   288,  2757,  2230,   874,
    3407,  2466,  3476,   170,  3936,   252,  3192,   252,   305,  3509,
    3175,  3151,  1238,  3120,  3476,  1362,   302,   400,  2938,  2939,
     661,   302,   150,   532,  2944,   416,   342,  4375,   263,  1376,
    2592,  1257,  2952,  2953,  2407,   686,   263,   256,  2958,  3353,
    2181,   168,   430,   496,   211,   382,    63,  4395,  4694,   562,
    3364,    83,   287,  2194,  3368,  3369,  2197,  2198,   375,   297,
     287,   408,  1409,   585,   252,    35,  3380,   430,  2728,   756,
     757,  3480,   419,    18,  4654,  4643,   686,   210,   469,   400,
     427,   366,   400,   684,   415,  1311,   302,   332,  2629,  3476,
      35,   130,   614,  3476,   207,   453,   691,   383,  2614,   266,
    1326,    83,   383,   120,   578,   410,   123,   581,   400,  1331,
     324,    12,   279,   686,   131,   648,  2541,  2550,  2551,  2544,
    4214,   382,   134,   421,  2965,   252,   373,   534,  4163,  2970,
    1005,  4166,   379,     6,   151,   648,  1362,  2660,  1364,   562,
    2540,   429,  1368,   686,  2660,   195,   579,  2547,   375,  2328,
    1376,  4506,   686,   840,   459,  1381,  1382,   501,   197,   558,
    2103,  4089,  4197,  4198,  4199,   686,   686,   383,    37,   378,
    4205,   686,   541,   542,   543,   544,   545,   546,  4213,   507,
    1527,   198,  1408,  1409,   531,   373,    34,    60,   587,   554,
      13,   379,   138,   524,    63,   564,   551,   686,  3073,   260,
    3080,  1427,   369,  2982,  2639,   254,  4134,   565,   240,  1435,
     242,   458,  1447,  4141,   263,   116,  1442,   534,   905,    24,
     227,  1447,  2745,  1999,   661,   648,   461,   355,  4941,  4161,
    4162,   586,   399,   134,   461,   402,  4168,    85,  1464,  4171,
    4172,   273,  3135,  2745,   261,   578,    17,    18,   581,  1475,
     262,   120,   379,   685,   123,  1490,   475,  4189,   240,   372,
     242,  1487,   131,   302,  1490,   563,  4801,   274,   245,   606,
     458,  4203,   581,   482,  2299,   176,  4208,  4209,  4210,  4211,
    4212,   154,   151,   630,   507,   507,   623,   723,   507,  1651,
    1516,  1517,   274,   263,  1520,   686,  3622,  3623,  3624,  1646,
     621,  1527,  1528,   621,   437,  2007,   515,   534,  3479,   210,
     256,  1537,  2144,   646,  2090,   562,   164,   287,   263,    13,
    4913,   523,  1669,  1549,  1550,   611,   149,  1400,  1563,   621,
     611,  1566,    17,    18,  1560,  1561,  1562,  1563,  1564,  1565,
    1566,  2135,   287,  3223,   383,  2818,  4254,  1573,   365,   647,
    4885,   368,  1578,  1579,  3801,  1581,   684,   406,  2612,  1585,
    1560,  1561,  1562,  2388,  1564,   299,   221,  2612,   324,  1716,
     617,  1606,   177,  2398,   562,  1448,   437,  2233,  3223,  1579,
    1606,  2237,  2238,   456,   130,  1585,  2104,   133,  2104,  3836,
     518,   519,   261,   375,   376,   611,  1743,   298,    66,   170,
    3847,   648,     0,  3850,   685,   375,   376,   116,   627,   232,
    3330,  3331,  3332,    81,   547,   270,   393,  2222,  4953,  4954,
    1646,  1647,   260,   625,  1497,    93,   360,  3345,  3346,   617,
     375,   376,  3352,   135,  3354,   562,   453,   656,  1673,   686,
     211,  3361,   130,  1669,  1670,  1671,  1672,  1673,  1135,  4383,
     288,   197,   888,   435,  2565,   149,  3376,   384,  2222,  4145,
     648,   684,   684,  3383,  3384,   684,   668,   176,    13,  4397,
    2703,   604,   656,  3209,   189,  2321,  3396,  3397,  3398,  3320,
    5193,   432,  3402,  3403,   230,   170,    37,    13,   587,   445,
    1716,   461,  2965,   684,  4403,   266,  4405,  2970,   665,   368,
     691,   210,   686,   376,  3818,   672,   673,   674,   279,   197,
    1745,  1584,    63,   646,  5107,  5108,   461,  1743,  1744,  1745,
    2757,   648,  3442,  3443,  3444,  2757,   211,  2962,   587,   475,
     232,  4610,  4611,   424,  1760,   203,   437,   302,  2792,  3710,
     516,   209,   230,   288,    37,   400,   166,  2792,   676,   677,
     678,   679,   680,   681,   682,  1781,   302,  1783,   656,   686,
     170,   507,   400,   130,   534,  3127,  3128,  3129,  2679,   525,
     497,   240,   611,   242,  2748,  3175,  2687,   450,   595,   452,
      73,   266,   250,   195,   432,   684,    17,    18,   686,   534,
      17,    18,   207,   516,   279,   516,  3241,   130,   369,   437,
     133,   211,  4619,   305,   149,   204,   274,   455,   625,   150,
    5027,  2984,   513,  5030,   302,   621,   130,   289,   383,   133,
     292,   253,  1984,   149,   558,   684,   621,   672,   399,  4994,
     197,   402,  3175,   130,   260,  3476,  3159,   383,   270,   105,
     622,   672,   533,   195,   492,   260,   547,   656,  3164,  1722,
    3570,   283,  1878,  1879,   523,   400,   266,  3159,  4067,   211,
     375,   376,   288,   230,   197,   277,  5014,   382,  3093,   279,
     243,  3096,    13,   288,   578,   684,   176,   581,   579,   685,
     684,   627,  3147,   197,   369,   451,  2919,   691,  5053,   288,
     685,  5056,   263,  4256,  4603,   383,   672,   230,   297,   678,
     197,  2033,   221,  2035,  2431,   553,   685,   473,  5125,  2436,
     656,  1937,   672,   284,   399,   691,   230,   402,   541,   542,
     134,   544,   263,   546,  2451,   277,   595,   279,   437,   630,
     633,    25,   516,   230,    75,   302,   633,  3630,   684,   170,
    5105,   564,   646,   170,   510,   646,  2592,   678,     9,   672,
    3266,   672,  1987,  2927,   685,   130,   625,  2104,   133,   369,
    1986,  1987,   150,    17,    18,  2492,   378,   435,   691,   302,
     691,  2118,    33,  1999,   400,   447,    83,  2109,  2110,  2111,
     211,   691,   685,   686,   211,   400,  2012,   253,   302,   686,
      97,  2017,   652,  2818,   691,  3670,  2022,  2032,  2033,  2025,
    2035,   400,   128,  4352,   270,   302,  2032,  2033,  2613,  2035,
      62,    63,  4361,  4463,   355,  4465,   383,   283,  3698,   684,
     372,    73,   197,   688,    18,  3670,  2631,  2062,   587,  2680,
    2557,  2066,  2058,  3565,  2680,   266,  2062,  3569,    44,   266,
    2066,    35,    18,   494,  2562,    51,  2562,  4801,   279,  2613,
     383,   539,   279,  2088,  2089,   230,  5076,   633,   490,  3382,
    2086,  2087,  2088,  2089,  2090,   611,  2630,  2631,   536,   383,
     221,  3789,   581,  2708,  2109,  2110,  2111,  2103,  2104,   243,
    3382,  4290,   434,  2109,  2110,  2111,   383,  2113,   672,   475,
    3764,   606,  2118,   130,   665,   604,   133,   310,   311,    81,
     366,   672,   673,   674,   221,  2252,  4840,   691,   623,  2135,
     686,    93,   238,   326,  2708,   691,   170,  3936,   689,   640,
     144,   630,   643,   611,   390,   394,  4567,   302,   579,  2155,
    4571,  4885,   564,   584,  2007,    17,    18,   646,   369,   260,
    2965,  1428,   369,    50,  1431,  2970,   150,  1434,   633,  1079,
    3204,   207,  3870,   207,   622,  1085,  1086,   211,  3132,  3204,
     197,  2196,  4871,  4872,    17,    18,   515,   355,   399,   276,
    2196,   402,   399,   116,  3686,   402,   638,   518,   519,   630,
     665,  4162,   685,   686,  2748,  2220,  2212,   672,   673,   674,
      81,   526,  2180,   230,  2220,   646,   526,  2223,  2224,  4953,
    4954,   686,    93,  3476,   685,   686,  3239,   105,   383,  2235,
    2236,  2084,   266,  2239,   637,   638,   130,    62,    63,   345,
     690,   203,   305,   349,   490,   279,  2252,   243,  4209,  4210,
     356,    61,  2258,   656,   160,   161,  2236,   685,   686,    17,
      18,   657,   658,  3154,   611,  2271,   353,   685,   686,  3694,
    3483,   464,   465,  3142,  3143,  3144,  3145,   685,   686,   263,
     513,   684,   672,   673,   674,   302,   209,   250,   250,   263,
     686,   378,   685,   686,  3215,  2422,   250,  2150,   611,  2152,
     250,  3514,  3515,   197,   685,   686,   581,  2434,   170,   685,
     686,  2326,   274,   287,   691,  2321,   684,   611,   564,   628,
    2326,   182,  2328,   581,  4745,   685,   686,   250,  3541,   685,
     686,  4752,   203,  3988,   611,   369,   230,   170,   444,   547,
     672,   673,   674,   686,  3559,   207,   176,  2932,   684,   211,
     518,   519,   685,   686,   675,   676,   677,   678,   679,   680,
     681,   682,   449,  4032,  3667,   399,   383,  3663,   402,  4168,
    3666,   355,  4171,  4172,   160,   253,   186,   599,   211,   250,
     190,  4036,   515,  2927,     6,  3715,   684,   633,  2932,   684,
    4189,   684,   270,  2399,   204,   684,  2402,   685,   686,   505,
     684,   375,   376,   274,   266,   283,  3709,  2534,   302,  4208,
     684,  4036,   170,   684,  4039,   684,  2422,   279,   329,   330,
      17,    18,   684,   334,   335,   336,   407,  3709,  2434,   685,
     686,  2284,   684,   266,   684,  2562,   684,  2564,  3653,   684,
    2293,  2294,   685,   686,   684,   105,   279,   685,   686,   685,
     686,   686,  3175,   211,   665,   684,   611,  4112,   665,   684,
     547,   672,   673,   674,   684,   672,   673,   674,   685,   686,
     685,   686,   684,   435,   685,   686,    17,    18,   685,   686,
    5194,   685,   686,   685,   686,   684,  3440,   461,   366,   383,
     640,   641,  2634,   643,   684,   645,   685,   686,   685,   686,
     684,  3127,  3128,  3129,   637,   638,   684,   369,   266,   677,
     678,   679,   680,   681,   682,   685,   686,   407,   685,   686,
     684,   279,   684,   656,   685,   686,   685,   686,  2534,   685,
     686,   341,   685,   686,   518,   519,   369,   399,   684,  4239,
     402,  4241,   684,  4243,   650,   416,  2552,   684,  3179,  3180,
    3181,   684,  2558,  3179,  3180,  3181,  2562,   684,  2564,  2565,
     534,   667,  3670,   691,   435,   684,   399,   684,   491,   402,
     684,  4435,  4436,   170,   684,  4996,  4997,   685,   686,   308,
     684,   310,   311,  3090,  4448,   684,  2592,   587,  3132,  4289,
     513,   684,  4456,   253,   611,   684,  3811,   326,  3142,  3143,
    3144,  3145,  4466,  4467,   105,   219,   685,   686,   685,   686,
     270,   369,   490,   536,   211,   685,   686,  3248,   685,   686,
     685,   686,  3248,   283,    17,    18,   685,   686,   684,   170,
    4883,   665,    28,   684,  4882,   684,   446,   684,   672,   673,
     674,   399,    20,   182,   402,   685,   686,  3660,   685,   686,
    2777,   684,   686,   684,  2660,  3689,   684,  3272,   581,  2665,
     684,   584,   685,   686,  3689,   150,   685,   686,   684,   266,
     211,  3476,   684,  2679,  2680,   685,   686,    73,  2805,  2806,
     562,  2687,   279,   685,   686,   684,   564,    83,   633,    17,
      18,   675,   676,   677,   678,   679,   680,   681,   682,   622,
     685,   686,  2708,  3339,   684,  4374,   366,   630,  3344,   684,
    2716,   684,  2718,  2719,  2841,   329,   330,   611,   685,   686,
     334,   335,   336,   684,  4027,   266,  4395,   105,  4244,   684,
     390,  4391,   684,  4393,   436,   464,   465,   133,   279,  2745,
    4244,  2685,  4396,   684,  3359,  4027,   685,   686,   685,   686,
     685,   686,   253,   685,   686,  2761,  2771,  2772,  4392,   684,
    2766,   685,   686,   685,   686,  2771,  2772,  4392,  3921,   270,
     684,  2777,   369,   685,   686,   685,   686,   170,   685,   686,
     685,   686,   283,   685,   686,   684,  2766,   684,   166,  3144,
    3145,  1299,  1300,  4004,  4005,   684,   684,   494,   684,  2805,
    2806,   684,   399,   665,   684,   402,   397,   684,   684,   684,
     672,   673,   674,   578,   684,   684,   684,   684,   211,   684,
     684,   684,   390,   685,   202,   684,   204,   684,   369,   684,
     490,   684,   665,   684,   684,  2841,   684,   684,   684,   672,
     673,   674,   170,   221,   240,  3957,   242,  4150,   684,   684,
     228,   599,   685,   686,  4552,  4553,   684,   684,   399,   390,
     684,   402,   164,   686,  3366,   366,   245,   245,  4150,   533,
     355,    83,    52,   266,   690,   253,   693,   299,   274,    52,
     686,   397,   260,   211,   390,    97,   279,   207,   390,   390,
     501,  4071,   270,  2899,   515,   691,  3440,   526,   175,   684,
     288,   204,   558,   578,   564,   283,   533,   665,  2914,   558,
     288,   167,   299,   204,   672,   673,   674,    92,  4298,   297,
    2926,   391,   686,   686,  2930,   166,   574,   685,  4036,   685,
     507,   143,   133,   119,     6,   692,    17,    18,   266,   396,
    4595,   118,     4,   506,   263,   646,   692,   686,   416,   164,
      59,   279,   467,   686,   691,    73,  4590,    13,   652,   685,
     685,  3103,   685,   685,   149,    10,   686,  2820,  2821,  2822,
    2823,   685,  2825,  2826,   691,   685,   369,   685,   685,   375,
     376,    58,   685,  4714,   656,   685,   382,    58,   366,   490,
     287,    68,   691,   590,   390,   684,   691,    68,   390,   168,
     299,   299,    52,   299,  4112,    82,   399,   299,  4221,   402,
     299,    82,   390,   299,   672,   686,   686,    94,    95,    96,
    3527,   578,   400,    94,    95,    96,   243,   684,   294,   207,
     304,   686,   599,   518,   519,   686,   690,   114,   599,   435,
    4700,   369,   686,   114,  3675,   416,   693,   599,   686,  3675,
     204,   686,    17,    18,   672,   691,   686,    73,   686,   437,
     558,   263,   679,   564,   276,   264,   576,  4722,   665,   191,
    3685,   399,   204,   686,   402,   672,   673,   674,   175,   558,
     530,   686,  3589,  4379,   684,   422,   182,  2940,  2941,   170,
    2943,   210,  2945,  2946,  2947,  2948,  2949,  2950,  2951,    50,
     176,  2954,    83,   653,  2957,   207,  4766,   679,  2961,   685,
      91,  3685,   490,   145,  3120,   511,  3122,   241,  4543,  3134,
    3126,  3127,  3128,  3129,   665,   684,   241,   421,  3134,   685,
     211,   672,   673,   674,    56,  3141,  4516,   515,   119,   686,
    3146,   353,   686,   652,   685,   686,   628,  3274,  3154,   632,
     686,   685,   207,  3159,   207,  3791,   685,  4811,  3794,  3795,
     685,   685,   685,   375,   376,   679,   378,   685,   685,  3175,
     516,   678,   685,  3179,  3180,  3181,  4472,   682,   686,  4879,
      17,    18,   686,   686,   684,   266,   564,   168,   685,   685,
     675,   676,   677,   678,   679,   680,   681,   682,   279,   685,
     137,   685,   587,  3209,   685,   170,   686,   685,   685,   685,
     684,   684,   684,   587,   685,   587,   599,   686,   251,   686,
     260,   686,   417,   684,    13,   219,   622,   207,   686,   204,
     204,   684,   684,   285,   207,   686,   691,   449,  3244,   686,
     685,   179,  3248,   621,  3371,   691,   211,  3262,  3254,   691,
    3265,   496,   445,   686,   632,   633,  3262,   626,   515,  3265,
    3266,    17,    18,   686,   204,   686,   587,   344,  3274,   250,
    4925,   627,   665,   344,  3254,   653,   654,   390,   656,   672,
     673,   674,  3288,   390,  3290,   362,    17,    18,   369,   221,
     400,   362,   685,   686,   672,   263,   686,   364,   547,   547,
    4925,   266,   506,   547,   547,   547,   656,   685,   686,   204,
     390,   689,   690,   132,   279,   590,   684,   672,   399,   672,
     672,   402,  4434,   672,   672,   672,   686,   672,   672,   672,
     672,   672,  3338,   170,   672,   547,   672,   665,  4450,   672,
     672,   672,  3348,  3349,   672,   673,   674,    17,    18,  3355,
     331,  5011,  5012,  3350,   672,   672,  4310,   685,   686,  3356,
     672,  5015,   672,   672,   672,  3371,  3372,   672,   672,   350,
     628,  3377,   298,   633,   211,   691,  3382,  3392,   685,   164,
     259,   259,  4597,   407,  3381,  5010,  3392,   621,     7,   684,
    3387,   691,   373,   686,   672,   685,  3393,  3394,  3404,   686,
     685,   685,   685,   685,   369,  3411,  3412,   484,   672,   685,
    4713,  3417,  5072,   685,   170,   686,   599,  3419,   691,   686,
     599,   691,   661,  4008,  5079,   599,   503,   294,  3434,   266,
      89,  4713,   503,   684,   399,  3288,   570,   402,    12,   170,
     599,   507,   279,   672,   684,   397,   207,   207,  2280,  2281,
    4830,   587,   207,   267,  5079,   211,  5116,   587,   451,   686,
     179,   684,   383,   270,  4008,  2297,   270,    20,  3474,   404,
    4715,   346,  3478,   204,  2306,  2307,     7,   684,   203,  4513,
     211,   390,   517,   686,   621,    50,  4122,  4595,  4513,   566,
     228,   691,  5117,   119,   119,   566,   587,   587,    17,    18,
     170,   587,    81,   416,  3357,  3358,   583,   599,   416,   416,
     266,   145,   583,   272,   579,   272,   416,   145,   579,   416,
      50,   470,   416,   279,   416,    17,    18,   418,   416,   416,
     690,   684,   369,  3386,   684,   266,   684,  4491,   684,   221,
     691,   211,   684,   684,   679,   684,   261,   261,   279,   507,
     416,  2383,  2384,  2385,  2386,   686,   685,   685,   685,   685,
     685,   684,   399,   397,  3417,   402,   686,   451,   685,   685,
     691,   685,   684,   679,   390,    50,   684,  3583,   245,   684,
     684,   562,   361,   672,   665,   684,   686,   685,  3594,   474,
     507,   672,   673,   674,   207,   451,   266,   691,   579,   672,
     685,   685,   270,   686,   685,   686,   685,   270,   686,   279,
    3752,   655,   486,   369,   684,   684,   119,  3744,   416,   352,
     654,   684,   686,   587,   274,   243,  4841,   435,   460,   599,
     684,   691,   225,   690,   685,  4648,   383,  4940,   369,   686,
     686,    50,   685,   399,  4756,  4757,   402,  4759,  3654,   509,
     656,   170,  4237,   285,   685,   685,   685,   488,  4940,   621,
      50,  3667,   185,  3669,   400,   219,   297,  3673,   399,  3675,
     157,   402,   281,   686,   685,   289,   686,   416,   170,  3685,
    3686,   686,   270,  4795,   270,   533,   390,  3814,   660,   684,
     686,   274,   211,  4237,   684,   686,   685,   685,   685,   369,
     665,   684,   684,  3709,   274,   274,   656,   672,   673,   674,
     686,  3717,    20,   684,   390,   433,   685,  3732,   390,   211,
      20,   686,    83,   249,  4678,  3731,  3732,   204,   204,   399,
    4684,   204,   402,   590,    63,  4748,   288,   685,  3744,   685,
    4955,  3594,   685,   685,   685,   261,   685,   266,   352,   685,
    3756,   685,  3758,   686,   685,   276,   445,   685,    50,   686,
     279,    18,   397,   656,   260,   685,  4310,   685,   691,   685,
     633,   686,   633,   684,   266,   685,   502,    20,   684,    75,
    3782,  4893,   686,  4895,  4896,   686,  3792,   279,  3785,   685,
      20,  5006,   633,   182,  3796,  3801,   685,   507,  3804,   182,
     686,   133,   685,   133,   581,   105,    66,   684,  3814,   431,
     691,  3817,   684,  3819,   684,  3821,  3822,  4925,    87,   525,
     153,   133,   383,    17,    18,  4838,   184,   686,   665,  3835,
    3836,   685,   352,   686,   685,   672,   673,   674,  3691,    17,
      18,  3847,   146,  5088,  3850,   274,   581,   685,   685,   686,
     369,   684,   633,   633,   390,   685,   396,   686,   684,   290,
     684,  5164,  3877,   685,   685,   328,   166,   643,  3874,   643,
     549,  3877,    37,   179,  3880,  5178,   496,   369,   485,  3885,
     399,  5184,  5164,   402,   685,   685,  3892,  5190,   430,   495,
     180,   430,    64,   397,  3900,   627,  5178,   684,   684,   486,
     684,  3907,  5184,  5148,   204,  3758,   684,   399,  5190,   665,
     402,   383,  3892,   685,    50,    50,   672,   673,   674,  3772,
      50,   221,   163,   260,   260,   390,   684,   668,   228,   685,
     686,   684,   684,   684,   665,   625,   274,   382,    15,   274,
     627,   672,   673,   674,    17,    18,   133,  4491,    20,   672,
     552,   206,   179,   253,   685,  4082,    18,   569,   204,   413,
     260,   685,  3815,    50,    50,    50,   377,    17,    18,   685,
     270,  5079,  3825,   684,   638,   684,   170,   684,   383,   684,
     165,   684,   684,   283,   495,   656,   403,   686,   288,   589,
     145,   145,   170,   684,   168,   665,   297,   297,    17,    18,
      12,   684,   672,   673,   674,   685,   684,   507,   685,   684,
     570,  4017,    50,  4019,    50,   684,   686,   211,  4972,   684,
     143,  4027,  2854,    17,    18,  2857,  2858,   204,  2860,   153,
       5,  2863,  2864,   211,   390,  2867,   390,   685,    66,    66,
    2872,   684,  5154,   627,   397,  2877,  2878,  2879,  2880,  2881,
     138,   397,   685,  2885,  2886,   621,  2888,   397,    17,    18,
     496,   685,  2894,  2895,  2896,  2897,   366,   159,  2900,  2901,
     621,  2903,   266,   241,    50,   686,  4082,   685,  4084,  4085,
     495,    17,    18,  4089,   245,   279,   383,   684,   266,   515,
     390,   686,  2685,   966,   984,  2959,  1384,   170,  4243,  3113,
     400,   279,  4720,  4239,  1064,  4111,  4241,  4739,    17,    18,
    3316,  1115,  4366,  4737,  4869,  5051,  1144,  5047,  4561,  4125,
     170,  4822,  4128,  4129,  4233,    51,  2102,  4254,  4134,  4256,
    4136,   622,  3120,  5135,  4678,  4141,  2968,   437,   211,  4009,
    4684,  2022,  3142,  2349,  4150,   712,   665,  2632,  4154,  2630,
    4156,   170,  2631,   672,   673,   674,  1195,  1988,  4755,  1725,
    4379,   211,  4574,  2323,  2913,  3845,  3649,   686,  4318,    17,
      18,  4019,  3654,   665,  5187,   369,   170,  2080,  4946,  4715,
     672,   673,   674,  5025,  5148,  5096,  5130,  4321,  4857,  3668,
     490,   369,   211,   266,   686,  3266,  4376,  4036,  2906,  5042,
    2230,  3411,  4089,  4612,  2914,   399,   279,  4808,   402,  4654,
    3506,   170,    17,    18,   116,   515,   266,   211,  4180,  4214,
    4662,   399,  4228,  4076,   402,  4942,  4653,  5181,  4252,   279,
    4257,  4138,  3566,  3064,   170,  3561,  3569,  5052,  4244,  4857,
      83,    83,  4996,  4385,  4997,  4401,  4874,   266,  4254,  4752,
    4256,  4745,   211,  4568,  4450,  2913,  3407,  1159,  1623,  2731,
     279,   170,  2328,  1091,   564,  4423,  2655,  4935,  4135,  2088,
    1745,  3134,   266,  2621,   176,   211,    17,    18,  1771,  3631,
    1127,  4113,  4926,  3076,  2278,   279,  1702,  2794,  3594,  2430,
    2426,  1257,  2746,  3103,  3225,  2740,   369,  3577,  4054,  2734,
    4730,  5045,   211,  4555,  3907,  1364,  5046,   266,   210,  4387,
    1224,  3993,  4388,  4319,  4298,  4830,    17,    18,  3209,   369,
     279,   621,   170,  4294,  4347,  2261,   399,  4942,  3403,   402,
     266,  4150,  4385,   633,  3274,  2399,    83,  2659,  1490,  4027,
    4346,  3662,  4490,   279,  1447,  3661,  4352,  2614,   250,   399,
     369,  3709,   402,   653,   654,  4361,   656,   266,  4940,   633,
     731,  1781,  4368,   211,  1569,   170,  2192,   621,  2725,  2191,
     279,   621,   672,  4226,  1123,   369,   107,  2010,  4156,  4300,
     399,  3634,  4388,   402,  1452,   685,   686,  1498,  5123,   689,
     690,  4397,  4534,  4580,  4400,  5146,   298,  4763,  5184,  5190,
     838,  3667,  4417,  3226,  1440,   399,   211,  3685,   402,  2223,
     369,  4417,   620,  2271,    17,    18,  2706,  1938,   266,  4425,
     620,  4563,  4419,  2138,    17,    18,  2066,  2699,  4972,   170,
    2698,   279,  1646,   369,   616,  1437,  1518,  1009,  2679,  3329,
     399,  2760,  2321,   402,  3122,  4529,  3419,  4449,   617,  5114,
    3222,  3700,  1016,  2734,   656,  4057,  5142,  4459,   656,   656,
     369,   266,  4468,   399,  4470,    -1,   402,  1648,  1115,   170,
     211,   665,    -1,  1115,   279,  1115,    -1,  4483,   672,   673,
     674,  4483,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,
     399,    -1,   686,   402,   672,   673,   674,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   686,    -1,
     211,    -1,  5130,    -1,    -1,    -1,    -1,    -1,  4533,    -1,
      -1,   369,    -1,    -1,    -1,   266,  4653,  4533,  3360,    -1,
     432,    -1,    -1,    -1,    -1,   437,    -1,    -1,   279,    -1,
      -1,    -1,  3374,    -1,    -1,    -1,    -1,   562,    -1,    -1,
      -1,   399,    -1,    -1,   402,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4568,    -1,   369,   266,    -1,   170,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,   279,    -1,
      -1,    -1,    -1,   598,    -1,   600,    -1,    -1,    -1,   491,
      -1,  5135,   665,   608,   399,    -1,    -1,   402,    -1,   672,
     673,   674,    -1,    -1,    -1,    -1,   621,    -1,   211,    -1,
      -1,   513,    -1,   686,    -1,   665,    -1,    -1,   211,    -1,
     635,    -1,   672,   673,   674,    17,    18,    -1,   369,    17,
      18,    -1,    -1,    -1,    -1,    -1,   686,  5181,    -1,    -1,
      -1,  4643,    -1,    -1,    -1,    -1,   665,  4653,    17,    18,
      -1,    -1,    -1,   672,   673,   674,    -1,    -1,   399,    -1,
    4662,   402,    -1,   266,    -1,    -1,    -1,   686,   369,    -1,
      -1,   665,    -1,   266,  4680,  4681,   279,   579,   672,   673,
     674,    -1,   584,    -1,    -1,    -1,   279,    -1,    -1,    -1,
      -1,    -1,   686,    -1,    -1,    -1,   711,    -1,   399,    -1,
      -1,   402,   604,    -1,    17,    18,   665,  4713,    -1,    -1,
      -1,  4717,    -1,   672,   673,   674,    -1,    -1,    -1,  4725,
     735,  4727,    -1,    -1,    -1,   740,    -1,   686,   630,   665,
      -1,    -1,    -1,    -1,    -1,    -1,   672,   673,   674,    -1,
      -1,    -1,    -1,    -1,   646,    -1,    -1,    -1,    -1,    -1,
     686,    -1,    -1,    17,    18,    -1,   665,    -1,    -1,    -1,
      -1,    -1,    -1,   672,   673,   674,   369,    -1,   783,  4775,
      -1,  4777,  4778,    -1,    -1,    -1,   369,   686,   170,    -1,
    4786,    -1,   170,    -1,    -1,   800,  4639,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4801,   399,    -1,    -1,   402,
      -1,   170,    -1,    -1,    -1,    -1,   399,    -1,    -1,   402,
      -1,    -1,    -1,    -1,    -1,    -1,  4822,   665,    -1,   211,
    4822,    -1,    -1,   211,   672,   673,   674,    -1,    -1,  4956,
      -1,    -1,    -1,    -1,   849,   850,   851,   852,   686,    -1,
      -1,    -1,   211,    -1,    -1,   860,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4868,    -1,    -1,    -1,   170,    -1,    -1,
     665,    -1,  4868,    -1,    -1,  4867,    -1,   672,   673,   674,
      -1,    -1,    -1,    -1,   266,    -1,    -1,    -1,   266,  4885,
      -1,   686,    -1,   898,    -1,   900,    -1,   279,  4741,    -1,
      -1,   279,    -1,    -1,    -1,  4901,  4902,   266,   211,  4905,
      -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,  5050,    -1,
     279,    -1,    -1,    -1,    -1,  5042,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,   941,    -1,    -1,  4935,
      -1,   672,   673,   674,  4940,    -1,    -1,    -1,    -1,    -1,
    4946,    -1,   957,   958,    -1,   686,   961,   211,  4801,    -1,
    4956,    -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,   279,  5094,    -1,    -1,
      -1,   672,   673,   674,    -1,    -1,    -1,   369,   993,    -1,
      -1,   369,    -1,    -1,    -1,   686,    -1,  4993,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     369,    -1,   266,    -1,    -1,    -1,    -1,   399,    -1,    -1,
     402,   399,    -1,    -1,   402,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     399,    -1,  4885,   402,    -1,    -1,  5042,    -1,    -1,  5045,
    5046,  5168,    -1,    -1,    -1,    -1,    -1,  5174,    -1,  5191,
      -1,    -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,
      -1,    -1,   665,    -1,    -1,    -1,    -1,    -1,    -1,   672,
     673,   674,   665,    -1,    -1,    -1,    -1,    -1,    -1,   672,
     673,   674,    -1,   686,    -1,    -1,   399,    -1,  5094,   402,
      -1,    -1,    -1,   686,    -1,    -1,  4949,  4950,  5100,    -1,
      -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,   402,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5164,    -1,
    1175,    -1,  5168,  1178,  1179,    -1,    -1,    -1,  5174,    -1,
      -1,    -1,  5178,    -1,    -1,    -1,    -1,    -1,  5184,    -1,
    5033,  5034,    -1,    -1,  5190,    -1,    -1,    -1,  1203,  1204,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1212,  1213,  1214,
    1215,  1216,  1217,  1218,  1219,  1220,  1221,  1222,  1223,    17,
      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1233,  1234,
      -1,  1236,  1237,    -1,    17,    18,    -1,  1242,  1243,  1244,
      -1,    -1,  1247,  1248,  1249,  1250,  1251,  1252,    -1,  1254,
    1255,  1256,    -1,    -1,    -1,    -1,    -1,    -1,  1263,  1264,
      -1,  1266,  1267,  1268,  1269,  1270,    -1,    -1,  1273,  1274,
    1275,  1276,    -1,  1278,  1279,  1280,  1281,    -1,  1283,  1284,
    1285,  1286,  1287,   665,    -1,  1290,    -1,   665,  1293,  1294,
     672,   673,   674,  1298,   672,   673,   674,  1302,  1303,  1304,
      -1,    -1,    -1,    -1,   686,    -1,   665,    -1,   686,  1314,
    1315,  1316,    -1,   672,   673,   674,    -1,    -1,    -1,  1324,
      -1,    17,    18,    -1,  1329,    -1,    -1,   686,    -1,    -1,
      -1,  1336,    -1,    -1,    -1,  1340,  1341,  1342,  1343,    -1,
    1345,  1346,    -1,    -1,  1349,  1350,  1351,  1352,  1353,  1354,
    1355,  1356,  1357,  1358,  1359,  1360,    17,    18,  1363,    -1,
    1365,    -1,   665,    -1,    -1,    -1,    -1,    -1,    -1,   672,
     673,   674,   170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   686,    -1,    -1,    -1,   170,    -1,    -1,
      17,    18,     6,    -1,    -1,    -1,    -1,    -1,    12,    -1,
      14,    -1,    16,    -1,    -1,    17,    18,    -1,    -1,    17,
      18,   665,    -1,   211,    28,    -1,    30,    -1,   672,   673,
     674,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   211,    -1,
      -1,    -1,   686,    -1,    -1,  1440,    17,    18,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1450,    60,  1452,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    -1,    -1,
      -1,    -1,    -1,  1468,    -1,    -1,    -1,    -1,   266,    83,
      -1,    -1,    -1,    -1,   170,    -1,    -1,    91,    -1,    -1,
      -1,   279,    -1,   266,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   279,    -1,    17,    18,
      -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,   170,
      -1,    -1,    -1,    -1,    -1,   211,    17,    18,    -1,   133,
      -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1535,    -1,   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,
     154,    -1,    -1,   170,    -1,    -1,    -1,  1552,   162,    -1,
     211,    -1,   166,    -1,   168,    -1,    -1,    -1,   170,    -1,
      -1,    -1,   170,    -1,   178,    -1,    -1,    -1,    -1,    -1,
     266,   369,    -1,    17,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   279,   211,    -1,   369,    -1,   202,   170,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   211,
      -1,   399,    -1,   211,   402,   266,    -1,    -1,  1613,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   399,    -1,   279,   402,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,   242,    -1,
     211,    -1,    17,    18,   248,    -1,   250,    -1,    -1,   266,
      -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   170,   279,    -1,   266,    -1,    -1,    -1,   266,   273,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   279,    -1,   170,
      -1,   279,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   297,    -1,   266,    -1,    -1,    -1,    -1,
      -1,    -1,   211,    -1,    -1,    -1,    -1,    -1,   279,    -1,
      -1,    -1,    -1,   399,    -1,    -1,   402,    -1,   369,    -1,
     211,    -1,    -1,    -1,    -1,    -1,    -1,   331,    17,    18,
      -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,
      -1,    -1,    -1,    17,    18,    -1,   350,    -1,   399,    -1,
     354,   402,   369,    -1,    -1,    -1,    -1,   266,    -1,  1754,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,
     279,   369,    -1,    -1,    -1,   266,    -1,   211,    -1,    -1,
      -1,    -1,   399,    -1,    -1,   402,    -1,    -1,   279,    -1,
      -1,   395,    -1,    -1,    -1,   170,   400,   399,   369,  1794,
     402,   399,    -1,    -1,   402,   409,    -1,   411,    -1,    -1,
      -1,    -1,   416,    -1,    -1,   419,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,   402,   266,    -1,    -1,    -1,   211,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   279,    -1,    -1,    -1,    -1,
     454,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     369,    -1,    -1,    -1,    -1,   469,   470,   471,   472,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   665,   369,    -1,
      -1,   170,    -1,    -1,   672,   673,   674,    -1,    -1,    -1,
     399,   266,   665,   402,   498,    -1,   170,    -1,   686,   672,
     673,   674,    -1,    -1,   279,    -1,    -1,    -1,   399,    -1,
      -1,   402,    -1,   686,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   211,    -1,  1919,  1920,  1921,    -1,    -1,    -1,
    4742,    -1,    -1,    -1,    -1,   369,    -1,   211,    -1,  1934,
      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,    -1,    17,    18,   562,    -1,
    1955,    -1,    -1,  1958,  1959,   399,  1961,  1962,   402,    -1,
      -1,    -1,    -1,    -1,  1969,   579,  1971,   266,   582,   665,
      -1,    -1,    -1,    17,    18,    -1,   672,   673,   674,    -1,
     279,    -1,   266,    -1,   369,    -1,    -1,    -1,   602,    -1,
     686,    -1,    -1,   607,    -1,   279,  2001,    17,    18,    -1,
      -1,    -1,    -1,    -1,   665,  2010,    -1,   621,    -1,    -1,
      -1,   672,   673,   674,   399,    17,    18,   402,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   686,  4848,  4849,    -1,    -1,
    4852,  4853,  4854,  4855,    -1,    -1,    -1,    -1,   665,    -1,
      -1,    -1,    -1,    -1,    -1,   672,   673,   674,    -1,    -1,
      -1,    -1,  2057,   665,    17,    18,    -1,   665,    -1,   686,
     672,   673,   674,    -1,   672,   673,   674,    -1,    -1,    -1,
     369,    -1,    -1,    -1,   686,    -1,   690,   685,  2083,    -1,
      17,    18,    -1,   170,   665,   369,    -1,  2092,    -1,    -1,
      -1,   672,   673,   674,    -1,    -1,    -1,    -1,    -1,   170,
     399,    -1,    -1,   402,   685,    -1,    -1,    -1,    -1,    -1,
    2115,    -1,    -1,    -1,    -1,   399,    -1,    -1,   402,    -1,
      -1,    -1,    -1,    -1,   211,    -1,   170,    -1,    -1,  4951,
    4952,  2136,    -1,    -1,    -1,    -1,    -1,    -1,  4960,  2144,
     211,    -1,    -1,    17,    18,    -1,   665,    -1,  2153,    -1,
     170,    -1,    -1,   672,   673,   674,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,   685,   211,   170,    -1,
      -1,   672,   673,   674,    -1,    -1,    -1,    -1,    -1,   266,
      -1,    -1,    -1,    -1,   685,    -1,    -1,    -1,    -1,    -1,
      -1,   211,   279,    -1,    -1,   266,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,   279,   211,
      -1,    -1,    -1,    -1,    -1,    17,    18,  2222,    -1,    -1,
      -1,   665,   266,    -1,    -1,    -1,    -1,    -1,   672,   673,
     674,    -1,    -1,   170,    -1,   279,    -1,    -1,    -1,    -1,
      -1,   685,    -1,    -1,    -1,    -1,   266,    -1,   211,    -1,
      -1,    -1,    -1,    -1,    -1,    17,    18,    -1,    -1,   279,
      -1,    -1,    -1,    -1,   266,    -1,  2271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   211,    -1,    -1,   279,    -1,    -1,
     665,    -1,   369,    -1,    17,    18,    -1,   672,   673,   674,
      -1,    -1,    -1,    -1,    17,    18,   170,    -1,   369,    -1,
     685,    -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   399,    -1,    -1,   402,   279,    -1,  2323,    -1,
      -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,   399,   266,
      -1,   402,    -1,    -1,    -1,    -1,    -1,   211,    -1,    -1,
    2345,    -1,   279,    -1,    -1,    -1,    -1,    17,    18,   369,
      -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,   402,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   665,   369,   170,    -1,
      -1,    17,    18,   672,   673,   674,    -1,    -1,    -1,   399,
      -1,   665,   402,    -1,    -1,    -1,   685,    -1,   672,   673,
     674,    -1,   266,    -1,    -1,    -1,    -1,   399,    -1,    -1,
     402,   685,    -1,  2408,    -1,   279,   369,  2412,   170,   211,
      -1,    -1,  2417,  2418,    -1,    -1,    -1,    -1,    -1,    17,
      18,  2426,    -1,  2428,    -1,  2430,  2431,  2432,  2433,    -1,
      -1,  2436,   369,    -1,    -1,    -1,   399,   170,    -1,   402,
      -1,  2446,    -1,  2448,    -1,  2450,  2451,   170,  2453,   211,
    2455,    -1,  2457,  2458,  2459,  2460,    -1,  2462,  2463,    -1,
      -1,  2466,   399,    -1,   266,   402,    -1,    -1,    -1,    -1,
    2475,    -1,    -1,    -1,    -1,    -1,  2481,   279,   211,  2484,
      -1,  2486,    -1,  2488,  2489,    -1,  2491,  2492,   211,    -1,
      -1,  2496,  2497,  2498,    -1,   369,    -1,  2502,  2503,  2504,
     170,  2506,    -1,  2508,   266,  2510,    -1,  2512,    -1,  2514,
      -1,    -1,    -1,    -1,  2519,    -1,    -1,   279,    -1,    -1,
      -1,    -1,    -1,    -1,   170,   399,    -1,    -1,   402,    -1,
    2535,    -1,    -1,   266,    -1,    -1,  2541,    -1,    -1,  2544,
      -1,   211,  2547,   266,    17,    18,   279,    -1,  2553,    -1,
      -1,    -1,  2557,    -1,    -1,    -1,   279,    -1,    -1,    -1,
      -1,    17,    18,    -1,    -1,   211,    -1,   369,    -1,    -1,
      -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,   665,    -1,
      -1,    -1,    -1,    -1,    -1,   672,   673,   674,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,   266,   399,   685,    -1,
     402,   672,   673,   674,    -1,    -1,    -1,   369,  2613,   279,
      -1,    -1,    -1,   211,   685,    -1,    -1,    -1,    -1,    -1,
     266,   665,    -1,    -1,    -1,  2630,  2631,  2632,   672,   673,
     674,    -1,    -1,   279,    -1,    -1,   369,   399,    -1,    -1,
     402,   685,    -1,    -1,    -1,   665,   369,    -1,    -1,    -1,
      -1,    -1,   672,   673,   674,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   665,    -1,   685,   399,    -1,   266,   402,
     672,   673,   674,    -1,    -1,    -1,   399,    -1,    -1,   402,
      -1,   279,    -1,   685,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,   369,
      -1,    -1,   665,    -1,    -1,    -1,    -1,    -1,    -1,   672,
     673,   674,    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   685,   369,    -1,   600,    -1,    -1,   665,   399,
      -1,    -1,   402,    -1,    -1,   672,   673,   674,   211,    -1,
      -1,    -1,    -1,  2748,    -1,    -1,    -1,    -1,   685,    -1,
      -1,    -1,    -1,   399,    -1,   211,   402,    -1,    -1,    -1,
     635,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2773,    -1,
      -1,   369,    -1,    -1,    -1,    -1,    -1,  2782,    -1,    -1,
      -1,    -1,    -1,    -1,  2789,    -1,    -1,    -1,    -1,    -1,
      -1,   665,    -1,   266,    -1,    17,    18,    -1,   672,   673,
     674,   399,    -1,    -1,   402,    -1,   279,    -1,    -1,    -1,
     266,   685,  2817,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      17,    18,    -1,   279,  2829,  2830,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   711,    17,    18,    -1,
      -1,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    17,    18,    -1,    -1,    -1,
      -1,    -1,    -1,   665,    -1,   740,    -1,    -1,    -1,    -1,
     672,   673,   674,    -1,    -1,    -1,    -1,    -1,    -1,    17,
      18,    -1,    -1,   685,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,
      -1,  2906,    -1,   665,    -1,    -1,    17,    18,   783,    -1,
     672,   673,   674,   369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2927,   685,    -1,   800,   399,  2932,  2933,   402,
      -1,    -1,   665,    -1,    -1,    -1,    -1,    -1,    -1,   672,
     673,   674,   665,   399,    -1,    -1,   402,    -1,   170,   672,
     673,   674,   685,    -1,    -1,    -1,    -1,    -1,  2963,  2964,
      -1,    -1,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    17,    18,   170,    -1,    -1,    -1,   852,    -1,    -1,
      -1,    17,    18,  2988,    -1,    -1,    -1,  2992,    -1,   211,
     170,    -1,    -1,    -1,   170,   665,    -1,    -1,    -1,    -1,
      -1,    -1,   672,   673,   674,    -1,    -1,    -1,   170,    -1,
      -1,    -1,    -1,    -1,   211,   685,  3021,  3022,    -1,   665,
      -1,    -1,    -1,   898,    -1,    -1,   672,   673,   674,    -1,
      -1,   211,   170,    -1,    -1,   211,    -1,    -1,    -1,   685,
      -1,  3046,    -1,    -1,   266,    -1,    -1,    -1,    -1,   211,
    3055,    -1,  3057,    -1,  3059,    -1,    -1,   279,    -1,   170,
      -1,    -1,    17,    18,    -1,    -1,   941,   665,    -1,   266,
      -1,    -1,    -1,   211,   672,   673,   674,    -1,    -1,    -1,
      -1,    -1,   279,    -1,    -1,  3090,   266,   685,  3093,    -1,
     266,  3096,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   279,
     211,    -1,    -1,   279,   266,    -1,    -1,    -1,  3113,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   279,    -1,    -1,
      -1,    -1,    17,    18,   170,    -1,    -1,  3132,   266,    -1,
      -1,    -1,    17,    18,   170,    -1,    -1,  3142,  3143,  3144,
    3145,   279,  3147,    -1,    -1,    -1,    -1,   369,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   211,    -1,    -1,   279,    -1,
      -1,    -1,   369,    -1,    -1,   211,    -1,   399,    -1,    -1,
     402,    -1,    -1,    -1,    -1,    -1,    -1,  3192,    -1,   369,
      -1,    -1,   665,   369,    -1,    -1,    17,    18,    -1,   672,
     673,   674,   399,    -1,    -1,   402,    -1,   369,    -1,   665,
      -1,    -1,   685,    -1,    -1,   170,   672,   673,   674,   399,
     266,    -1,   402,   399,    -1,    -1,   402,    -1,    -1,   685,
     266,   369,    -1,   279,    -1,    -1,    -1,   399,    -1,    -1,
     402,    -1,    -1,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   211,    -1,   369,    -1,
      -1,   399,    -1,    -1,   402,    -1,  3271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,  3283,    -1,
      -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,   399,    -1,
      -1,   402,    -1,    17,    18,    -1,    -1,    -1,    -1,    -1,
    1175,    -1,    -1,  1178,    -1,    -1,    -1,    17,    18,    -1,
      -1,   266,    -1,    -1,    -1,    -1,   211,    -1,    -1,    -1,
      -1,    -1,    -1,   369,   279,    -1,   211,    -1,  1203,  1204,
      17,    18,    -1,   369,    -1,    -1,    -1,  1212,  1213,    -1,
      -1,  1216,  1217,  1218,  1219,  1220,  1221,  1222,  1223,   170,
      -1,    -1,    -1,   399,    -1,    -1,   402,    -1,  1233,  1234,
      -1,  1236,  1237,   399,    -1,    -1,   402,  1242,  1243,    -1,
      -1,   266,  1247,  1248,  1249,  1250,  1251,  1252,    -1,  1254,
    1255,   266,    -1,    -1,   279,    -1,    -1,    -1,  1263,  1264,
     211,  1266,  1267,    -1,   279,    -1,    -1,    -1,  1273,  1274,
    1275,  1276,  3407,  1278,    -1,    -1,  1281,    -1,  1283,  1284,
    1285,  1286,  1287,    -1,   369,  1290,    -1,    -1,  1293,  1294,
      -1,    -1,    -1,  1298,    -1,    -1,    -1,  1302,  1303,  1304,
      -1,    -1,    -1,    -1,    -1,  3440,    -1,    -1,    -1,  1314,
    1315,  1316,    -1,   665,   399,   266,   170,   402,    -1,  1324,
     672,   673,   674,    -1,    17,    18,    -1,    -1,   279,    -1,
     170,  1336,    -1,   685,    -1,  1340,  1341,    -1,   665,    -1,
    3475,    -1,    17,    18,   369,   672,   673,   674,    -1,    -1,
      -1,  3486,    -1,   170,   369,   665,    -1,   211,   685,   665,
    1365,    -1,   672,   673,   674,    -1,   672,   673,   674,    -1,
      -1,   211,    -1,   665,   399,   685,    -1,   402,    -1,   685,
     672,   673,   674,  3518,   399,    -1,    -1,   402,    -1,  3524,
    3525,    -1,  3527,   685,   211,    -1,    -1,   665,    -1,    -1,
      -1,    -1,    -1,  3538,   672,   673,   674,    -1,  3543,    -1,
      -1,  3546,   266,  3548,  3549,    17,    18,   685,   369,    -1,
      -1,    -1,    -1,    -1,   665,   279,   266,    -1,    -1,    -1,
      -1,   672,   673,   674,    -1,    -1,    -1,    -1,    -1,   279,
      -1,    17,    18,    -1,   685,  1450,    -1,  1452,   399,   266,
      -1,   402,    -1,    -1,  3589,    -1,    -1,    -1,    17,    18,
      -1,    -1,   279,  1468,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   665,
    3625,    -1,    -1,    -1,    -1,   170,   672,   673,   674,   665,
      -1,    17,    18,    -1,    -1,    -1,   672,   673,   674,   685,
      -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,   211,   685,
      -1,    -1,    17,    18,    -1,    -1,  3661,    -1,    -1,   369,
    1535,    -1,    -1,    -1,    -1,    -1,   211,    -1,    -1,    17,
      18,    -1,    -1,    17,    18,   399,    -1,  1552,   402,    -1,
      -1,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,   399,
      -1,    -1,   402,    -1,    -1,    -1,    17,    18,   170,    -1,
      -1,    -1,    -1,   266,    -1,    -1,  3711,    -1,    -1,    -1,
     665,    -1,   399,    -1,    -1,   402,   279,   672,   673,   674,
      -1,   266,    17,    18,   170,    -1,    -1,    -1,    -1,    -1,
     685,    -1,    -1,    -1,   279,    -1,    -1,  3742,  1613,   211,
      -1,   170,  3747,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3755,    -1,    -1,    17,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   211,    -1,    -1,    -1,    -1,
     665,    17,    18,    -1,    20,    -1,    -1,   672,   673,   674,
     665,    -1,   211,    -1,   170,    -1,    -1,   672,   673,   674,
     685,    -1,    -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,
     685,    -1,    -1,    -1,    -1,   170,   369,   279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,    -1,   170,    -1,   369,   211,   170,    -1,    -1,    -1,
      -1,    -1,    -1,   279,    -1,    -1,   399,   266,    -1,   402,
      -1,    -1,    -1,    -1,   665,    -1,   211,    -1,    -1,   170,
     279,   672,   673,   674,   399,    -1,    -1,   402,    -1,    -1,
      -1,    -1,    -1,   211,   685,    -1,    -1,   211,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     266,    -1,    -1,    -1,  3889,  3890,    -1,    -1,    -1,    -1,
     211,    -1,    -1,   279,    -1,    -1,    -1,   369,    -1,    -1,
      -1,   266,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   279,    -1,   211,    -1,   266,  1794,
      -1,    -1,   266,   369,   170,    -1,    -1,   399,    -1,    -1,
     402,   279,    -1,    -1,    -1,   279,    -1,    -1,    -1,    -1,
     369,   665,    -1,    -1,    -1,   266,    -1,   211,   672,   673,
     674,  3956,    -1,   399,    -1,   665,   402,    -1,   279,    -1,
      -1,   685,   672,   673,   674,   211,    -1,    -1,    -1,    -1,
     399,   266,    -1,   402,    -1,   685,    -1,    -1,   665,    -1,
      -1,    -1,    -1,   369,   279,   672,   673,   674,  3993,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   685,    -1,
      -1,    -1,   266,  4008,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   399,    -1,   279,   402,    -1,    -1,    -1,
     266,   369,    -1,  4028,    -1,   369,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   279,   399,    -1,    -1,   402,    -1,    -1,
      -1,    -1,    -1,    -1,  1919,  1920,  1921,    -1,   369,    -1,
      -1,   399,    17,    18,   402,   399,    -1,    -1,   402,  4064,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,   399,    -1,
    1955,   402,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4096,    -1,    -1,  1969,    -1,  1971,  4102,    -1,    -1,
      -1,    -1,   665,    -1,   399,   369,    -1,   402,    -1,   672,
     673,   674,    17,    18,    -1,    -1,  4121,    -1,    -1,    -1,
     665,    -1,   685,   369,    -1,    -1,  2001,   672,   673,   674,
      -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,   402,    -1,
     685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   399,    -1,    -1,   402,    -1,    -1,    -1,
      -1,    -1,    -1,    17,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    17,    18,    -1,    -1,    -1,    -1,
      -1,    -1,  2057,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   665,    17,    18,    -1,    -1,    -1,    -1,
     672,   673,   674,    -1,    -1,   170,    -1,    -1,  2083,    17,
      18,    -1,    -1,   685,    -1,    -1,    -1,  2092,    -1,   665,
      -1,    -1,    -1,    -1,    -1,    -1,   672,   673,   674,    -1,
      -1,    -1,  4237,    -1,    -1,    -1,   665,    -1,    -1,   685,
    2115,    -1,    -1,   672,   673,   674,   211,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   685,    -1,    -1,    -1,
      -1,  2136,    -1,    17,    18,   170,    -1,    -1,    -1,    -1,
      -1,  4276,    -1,    -1,    -1,    -1,    -1,    -1,  2153,   665,
      -1,   124,   125,   126,   127,   128,   672,   673,   674,  4294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   685,
     665,   266,   207,    -1,  4309,  4310,   211,   672,   673,   674,
     164,    -1,    -1,    -1,   279,    -1,   170,   665,    -1,    -1,
     685,   665,    -1,    -1,   672,   673,   674,   170,   672,   673,
     674,    -1,    -1,    -1,    -1,    -1,    -1,   685,    -1,    -1,
      -1,   685,    -1,    -1,   665,    -1,    -1,   170,    -1,    -1,
      -1,   672,   673,   674,    -1,    -1,    -1,   211,    -1,    -1,
      -1,   266,   170,    -1,   685,    -1,    -1,    -1,   211,    -1,
     665,  4376,    -1,    -1,   279,    -1,    -1,   672,   673,   674,
      -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,    -1,
     685,    -1,   235,   236,   237,   238,  2271,    -1,    -1,   207,
      -1,   665,    -1,   211,   369,  4410,    -1,    -1,   672,   673,
     674,    -1,   266,    -1,    -1,    -1,   170,    -1,    -1,   665,
      -1,   685,    -1,   266,    -1,   279,   672,   673,   674,    -1,
      -1,    -1,    -1,    -1,   399,    -1,   279,   402,    -1,    -1,
      -1,    -1,    -1,   266,  4449,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4459,    -1,   279,   211,   266,    -1,
      -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,    -1,    -1,
    2345,   279,    -1,    -1,    -1,    -1,    -1,    20,    -1,  4484,
      -1,    -1,    -1,    -1,    -1,    28,  4491,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,   402,    -1,    -1,
      -1,  4506,   345,    -1,   347,   348,   349,    -1,    -1,    -1,
      -1,    -1,   266,   356,    -1,   369,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   279,   369,    -1,    -1,    -1,
      73,    -1,    -1,  2408,    -1,    -1,    -1,  2412,    -1,  4544,
      83,  4546,  2417,  2418,    -1,   399,   369,    -1,   402,    -1,
      -1,  2426,    -1,  2428,    -1,  2430,   399,  2432,  2433,   402,
      -1,   369,  4567,    -1,    17,    18,  4571,    20,    -1,    -1,
      -1,  2446,    -1,  2448,    -1,  2450,   399,    -1,  2453,   402,
    2455,    -1,  2457,  2458,  2459,  2460,    -1,  2462,  2463,    -1,
     133,   399,    -1,    -1,   402,    -1,    17,    18,    37,    20,
    2475,   444,    -1,    -1,    -1,    -1,  2481,  4612,    -1,  2484,
      -1,  2486,    -1,  2488,  2489,   369,  2491,    -1,    -1,    -1,
      -1,  2496,  2497,  2498,    -1,   590,    -1,  2502,  2503,  2504,
      -1,  2506,    -1,  2508,    -1,  2510,    -1,  2512,  4643,  2514,
      -1,    -1,    -1,    -1,  2519,   399,    -1,    -1,   402,  4654,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4662,    -1,    -1,
    2535,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     213,    -1,  2547,  4678,    -1,    -1,    -1,    -1,  2553,  4684,
      -1,    28,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,   242,
     665,    -1,    -1,   142,    -1,    -1,    -1,   672,   673,   674,
    4715,    -1,    37,    -1,    -1,    62,    63,   170,    65,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,   168,
      -1,   274,   171,    -1,    -1,  4740,    83,    -1,    -1,    -1,
    4745,    -1,    -1,    -1,    91,    -1,    -1,  4752,    -1,   170,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2632,   211,    -1,
     665,    -1,    -1,    -1,    -1,    -1,    -1,   672,   673,   674,
      -1,    -1,   119,   212,  4779,    -1,    -1,    17,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,   136,
     211,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,
      -1,   240,    -1,   242,    -1,    -1,    -1,   650,    -1,  4814,
      -1,   665,    -1,   266,    -1,    -1,    -1,   142,   672,   673,
     674,   168,   665,   666,   667,    -1,   279,    -1,    -1,   672,
     673,   674,   375,   376,    -1,    -1,   590,    -1,    -1,   382,
      -1,    -1,   665,   168,    -1,   266,   171,   390,    -1,   672,
     673,   674,    -1,    -1,    -1,    -1,    -1,   665,   279,    -1,
     299,    -1,    -1,    -1,   672,   673,   674,    -1,    -1,  4874,
      -1,    -1,    -1,    -1,    -1,  4880,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   324,    -1,   212,    -1,    -1,
      -1,    -1,   435,   240,    -1,   242,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   250,    -1,    -1,    -1,  2782,    -1,   234,
     257,   665,    -1,    -1,  2789,   240,   369,   242,   672,   673,
     674,    -1,    -1,    -1,    -1,    -1,   273,  4932,    -1,    -1,
     170,    -1,    -1,    -1,    -1,    -1,  4941,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   399,    -1,   369,   402,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4972,   511,    -1,
      -1,   211,    -1,    -1,   299,    -1,    -1,    -1,   399,    -1,
      -1,   402,    -1,    -1,   331,    -1,    -1,    -1,    -1,  4994,
      -1,  4996,  4997,  4998,    -1,    -1,    -1,   436,    -1,   324,
      -1,    -1,    -1,   350,    -1,    -1,   445,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   462,    -1,    -1,   266,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   279,
      -1,   480,    -1,    -1,    -1,    -1,    -1,    -1,  5053,    -1,
      -1,  5056,    -1,    -1,    -1,    -1,    -1,    -1,  2933,    -1,
      -1,    -1,   409,    -1,   411,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   419,    -1,    -1,    -1,    -1,    -1,    -1,   622,
      -1,    -1,    -1,  5088,    -1,    -1,   525,    -1,    -1,   528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    5105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   436,    -1,  2988,    -1,    -1,    -1,  2992,    -1,   558,
     445,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   369,
    5135,    -1,    -1,    -1,    -1,    -1,    -1,   462,    -1,   578,
      -1,    -1,   581,  5148,    -1,    -1,  3021,  3022,    -1,    -1,
      -1,   498,    -1,    -1,    -1,   480,    -1,    -1,    -1,   399,
      -1,    -1,   402,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3046,    -1,    -1,    -1,    -1,  5181,    -1,    -1,    -1,
    3055,    -1,  3057,    -1,  3059,    -1,    -1,    -1,  5193,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     525,    -1,    -1,   528,    -1,    -1,    -1,    -1,   555,   556,
     557,    -1,   665,    -1,    -1,   562,    -1,    -1,    -1,   672,
     673,   674,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   579,   558,    -1,   582,    -1,    -1,  3113,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,    -1,    -1,    -1,
      -1,   672,   673,   674,    -1,   602,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   621,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,  3192,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,   686,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,   134,  3283,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,   665,    -1,    -1,    -1,   156,
     157,   158,   672,   673,   674,   162,    -1,    -1,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,   192,   193,    -1,   195,   196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,    -1,    -1,    -1,   226,
     227,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,   243,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,    -1,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,   269,    -1,   271,    -1,   273,    -1,    -1,    -1,
     277,   278,    -1,    -1,   281,   282,    -1,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,  3486,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,  3518,   371,   372,   373,   374,    -1,  3524,
    3525,    -1,   379,    -1,    -1,    14,    -1,   384,    -1,    -1,
     387,   388,   389,  3538,   391,   392,   393,   394,  3543,    -1,
      -1,  3546,    -1,  3548,  3549,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   409,   410,    -1,    -1,    -1,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
      -1,    -1,    -1,    -1,    -1,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,    -1,    -1,   471,   104,   473,   474,    -1,   476,
    3625,    -1,    -1,   480,    -1,    -1,   483,   484,    -1,   486,
     487,   488,    -1,    -1,   491,    -1,   493,   494,   495,    -1,
     497,   498,    -1,   500,    -1,   502,   503,    -1,   505,   138,
      -1,    -1,    -1,   510,   511,   512,  3661,    -1,    -1,    -1,
     517,    -1,    -1,    -1,    -1,   154,    -1,   524,    -1,    -1,
     527,   528,    -1,   530,    -1,   532,    -1,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,   176,   545,    -1,
      -1,   548,   181,   152,    -1,   552,    -1,   554,    -1,    -1,
      -1,   558,    -1,    -1,   193,   562,  3711,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     219,   588,   589,    -1,    -1,   592,   593,   594,   595,    -1,
      -1,    28,  3747,    30,   601,   602,   603,    -1,    -1,    -1,
    3755,   608,   609,   610,    -1,    -1,   613,   614,    -1,   616,
     617,   250,    -1,    -1,    -1,    -1,   623,   256,    -1,   626,
      -1,    -1,    -1,   630,   631,    62,    63,    -1,    65,    -1,
      -1,   638,    -1,    -1,   641,   244,    73,   246,   645,   646,
     647,   648,   649,   650,   651,    -1,    83,    -1,   655,    -1,
      -1,    -1,   659,    -1,    91,   662,    -1,   664,   297,    -1,
     667,    -1,    -1,    -1,    -1,   124,   125,   126,   127,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   686,
      -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   306,   307,   136,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,   325,   326,   327,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   168,    -1,    -1,  3889,  3890,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   235,   236,   237,   238,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   438,
      -1,  3956,    -1,   240,    -1,   242,    -1,    -1,    34,    -1,
      -1,    -1,    38,   250,    28,    -1,    30,    -1,    -1,    -1,
     257,   460,    -1,    -1,    -1,    -1,    52,    53,    -1,   468,
      56,    -1,    -1,    -1,    60,    -1,   273,   476,  3993,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     287,    65,    -1,    -1,    -1,   464,   465,    -1,    -1,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   507,    83,
      -1,    -1,    -1,  4028,    -1,    -1,    -1,    91,   104,    -1,
      -1,   520,   521,    -1,    -1,    -1,   345,    -1,   347,   348,
     349,    -1,    -1,    -1,   331,    -1,    -1,   356,    -1,    -1,
      -1,    -1,    -1,   129,    -1,   119,    -1,    -1,    -1,  4064,
      -1,    -1,   138,   350,   140,   141,    -1,    -1,    -1,   133,
      -1,    -1,   136,    -1,    -1,    -1,    -1,   153,   154,    -1,
      -1,    -1,    35,    -1,   573,    -1,    39,    -1,    -1,    -1,
     166,  4096,    -1,    -1,    -1,    -1,    -1,  4102,    -1,    -1,
      -1,    -1,    -1,    -1,   168,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   604,  4121,    -1,    -1,    36,
      37,    -1,   409,   199,   411,    42,    -1,    44,    -1,    46,
      47,    -1,   419,    -1,    -1,   444,    -1,    -1,   627,    -1,
     629,   217,    -1,   219,    -1,    -1,    63,    -1,    -1,   225,
      -1,    -1,    -1,   229,    -1,    -1,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,
     123,    -1,    -1,    -1,    -1,    -1,   240,   130,   242,    -1,
     256,    -1,   258,    -1,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,    -1,   257,    -1,   504,   505,    -1,    -1,   275,
      -1,    -1,    -1,   120,    -1,    -1,   123,    -1,    -1,   273,
      -1,   498,    -1,    -1,   131,    -1,    -1,   293,    -1,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,   304,    -1,
      -1,    -1,    -1,    -1,   151,    -1,   189,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   331,   555,   556,
     557,  4276,    -1,    -1,    -1,   562,    -1,   230,   231,   196,
      -1,   198,    -1,    -1,    -1,    -1,   350,    -1,    -1,  4294,
      -1,    -1,   579,    -1,    -1,   582,    -1,   214,   215,    -1,
      -1,    -1,    -1,    -1,  4309,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   602,    -1,    -1,    -1,   395,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   621,    -1,    -1,    -1,   414,    -1,
     416,   650,    -1,    -1,   261,   409,    -1,   411,    -1,   302,
      -1,    -1,    -1,    -1,   271,   419,   432,   666,   667,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   443,    -1,    -1,
      -1,    -1,    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   300,   301,    -1,   303,    -1,    -1,    -1,
      -1,   467,    -1,    -1,   470,    -1,   472,   684,   474,   475,
      -1,    -1,   478,   479,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   489,   367,    -1,   492,    -1,    -1,    -1,
      -1,   338,   339,   340,    -1,   501,    -1,    -1,    -1,   382,
     383,    -1,    -1,    -1,   498,    -1,    -1,    -1,    -1,   515,
     357,   358,   359,    -1,   520,   521,   522,    -1,   365,    -1,
      -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,
     387,    -1,    -1,    -1,    -1,    -1,    -1,   553,    -1,  4484,
      -1,    -1,    -1,    -1,    -1,   561,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,    -1,    -1,    -1,   562,    -1,
      -1,  4506,    -1,    -1,    -1,    -1,    -1,    -1,   425,   426,
      -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,   582,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   607,    -1,    -1,    -1,    -1,   453,    -1,   602,  4544,
      -1,  4546,    -1,    -1,   620,    -1,    -1,    -1,   624,    -1,
      -1,   627,    -1,    -1,    -1,    -1,   632,   621,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   655,
     656,    -1,    -1,    -1,    -1,    -1,    -1,   663,    -1,    -1,
      -1,    -1,    -1,   669,   511,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4612,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,    -1,    -1,   592,
      -1,    -1,   595,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   606,    -1,    -1,    -1,    -1,   611,   612,
      -1,    -1,   615,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   588,    -1,    -1,    -1,   592,    -1,    -1,   595,   596,
     597,   598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   639,   640,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4779,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,  4814,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,    -1,   139,    -1,  4932,   142,    -1,
     144,   145,   146,   147,   148,    -1,  4941,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,  4998,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,   229,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,   243,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,   256,   257,   258,   259,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,   302,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,  5193,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
     474,   475,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,   559,   560,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,   600,   601,   602,   603,
      -1,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
     634,   635,   636,   637,   638,    -1,    -1,   641,   642,    -1,
     644,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   677,   678,    -1,    -1,    -1,    -1,   683,
     684,    -1,    -1,   687,   688,    -1,    -1,   691,   692,     5,
      -1,     7,     8,     9,    10,    11,    12,    13,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,    -1,
      -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,
     136,    -1,    -1,   139,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,   229,   230,   231,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,   243,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
     256,   257,   258,   259,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,   302,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,   474,   475,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,   559,   560,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
     576,   577,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,   634,   635,
     636,   637,   638,    -1,    -1,   641,   642,    -1,   644,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
      -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   677,   678,    -1,    -1,    -1,    -1,   683,   684,    -1,
      -1,   687,   688,    -1,    -1,   691,   692,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,
      -1,   139,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,   229,   230,   231,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,   243,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,
     258,   259,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,   283,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,   302,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,   474,   475,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,   559,   560,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,   634,   635,   636,   637,
     638,    -1,    -1,   641,   642,    -1,   644,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,   667,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,
     678,    -1,    -1,    -1,    -1,   683,   684,    -1,    -1,   687,
     688,    -1,    -1,   691,   692,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    37,    38,    39,
      40,    41,    42,    43,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,
     130,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,   139,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,   229,
     230,   231,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,   243,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,   256,   257,   258,   259,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,   302,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,   474,   475,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,   559,
     560,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,   634,   635,   636,   637,   638,    -1,
      -1,   641,   642,    -1,   644,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,   678,    -1,
      -1,    -1,    -1,   683,   684,    -1,    -1,   687,   688,    -1,
      -1,   691,   692,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,
      -1,   133,   134,    -1,   136,    -1,    -1,   139,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,   229,   230,   231,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,   243,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,   256,   257,   258,   259,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,   283,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
     302,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,   559,   560,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,   634,   635,   636,   637,   638,    -1,    -1,   641,
     642,    -1,   644,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   677,   678,    -1,    -1,    -1,
      -1,   683,   684,    -1,    -1,   687,   688,    -1,    -1,   691,
     692,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,    -1,   139,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,   229,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,   256,   257,   258,   259,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,   302,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
     474,   475,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,   559,   560,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
     634,   635,   636,   637,   638,    -1,    -1,   641,   642,    -1,
     644,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   677,   678,    -1,    -1,    -1,    -1,   683,
     684,    -1,    -1,   687,   688,    -1,    -1,   691,   692,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,    -1,
      -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,
     136,    -1,    -1,   139,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,   229,   230,   231,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,   243,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
     256,   257,   258,   259,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,   302,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,   474,   475,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,   559,   560,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
     576,   577,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,   634,   635,
     636,   637,   638,    -1,    -1,   641,   642,    -1,   644,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
      -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   677,   678,    -1,    -1,    -1,    -1,   683,   684,    -1,
      -1,   687,   688,    -1,    -1,   691,   692,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,
      -1,   139,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,   229,   230,   231,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,   243,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,
     258,   259,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,   283,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,   302,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,   474,   475,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,   559,   560,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,   634,   635,   636,   637,
     638,    -1,    -1,   641,   642,    -1,   644,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,   667,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,
     678,    -1,    -1,    -1,    -1,   683,   684,    -1,    -1,   687,
     688,    -1,    -1,   691,   692,     5,    -1,     7,     8,     9,
      10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    37,    38,    39,
      40,    41,    42,    43,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,
     130,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,   139,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,   229,
     230,   231,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,   243,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,   256,   257,   258,   259,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,   302,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
      -1,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,   474,   475,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,   559,
     560,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,   634,   635,   636,   637,   638,    -1,
      -1,   641,   642,    -1,   644,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,   678,    -1,
      -1,    -1,    -1,   683,   684,    -1,    -1,   687,   688,    -1,
      -1,   691,   692,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,
      -1,   133,   134,    -1,   136,    -1,    -1,   139,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,   229,   230,   231,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,   243,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,   256,   257,   258,   259,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,   283,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
     302,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,   559,   560,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,   634,   635,   636,   637,   638,    -1,    -1,   641,
     642,    -1,   644,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   677,   678,    -1,    -1,    -1,
      -1,   683,   684,    -1,    -1,   687,   688,    -1,    -1,   691,
     692,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,    -1,   139,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,   229,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,   243,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,   256,   257,   258,   259,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,   302,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
     474,   475,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,   559,   560,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
     634,   635,   636,   637,   638,    -1,    -1,   641,   642,    -1,
     644,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   677,   678,    -1,    -1,    -1,    -1,   683,
     684,    -1,    -1,   687,   688,    -1,    -1,   691,   692,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,    -1,
      -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,
     136,    -1,    -1,   139,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,   229,   230,   231,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,   243,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
     256,   257,   258,   259,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,   302,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,   474,   475,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,   559,   560,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
     576,   577,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,   634,   635,
     636,   637,   638,    -1,    -1,   641,   642,    -1,   644,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
      -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   677,   678,    -1,    -1,    -1,    -1,   683,   684,    -1,
      -1,   687,   688,    -1,    -1,   691,   692,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,
      -1,   139,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,   229,   230,   231,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,   243,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,
     258,   259,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,   283,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,   302,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,   474,   475,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,   559,   560,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,   634,   635,   636,   637,
     638,    -1,    -1,   641,   642,    -1,   644,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,   667,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,
     678,    -1,    -1,    -1,    -1,   683,   684,    -1,    -1,   687,
     688,    -1,    -1,   691,   692,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    37,    38,    39,
      40,    41,    42,    43,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,
     130,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,   139,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,   229,
     230,   231,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,   243,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,   256,   257,   258,   259,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,   302,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
      -1,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,   448,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,   474,   475,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,   559,
     560,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,   634,   635,   636,   637,   638,    -1,
      -1,   641,   642,    -1,   644,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,   678,    -1,
      -1,    -1,    -1,   683,   684,    -1,    -1,   687,   688,    -1,
      -1,   691,   692,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,
      -1,   133,   134,    -1,   136,    -1,    -1,   139,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,   229,   230,   231,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,   243,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,   256,   257,   258,   259,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,   283,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
     302,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,    -1,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,   448,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,   559,   560,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,   634,   635,   636,   637,   638,    -1,    -1,   641,
     642,    -1,   644,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   677,   678,    -1,    -1,    -1,
      -1,   683,   684,    -1,    -1,   687,   688,    -1,    -1,   691,
     692,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,    -1,   139,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,   229,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,   243,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,   256,   257,   258,   259,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,   302,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,    -1,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,   448,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
     474,   475,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,   559,   560,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
     634,   635,   636,   637,   638,    -1,    -1,   641,   642,    -1,
     644,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   677,   678,    -1,    -1,    -1,    -1,   683,
     684,    -1,    -1,   687,   688,    -1,    -1,   691,   692,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,    -1,
      -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,
     136,    -1,    -1,   139,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,   229,   230,   231,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,   243,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
     256,   257,   258,   259,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,   302,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,    -1,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,   448,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,   474,   475,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,   559,   560,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
     576,   577,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,   634,   635,
     636,   637,   638,    -1,    -1,   641,   642,    -1,   644,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
      -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   677,   678,    -1,    -1,    -1,    -1,   683,   684,    -1,
      -1,   687,   688,    -1,    -1,   691,   692,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,
      -1,   139,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,   229,   230,   231,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,   243,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,
     258,   259,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,   283,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,   302,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
     448,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,   474,   475,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,   559,   560,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,   634,   635,   636,   637,
     638,    -1,    -1,   641,   642,    -1,   644,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,   667,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,
     678,    -1,    -1,    -1,    -1,    -1,   684,    -1,    -1,    -1,
     688,    -1,    -1,   691,   692,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
     130,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,    -1,   193,    -1,   195,   196,   197,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
     230,   231,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,   302,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,   382,   383,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,   691,   692,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,    -1,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   692,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,   286,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   692,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   692,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
     692,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
     133,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   692,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,   685,    15,    -1,    -1,    -1,    19,   691,   692,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   692,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,   691,   692,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   692,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,   209,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,   250,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
     274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,   287,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,   507,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,   536,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,   656,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   691,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
     196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,   209,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,
     246,   247,   248,   249,   250,    -1,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,   274,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,   497,   498,    -1,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
     536,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,   607,   608,   609,   610,    -1,   612,   613,   614,    -1,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
      -1,   667,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   691,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,    -1,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,   656,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,   667,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,   685,    -1,    19,
      -1,    -1,    22,   691,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,   684,    -1,    -1,    19,    -1,    -1,
      22,   691,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   691,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,   679,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,   691,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,   684,    -1,    -1,    19,    -1,    -1,    22,
     691,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
     243,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   691,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,    -1,
      -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,    -1,   497,   498,    -1,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,   607,   608,   609,   610,    -1,   612,   613,   614,
      -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,    -1,   667,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   691,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
      -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,    -1,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,
     667,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   691,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,    -1,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,    -1,   667,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   691,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,    -1,   667,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
     691,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,   110,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,     5,   667,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   684,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,     5,   667,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   684,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,     5,   667,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,   679,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,     5,   667,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,   679,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,    -1,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,     5,   667,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
     679,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,    -1,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,     5,   667,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,   679,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,   133,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
      -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,   516,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,    -1,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,    -1,
     667,    -1,    -1,    -1,     5,   672,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,   104,    -1,   106,    -1,    -1,   109,    -1,
     111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,   138,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,   250,
      -1,   252,    -1,    -1,    -1,   256,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,   507,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,   604,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,   627,   628,   629,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,     5,   667,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,   104,    -1,   106,    -1,    -1,   109,
      -1,   111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,   138,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,   154,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
     250,    -1,   252,    -1,    -1,    -1,   256,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,   286,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,   507,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,   604,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,   627,   628,   629,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,     5,   667,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,   197,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,   230,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,   302,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,    -1,    -1,    -1,   383,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,   538,
     539,   540,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,   611,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,     5,   667,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,   197,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,   230,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,   302,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,   383,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,   611,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,     5,   667,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
     197,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,   230,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,   302,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,   383,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,   611,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,     5,
     667,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
     196,   197,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,   227,    -1,   229,   230,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,   302,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,   383,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,   497,   498,    -1,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,   607,   608,   609,   610,   611,   612,   613,   614,    -1,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
       5,   667,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,   302,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,   383,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,   412,   413,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,    -1,
      -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,    -1,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,   607,   608,   609,   610,   611,   612,   613,   614,
      -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,     5,   667,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,   302,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,   383,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,   412,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,   496,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,   611,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,     5,   667,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,   110,   111,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,     5,   667,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,     5,   667,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    39,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,   230,
     231,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,     5,   667,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,   302,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,   383,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,   412,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,   611,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,     5,   667,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,   133,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,   587,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,    -1,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,     5,   667,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,   110,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,    -1,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,     5,   667,
       7,     8,     9,    10,    11,    12,    13,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
      -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,    -1,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,     5,
     667,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,   111,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
     196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,   497,   498,    -1,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,   607,   608,   609,   610,    -1,   612,   613,   614,    -1,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
       5,   667,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,   133,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,
     285,   286,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,   432,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,    -1,
      -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,    -1,   497,   498,    -1,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,   607,   608,   609,   610,    -1,   612,   613,   614,
      -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,     5,   667,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,     5,   667,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,     5,   667,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,   183,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,     5,   667,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    20,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,     5,   667,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,   539,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,     5,   667,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,    -1,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,     5,   667,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,   133,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,    -1,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,     5,   667,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,   133,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
      -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,    -1,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,     5,
     667,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,   133,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
     196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,   497,   498,    -1,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,   607,   608,   609,   610,    -1,   612,   613,   614,    -1,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,   654,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
       5,   667,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,   432,   433,   434,
     435,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,   472,   473,    -1,
      -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,   484,
      -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,    -1,   497,   498,    -1,   500,   501,   502,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,   530,   531,   532,   533,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,
      -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,   588,   589,    -1,   591,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,   607,   608,   609,   610,    -1,   612,   613,   614,
      -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,
      -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,   654,
      -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,
      -1,     5,   667,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,   133,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,   413,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,   432,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,   497,   498,    -1,   500,   501,   502,   503,
      -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,   553,
     554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,   591,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,   613,
     614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,   623,
      -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
     654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,   663,
     664,    -1,     5,   667,     7,     8,     9,    10,    11,    12,
      13,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,   196,    -1,    -1,   199,   200,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,    -1,
     413,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,   432,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,   472,
     473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,    -1,
     483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,   497,   498,    -1,   500,   501,   502,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,   530,   531,   532,
     533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
     553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,   591,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,   612,
     613,   614,    -1,   616,   617,    -1,   619,   620,    -1,    -1,
     623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,   662,
     663,   664,    -1,     5,   667,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,   271,
      -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,    -1,
      -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,   481,
      -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,   497,   498,    -1,   500,   501,
     502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,   530,   531,
     532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,   588,   589,    -1,   591,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,   607,   608,   609,   610,    -1,
     612,   613,   614,    -1,   616,   617,    -1,   619,   620,    -1,
      -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,    -1,
     662,   663,   664,    -1,     5,   667,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,   200,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,    -1,
     271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,   396,   397,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,   432,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,   480,
     481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,   497,   498,    -1,   500,
     501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,   530,
     531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,   589,    -1,
     591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,   607,   608,   609,   610,
      -1,   612,   613,   614,    -1,   616,   617,    -1,   619,   620,
      -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,   660,
      -1,   662,   663,   664,    -1,     5,   667,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,   199,
     200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,    -1,
      -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,    -1,
     480,   481,    -1,   483,   484,    -1,   486,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,   497,   498,    -1,
     500,   501,   502,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
     530,   531,   532,   533,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,    -1,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,   609,
     610,    -1,   612,   613,   614,    -1,   616,   617,    -1,   619,
     620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,   659,
     660,    -1,   662,   663,   664,    -1,     5,   667,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,    -1,
     199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
      -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,   396,   397,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,   432,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,   478,
      -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,   497,   498,
      -1,   500,   501,   502,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,   558,
      -1,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,   591,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,   608,
     609,   610,    -1,   612,   613,   614,    -1,   616,   617,    -1,
     619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,   628,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,    -1,
     659,   660,    -1,   662,   663,   664,    -1,     5,   667,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,    -1,
      -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,   396,   397,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,   432,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,   472,   473,    -1,    -1,   476,    -1,
     478,    -1,   480,   481,    -1,   483,   484,    -1,   486,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,   497,
     498,    -1,   500,   501,   502,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,   530,   531,   532,   533,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
     588,   589,    -1,   591,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,   607,
     608,   609,   610,    -1,   612,   613,   614,    -1,   616,   617,
      -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,    -1,
     628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,    -1,
      -1,   659,   660,    -1,   662,   663,   664,    -1,     5,   667,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,   196,
      -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,   396,
     397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,   432,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,   476,
      -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,   486,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
     497,   498,    -1,   500,   501,   502,   503,    -1,   505,   506,
      -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,   530,   531,   532,   533,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,    -1,
      -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,   588,   589,    -1,   591,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
     607,   608,   609,   610,    -1,   612,   613,   614,    -1,   616,
     617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,   626,
      -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,   654,    -1,    -1,
      -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,     5,
     667,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
     196,    -1,    -1,   199,   200,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,    -1,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,    -1,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
     396,   397,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,   408,   409,   410,    -1,    -1,   413,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,   432,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,    -1,   478,    -1,   480,   481,    -1,   483,   484,    -1,
     486,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,   497,   498,    -1,   500,   501,   502,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,   530,   531,   532,   533,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,   553,   554,    -1,
      -1,    -1,   558,    -1,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,   588,   589,    -1,   591,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,   607,   608,   609,   610,    -1,   612,   613,   614,    -1,
     616,   617,    -1,   619,   620,    -1,    -1,   623,    -1,    -1,
     626,    -1,   628,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   659,   660,    -1,   662,   663,   664,    -1,
       5,   667,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   156,   157,   158,    -1,   160,   161,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,   192,   193,    -1,
     195,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,    -1,    -1,
      -1,   226,   227,    -1,    -1,    -1,    -1,    -1,    -1,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,   243,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,    -1,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,   269,    -1,   271,    -1,   273,    -1,
      -1,    -1,   277,   278,    -1,    -1,   281,   282,    -1,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   409,   410,    -1,    -1,    -1,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,    -1,    -1,    -1,    -1,    -1,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,    -1,    -1,   471,    -1,   473,   474,
      -1,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
      -1,   486,   487,   488,    -1,    -1,   491,    -1,   493,   494,
     495,    -1,   497,   498,    -1,   500,    -1,   502,   503,    -1,
     505,    -1,    -1,    -1,    -1,   510,   511,   512,    -1,    -1,
      -1,    -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,
      -1,    -1,   527,   528,    -1,   530,    -1,   532,    -1,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,    -1,   554,
      -1,    -1,    -1,   558,    -1,    -1,    -1,   562,    -1,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,   588,   589,    -1,    -1,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,    -1,   608,   609,   610,    -1,    -1,   613,   614,
      -1,   616,   617,    -1,    -1,    -1,    -1,    -1,   623,    -1,
      -1,   626,    -1,    -1,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,    -1,
     655,    -1,    -1,    -1,   659,    -1,    -1,   662,    -1,   664,
      -1,     5,   667,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      84,    -1,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   156,   157,   158,    -1,   160,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,    -1,    -1,    -1,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,   243,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,   269,    -1,   271,    -1,   273,
      -1,    -1,    -1,   277,   278,    -1,    -1,   281,   282,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   409,   410,    -1,    -1,    -1,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,    -1,    -1,    -1,    -1,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,    -1,    -1,   471,    -1,   473,
     474,    -1,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,    -1,   486,   487,   488,    -1,    -1,   491,    -1,   493,
     494,   495,    -1,   497,   498,    -1,   500,    -1,   502,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,    -1,
      -1,    -1,    -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,   530,    -1,   532,    -1,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,    -1,
     554,    -1,    -1,    -1,   558,    -1,    -1,    -1,   562,    -1,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,    -1,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,    -1,   608,   609,   610,    -1,    -1,   613,
     614,    -1,   616,   617,    -1,    -1,    -1,    -1,    -1,   623,
      -1,    -1,   626,    -1,    -1,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,
      -1,   645,   646,   647,   648,   649,   650,   651,   652,    -1,
      -1,   655,    -1,    -1,    -1,   659,    -1,    -1,   662,    -1,
     664,    -1,     5,   667,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   156,   157,   158,    -1,   160,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,   171,   172,
      -1,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
      -1,   184,   185,   186,   187,    -1,    -1,   190,   191,   192,
     193,    -1,   195,   196,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   206,    -1,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
      -1,    -1,    -1,   226,   227,    -1,    -1,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,   238,   239,   240,   241,   242,
     243,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,   262,
      -1,   264,   265,    -1,   267,   268,   269,    -1,   271,    -1,
     273,    -1,    -1,    -1,   277,   278,    -1,    -1,   281,   282,
      -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,   352,
      -1,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,
     373,   374,    -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,
      -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   409,   410,    -1,    -1,
      -1,    -1,   415,    -1,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,    -1,    -1,    -1,    -1,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,    -1,   468,    -1,    -1,   471,    -1,
     473,   474,    -1,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,    -1,   486,   487,   488,    -1,    -1,   491,    -1,
     493,   494,   495,    -1,   497,   498,    -1,   500,    -1,   502,
     503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,
      -1,    -1,    -1,    -1,   517,    -1,    -1,    -1,    -1,    -1,
      -1,   524,    -1,    -1,   527,   528,    -1,   530,    -1,   532,
      -1,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,
      -1,   554,    -1,    -1,    -1,   558,    -1,    -1,    -1,   562,
      -1,    -1,   565,   566,   567,   568,   569,   570,    -1,    -1,
     573,   574,   575,   576,    -1,   578,   579,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,   589,    -1,    -1,   592,
     593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,
     603,    -1,    -1,    -1,    -1,   608,   609,   610,    -1,    -1,
     613,   614,    -1,   616,   617,    -1,    -1,    -1,    -1,    -1,
     623,    -1,    -1,   626,    -1,    -1,    -1,   630,   631,    -1,
      -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,    -1,
      -1,    -1,   645,   646,   647,   648,   649,   650,   651,   652,
      -1,    -1,   655,    -1,    -1,    -1,   659,    -1,    -1,   662,
      -1,   664,    -1,     5,   667,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    84,    -1,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,
      -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   145,   146,   147,   148,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   156,   157,   158,    -1,    -1,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,   171,
     172,    -1,   174,   175,   176,   177,   178,    -1,    -1,    -1,
      -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,   191,
     192,   193,    -1,   195,   196,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   206,    -1,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,    -1,
      -1,    -1,   234,    -1,    -1,    -1,   238,   239,   240,   241,
     242,   243,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,
     262,    -1,   264,   265,    -1,   267,   268,   269,    -1,   271,
      -1,   273,    -1,    -1,    -1,   277,   278,    -1,    -1,   281,
     282,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,   291,
     292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
     352,    -1,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,   371,
     372,   373,   374,    -1,    -1,    -1,    -1,   379,    -1,    -1,
      -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,   410,    -1,
      -1,    -1,    -1,   415,    -1,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,    -1,    -1,    -1,    -1,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,    -1,   468,    -1,    -1,   471,
      -1,   473,   474,    -1,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,    -1,   486,   487,   488,    -1,    -1,   491,
      -1,   493,   494,   495,    -1,   497,   498,    -1,   500,    -1,
     502,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,
     512,    -1,    -1,    -1,    -1,   517,    -1,    -1,    -1,    -1,
      -1,    -1,   524,    -1,    -1,   527,   528,    -1,   530,    -1,
     532,    -1,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,    -1,
     552,    -1,   554,    -1,    -1,    -1,   558,    -1,    -1,    -1,
     562,    -1,    -1,   565,   566,   567,   568,   569,   570,    -1,
      -1,   573,   574,   575,   576,    -1,   578,   579,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,   588,   589,    -1,    -1,
     592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,   601,
     602,   603,    -1,    -1,    -1,    -1,   608,   609,   610,    -1,
      -1,   613,   614,    -1,   616,   617,    -1,    -1,    -1,    -1,
      -1,   623,    -1,    -1,   626,    -1,    -1,    -1,   630,   631,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,   641,
      -1,    -1,    -1,   645,   646,   647,   648,   649,   650,   651,
      -1,    -1,    -1,   655,    -1,    -1,    -1,   659,    -1,    -1,
     662,    -1,   664,    -1,     5,   667,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   156,   157,   158,    -1,    -1,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
     171,   172,    -1,   174,   175,   176,   177,   178,    -1,    -1,
      -1,    -1,    -1,   184,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,    -1,   195,   196,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   206,    -1,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,    -1,    -1,   238,   239,   240,
     241,   242,   243,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,    -1,   257,    -1,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,   268,   269,    -1,
     271,    -1,   273,    -1,    -1,    -1,   277,   278,    -1,    -1,
     281,   282,    -1,   284,   285,    -1,    -1,    -1,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,   352,    -1,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,    -1,    -1,
     371,   372,   373,   374,    -1,    -1,    -1,    -1,   379,    -1,
      -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,   410,
      -1,    -1,    -1,    -1,   415,    -1,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,    -1,    -1,    -1,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,    -1,   468,    -1,    -1,
     471,    -1,   473,   474,    -1,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,    -1,   486,   487,   488,    -1,    -1,
     491,    -1,   493,   494,   495,    -1,   497,   498,    -1,   500,
      -1,   502,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,
     511,   512,    -1,    -1,    -1,    -1,   517,    -1,    -1,    -1,
      -1,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,   530,
      -1,   532,    -1,   534,   535,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,    -1,
      -1,   552,    -1,   554,    -1,    -1,    -1,   558,    -1,    -1,
      -1,   562,    -1,    -1,   565,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,   575,   576,    -1,   578,   579,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,   589,    -1,
      -1,   592,   593,   594,   595,    -1,    -1,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,    -1,   608,   609,   610,
      -1,    -1,   613,   614,    -1,   616,   617,    -1,    -1,    -1,
      -1,    -1,   623,    -1,    -1,   626,    -1,    -1,    -1,   630,
     631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
     641,    -1,    -1,    -1,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,    -1,   655,    -1,    -1,    -1,   659,    -1,
      -1,   662,    -1,   664,    -1,     5,   667,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,    -1,
      -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,   169,
      -1,   171,   172,    -1,   174,   175,   176,   177,   178,    -1,
      -1,    -1,    -1,    -1,   184,   185,   186,   187,    -1,    -1,
     190,   191,   192,   193,    -1,   195,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,    -1,   218,    -1,
     220,    -1,    -1,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,   238,   239,
     240,   241,   242,   243,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,    -1,   257,    -1,    -1,
      -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,   269,
      -1,   271,    -1,   273,    -1,    -1,    -1,   277,   278,    -1,
      -1,   281,   282,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,   352,    -1,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,    -1,
      -1,   371,   372,   373,   374,    -1,    -1,    -1,    -1,   379,
      -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,
     410,    -1,    -1,    -1,    -1,   415,    -1,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,    -1,    -1,    -1,
      -1,    -1,    -1,   433,   434,    -1,   436,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,    -1,   468,    -1,
      -1,   471,    -1,   473,   474,    -1,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,    -1,   486,   487,   488,    -1,
      -1,   491,    -1,   493,   494,   495,    -1,   497,   498,    -1,
     500,    -1,   502,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,   511,   512,    -1,    -1,    -1,    -1,   517,    -1,    -1,
      -1,    -1,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
     530,    -1,   532,    -1,   534,   535,    -1,    -1,    -1,    -1,
      -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,    -1,
      -1,    -1,   552,    -1,   554,    -1,    -1,    -1,   558,    -1,
      -1,    -1,   562,    -1,    -1,   565,   566,   567,   568,   569,
     570,    -1,    -1,   573,   574,   575,   576,    -1,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,   589,
      -1,    -1,   592,   593,   594,   595,    -1,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,    -1,    -1,   608,   609,
     610,    -1,    -1,   613,   614,    -1,   616,   617,    -1,    -1,
      -1,    -1,    -1,   623,    -1,    -1,   626,    -1,    -1,    -1,
     630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,   649,
     650,   651,    -1,    -1,    -1,   655,    -1,    -1,    -1,   659,
      -1,    -1,   662,    -1,   664,    -1,     5,   667,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,   171,   172,    -1,   174,   175,   176,   177,   178,
      -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,    -1,
      -1,   190,   191,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,    -1,    -1,    -1,    -1,    -1,   226,   227,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,   238,
     239,   240,   241,   242,   243,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,    -1,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,   268,
     269,    -1,   271,    -1,   273,    -1,    -1,    -1,   277,   278,
      -1,    -1,   281,   282,    -1,   284,   285,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,   352,    -1,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
      -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,    -1,
     379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     409,   410,    -1,    -1,    -1,    -1,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,    -1,    -1,
      -1,    -1,    -1,    -1,   433,   434,    -1,   436,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,    -1,   468,
      -1,    -1,   471,    -1,   473,   474,    -1,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,    -1,   486,   487,   488,
      -1,    -1,   491,    -1,   493,   494,   495,    -1,   497,   498,
      -1,   500,    -1,   502,   503,    -1,   505,    -1,    -1,    -1,
      -1,   510,   511,   512,    -1,    -1,    -1,    -1,   517,    -1,
      -1,    -1,    -1,    -1,    -1,   524,    -1,    -1,   527,   528,
      -1,   530,    -1,   532,    -1,   534,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,   548,
      -1,    -1,    -1,   552,    -1,   554,    -1,    -1,    -1,   558,
      -1,    -1,    -1,   562,    -1,    -1,   565,   566,   567,   568,
     569,   570,    -1,    -1,   573,   574,   575,   576,    -1,   578,
     579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
     589,    -1,    -1,   592,   593,   594,   595,    -1,    -1,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,   608,
     609,   610,    -1,    -1,   613,   614,    -1,   616,   617,    -1,
      -1,    -1,    -1,    -1,   623,    -1,    -1,   626,    -1,    -1,
      -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,   648,
     649,   650,   651,    -1,    -1,    -1,   655,    -1,    -1,    -1,
     659,    -1,    -1,   662,    -1,   664,    -1,     5,   667,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,    -1,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,   171,   172,    -1,   174,   175,   176,   177,
     178,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,
      -1,    -1,   190,   191,   192,   193,    -1,   195,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,    -1,    -1,    -1,    -1,    -1,   226,   227,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
     238,   239,   240,   241,   242,   243,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,   257,
      -1,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,
     268,   269,    -1,   271,    -1,   273,    -1,    -1,    -1,   277,
     278,    -1,    -1,   281,   282,    -1,   284,   285,    -1,    -1,
      -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,    -1,
      -1,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   409,   410,    -1,    -1,    -1,    -1,   415,    -1,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,    -1,
      -1,    -1,    -1,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,    -1,
     468,    -1,    -1,   471,    -1,   473,   474,    -1,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,    -1,   486,   487,
     488,    -1,    -1,   491,    -1,   493,   494,   495,    -1,   497,
     498,    -1,   500,    -1,   502,   503,    -1,   505,    -1,    -1,
      -1,    -1,   510,   511,   512,    -1,    -1,    -1,    -1,   517,
      -1,    -1,    -1,    -1,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,   530,    -1,   532,    -1,   534,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,    -1,
     548,    -1,    -1,    -1,   552,    -1,   554,    -1,    -1,    -1,
     558,    -1,    -1,    -1,   562,    -1,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,   573,   574,   575,   576,    -1,
     578,   579,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
     588,   589,    -1,    -1,   592,   593,   594,   595,    -1,    -1,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,
     608,   609,   610,    -1,    -1,   613,   614,    -1,   616,   617,
      -1,    -1,    -1,    -1,    -1,   623,    -1,    -1,   626,    -1,
      -1,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,    -1,
     638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,   647,
     648,   649,   650,   651,    -1,    -1,    -1,   655,    -1,    -1,
      -1,   659,    -1,    -1,   662,    -1,   664,    -1,     5,   667,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,   146,
     147,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,
     157,   158,    -1,    -1,    -1,   162,    -1,    -1,   165,    -1,
     167,   168,   169,    -1,   171,   172,    -1,   174,   175,   176,
     177,   178,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,
     187,    -1,    -1,   190,   191,   192,   193,    -1,   195,   196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,
      -1,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,    -1,    -1,    -1,   226,
     227,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,   238,   239,   240,   241,   242,   243,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     257,    -1,    -1,    -1,    -1,   262,    -1,   264,   265,    -1,
     267,   268,   269,    -1,   271,    -1,   273,    -1,    -1,    -1,
     277,   278,    -1,    -1,   281,   282,    -1,   284,   285,    -1,
      -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,    -1,
      -1,    -1,   379,    -1,    -1,    -1,    -1,   384,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   409,   410,    -1,    -1,    -1,    -1,   415,    -1,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
      -1,    -1,    -1,    -1,    -1,    -1,   433,   434,    -1,   436,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,    -1,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
      -1,   468,    -1,    -1,   471,    -1,   473,   474,    -1,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,    -1,   486,
     487,   488,    -1,    -1,   491,    -1,   493,   494,   495,    -1,
     497,   498,    -1,   500,    -1,   502,   503,    -1,   505,    -1,
      -1,    -1,    -1,   510,   511,   512,    -1,    -1,    -1,    -1,
     517,    -1,    -1,    -1,    -1,    -1,    -1,   524,    -1,    -1,
     527,   528,    -1,   530,    -1,   532,    -1,   534,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,    -1,
      -1,   548,    -1,    -1,    -1,   552,    -1,   554,    -1,    -1,
      -1,   558,    -1,    -1,    -1,   562,    -1,    -1,   565,   566,
     567,   568,   569,   570,    -1,    -1,   573,   574,   575,   576,
      -1,   578,   579,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,   588,   589,    -1,    -1,   592,   593,   594,   595,    -1,
      -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,
      -1,   608,   609,   610,    -1,    -1,   613,   614,    -1,   616,
     617,    -1,    -1,    -1,    -1,    -1,   623,    -1,    -1,   626,
      -1,    -1,    -1,   630,   631,    -1,    -1,    -1,    -1,    -1,
      -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,   646,
     647,   648,   649,   650,   651,    -1,    -1,    -1,   655,    -1,
      -1,    -1,   659,    -1,    -1,   662,    -1,   664,    -1,     5,
     667,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,   134,    -1,
     136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     156,   157,   158,    -1,    -1,    -1,   162,    -1,    -1,   165,
      -1,   167,   168,   169,    -1,   171,   172,    -1,   174,   175,
     176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,   185,
     186,   187,    -1,    -1,   190,   191,   192,   193,    -1,   195,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     206,    -1,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,    -1,    -1,    -1,
     226,   227,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,
      -1,    -1,   238,   239,   240,   241,   242,   243,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
      -1,   257,    -1,    -1,    -1,    -1,   262,    -1,   264,   265,
      -1,   267,   268,   269,    -1,   271,    -1,   273,    -1,    -1,
      -1,   277,   278,    -1,    -1,   281,   282,    -1,   284,   285,
      -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,    -1,
      -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,   384,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   409,   410,    -1,    -1,    -1,    -1,   415,
      -1,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,    -1,    -1,    -1,    -1,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
      -1,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,    -1,   468,    -1,    -1,   471,    -1,   473,   474,    -1,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,    -1,
     486,   487,   488,    -1,    -1,   491,    -1,   493,   494,   495,
      -1,   497,   498,    -1,   500,    -1,   502,   503,    -1,   505,
      -1,    -1,    -1,    -1,   510,   511,   512,    -1,    -1,    -1,
      -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,   530,    -1,   532,    -1,   534,   535,
      -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,   545,
      -1,    -1,   548,    -1,    -1,    -1,   552,    -1,   554,    -1,
      -1,    -1,   558,    -1,    -1,    -1,   562,    -1,    -1,   565,
     566,   567,   568,   569,   570,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,   588,   589,    -1,    -1,   592,   593,   594,   595,
      -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,   608,   609,   610,    -1,    -1,   613,   614,    -1,
     616,   617,    -1,    -1,    -1,    -1,    -1,   623,    -1,    -1,
     626,    -1,    -1,    -1,   630,   631,    -1,    -1,    -1,    -1,
      -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,   645,
     646,   647,   648,   649,   650,   651,    -1,    -1,    -1,   655,
      -1,    -1,    -1,   659,    -1,    -1,   662,    -1,   664,    -1,
       5,   667,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,
     145,   146,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,    -1,
     165,    -1,   167,   168,   169,    -1,   171,   172,    -1,   174,
     175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
     185,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   206,    -1,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,    -1,    -1,
      -1,   226,   227,    -1,    -1,    -1,    -1,    -1,    -1,   234,
      -1,    -1,    -1,   238,   239,   240,   241,   242,   243,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,    -1,   257,    -1,    -1,    -1,    -1,   262,    -1,   264,
     265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,    -1,
      -1,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,   284,
     285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,   374,
      -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   409,   410,    -1,    -1,    -1,    -1,
     415,    -1,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,    -1,    -1,    -1,    -1,    -1,    -1,   433,   434,
      -1,   436,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,    -1,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,    -1,   468,    -1,    -1,   471,    -1,   473,   474,
      -1,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
      -1,   486,   487,   488,    -1,    -1,   491,    -1,   493,   494,
     495,    -1,   497,   498,    -1,   500,    -1,   502,   503,    -1,
     505,    -1,    -1,    -1,    -1,   510,   511,   512,    -1,    -1,
      -1,    -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,
      -1,    -1,   527,   528,    -1,   530,    -1,   532,    -1,   534,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,    -1,
     545,    -1,    -1,   548,    -1,    -1,    -1,   552,    -1,   554,
      -1,    -1,    -1,   558,    -1,    -1,    -1,   562,    -1,    -1,
     565,   566,   567,   568,   569,   570,    -1,    -1,   573,   574,
     575,   576,    -1,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,   588,   589,    -1,    -1,   592,   593,   594,
     595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,    -1,
      -1,    -1,    -1,   608,   609,   610,    -1,    -1,   613,   614,
      -1,   616,   617,    -1,    -1,    -1,    -1,    -1,   623,    -1,
      -1,   626,    -1,    -1,    -1,   630,   631,    -1,    -1,    -1,
      -1,    -1,    -1,   638,    -1,    -1,   641,    -1,    -1,    -1,
     645,   646,   647,   648,   649,   650,   651,    -1,    -1,    -1,
     655,    -1,    -1,    -1,   659,    -1,    -1,   662,    -1,   664,
      -1,     5,   667,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      84,    -1,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   156,   157,   158,    -1,    -1,    -1,   162,    -1,
      -1,   165,    -1,   167,   168,   169,    -1,   171,   172,    -1,
     174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
     184,   185,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   206,    -1,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,    -1,    -1,    -1,
     234,    -1,    -1,    -1,   238,   239,   240,   241,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,   262,    -1,
     264,   265,    -1,   267,   268,    -1,    -1,   271,    -1,   273,
      -1,    -1,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,
     284,   285,    -1,    -1,    -1,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
      -1,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,   352,    -1,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,    -1,    -1,   371,   372,   373,
     374,    -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   409,   410,    -1,    -1,    -1,
      -1,   415,    -1,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,    -1,    -1,    -1,    -1,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,    -1,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,    -1,   468,    -1,    -1,   471,    -1,   473,
      -1,    -1,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,    -1,   486,    -1,   488,    -1,    -1,   491,    -1,   493,
     494,   495,    -1,   497,   498,    -1,   500,    -1,   502,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,    -1,
      -1,    -1,    -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,   530,    -1,   532,    -1,
     534,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
      -1,   545,    -1,    -1,   548,    -1,    -1,    -1,   552,    -1,
     554,    -1,    -1,    -1,   558,    -1,    -1,    -1,   562,    -1,
      -1,   565,   566,   567,   568,   569,   570,    -1,    -1,   573,
     574,   575,   576,    -1,   578,   579,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,   588,   589,    -1,    -1,   592,   593,
     594,   595,    -1,    -1,    -1,    -1,    -1,   601,   602,   603,
      -1,    -1,    -1,    39,   608,   609,   610,    -1,    -1,   613,
     614,    -1,   616,   617,    -1,    14,    -1,    16,    -1,   623,
      -1,    -1,   626,    -1,    -1,    -1,   630,   631,    -1,    -1,
      -1,    -1,    -1,    -1,   638,    34,    -1,   641,    -1,    38,
      -1,   645,   646,   647,   648,   649,   650,   651,    -1,    -1,
      -1,    -1,    -1,    52,    53,   659,    -1,    56,   662,    -1,
     664,    60,    -1,   667,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,   123,    -1,    -1,
      -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,    -1,    14,    -1,    16,    -1,    -1,
      -1,    -1,    -1,   189,   153,   154,    -1,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   181,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    -1,    -1,   230,   231,    65,    66,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,   217,    -1,
     219,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
     229,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   256,    -1,   258,
     129,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,   138,
      -1,   140,   141,    -1,    -1,    -1,   275,    13,    -1,    -1,
      -1,    -1,    -1,    -1,   153,   154,    -1,    -1,    -1,    -1,
      26,    -1,    -1,    -1,   293,    -1,    -1,    -1,   297,    -1,
      -1,    37,    38,    -1,    -1,   304,    -1,    -1,    -1,    -1,
      -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,
     199,   367,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   217,    -1,
     219,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
     229,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,    -1,    -1,    -1,   256,    -1,   258,
      -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   140,   141,   275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   414,    -1,   416,    -1,    -1,
      -1,    -1,    -1,    -1,   293,    -1,    -1,    -1,   297,    -1,
      -1,   167,   168,   432,    -1,    -1,   172,    -1,    -1,   175,
      -1,    -1,    -1,    -1,   443,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,   470,   208,   472,   210,   474,   475,    -1,    -1,   478,
     479,    -1,   218,    -1,   220,    -1,    -1,    -1,    -1,    -1,
     489,    -1,    -1,   492,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   501,    -1,   240,    -1,   242,    -1,    -1,    -1,
      -1,    -1,    -1,   249,   250,    -1,   515,    -1,    -1,    -1,
      -1,   520,   521,   522,    -1,    -1,   395,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   414,    -1,   416,    -1,    -1,
      -1,   587,    -1,    -1,   553,    -1,   592,    -1,   294,   595,
      -1,    -1,   561,   432,    -1,    -1,    -1,    -1,    -1,    -1,
     606,    -1,    -1,    -1,   443,   611,   612,    -1,    -1,   615,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   324,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,   470,    -1,   472,    -1,    -1,   475,    -1,   607,   478,
     479,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     489,   620,    -1,   492,    -1,   624,    -1,    -1,   627,    -1,
      -1,    -1,   501,   632,    -1,    -1,    -1,    -1,    -1,    36,
      37,    -1,    -1,    -1,    -1,    42,   515,    44,    -1,    46,
      47,   520,   521,   522,    -1,    -1,   655,   656,   394,    -1,
      -1,    -1,    -1,    -1,   663,    -1,    63,    -1,    -1,    -1,
     669,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   553,    -1,    -1,   423,    -1,    -1,
      -1,    -1,   561,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     436,   437,    -1,    -1,   440,   441,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,    -1,    -1,   123,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,   607,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   620,    -1,     6,   151,   624,    -1,    -1,   627,    12,
      -1,    14,    -1,   632,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   169,    -1,    -1,    28,   512,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   656,    -1,   525,
      -1,    -1,    -1,    -1,   663,    -1,    -1,    -1,    -1,   196,
     669,   198,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,   558,    28,    -1,    30,   562,    -1,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,    -1,    -1,    -1,   581,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    -1,
      65,    -1,    -1,    -1,   261,    -1,   119,    -1,    73,    -1,
      -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,    83,    -1,
     133,    -1,    -1,   136,    -1,    -1,    91,    -1,    -1,    -1,
      -1,    -1,    -1,   146,   291,    -1,    -1,    -1,    -1,    -1,
      -1,   154,    -1,   300,   301,   641,   303,    -1,    -1,   162,
      -1,    -1,    -1,   649,   119,   168,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   338,   339,   340,    -1,    -1,    -1,    -1,    -1,   202,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     357,   358,   359,   168,    -1,    -1,    -1,    -1,   365,    -1,
      -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,   385,   242,
     387,    -1,    -1,    -1,    -1,    -1,    -1,   250,    -1,    -1,
      -1,    -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,   426,
      -1,    -1,    -1,    -1,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,    -1,    -1,   297,   250,    -1,    -1,    -1,    -1,
      -1,    -1,   257,    -1,    -1,    -1,   453,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   350,    -1,    -1,
      -1,   354,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   350,    -1,   400,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   409,    -1,   411,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   419,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   588,    -1,    -1,    -1,   592,    -1,    -1,   595,   596,
     597,   598,    -1,    -1,   409,    -1,   411,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   419,    -1,    -1,   470,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   639,   640,    -1,   498,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   498,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   555,   556,   557,    -1,    -1,    -1,    -1,   562,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,   582,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   602,
     555,   556,   557,    -1,    -1,    -1,    -1,   562,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   621,    -1,
      -1,    -1,    -1,    -1,   579,    -1,    -1,   582,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   602,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   621
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    34,    38,    52,    53,    56,    60,    65,
      66,    85,   104,   129,   138,   140,   141,   153,   154,   166,
     181,   199,   217,   219,   225,   229,   243,   256,   258,   275,
     293,   297,   304,   395,   414,   416,   432,   443,   467,   470,
     472,   474,   475,   478,   479,   489,   492,   501,   515,   520,
     521,   522,   553,   561,   607,   620,   624,   627,   632,   655,
     656,   663,   669,   695,   698,   699,   700,   701,   702,   705,
     712,   714,   727,   758,   786,   793,   794,   809,   810,   829,
     848,   863,   926,   984,  1029,  1113,  1158,  1161,  1171,  1176,
    1182,  1195,  1198,  1204,  1207,  1212,  1219,  1231,  1446,  1448,
    1460,  1463,  1486,  1494,  1507,  1514,  1528,  1532,  1533,  1537,
    1551,  1559,  1563,  1569,  1570,  1571,  1603,  1604,  1637,  1668,
    1674,  1676,  1683,  1686,  1723,  1725,  1731,  1732,  1733,  1734,
    1792,  1800,  1801,  1802,    12,   116,   134,   210,   298,   437,
     513,   579,   630,  1114,  1758,  1759,  1760,  1761,   205,   294,
     380,  1206,  1535,   375,   376,  1278,  1724,   587,   692,  1624,
     250,     5,     7,     8,     9,    10,    11,    12,    15,    19,
      22,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      34,    38,    42,    45,    46,    47,    49,    51,    52,    55,
      58,    59,    61,    62,    64,    65,    67,    68,    69,    70,
      71,    72,    74,    75,    76,    77,    78,    79,    80,    82,
      83,    84,    85,    86,    87,    88,    89,    91,    92,    94,
      95,    96,    97,    98,   100,   103,   106,   109,   112,   114,
     118,   119,   120,   123,   128,   129,   134,   136,   142,   144,
     145,   146,   147,   148,   153,   156,   157,   158,   162,   164,
     165,   167,   168,   169,   171,   172,   174,   175,   176,   177,
     178,   179,   180,   181,   184,   185,   186,   187,   190,   191,
     193,   195,   196,   199,   200,   201,   205,   206,   208,   210,
     212,   213,   214,   215,   216,   217,   218,   220,   225,   226,
     227,   229,   233,   234,   238,   239,   240,   241,   242,   246,
     247,   248,   249,   252,   257,   258,   262,   264,   265,   267,
     268,   271,   273,   276,   277,   278,   281,   284,   285,   291,
     292,   294,   296,   298,   299,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   324,   325,   326,   327,   329,   330,   331,   332,
     334,   335,   336,   341,   342,   343,   344,   345,   346,   349,
     350,   352,   354,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   368,   371,   372,   373,   374,   378,   379,
     384,   387,   388,   389,   391,   392,   393,   394,   396,   397,
     403,   408,   409,   410,   413,   415,   417,   418,   419,   421,
     422,   423,   424,   425,   426,   427,   429,   430,   432,   433,
     434,   436,   438,   439,   440,   441,   442,   444,   445,   446,
     450,   454,   455,   457,   458,   459,   462,   463,   464,   465,
     466,   468,   469,   471,   472,   473,   476,   478,   480,   481,
     483,   484,   486,   488,   491,   492,   493,   494,   495,   497,
     498,   500,   501,   502,   503,   505,   506,   510,   511,   512,
     513,   517,   521,   523,   524,   525,   526,   527,   528,   530,
     531,   532,   533,   534,   535,   542,   543,   545,   548,   552,
     553,   554,   558,   561,   562,   563,   565,   566,   567,   568,
     569,   570,   573,   574,   575,   576,   578,   579,   582,   583,
     584,   585,   588,   589,   591,   592,   593,   594,   595,   601,
     602,   603,   607,   608,   609,   610,   612,   613,   614,   616,
     617,   619,   620,   623,   626,   628,   630,   631,   638,   641,
     645,   646,   647,   648,   649,   650,   651,   654,   659,   660,
     662,   663,   664,   667,   752,  1623,  1628,  1634,  1635,  1636,
     830,   324,   578,   581,  1670,  1199,   659,  1727,   298,   402,
     579,  1495,  1447,   116,   176,   210,   250,   298,   437,   491,
     513,   579,   584,   604,   630,   646,  1459,   247,  1628,  1206,
     109,   795,   751,   691,  1620,  1622,  1628,   713,   811,  1461,
     424,   533,  1564,   119,   250,   664,  1576,  1670,   864,  1206,
    1030,   927,  1628,  1560,   501,   630,  1670,  1206,   866,  1464,
    1552,   539,   783,   787,   788,  1628,   751,  1727,  1628,   554,
    1638,  1515,   787,    13,   525,   601,    13,   525,   581,  1509,
     424,   533,  1675,  1487,  1628,   865,   456,  1606,    34,    85,
     164,   432,   455,   492,   553,  1794,     0,   166,   696,   432,
     116,   209,   491,   536,   622,   630,   733,   734,  1091,  1092,
    1093,  1459,   186,   205,   417,  1534,  1535,  1620,  1628,   507,
     684,  1232,   672,  1126,  1628,   672,   752,   221,   752,   286,
    1624,  1628,  1630,   869,   870,   873,   896,  1628,   243,  1458,
    1150,  1151,  1120,  1267,  1758,   672,  1670,  1231,  1460,  1463,
    1486,  1494,  1531,    25,  1727,  1630,  1213,   759,   691,   652,
     831,   832,   835,   839,   725,   726,  1624,  1172,   646,  1196,
    1670,    18,  1728,   221,   475,   871,   896,   245,   305,   446,
    1505,  1506,     8,    22,    31,    37,    39,    40,    41,    43,
      56,    57,    62,    63,    71,    74,    76,    77,    78,    79,
      80,    97,   101,   102,   107,   108,   110,   111,   115,   116,
     121,   122,   123,   128,   130,   133,   139,   182,   188,   189,
     194,   197,   205,   214,   216,   222,   223,   224,   230,   231,
     238,   243,   256,   259,   278,   283,   291,   302,   328,   333,
     345,   349,   351,   355,   356,   357,   358,   359,   367,   375,
     376,   377,   381,   382,   383,   386,   389,   412,   419,   420,
     425,   426,   428,   444,   448,   474,   475,   488,   490,   495,
     497,   499,   505,   559,   560,   567,   571,   572,   577,   587,
     592,   593,   594,   595,   605,   606,   607,   611,   615,   630,
     634,   635,   636,   637,   642,   644,   650,   651,   667,   677,
     678,   683,   684,   687,   688,   691,   692,  1273,  1274,  1275,
    1279,  1290,  1291,  1292,  1293,  1294,  1295,  1296,  1304,  1308,
    1309,  1310,  1312,  1326,  1595,  1598,  1600,  1601,  1602,  1616,
    1618,  1623,  1628,  1458,  1458,  1458,   243,  1457,   221,  1458,
    1458,  1458,   896,  1458,  1458,  1458,  1670,   703,   704,   706,
    1538,   144,    13,    14,   104,   111,   138,   154,   176,   181,
     193,   219,   250,   256,   297,   438,   442,   460,   468,   476,
     507,   520,   521,   573,   604,   627,   629,  1630,  1687,  1691,
    1692,  1694,  1696,  1697,  1628,   394,    70,   451,   691,  1630,
     824,   825,   135,   232,   305,  1466,  1628,  1624,   226,   532,
    1565,   260,  1572,  1669,    34,    70,   192,   269,   282,   394,
     487,   772,   807,   808,   809,   812,   813,   814,   816,   817,
     818,   819,   821,   844,   846,   852,   859,  1623,  1629,  1636,
    1670,  1273,    50,   928,   207,    37,   324,  1520,  1561,  1628,
     751,  1208,  1177,   772,   855,   135,   305,  1467,  1493,   324,
     445,   525,  1553,  1554,   638,   784,   515,   789,     7,    13,
     442,  1684,  1685,  1692,  1694,   599,  1728,  1639,    62,    63,
     133,   218,   294,   363,   419,   491,   512,   601,   692,  1055,
    1628,  1642,  1654,  1658,  1659,    13,    26,    38,    62,    74,
     100,   102,   104,   117,   168,   172,   175,   208,   210,   218,
     220,   249,   250,   272,   294,   324,   394,   423,   436,   437,
     440,   441,   463,   512,   525,   562,   581,   649,  1055,  1090,
    1516,  1520,  1521,  1523,  1532,  1623,  1655,   789,   526,   725,
     451,   656,  1162,  1163,  1164,   526,   725,  1508,  1628,  1624,
    1670,  1493,   853,  1273,  1605,    39,   230,   231,   587,  1596,
    1597,  1625,  1793,  1793,  1793,  1793,  1793,   690,  1628,   243,
     983,   983,   983,  1755,  1759,  1760,  1761,   513,   735,   250,
     250,   250,   581,  1530,  1529,  1253,  1254,   684,  1234,  1235,
     343,   585,   614,  1116,   628,   110,  1630,  1631,  1632,  1691,
    1118,   875,   897,  1628,  1117,  1122,     6,    60,   154,   376,
     450,   452,   898,   182,   751,   581,   245,   393,  1152,  1153,
    1154,   547,  1762,  1763,   176,  1119,  1630,  1183,   849,   686,
    1214,  1215,  1216,  1217,  1620,   684,   760,  1628,   840,   160,
     842,  1273,   839,   599,  1452,  1453,  1620,  1197,  1452,    59,
     378,   378,   467,  1729,   874,   897,     6,   207,  1496,  1502,
    1503,  1628,  1505,   684,   684,   684,  1291,   684,   684,   684,
    1273,  1329,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,  1272,  1272,  1272,
     684,  1271,   684,   684,   684,   587,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,  1273,   684,   684,   684,   684,  1327,  1328,
    1616,  1628,   684,   684,   684,   684,   684,   684,   684,   684,
     684,  1273,  1271,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,  1271,   587,   684,   684,
     684,   587,   684,   684,   684,   587,  1597,   684,  1272,  1271,
    1271,   684,   684,   684,   684,   684,   684,  1291,  1291,  1291,
    1031,  1273,  1749,  1750,  1628,  1628,  1313,    17,    18,   170,
     211,   266,   279,   369,   399,   402,   665,   672,   673,   674,
    1276,  1277,  1280,    35,   263,   287,   461,   534,  1278,   150,
     355,   518,   519,   675,   676,   677,   678,   679,   680,   681,
     682,  1291,    73,   401,   407,   686,  1625,   684,   691,  1628,
     752,  1628,   182,  1628,   897,   752,   751,  1630,   907,  1521,
     752,   751,  1451,  1458,   707,  1273,   633,   708,    37,   142,
     168,   171,   212,   234,   299,   324,   436,   445,   462,   480,
     525,   528,   558,  1539,  1544,  1545,  1623,  1670,    90,   692,
     796,   797,   798,   799,  1628,   436,  1695,   494,   494,   579,
     584,   630,   646,  1272,   397,  1699,   578,   390,  1701,    69,
     525,  1698,   117,   646,  1700,   599,   390,   686,    20,   672,
    1385,  1386,  1677,  1628,   164,  1273,   245,  1149,   533,    91,
     445,  1566,  1567,    52,    89,   305,  1578,  1620,  1671,  1672,
     847,  1628,   207,   372,   822,  1629,  1629,  1628,   815,   164,
     808,   690,   699,   858,   693,  1205,   929,   703,   299,  1209,
    1631,  1633,  1210,  1211,  1620,   646,  1174,  1670,   626,   858,
     260,  1454,  1468,  1469,  1620,  1556,    52,  1555,   686,  1625,
      58,    68,    82,    94,    95,    96,   114,   344,   362,   503,
     566,   583,   790,   792,   397,  1695,   390,   207,   390,   501,
    1730,  1729,   133,  1641,  1657,  1659,   515,   491,   691,    37,
     133,   516,   672,  1056,  1057,  1477,  1630,   204,  1477,  1665,
    1630,  1644,   692,  1630,    37,   133,  1059,  1060,  1630,   691,
    1645,  1643,  1477,   526,   175,   287,   653,  1527,   684,   116,
     176,   210,   437,   581,   604,   630,   646,  1527,    13,   993,
    1630,   288,  1417,  1418,  1419,   207,   263,  1522,  1524,    72,
     558,   204,   558,   578,   533,    72,   558,    13,    45,    98,
     103,   265,   342,   410,   535,   575,  1510,  1511,  1512,   725,
     234,   558,   726,   558,  1417,  1527,  1524,   299,   167,    75,
     439,   578,   603,   204,  1265,   558,   641,  1165,  1166,  1165,
     392,   661,    92,   686,  1165,  1165,  1453,  1149,   858,   153,
    1607,  1608,  1612,  1628,   686,   391,  1796,   574,  1797,   270,
     483,  1795,   166,   697,  1278,  1628,   751,   751,    11,   210,
     437,   604,   739,  1267,  1757,  1763,  1773,  1779,  1780,  1781,
    1787,   210,   739,  1756,  1763,  1773,  1781,  1787,  1758,   983,
     983,   983,   983,   983,  1531,  1536,  1596,  1628,   207,   260,
     400,  1242,  1251,  1252,  1255,  1256,  1257,  1413,  1419,  1442,
    1742,    13,   149,   232,   541,   542,   543,   544,   545,   546,
     564,  1259,  1260,  1261,  1754,  1234,   685,   507,   133,   980,
     981,   990,   991,  1064,   119,  1272,   692,   753,     6,   876,
     753,   396,   118,   893,   893,   893,     4,  1631,  1632,  1633,
    1707,  1711,  1620,  1154,   506,   646,   752,  1763,  1184,  1185,
    1453,   850,   851,   692,   263,   686,   416,  1225,  1227,  1228,
     761,   762,  1273,  1273,   772,   164,   833,   715,   186,   446,
     686,  1173,  1452,    61,   186,   190,   204,   341,   446,  1200,
    1201,  1202,    59,   467,   876,   893,  1455,  1456,  1620,  1621,
    1628,   686,  1499,   691,  1504,  1273,  1273,    13,   149,  1319,
    1387,  1319,  1319,  1319,   652,  1331,  1273,  1273,  1326,  1326,
    1273,  1273,  1273,  1273,  1288,  1289,  1273,  1273,  1273,  1273,
     149,  1319,  1387,   685,   685,   130,   197,   230,   302,   383,
     611,   685,  1426,  1429,  1430,   685,  1273,  1273,  1273,  1273,
    1616,   685,  1749,   124,   125,   126,   127,   128,   235,   236,
     237,   238,   345,   347,   348,   349,   356,   444,   504,   505,
     650,   666,   667,  1382,  1383,  1273,  1273,  1326,   120,   123,
     592,   595,  1384,   149,  1315,  1273,  1273,  1273,  1273,  1273,
    1273,  1382,  1273,  1326,  1273,  1326,  1328,    10,   686,   691,
     149,  1319,  1273,  1273,   149,  1319,  1273,  1273,  1326,  1326,
    1326,  1273,  1273,  1273,  1273,   685,  1273,  1326,  1275,  1273,
     685,  1273,  1273,  1273,  1273,  1273,   685,   685,  1273,  1319,
    1319,  1273,  1273,   149,  1319,  1273,  1383,  1383,  1273,    48,
     280,   600,  1273,  1273,   685,  1617,  1618,  1628,  1319,  1319,
    1273,  1273,  1273,   685,   686,  1603,  1273,   691,   692,  1314,
    1630,  1274,   189,   382,   606,   623,  1278,  1273,  1273,  1273,
      13,    19,  1274,  1281,  1274,   684,  1274,  1274,   287,    35,
     263,   287,   461,  1275,  1275,  1275,  1275,  1275,  1275,   259,
    1275,   259,  1275,  1275,  1275,  1275,  1275,  1630,  1291,   684,
    1311,  1398,  1628,  1273,  1297,  1628,   691,   390,   907,  1690,
    1692,   379,   648,   908,   909,   168,  1633,  1706,  1452,  1449,
     708,   709,   299,   299,   299,   299,    52,   299,   725,   299,
     686,  1265,  1540,   123,   592,   595,   791,   801,  1312,  1600,
    1616,  1630,   686,   672,   578,   684,  1712,  1633,  1712,  1712,
    1712,  1707,   210,   437,   581,  1693,   176,   181,   193,   438,
     468,   476,   521,   573,  1697,  1623,  1627,  1634,   195,   372,
    1628,  1678,  1679,   243,   590,  1468,  1624,   239,   630,  1273,
    1568,  1568,  1220,   294,  1577,  1386,   686,   850,   207,  1628,
    1273,   304,   690,    34,   304,   474,   655,  1452,   289,   292,
     447,   930,   932,    33,   599,  1562,   686,   599,   686,   599,
    1175,  1452,   856,  1469,  1465,   416,  1345,  1346,   599,  1558,
     725,  1554,   686,   672,   204,   686,  1633,  1632,  1708,   210,
     437,  1693,  1628,   686,  1640,  1477,  1692,  1628,    73,  1062,
    1273,  1633,   389,   419,   587,  1666,   267,   451,  1660,  1661,
    1662,  1663,   218,   294,   512,  1656,  1477,  1628,   601,  1646,
    1657,   686,  1648,    13,    37,   133,   390,  1273,  1667,   558,
     263,  1525,  1265,  1265,   679,   983,   752,   752,   752,  1620,
     752,  1633,  1620,   299,   360,   558,  1519,  1519,   302,   383,
     496,   611,  1420,  1421,  1598,  1628,  1527,  1628,   752,  1527,
    1632,  1522,  1527,  1624,   752,  1527,   264,   576,   191,   204,
    1513,   686,   175,   558,  1522,  1620,  1524,  1522,  1522,  1273,
    1527,  1527,  1527,  1160,   466,   548,  1167,  1168,  1159,   530,
    1164,   684,   688,  1332,  1333,  1334,  1335,  1336,  1347,  1348,
    1349,  1350,   854,   686,   684,  1610,  1596,   422,  1798,   182,
     732,  1690,  1707,   210,  1780,   983,   983,  1267,   176,   983,
    1763,  1630,  1628,  1628,  1628,  1620,   155,  1258,  1333,   156,
     405,  1437,  1438,  1443,    50,   204,   297,  1262,   437,  1432,
    1442,  1742,  1262,   653,  1388,  1417,  1255,  1256,   679,  1263,
    1264,  1267,  1261,   685,   621,  1736,  1740,  1741,  1253,   981,
      73,  1055,   145,  1630,    83,    97,   276,   353,   378,   449,
     547,   755,   757,   457,   616,   894,   895,   252,   890,   891,
     892,   899,   907,   909,   684,  1624,    27,   332,   884,   885,
     886,   899,   900,   901,   907,   909,   877,   878,   884,   241,
     477,   686,  1715,  1115,   134,   262,   983,  1121,   686,   421,
    1186,   773,  1630,   133,  1218,  1628,  1216,  1620,   925,  1227,
     250,   274,  1088,  1229,   685,   686,   841,    56,   652,   834,
     836,   152,   244,   246,   306,   307,   309,   310,   311,   312,
     313,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     325,   326,   327,   464,   465,   716,   717,   724,  1453,   204,
    1203,   628,  1201,    83,   373,   458,   617,   887,   888,   889,
     899,   903,   904,   905,   906,   907,   909,   632,   872,   686,
    1500,  1345,   691,  1504,  1503,   207,   679,  1628,   686,   685,
    1319,   685,  1320,   685,   685,   685,  1273,   160,   652,  1330,
      20,   685,   633,   685,   685,   685,   686,   685,   686,   685,
     686,   686,   686,   686,   633,   686,  1305,   685,   679,   685,
     686,   686,   685,   685,   685,   685,   207,   685,   686,   685,
     686,  1307,   685,   686,   685,   686,   685,   686,   686,   686,
     678,   685,   686,   686,   685,   685,   684,  1616,  1628,  1319,
     685,   685,   685,  1319,   685,   686,   685,   685,   685,   685,
     685,   686,   685,   685,   686,   685,   263,   685,   686,   686,
     685,   686,   686,   685,   685,   685,   686,   207,   686,  1319,
     685,   685,   686,   686,   686,   685,   207,  1273,   207,  1273,
     207,  1273,   207,   685,   686,   685,   685,   685,   685,   686,
      20,   285,   686,  1079,   685,  1326,   507,   684,  1745,  1746,
    1747,  1748,   689,  1628,  1656,   516,   189,   382,   606,   623,
     684,    18,  1273,  1749,   174,  1274,  1274,   684,  1274,  1274,
    1273,  1273,  1399,  1267,  1301,  1302,  1303,   684,   691,  1628,
    1620,   908,   686,  1477,  1478,   686,    54,   482,  1155,  1452,
     133,   245,   710,   711,  1273,  1483,   137,  1547,   725,  1545,
    1452,  1546,   799,   802,   803,   798,   384,   497,   800,  1628,
    1713,  1714,   599,   656,  1689,   679,  1620,  1628,  1705,  1705,
    1705,   195,   211,   277,   279,   372,   434,   672,   673,   674,
    1680,  1682,  1388,   826,  1462,  1273,  1633,  1221,  1222,  1223,
    1224,  1620,   251,   305,   451,   661,  1673,  1672,   260,   845,
     860,   862,   861,    75,   684,   937,   938,   937,   938,   417,
     940,   227,   274,  1273,  1624,  1633,  1633,  1211,  1620,  1452,
     186,   446,   631,  1178,  1179,  1180,  1273,   515,   637,   638,
     684,   917,  1470,  1473,  1603,   684,   130,   197,   230,   302,
     383,   611,  1425,    13,  1557,   792,   791,  1692,   219,   207,
     686,  1705,  1705,  1705,  1657,   204,  1667,   204,   133,  1061,
    1063,  1630,  1477,   684,   684,   285,   392,   661,   686,   686,
     691,   691,   691,  1659,  1273,  1660,  1647,  1649,  1650,  1624,
     207,  1526,  1624,  1273,   685,  1628,   179,   496,   388,   686,
     751,  1527,   445,  1417,  1512,  1525,  1527,  1522,  1620,  1527,
    1527,   686,   626,  1169,  1364,  1628,   105,   253,   270,   283,
     366,   490,   564,  1343,  1344,   515,   686,  1620,   772,  1608,
    1611,  1628,  1609,   686,   204,  1799,   979,   980,   656,  1688,
    1715,   983,   752,  1628,   752,   983,   983,   736,   609,   633,
    1101,   390,   390,   728,   587,  1626,  1626,   692,  1439,  1440,
    1441,  1630,  1414,   627,   263,  1628,  1432,  1442,  1243,  1389,
     221,  1392,  1412,  1413,   686,  1273,  1614,  1628,    13,   149,
    1744,  1742,  1248,  1251,  1256,  1478,  1478,   364,  1624,   547,
     547,   547,   547,   547,   506,  1624,  1624,  1478,   686,   892,
     116,   233,   408,   419,   427,   531,   630,   737,   738,  1478,
    1478,   686,   886,   879,   880,   899,   900,   901,    50,   645,
     656,  1709,    67,   268,   374,   550,   568,   662,  1703,  1704,
    1711,   656,  1718,     6,    12,    14,    16,    28,    30,    60,
      65,    66,    71,    83,    91,   101,   119,   136,   146,   147,
     154,   162,   168,   178,   202,   248,   250,   257,   273,   297,
     331,   350,   354,   395,   400,   409,   411,   416,   419,   454,
     469,   470,   471,   472,   498,   555,   556,   557,   562,   579,
     582,   602,   607,   621,   923,   986,   988,   990,   991,  1127,
    1131,  1133,  1136,  1142,  1143,  1144,  1146,  1147,  1409,  1623,
    1620,   390,   747,  1123,  1185,   204,   132,   771,   774,  1226,
     684,  1273,   590,   837,   836,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   686,
     628,  1478,  1478,  1478,  1478,   686,   889,   298,   187,   881,
     882,   883,   899,   900,   901,   902,   905,   906,   907,   909,
    1456,  1628,   633,  1497,  1628,  1333,   691,  1504,   259,  1273,
     685,  1273,   590,  1273,  1273,   164,    37,    63,   120,   123,
     131,   151,   261,   368,   523,   595,   625,  1321,  1323,  1324,
    1056,  1289,  1273,  1288,  1326,  1273,  1273,  1056,  1321,  1326,
     685,   259,   259,  1273,  1273,  1273,  1326,  1273,  1273,  1273,
    1273,  1273,  1273,  1273,  1273,  1275,   685,   685,  1273,  1273,
    1273,  1273,  1273,  1273,  1273,  1326,   259,  1273,  1273,  1273,
     685,  1273,  1273,  1273,  1273,   207,  1273,   207,  1273,   207,
    1273,  1273,  1273,    37,    63,  1074,  1075,  1076,  1077,  1078,
    1426,  1425,   685,  1356,  1357,  1358,   684,  1240,  1241,  1262,
    1742,   621,  1355,  1743,  1751,  1630,  1273,  1749,  1274,   685,
     686,   685,  1274,    18,  1273,  1749,   174,  1382,  1382,  1400,
    1628,  1273,   685,   686,  1325,  1326,  1628,  1450,  1692,   992,
    1630,  1633,  1155,   686,   672,   204,   656,  1541,  1542,   672,
     686,   685,   686,  1707,     7,   691,   691,   599,   599,   599,
    1681,  1417,   772,  1470,   686,  1225,  1227,  1626,   661,   294,
      89,   820,   850,   852,   855,   853,   684,  1267,  1426,   570,
     941,   931,    12,   933,   599,   207,  1181,  1179,   164,  1471,
     684,  1474,  1479,  1474,   685,   972,  1472,  1603,  1613,  1614,
    1617,  1628,   507,  1381,  1628,   672,   397,  1706,  1632,   207,
     207,   207,   698,  1633,   587,   587,   451,   473,   510,  1664,
    1662,  1661,  1477,  1648,   686,  1652,  1654,  1658,   130,   197,
     302,   383,   611,  1427,  1517,   172,   649,  1421,  1422,   179,
    1421,  1421,   383,  1526,  1388,  1522,  1168,   308,   724,  1170,
     507,  1351,  1359,  1360,  1364,  1365,  1750,  1332,   270,   270,
     404,  1367,   283,   490,  1343,  1367,  1332,  1489,  1490,  1617,
    1334,  1345,   164,   685,   686,    20,  1425,   346,     7,  1718,
    1628,   684,   486,  1788,  1774,   752,   203,    49,   227,   500,
    1107,  1107,   390,  1620,  1620,   287,   684,   911,   915,   985,
     987,   988,  1444,  1630,   686,  1273,  1415,  1615,   517,  1433,
    1735,  1736,  1273,    50,   228,  1390,  1417,  1264,  1268,  1268,
     691,  1737,  1262,  1063,  1057,   119,   119,   134,   262,   230,
     302,   383,   611,   910,  1428,  1429,  1623,   892,  1624,  1624,
    1624,  1624,  1425,  1624,  1624,   685,   686,   910,   910,   886,
     686,   880,   419,   587,  1630,   587,   587,   587,    18,  1702,
     329,   330,   334,   335,   336,  1716,  1717,    81,    93,   416,
    1001,  1009,  1013,  1014,  1088,  1092,  1093,  1148,  1478,  1148,
     416,  1478,  1478,  1148,  1478,   416,   416,  1478,  1478,   599,
     145,  1478,   272,   579,    93,   203,   416,  1012,  1088,  1148,
     272,  1478,   416,   579,   145,  1478,  1478,  1478,  1478,  1478,
    1148,   416,    50,  1478,  1478,   925,  1478,   416,   418,    20,
     599,   672,  1157,   416,   416,  1478,  1478,  1478,  1478,   148,
     342,  1628,  1478,  1478,   416,  1478,   986,   686,   922,   923,
    1131,   684,   691,  1000,  1015,  1619,  1628,  1477,  1764,    87,
     502,   470,  1124,    13,    75,  1187,    99,   183,   779,   805,
    1628,   164,   808,   690,   684,   435,  1378,  1379,  1380,  1628,
     772,  1273,   684,   684,   684,  1425,  1425,  1624,  1624,  1427,
    1624,  1425,  1624,  1624,  1624,  1624,  1624,  1624,  1624,  1425,
    1425,  1624,   112,   378,   527,  1601,  1624,  1425,   717,  1624,
    1426,   910,   910,   889,   221,  1478,   686,   883,   691,  1333,
    1388,  1504,  1388,  1273,   685,  1273,   590,   684,  1047,  1048,
    1048,  1048,   684,  1044,  1045,  1047,   684,  1045,  1050,  1048,
     261,  1048,   261,   685,   685,   685,    20,  1282,   685,    20,
     685,   685,   685,  1306,  1273,  1273,   685,   685,   686,   685,
     400,  1317,   685,   685,   686,   686,   685,   686,   685,   685,
     263,  1298,  1299,   685,   685,   685,   685,   685,   686,   685,
     685,  1273,   685,   204,   685,   685,   686,   685,   686,   686,
     685,  1273,   685,  1273,   685,  1273,   685,   685,   685,   684,
    1069,  1069,    21,   140,   488,   677,  1071,  1072,  1073,   686,
     686,  1256,  1752,  1753,  1754,  1240,   685,   507,  1262,  1744,
    1353,  1746,  1747,   691,  1111,   685,  1326,  1274,   685,   686,
     685,  1274,   416,  1401,  1268,  1303,   685,   711,   684,  1543,
     451,    58,    68,    82,    94,    95,    96,   114,   344,   362,
     484,   503,   566,   583,   804,   803,  1714,   656,  1720,   397,
     679,   679,  1707,  1707,  1707,   684,   827,   390,  1484,  1223,
    1620,  1227,   245,  1230,  1573,   823,  1628,   843,  1629,   843,
     857,   857,   857,   934,   935,   936,  1628,   946,  1275,    50,
     684,   948,   938,   672,   684,  1633,   361,   474,  1475,  1476,
    1617,  1480,   686,   684,  1473,   685,   685,   686,   507,   691,
     973,   974,   685,   686,   791,   207,  1708,  1708,  1708,   685,
     685,    84,   613,   451,  1667,  1651,  1653,  1417,  1422,  1518,
    1527,   672,   686,  1366,   685,  1740,  1743,  1262,  1742,  1335,
    1604,   689,   270,  1367,  1367,  1347,   270,   390,   633,   686,
    1488,  1477,  1386,   655,  1628,   684,  1632,  1782,   131,   261,
     453,   565,   996,   684,   752,   740,   119,  1620,   730,   731,
    1620,    93,   287,   972,   997,   998,   999,  1000,  1001,  1009,
     921,   922,   686,   987,  1055,  1058,  1440,   686,    21,   140,
    1416,   352,   684,  1393,  1615,  1391,   654,  1395,    20,  1269,
    1624,  1628,   679,  1628,   507,   684,  1233,   738,   880,   587,
      20,   633,  1710,  1703,  1425,  1425,  1425,  1601,   383,   677,
    1424,  1716,   243,  1110,  1619,   983,    66,   203,   435,   622,
    1011,  1087,   983,  1088,  1089,  1089,   243,   982,   133,  1628,
    1619,  1206,  1427,  1425,  1457,  1425,    13,  1132,  1140,  1141,
    1628,  1206,  1624,  1624,  1055,  1478,  1425,  1457,   274,  1458,
     435,  1457,  1457,  1630,  1141,  1478,   195,   277,   378,   995,
    1425,   133,  1628,  1427,  1427,  1457,  1206,  1410,  1411,  1617,
     133,  1425,   133,  1425,  1431,   924,  1624,  1206,  1620,  1206,
    1206,    86,    88,   133,   158,   196,   410,   459,   994,   133,
    1425,   133,  1425,   133,  1425,  1425,  1431,  1132,   989,     6,
     154,  1144,   997,  1628,     9,   195,  1156,   460,  1081,  1016,
     691,   133,  1428,  1624,  1628,   684,  1765,  1278,  1726,    24,
     177,   741,   599,   146,   162,   743,    13,   684,  1188,   225,
     686,   775,    90,   113,   690,  1132,   685,   686,   838,   720,
     721,  1425,   722,   723,  1425,   718,   719,  1425,  1628,   910,
     883,  1628,  1388,  1412,  1382,  1273,   130,   302,   383,   611,
    1322,   383,   383,    63,   120,   123,   131,   151,   198,   261,
     365,   368,   453,   595,   625,  1037,  1038,  1283,  1284,  1285,
    1286,  1321,   685,  1382,  1382,  1273,    50,   509,  1316,  1273,
    1273,  1326,    46,   366,   685,   656,  1300,  1273,  1382,  1273,
    1273,  1273,  1273,   685,   685,   685,  1426,   685,  1079,  1074,
    1072,  1074,  1075,  1425,  1263,  1754,   685,  1740,  1357,  1354,
    1628,   685,  1326,    50,   400,  1402,  1269,  1427,  1548,  1549,
     185,   297,   219,  1715,  1715,  1715,  1482,  1483,   160,   161,
     828,   157,  1230,   281,   245,   475,  1579,   686,   685,   686,
    1268,   932,   416,   949,   950,  1426,   934,   686,  1477,  1481,
    1482,  1479,   919,   920,  1473,  1613,   973,  1628,   976,  1255,
    1256,  1742,  1259,   925,  1628,  1708,  1652,  1657,  1417,  1624,
     724,  1361,  1362,  1386,  1352,  1355,  1262,  1748,  1332,  1347,
     270,   270,  1332,  1347,  1337,  1338,  1490,  1388,  1483,  1376,
    1377,  1265,   763,   764,   765,  1628,   533,  1789,     9,    33,
     867,   390,   660,   729,   684,   684,  1620,   685,   685,   686,
     916,  1579,   987,  1057,  1445,  1615,  1267,  1434,  1435,  1436,
     657,   658,   686,  1394,  1416,  1273,  1311,  1396,  1397,  1624,
    1628,   691,  1253,   684,  1236,  1237,  1624,   302,   383,  1278,
    1206,   684,   274,   274,  1089,   983,  1110,  1628,   983,   983,
    1278,   154,   515,  1132,  1619,  1129,   686,  1426,  1057,  1624,
    1619,  1457,  1140,   274,  1619,  1619,   656,  1624,  1015,  1132,
     686,  1416,   928,  1132,  1137,  1132,   684,   685,  1628,  1620,
      36,    37,    42,    44,    46,    47,   120,   123,   131,   151,
     169,   196,   198,   214,   215,   261,   271,   291,   300,   301,
     303,   338,   339,   340,   357,   358,   359,   365,   368,   385,
     387,   425,   426,   453,   511,   515,   529,   588,   592,   595,
     596,   597,   598,   639,   640,   667,  1017,  1035,  1036,  1037,
    1038,  1039,  1040,  1041,  1042,  1628,  1628,  1766,    20,   433,
    1273,  1273,   390,   747,   752,   390,    83,   748,  1189,   249,
     204,  1628,  1035,   204,   204,   685,  1379,   590,   685,   686,
     685,   686,   685,   686,   288,  1423,   685,   685,   685,   685,
     685,    22,    37,    51,    73,   619,  1055,  1065,  1066,  1067,
     686,  1048,  1044,    63,  1048,   261,  1287,   685,   685,   685,
     685,  1318,  1615,  1596,   685,   685,   686,   685,   352,   276,
     445,   685,   685,   685,   685,   685,   685,  1070,   685,   686,
    1256,  1355,   685,  1393,    50,   447,   496,  1403,  1404,   685,
     686,    18,  1550,   397,   656,  1719,  1719,  1719,   685,   686,
     772,   824,  1485,   260,  1628,   936,   685,   227,   274,   951,
     685,   686,   685,  1476,  1483,   685,  1736,  1740,   975,   976,
    1256,   977,  1262,  1742,   977,  1263,  1259,  1353,  1751,   390,
    1340,  1347,  1347,   390,  1342,  1273,   684,  1412,  1374,  1375,
    1749,   685,   686,   766,  1624,   254,   263,   406,   767,   768,
     769,   770,   138,   256,   627,   868,   502,  1630,   684,  1108,
    1109,  1628,  1108,   685,   913,   914,   912,   999,    20,   978,
      75,  1580,  1416,  1273,   685,   686,  1615,    20,   686,   679,
    1244,  1252,  1255,  1256,  1236,   685,   507,   182,  1134,  1273,
     983,  1110,  1628,   633,  1100,   609,  1110,  1110,   182,   133,
     133,  1015,  1200,  1141,  1062,  1619,  1155,   581,  1156,  1128,
    1411,  1138,  1140,  1130,  1546,   684,  1082,  1047,  1049,  1049,
    1048,  1048,  1044,   431,   684,  1044,  1044,  1067,    63,   639,
    1037,  1039,  1067,  1067,    63,   640,   640,   643,  1044,  1019,
     684,  1048,  1048,  1048,  1067,  1047,  1048,  1010,  1011,  1018,
    1044,   643,  1049,  1049,  1047,  1047,  1048,  1050,   691,   685,
     686,  1767,  1768,  1382,   525,  1624,   153,  1125,  1192,  1628,
      13,   684,  1190,   776,   133,   806,   782,   783,  1425,   777,
     778,   772,   721,   723,   719,   496,  1421,  1498,  1065,  1063,
    1056,    37,  1066,  1068,   383,  1067,   686,  1416,  1273,   352,
     184,   685,  1425,  1412,  1415,   685,    35,   109,   123,   592,
     595,   612,  1405,  1406,  1600,  1549,   146,   219,  1716,  1721,
    1722,  1483,   274,   581,   684,   939,   933,   952,  1628,   950,
     977,   918,  1263,   685,  1339,   633,  1341,   633,  1381,  1423,
     202,   245,   632,  1369,  1370,  1373,  1266,  1783,   765,  1035,
     685,   686,   765,   390,   741,   396,  1108,   685,   686,  1416,
     684,   685,  1736,  1740,   985,   917,   163,   173,   398,   586,
    1581,  1582,   290,  1583,  1268,  1436,  1416,  1398,  1397,  1262,
    1742,  1262,   685,  1736,  1740,  1253,  1619,   417,   684,  1135,
     685,  1110,  1100,   609,  1107,  1002,  1107,  1004,  1005,   259,
     677,   678,   684,  1032,  1033,  1034,  1290,  1599,  1156,  1620,
    1206,  1139,  1178,   685,  1083,  1628,   328,  1084,   523,   625,
     668,  1046,  1112,  1596,  1046,  1046,  1067,   643,  1046,    83,
     435,   622,  1020,  1021,  1028,  1054,  1080,  1278,  1623,  1112,
    1067,  1046,    28,    73,   133,   213,   382,   390,   511,  1022,
    1024,  1051,  1052,  1053,  1054,   549,  1043,  1067,  1068,  1067,
    1068,  1046,  1046,  1628,  1628,  1603,   742,   749,   750,   685,
     686,  1191,   538,   540,   780,   781,   782,   785,  1278,  1628,
    1273,  1231,   179,   496,   485,  1501,   685,  1615,   685,   685,
    1417,   612,  1406,  1407,  1600,   495,   430,   180,  1408,   430,
      64,   397,  1722,   627,  1620,  1267,   942,   684,   133,   637,
     953,  1735,  1363,  1386,  1273,   684,  1273,   684,   685,  1088,
    1088,  1370,   685,   486,  1790,   769,  1267,   746,   747,   684,
     685,    83,   273,   656,  1095,  1099,  1103,  1106,  1623,  1109,
     383,  1096,  1098,  1103,  1105,   921,    50,    50,   163,    50,
    1582,   551,   586,  1584,  1585,  1245,  1249,  1252,  1256,  1011,
    1426,   949,  1008,  1006,  1107,   684,  1003,   684,   684,   684,
    1601,  1601,  1031,   925,   260,   685,   686,   208,   415,   524,
     390,  1085,   668,   625,   685,   686,  1624,   274,  1054,   274,
     382,  1477,   685,  1061,  1034,    15,   627,   133,    20,  1053,
     672,   507,   684,  1769,   552,   744,   808,  1628,   435,  1193,
    1194,  1628,   686,   808,   206,   179,  1263,  1416,  1262,   201,
      18,   201,   109,   221,   378,   591,  1491,  1492,  1617,  1345,
     946,   569,   947,   944,   945,  1628,   263,   284,    83,    91,
     119,   250,   331,   350,   373,   579,   969,   970,   971,  1521,
    1256,  1381,  1381,   204,  1368,  1368,  1784,   754,  1775,   743,
     737,   609,   633,  1094,  1097,  1102,  1103,  1104,  1624,  1478,
     413,  1145,  1146,  1147,  1106,  1477,  1416,   685,  1145,  1105,
     916,  1596,  1596,    50,  1596,    50,    50,  1585,  1735,  1262,
     685,   684,   684,  1007,  1108,   684,  1108,  1108,  1273,   685,
     684,  1628,   138,   627,  1067,  1596,   133,  1428,  1624,  1628,
    1067,   377,   638,  1032,   383,  1253,   684,  1238,  1239,   656,
    1770,  1273,   165,   745,   685,   686,   781,  1407,   495,   403,
     686,  1477,  1574,  1268,  1426,   685,   686,   955,   589,  1478,
    1478,   145,   145,  1478,  1478,  1478,  1478,   684,   964,   971,
     168,   685,   685,   221,   270,   400,  1372,  1371,  1035,   755,
     756,  1726,  1791,  1620,   748,   685,  1107,  1107,  1145,  1104,
    1425,  1623,  1147,  1146,   133,  1428,  1624,  1628,  1596,  1596,
    1596,  1108,  1108,   684,   685,  1108,   685,   685,   686,   949,
      54,   378,   482,   515,  1086,  1086,   684,  1270,  1023,  1246,
    1255,  1256,  1742,  1238,   685,   507,    55,    66,   294,  1273,
    1194,  1492,  1483,  1058,   685,   943,   945,   684,   957,   959,
     954,  1624,  1624,  1478,  1478,  1428,  1428,  1426,  1630,   570,
     965,   966,  1478,    50,    50,   684,   684,  1785,   143,   808,
     204,   153,   685,   685,  1108,  1094,   685,  1095,  1096,  1273,
     685,     5,   133,   382,   390,   390,   685,  1426,   421,   563,
     647,  1025,  1742,  1262,  1262,   685,   621,  1738,  1740,  1253,
      66,   397,    66,  1575,   947,   684,   958,   959,   960,   337,
     956,   959,  1624,  1624,   967,   685,   686,   992,  1378,  1380,
     754,  1267,   749,  1081,  1094,   685,  1094,   627,   138,   685,
    1026,  1027,  1028,  1262,  1247,  1744,  1250,  1255,  1256,  1742,
     397,   397,   496,  1586,   685,   686,   337,   962,   963,  1275,
     968,  1630,   966,   685,   685,  1786,  1776,  1094,  1086,  1086,
    1028,  1738,  1739,  1262,  1742,   241,  1580,   959,   686,   961,
     969,   807,   159,  1769,    50,  1583,   963,   685,   495,  1596,
     245,  1587,  1777,   383,   684,  1589,   200,   429,  1771,  1772,
     290,   496,  1588,   685,   692,  1590,  1591,  1617,   515,  1592,
    1630,  1778,  1630,   685,   686,  1593,  1594,  1617,   808,  1591,
     686,  1477,  1594,  1267,  1483,  1268
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   694,   695,   696,   695,   695,   697,   697,   698,   698,
     698,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   700,   701,   701,
     702,   704,   703,   706,   705,   707,   705,   708,   709,   708,
     710,   710,   711,   713,   712,   715,   714,   716,   716,   717,
     717,   717,   717,   717,   717,   717,   717,   717,   717,   717,
     717,   717,   717,   717,   717,   717,   717,   717,   717,   718,
     718,   718,   719,   720,   720,   720,   721,   722,   722,   722,
     723,   724,   724,   724,   724,   724,   724,   724,   725,   725,
     726,   728,   727,   729,   727,   730,   727,   731,   727,   732,
     727,   733,   727,   727,   727,   727,   727,   734,   727,   736,
     735,   737,   737,   738,   738,   738,   738,   738,   738,   738,
     740,   739,   742,   741,   741,   743,   743,   743,   743,   744,
     744,   745,   745,   746,   746,   747,   748,   748,   750,   749,
     751,   752,   752,   753,   753,   754,   754,   755,   755,   755,
     755,   755,   755,   755,   756,   756,   757,   757,   759,   758,
     760,   760,   761,   761,   762,   762,   763,   763,   764,   764,
     766,   765,   767,   767,   768,   768,   769,   770,   770,   770,
     770,   771,   771,   772,   772,   773,   773,   775,   774,   774,
     776,   774,   774,   778,   777,   779,   779,   780,   780,   781,
     782,   782,   783,   784,   784,   785,   785,   785,   785,   785,
     786,   787,   787,   788,   788,   789,   789,   790,   790,   791,
     791,   791,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   793,   794,   795,   795,   796,   796,
     797,   797,   798,   799,   799,   800,   800,   801,   802,   802,
     803,   804,   804,   804,   804,   804,   804,   804,   804,   804,
     804,   804,   804,   804,   805,   805,   806,   806,   807,   807,
     807,   807,   807,   808,   808,   808,   808,   808,   808,   808,
     809,   809,   809,   809,   811,   810,   813,   812,   815,   814,
     816,   817,   818,   820,   819,   821,   822,   822,   822,   823,
     823,   825,   826,   827,   824,   828,   828,   828,   830,   829,
     832,   833,   831,   831,   834,   834,   835,   835,   837,   838,
     836,   840,   841,   839,   842,   842,   843,   843,   845,   844,
     847,   846,   849,   848,   851,   850,   852,   854,   853,   856,
     855,   857,   858,   860,   859,   861,   859,   862,   859,   864,
     863,   865,   863,   866,   863,   867,   867,   868,   868,   868,
     869,   870,   871,   872,   872,   873,   873,   874,   875,   876,
     876,   878,   877,   879,   879,   879,   880,   880,   880,   881,
     882,   882,   882,   883,   883,   883,   883,   883,   883,   883,
     883,   884,   885,   885,   885,   886,   886,   886,   886,   886,
     887,   888,   888,   888,   889,   889,   889,   889,   889,   889,
     889,   890,   891,   891,   891,   892,   892,   892,   893,   894,
     895,   896,   897,   898,   898,   898,   899,   900,   901,   902,
     903,   904,   905,   906,   907,   908,   908,   909,   909,   910,
     910,   912,   911,   911,   911,   913,   911,   914,   911,   911,
     915,   915,   916,   916,   918,   917,   917,   917,   919,   917,
     920,   917,   921,   922,   922,   924,   923,   925,   927,   926,
     929,   928,   930,   931,   930,   930,   930,   930,   930,   932,
     932,   933,   933,   934,   934,   935,   935,   936,   937,   938,
     939,   940,   940,   941,   942,   941,   943,   941,   944,   944,
     945,   946,   947,   947,   948,   948,   949,   949,   951,   950,
     952,   953,   954,   953,   955,   953,   953,   956,   956,   957,
     957,   958,   958,   960,   961,   959,   962,   962,   963,   963,
     964,   964,   965,   965,   967,   966,   968,   969,   969,   970,
     970,   971,   971,   971,   971,   971,   971,   971,   971,   971,
     972,   974,   973,   975,   975,   976,   976,   977,   978,   978,
     979,   979,   980,   980,   981,   981,   982,   982,   983,   983,
     984,   984,   985,   985,   986,   986,   987,   987,   987,   988,
     988,   988,   988,   988,   988,   988,   988,   988,   988,   988,
     988,   988,   988,   988,   988,   988,   988,   988,   988,   989,
     988,   988,   988,   988,   988,   988,   988,   988,   988,   988,
     988,   988,   988,   988,   988,   988,   990,   991,   992,   993,
     994,   994,   994,   994,   994,   994,   994,   995,   995,   995,
     996,   996,   996,   996,   997,   998,   998,   999,   999,   999,
    1000,  1000,  1002,  1001,  1003,  1001,  1004,  1001,  1005,  1001,
    1006,  1001,  1007,  1001,  1008,  1001,  1009,  1010,  1010,  1011,
    1012,  1012,  1013,  1013,  1014,  1016,  1015,  1018,  1017,  1019,
    1017,  1020,  1020,  1021,  1021,  1022,  1023,  1022,  1024,  1024,
    1025,  1025,  1025,  1025,  1026,  1026,  1027,  1027,  1028,  1028,
    1028,  1030,  1029,  1031,  1031,  1031,  1032,  1033,  1033,  1034,
    1034,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,
    1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,
    1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,  1035,
    1035,  1035,  1035,  1035,  1035,  1035,  1036,  1036,  1036,  1036,
    1036,  1036,  1036,  1036,  1037,  1038,  1038,  1039,  1039,  1040,
    1040,  1040,  1040,  1040,  1041,  1041,  1041,  1041,  1041,  1042,
    1042,  1042,  1043,  1043,  1044,  1044,  1044,  1045,  1046,  1046,
    1046,  1046,  1046,  1046,  1047,  1047,  1047,  1047,  1048,  1048,
    1049,  1049,  1050,  1050,  1051,  1051,  1052,  1052,  1053,  1053,
    1053,  1053,  1053,  1053,  1053,  1054,  1054,  1054,  1054,  1054,
    1054,  1054,  1055,  1055,  1056,  1056,  1057,  1057,  1058,  1058,
    1059,  1059,  1060,  1060,  1061,  1062,  1062,  1063,  1063,  1064,
    1064,  1065,  1065,  1065,  1066,  1067,  1067,  1067,  1067,  1067,
    1067,  1067,  1068,  1068,  1070,  1069,  1071,  1071,  1072,  1073,
    1073,  1073,  1073,  1074,  1075,  1076,  1076,  1077,  1078,  1078,
    1079,  1079,  1080,  1080,  1081,  1082,  1082,  1083,  1083,  1084,
    1084,  1084,  1084,  1085,  1085,  1085,  1085,  1085,  1086,  1086,
    1086,  1086,  1086,  1087,  1087,  1088,  1088,  1089,  1089,  1090,
    1090,  1090,  1091,  1091,  1092,  1093,  1094,  1094,  1095,  1095,
    1096,  1096,  1097,  1097,  1098,  1098,  1099,  1099,  1100,  1100,
    1101,  1101,  1101,  1102,  1102,  1103,  1103,  1103,  1103,  1103,
    1103,  1104,  1104,  1105,  1106,  1106,  1107,  1107,  1107,  1108,
    1108,  1109,  1109,  1110,  1110,  1111,  1111,  1112,  1112,  1114,
    1115,  1113,  1116,  1113,  1113,  1117,  1113,  1118,  1113,  1119,
    1113,  1120,  1113,  1121,  1113,  1113,  1113,  1113,  1113,  1122,
    1113,  1113,  1123,  1123,  1123,  1123,  1124,  1124,  1125,  1125,
    1126,  1126,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,
    1127,  1127,  1128,  1127,  1127,  1129,  1127,  1130,  1127,  1127,
    1127,  1127,  1127,  1131,  1132,  1132,  1134,  1133,  1135,  1135,
    1135,  1137,  1136,  1138,  1139,  1138,  1140,  1140,  1141,  1142,
    1142,  1143,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,
    1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,
    1144,  1144,  1144,  1144,  1144,  1145,  1145,  1145,  1145,  1145,
    1146,  1146,  1147,  1147,  1148,  1148,  1149,  1149,  1151,  1150,
    1152,  1152,  1153,  1153,  1154,  1154,  1155,  1155,  1155,  1156,
    1156,  1156,  1157,  1157,  1157,  1157,  1159,  1158,  1160,  1158,
    1158,  1158,  1161,  1162,  1162,  1163,  1163,  1164,  1164,  1164,
    1166,  1165,  1167,  1167,  1168,  1168,  1168,  1169,  1169,  1169,
    1170,  1170,  1172,  1171,  1173,  1173,  1173,  1174,  1175,  1174,
    1177,  1176,  1178,  1178,  1179,  1179,  1180,  1180,  1180,  1181,
    1181,  1183,  1182,  1184,  1184,  1185,  1186,  1186,  1187,  1187,
    1188,  1189,  1188,  1190,  1191,  1190,  1192,  1192,  1192,  1193,
    1193,  1193,  1194,  1194,  1195,  1195,  1196,  1197,  1196,  1199,
    1198,  1200,  1200,  1201,  1201,  1202,  1202,  1202,  1202,  1202,
    1202,  1203,  1203,  1205,  1204,  1206,  1206,  1206,  1208,  1207,
    1207,  1209,  1209,  1210,  1210,  1211,  1213,  1212,  1214,  1214,
    1215,  1215,  1216,  1217,  1218,  1218,  1220,  1219,  1221,  1221,
    1222,  1222,  1223,  1224,  1226,  1225,  1228,  1227,  1229,  1229,
    1230,  1230,  1231,  1232,  1232,  1232,  1232,  1233,  1233,  1233,
    1233,  1235,  1234,  1234,  1237,  1236,  1236,  1239,  1238,  1238,
    1241,  1240,  1240,  1243,  1242,  1242,  1245,  1244,  1244,  1246,
    1247,  1246,  1246,  1246,  1248,  1248,  1249,  1249,  1250,  1250,
    1250,  1251,  1251,  1251,  1252,  1252,  1252,  1252,  1252,  1254,
    1253,  1255,  1256,  1256,  1257,  1258,  1258,  1259,  1259,  1260,
    1260,  1261,  1261,  1261,  1262,  1262,  1262,  1263,  1263,  1263,
    1264,  1264,  1265,  1266,  1267,  1268,  1269,  1269,  1269,  1269,
    1269,  1270,  1270,  1270,  1271,  1271,  1271,  1272,  1272,  1273,
    1273,  1273,  1273,  1273,  1273,  1273,  1273,  1273,  1273,  1273,
    1273,  1273,  1273,  1273,  1273,  1274,  1274,  1274,  1274,  1274,
    1274,  1274,  1274,  1274,  1274,  1274,  1274,  1274,  1274,  1274,
    1274,  1275,  1275,  1275,  1275,  1275,  1275,  1275,  1275,  1275,
    1275,  1275,  1275,  1275,  1275,  1275,  1276,  1276,  1277,  1277,
    1278,  1278,  1279,  1279,  1280,  1280,  1280,  1280,  1280,  1280,
    1281,  1281,  1282,  1282,  1283,  1283,  1283,  1284,  1284,  1284,
    1284,  1284,  1284,  1285,  1285,  1285,  1287,  1286,  1286,  1288,
    1289,  1289,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,
    1291,  1291,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,
    1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,
    1293,  1293,  1293,  1293,  1293,  1293,  1293,  1294,  1294,  1294,
    1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,
    1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,
    1294,  1294,  1294,  1294,  1295,  1295,  1295,  1295,  1295,  1295,
    1295,  1295,  1297,  1296,  1296,  1298,  1298,  1299,  1299,  1300,
    1300,  1301,  1301,  1302,  1302,  1303,  1304,  1304,  1304,  1304,
    1304,  1304,  1304,  1305,  1306,  1304,  1304,  1304,  1304,  1304,
    1304,  1304,  1304,  1304,  1304,  1304,  1307,  1304,  1308,  1308,
    1309,  1309,  1310,  1310,  1310,  1310,  1310,  1310,  1310,  1310,
    1310,  1310,  1310,  1310,  1310,  1311,  1313,  1312,  1314,  1314,
    1314,  1315,  1315,  1316,  1316,  1317,  1317,  1318,  1318,  1320,
    1319,  1321,  1322,  1321,  1321,  1321,  1321,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1324,  1324,  1324,  1325,  1325,  1326,
    1326,  1327,  1327,  1328,  1328,  1329,  1329,  1330,  1330,  1331,
    1331,  1332,  1332,  1333,  1334,  1334,  1335,  1335,  1336,  1337,
    1336,  1338,  1336,  1336,  1339,  1336,  1340,  1336,  1336,  1341,
    1336,  1342,  1336,  1336,  1343,  1343,  1343,  1344,  1344,  1345,
    1345,  1346,  1347,  1347,  1349,  1348,  1350,  1350,  1351,  1351,
    1352,  1351,  1351,  1351,  1351,  1353,  1353,  1354,  1353,  1355,
    1356,  1358,  1357,  1359,  1360,  1362,  1363,  1361,  1364,  1365,
    1366,  1367,  1367,  1368,  1368,  1368,  1368,  1369,  1369,  1371,
    1370,  1372,  1370,  1373,  1373,  1374,  1375,  1374,  1377,  1376,
    1378,  1378,  1379,  1379,  1380,  1380,  1381,  1381,  1382,  1382,
    1382,  1382,  1382,  1382,  1382,  1382,  1382,  1382,  1382,  1382,
    1383,  1383,  1383,  1383,  1383,  1383,  1383,  1383,  1383,  1384,
    1384,  1384,  1384,  1385,  1385,  1385,  1386,  1386,  1387,  1387,
    1388,  1389,  1388,  1390,  1391,  1390,  1392,  1392,  1393,  1393,
    1394,  1394,  1394,  1395,  1395,  1396,  1396,  1397,  1399,  1398,
    1400,  1400,  1401,  1401,  1402,  1402,  1403,  1403,  1404,  1404,
    1405,  1405,  1406,  1406,  1406,  1407,  1407,  1407,  1408,  1408,
    1408,  1408,  1408,  1409,  1410,  1410,  1411,  1412,  1412,  1414,
    1413,  1415,  1415,  1416,  1416,  1416,  1417,  1417,  1418,  1419,
    1419,  1419,  1420,  1420,  1420,  1421,  1421,  1421,  1421,  1421,
    1422,  1423,  1423,  1423,  1423,  1424,  1424,  1424,  1425,  1425,
    1425,  1425,  1425,  1425,  1426,  1426,  1426,  1426,  1426,  1427,
    1427,  1427,  1427,  1427,  1428,  1428,  1428,  1428,  1428,  1429,
    1430,  1430,  1431,  1431,  1433,  1432,  1434,  1434,  1435,  1435,
    1436,  1438,  1437,  1439,  1439,  1440,  1441,  1441,  1442,  1444,
    1445,  1443,  1443,  1443,  1447,  1446,  1449,  1448,  1450,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1451,  1448,  1448,  1448,
    1448,  1448,  1448,  1452,  1452,  1453,  1454,  1455,  1455,  1456,
    1457,  1457,  1458,  1458,  1459,  1459,  1461,  1462,  1460,  1464,
    1465,  1463,  1466,  1466,  1466,  1466,  1467,  1467,  1468,  1468,
    1469,  1470,  1470,  1470,  1471,  1470,  1472,  1472,  1473,  1473,
    1473,  1474,  1474,  1475,  1475,  1476,  1477,  1477,  1478,  1478,
    1480,  1479,  1481,  1481,  1482,  1482,  1483,  1483,  1483,  1484,
    1485,  1484,  1487,  1488,  1486,  1489,  1489,  1490,  1491,  1491,
    1492,  1493,  1493,  1495,  1494,  1497,  1498,  1496,  1499,  1496,
    1500,  1496,  1501,  1501,  1502,  1502,  1503,  1503,  1504,  1504,
    1505,  1505,  1506,  1506,  1506,  1508,  1507,  1509,  1509,  1510,
    1510,  1511,  1511,  1512,  1512,  1512,  1512,  1512,  1512,  1512,
    1512,  1512,  1513,  1513,  1515,  1514,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1517,  1516,  1518,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1519,  1519,  1519,  1520,  1520,  1521,  1521,  1522,  1522,
    1523,  1523,  1524,  1524,  1525,  1525,  1526,  1526,  1527,  1527,
    1527,  1529,  1528,  1530,  1528,  1531,  1531,  1531,  1531,  1531,
    1532,  1532,  1533,  1534,  1534,  1534,  1535,  1535,  1536,  1536,
    1536,  1538,  1537,  1540,  1539,  1539,  1541,  1541,  1542,  1543,
    1542,  1544,  1544,  1545,  1545,  1545,  1545,  1545,  1545,  1545,
    1545,  1545,  1545,  1545,  1545,  1545,  1545,  1545,  1545,  1546,
    1546,  1547,  1547,  1548,  1548,  1548,  1549,  1550,  1550,  1552,
    1551,  1553,  1553,  1555,  1554,  1556,  1554,  1554,  1557,  1557,
    1558,  1558,  1560,  1559,  1561,  1562,  1562,  1564,  1563,  1565,
    1565,  1565,  1566,  1566,  1566,  1567,  1567,  1568,  1568,  1569,
    1570,  1572,  1573,  1574,  1575,  1571,  1576,  1576,  1577,  1577,
    1578,  1578,  1578,  1579,  1579,  1579,  1580,  1580,  1581,  1581,
    1582,  1582,  1582,  1582,  1583,  1583,  1584,  1584,  1585,  1585,
    1586,  1586,  1587,  1587,  1588,  1588,  1589,  1589,  1589,  1590,
    1590,  1591,  1591,  1592,  1592,  1593,  1593,  1594,  1595,  1595,
    1595,  1595,  1596,  1596,  1597,  1597,  1597,  1598,  1599,  1599,
    1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600,
    1601,  1601,  1601,  1601,  1601,  1602,  1602,  1602,  1603,  1603,
    1605,  1604,  1606,  1606,  1607,  1607,  1609,  1608,  1610,  1610,
    1611,  1611,  1612,  1613,  1613,  1614,  1614,  1615,  1616,  1616,
    1617,  1617,  1618,  1618,  1618,  1619,  1619,  1619,  1619,  1620,
    1620,  1620,  1621,  1621,  1622,  1623,  1623,  1624,  1625,  1626,
    1627,  1627,  1628,  1628,  1629,  1629,  1630,  1630,  1630,  1631,
    1631,  1631,  1632,  1632,  1633,  1634,  1634,  1634,  1634,  1634,
    1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,
    1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,
    1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,
    1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,
    1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,
    1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,  1634,
    1634,  1634,  1634,  1634,  1634,  1634,  1635,  1635,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
    1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1638,  1637,
    1639,  1640,  1637,  1641,  1641,  1643,  1642,  1644,  1642,  1645,
    1642,  1647,  1646,  1646,  1648,  1648,  1650,  1649,  1651,  1649,
    1653,  1652,  1652,  1654,  1654,  1654,  1655,  1655,  1655,  1655,
    1656,  1656,  1656,  1656,  1657,  1658,  1658,  1658,  1658,  1658,
    1658,  1658,  1658,  1658,  1658,  1659,  1659,  1659,  1660,  1660,
    1660,  1660,  1661,  1662,  1663,  1663,  1664,  1664,  1664,  1664,
    1665,  1665,  1666,  1666,  1666,  1667,  1667,  1667,  1667,  1667,
    1669,  1668,  1670,  1670,  1671,  1671,  1672,  1673,  1673,  1673,
    1673,  1673,  1675,  1674,  1676,  1676,  1677,  1676,  1678,  1678,
    1679,  1679,  1680,  1680,  1680,  1680,  1681,  1680,  1682,  1682,
    1682,  1682,  1682,  1683,  1684,  1684,  1684,  1684,  1684,  1684,
    1685,  1685,  1686,  1687,  1687,  1687,  1687,  1687,  1688,  1688,
    1689,  1689,  1690,  1690,  1691,  1692,  1692,  1693,  1693,  1694,
    1694,  1695,  1695,  1696,  1696,  1698,  1697,  1699,  1697,  1700,
    1697,  1701,  1697,  1697,  1697,  1697,  1697,  1697,  1697,  1697,
    1697,  1697,  1697,  1697,  1697,  1697,  1697,  1697,  1697,  1697,
    1697,  1697,  1697,  1697,  1697,  1697,  1697,  1697,  1697,  1702,
    1702,  1703,  1703,  1704,  1704,  1704,  1705,  1705,  1705,  1705,
    1706,  1706,  1707,  1707,  1708,  1708,  1709,  1709,  1710,  1710,
    1711,  1711,  1711,  1711,  1711,  1712,  1712,  1713,  1713,  1714,
    1715,  1715,  1715,  1715,  1715,  1716,  1716,  1716,  1716,  1716,
    1717,  1717,  1718,  1718,  1719,  1719,  1720,  1720,  1721,  1721,
    1722,  1722,  1724,  1723,  1725,  1726,  1726,  1727,  1727,  1728,
    1728,  1728,  1729,  1729,  1729,  1730,  1730,  1731,  1732,  1732,
    1733,  1734,  1735,  1735,  1737,  1736,  1739,  1738,  1741,  1740,
    1742,  1742,  1743,  1744,  1744,  1744,  1745,  1746,  1746,  1747,
    1747,  1748,  1748,  1748,  1749,  1750,  1751,  1752,  1752,  1753,
    1753,  1754,  1754,  1754,  1754,  1754,  1754,  1754,  1754,  1755,
    1755,  1755,  1756,  1756,  1756,  1756,  1756,  1757,  1757,  1757,
    1757,  1757,  1757,  1758,  1758,  1759,  1760,  1761,  1761,  1761,
    1762,  1762,  1762,  1764,  1763,  1765,  1765,  1766,  1766,  1768,
    1767,  1769,  1769,  1769,  1769,  1770,  1770,  1770,  1770,  1771,
    1771,  1772,  1772,  1774,  1775,  1776,  1777,  1778,  1773,  1779,
    1779,  1780,  1782,  1783,  1784,  1785,  1786,  1781,  1788,  1789,
    1790,  1791,  1787,  1792,  1792,  1792,  1792,  1792,  1792,  1793,
    1793,  1793,  1794,  1794,  1795,  1795,  1795,  1796,  1796,  1797,
    1798,  1797,  1799,  1799,  1800,  1800,  1801,  1801,  1802
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       4,     0,     2,     0,     4,     0,     5,     0,     0,     3,
       3,     1,     1,     0,     3,     0,     6,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     5,     5,     1,     0,
       1,     3,     1,     0,     1,     3,     1,     0,     1,     3,
       1,     3,     3,     3,     3,     3,     3,     3,     0,     1,
       1,     0,     7,     0,    14,     0,    13,     0,    13,     0,
       6,     0,     3,     7,     6,     4,     3,     0,     3,     0,
      12,     1,     3,     2,     2,     2,     2,     2,     2,     2,
       0,    13,     0,     6,     2,     0,     1,     3,     1,     0,
       2,     0,     2,     0,     1,     4,     0,     2,     0,     2,
       0,     3,     1,     0,     2,     0,     2,     2,     2,     2,
       2,     3,     3,     1,     1,     2,     3,     3,     0,     4,
       0,     3,     0,     1,     3,     1,     0,     1,     3,     1,
       0,     3,     0,     1,     3,     1,     2,     0,     1,     1,
       1,     0,     3,     2,     3,     0,     3,     0,     5,     5,
       0,     7,     5,     0,     2,     1,     1,     1,     3,     1,
       1,     1,     3,     0,     1,     1,     1,     1,     2,     1,
       3,     1,     1,     0,     1,     0,     2,     3,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     4,     0,     1,     1,     3,
       1,     3,     3,     1,     2,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     5,     0,     2,     0,     3,
       2,     2,     2,     0,     6,     2,     0,     2,     1,     1,
       3,     0,     0,     0,     7,     0,     2,     2,     0,     6,
       0,     0,     4,     1,     1,     2,     1,     2,     0,     0,
       6,     0,     0,     6,     0,     2,     0,     1,     0,     6,
       0,     3,     0,     5,     0,     4,     3,     0,     6,     0,
       6,     1,     0,     0,     6,     0,     6,     0,     6,     0,
       4,     0,     4,     0,     4,     1,     1,     1,     1,     1,
       2,     4,     5,     0,     4,     4,     4,     3,     3,     2,
       2,     0,     2,     1,     2,     3,     1,     1,     1,     1,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     4,     0,     1,     1,     1,     1,
       1,     0,     7,     3,     3,     0,     5,     0,     5,     1,
       2,     4,     0,     3,     0,     7,     5,     3,     0,     5,
       0,     5,     1,     0,     1,     0,     4,     0,     0,     3,
       0,     6,     6,     0,     4,     2,     2,     2,     2,     0,
       1,     0,     3,     0,     1,     1,     3,     1,     4,     5,
       5,     0,     2,     0,     0,     7,     0,    10,     1,     3,
       1,     1,     0,     2,     0,     3,     1,     3,     0,     6,
       1,     0,     0,     5,     0,     4,     1,     1,     1,     1,
       3,     1,     3,     0,     0,     5,     1,     3,     1,     1,
       0,     3,     1,     3,     0,     4,     1,     0,     1,     2,
       1,     3,     4,     3,     3,     3,     3,     4,     4,     3,
       5,     0,     3,     1,     1,     2,     1,     1,     0,     1,
       0,     1,     1,     2,     1,     1,     0,     3,     0,     3,
       1,     3,     0,     1,     1,     2,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     0,
       6,     1,     1,     3,     4,     4,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     2,     0,     9,     0,    10,     0,     9,     0,     9,
       0,    10,     0,    11,     0,    10,     2,     0,     1,     4,
       0,     1,     0,     1,     2,     0,     4,     0,     3,     0,
       3,     0,     1,     2,     1,     1,     0,     6,     0,     2,
       0,     1,     1,     1,     0,     1,     2,     1,     1,     2,
       2,     0,     3,     1,     1,     3,     3,     1,     1,     1,
       1,     3,     3,     3,     2,     1,     1,     3,     3,     2,
       3,     3,     2,     3,     1,     2,     2,     2,     1,     2,
       3,     1,     1,     2,     3,     2,     3,     2,     2,     3,
       3,     3,     5,     5,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     2,
       1,     2,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     2,     0,     3,     0,     1,     1,     5,     0,     1,
       1,     1,     2,     2,     3,     3,     3,     3,     0,     1,
       0,     1,     0,     1,     0,     1,     2,     1,     1,     2,
       4,     1,     3,     2,     1,     2,     2,     1,     3,     3,
       3,     3,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     0,
       1,     2,     1,     1,     2,     0,     1,     2,     1,     2,
       2,     1,     0,     1,     0,     4,     1,     1,     1,     0,
       1,     2,     1,     1,     2,     1,     3,     3,     1,     1,
       0,     2,     0,     1,     5,     0,     3,     3,     1,     0,
       2,     2,     2,     0,     3,     3,     6,     6,     1,     1,
       2,     2,     2,     2,     2,     1,     1,     0,     1,     1,
       1,     1,     0,     1,     1,     1,     0,     1,     0,     1,
       0,     1,     1,     2,     1,     2,     1,     2,     0,     2,
       0,     2,     2,     2,     2,     3,     2,     3,     3,     3,
       3,     1,     1,     1,     1,     3,     1,     1,     1,     4,
       2,     1,     4,     0,     1,     0,     2,     1,     3,     0,
       0,     7,     0,     5,     7,     0,     5,     0,     5,     0,
       5,     0,     4,     0,    11,     3,     4,     3,     3,     0,
       8,     7,     0,     3,     1,     4,     0,     3,     0,     2,
       0,     1,     0,     2,     2,     2,     2,     1,     1,     1,
       4,     4,     0,     6,     4,     0,     5,     0,     6,     4,
       3,     1,     7,     2,     1,     1,     0,     6,     0,     3,
       2,     0,     5,     0,     0,     6,     1,     3,     1,     1,
       3,     3,     3,     2,     4,     2,     7,     6,     5,     5,
       4,     5,     4,     4,     2,     2,     6,     5,     3,     5,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     2,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     2,
       0,     1,     2,     1,     1,     1,     0,     1,     1,     0,
       2,     1,     0,     1,     1,     1,     0,     6,     0,     5,
       4,     4,     3,     0,     1,     1,     3,     3,     2,     2,
       0,     2,     1,     3,     0,     1,     1,     0,     2,     4,
       1,     3,     0,     5,     0,     1,     1,     3,     0,     4,
       0,     4,     0,     1,     1,     2,     1,     1,     1,     0,
       2,     0,     5,     1,     3,     2,     0,     3,     1,     4,
       1,     0,     4,     1,     0,     4,     0,     1,     3,     0,
       1,     3,     1,     1,     2,     6,     3,     0,     4,     0,
       3,     0,     1,     1,     2,     1,     1,     1,     1,     1,
       2,     0,     2,     0,     5,     0,     1,     1,     0,     4,
       4,     3,     5,     1,     3,     3,     0,     6,     1,     1,
       1,     3,     2,     3,     1,     1,     0,     6,     1,     1,
       1,     3,     3,     4,     0,     6,     0,     2,     0,     4,
       0,     2,     2,     3,     3,     4,     4,     3,     3,     4,
       4,     0,     5,     3,     0,     5,     3,     0,     5,     3,
       0,     7,     3,     0,     4,     2,     0,     4,     2,     2,
       0,     4,     2,     3,     1,     1,     1,     1,     1,     1,
       2,     1,     2,     3,     1,     4,     2,     2,     3,     0,
       3,     5,     0,     1,     2,     1,     1,     0,     1,     2,
       1,     1,     1,     1,     0,     2,     4,     3,     1,     1,
       3,     4,     0,     0,     0,     0,     0,     2,     2,     1,
       1,     0,     2,     3,     0,     2,     3,     0,     2,     3,
       3,     3,     2,     3,     4,     3,     4,     3,     4,     3,
       4,     3,     3,     6,     1,     5,     6,     5,     7,     6,
       8,     5,     6,     4,     3,     5,     4,     6,     3,     4,
       1,     3,     3,     3,     3,     3,     3,     5,     5,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     2,     1,     1,     1,     1,     2,     1,
       1,     1,     2,     1,     2,     2,     0,     3,     1,     4,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     6,     4,     4,     7,     6,     5,     6,     6,
       4,     4,     1,     3,     3,     2,     3,     2,     2,     2,
       2,     5,     4,     6,     2,     2,     4,     4,     4,    10,
       6,     8,     6,     4,     4,     6,     4,     4,     4,     6,
       4,     7,     7,     7,     6,     6,     6,     6,     3,     4,
       6,     8,     2,     2,     8,     8,     6,     6,     2,     6,
       6,     8,     8,     6,     8,     6,     2,     8,     8,     2,
       2,     2,     6,     6,     4,     4,     8,     4,     4,     4,
       4,     3,     8,     6,     8,     4,     6,     4,     6,     4,
       4,     4,     6,     8,     4,     3,     6,     4,     6,     5,
       8,     7,    10,     1,     6,     4,     4,     4,     4,     4,
       6,     4,     0,     5,     6,     2,     3,     0,     4,     0,
       3,     0,     1,     1,     3,     4,     4,     5,     4,     4,
       4,     5,     4,     0,     0,     7,     4,     5,     4,     5,
       4,     4,     4,     4,     4,     5,     0,     8,     3,     3,
       1,     1,     3,     3,     3,     3,     3,     4,     4,     4,
       6,     4,     6,     4,     6,     1,     0,     3,     3,     1,
       4,     0,     1,     0,     2,     0,     3,     4,     2,     0,
       3,     2,     0,     4,     2,     1,     1,     1,     1,     2,
       1,     2,     2,     2,     1,     2,     2,     0,     1,     1,
       3,     1,     3,     1,     3,     0,     1,     0,     2,     4,
       5,     1,     1,     1,     1,     4,     1,     3,     3,     0,
       6,     0,     8,     4,     0,     8,     0,    10,     6,     0,
       8,     0,    10,     6,     1,     2,     1,     1,     2,     0,
       1,     5,     1,     1,     0,     5,     5,     8,     1,     2,
       0,     4,     2,     3,     3,     1,     1,     0,     3,     2,
       1,     0,     3,     2,     3,     0,     0,     5,     0,     1,
       0,     0,     1,     0,     2,     3,     3,     1,     1,     0,
       7,     0,     7,     1,     2,     0,     0,     2,     0,     2,
       0,     1,     1,     1,     1,     3,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     0,     2,     0,     1,
       0,     0,     3,     0,     0,     3,     0,     4,     4,     2,
       0,     1,     1,     0,     2,     3,     1,     3,     0,     7,
       0,     1,     0,     3,     0,     3,     0,     3,     1,     1,
       1,     4,     2,     2,     2,     1,     2,     2,     0,     3,
       2,     2,     3,     3,     3,     1,     2,     0,     1,     0,
       4,     4,     2,     0,     1,     1,     0,     1,     1,     2,
       5,     4,     1,     3,     3,     1,     1,     1,     1,     1,
       1,     0,     2,     3,     4,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     6,     0,     1,     3,     1,
       3,     0,     2,     3,     1,     1,     2,     1,     2,     0,
       0,     7,     2,     1,     0,     3,     0,     7,     0,     7,
       4,     6,     4,     4,     5,     5,     0,     6,     4,     4,
       5,     6,     4,     1,     3,     1,     2,     1,     3,     1,
       0,     2,     0,     2,     0,     1,     0,     0,     8,     0,
       0,     6,     0,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     3,     4,     0,     3,     3,     1,     2,     2,
       1,     3,     1,     3,     1,     3,     1,     1,     0,     1,
       0,     4,     0,     1,     3,     1,     1,     1,     1,     0,
       0,     6,     0,     0,    11,     3,     1,     3,     3,     1,
       3,     0,     1,     0,     4,     0,     0,     9,     0,     5,
       0,     6,     0,     2,     1,     3,     2,     4,     0,     2,
       0,     2,     1,     1,     1,     0,     4,     0,     1,     0,
       1,     1,     3,     1,     1,     2,     2,     2,     1,     1,
       1,     1,     0,     3,     0,     3,     2,     4,     4,     3,
       4,     4,     1,     3,     3,     3,     3,     6,     2,     2,
       0,     6,     0,     7,     5,     2,     1,     1,     1,     5,
       5,     2,     2,     1,     4,     3,     2,     3,     2,     2,
       1,     4,     4,     3,     3,     2,     3,     2,     3,     3,
       3,     3,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     0,     1,     0,     2,
       0,     1,     1,     1,     0,     2,     0,     2,     0,     3,
       3,     0,     4,     0,     4,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     0,     3,     0,     1,
       1,     0,     4,     0,     4,     1,     0,     1,     4,     0,
       3,     3,     1,     2,     2,     2,     2,     3,     3,     2,
       1,     1,     1,     1,     2,     1,     1,     1,     2,     0,
       1,     0,     5,     0,     1,     3,     1,     0,     3,     0,
       3,     3,     1,     0,     4,     0,     3,     2,     0,     1,
       0,     2,     0,     3,     3,     2,     2,     0,     4,     0,
       1,     1,     2,     2,     3,     0,     1,     1,     2,     1,
       2,     0,     0,     0,     0,    22,     1,     1,     0,     1,
       0,     1,     1,     0,     1,     1,     0,     2,     2,     1,
       3,     4,     3,     3,     0,     2,     2,     1,     3,     3,
       0,     4,     0,     3,     1,     1,     0,     3,     2,     3,
       1,     1,     2,     0,     2,     3,     1,     5,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     2,     2,     2,     0,     1,
       0,     4,     0,     1,     1,     3,     0,     9,     0,     3,
       1,     3,     1,     1,     1,     3,     5,     1,     1,     1,
       1,     1,     3,     4,     5,     1,     5,     3,     2,     1,
       3,     2,     2,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       0,     0,     7,     1,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     2,     0,     2,     0,     2,     0,     4,
       0,     3,     1,     1,     1,     1,     0,     1,     1,     1,
       0,     2,     2,     2,     3,     3,     4,     6,     2,     3,
       3,     3,     5,     2,     3,     1,     3,     3,     1,     1,
       3,     3,     1,     3,     2,     2,     2,     2,     2,     1,
       1,     3,     1,     4,     4,     1,     1,     1,     1,     1,
       0,     4,     1,     1,     1,     3,     3,     1,     1,     2,
       2,     2,     0,     3,     4,     3,     0,     7,     1,     2,
       1,     1,     1,     1,     1,     1,     0,     5,     1,     1,
       1,     1,     1,     3,     6,     6,     6,     7,     5,     3,
       4,     1,     3,     8,     8,     8,     6,     4,     0,     3,
       0,     3,     1,     3,     2,     1,     1,     0,     1,     1,
       2,     0,     1,     1,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     3,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     2,     0,
       1,     3,     1,     2,     2,     2,     1,     3,     3,     1,
       1,     3,     1,     3,     1,     3,     1,     1,     1,     1,
       4,     5,     4,     6,     1,     0,     3,     3,     1,     1,
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     1,     0,     2,     0,     2,     0,     3,     2,     1,
       2,     1,     0,     3,     1,     0,     1,     0,     1,     0,
       3,     2,     0,     1,     2,     0,     1,     4,     4,     5,
       2,     3,     0,     1,     0,     4,     0,     4,     0,     2,
       2,     1,     2,     0,     1,     1,     3,     3,     4,     2,
       3,     1,     1,     2,     4,     0,     0,     0,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     3,     3,     3,
       0,     3,     3,     0,     8,     0,     3,     1,     3,     0,
       4,     3,     3,     4,     4,     0,     3,     4,     4,     1,
       1,     0,     2,     0,     0,     0,     0,     0,    20,     2,
       1,     7,     0,     0,     0,     0,     0,    15,     0,     0,
       0,     0,    12,     4,     4,     3,     4,     3,     2,     1,
       3,     5,     1,     1,     0,     1,     1,     0,     2,     0,
       0,     3,     0,     2,     5,     3,     3,     3,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (thd);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, THD *thd)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, thd); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
{
  YYUSE (yyvaluep);
  YYUSE (thd);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (THD *thd)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, thd);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 2100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
              my_yyabort_error((ER_EMPTY_QUERY, MYF(0)));

            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
#line 21952 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3:
#line 2109 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
#line 21979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 5:
#line 2134 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
#line 21988 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 67:
#line 2213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[0].lex_str);
          }
#line 21998 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 70:
#line 2227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "PREPARE..FROM"));
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[-2].lex_str);
          }
#line 22011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 71:
#line 2238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->expr_allows_subselect= false; }
#line 22017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 72:
#line 2240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->prepared_stmt_code= (yyvsp[0].item);
            Lex->expr_allows_subselect= true;
          }
#line 22026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 73:
#line 2248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[0].lex_str);
          }
#line 22036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 74:
#line 2254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 75:
#line 2256 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "EXECUTE IMMEDIATE"));
            Lex->sql_command= SQLCOM_EXECUTE_IMMEDIATE;
          }
#line 22053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 76:
#line 2263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 78:
#line 2268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->expr_allows_subselect= false; }
#line 22065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 79:
#line 2270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "EXECUTE..USING"));
            Lex->expr_allows_subselect= true;
          }
#line 22076 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 82:
#line 2285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->prepared_stmt_params.push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 22085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 83:
#line 2295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HELP"));
          }
#line 22094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 84:
#line 2300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[0].lex_str).str;
          }
#line 22104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 85:
#line 2311 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
#line 22112 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 86:
#line 2315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 89:
#line 2325 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.host = (yyvsp[0].lex_str).str;
          }
#line 22126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 90:
#line 2329 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.user = (yyvsp[0].lex_str).str;
          }
#line 22134 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 91:
#line 2333 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.password = (yyvsp[0].lex_str).str;
          }
#line 22142 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 92:
#line 2337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.port = (yyvsp[0].ulong_num);
          }
#line 22150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 93:
#line 2341 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.connect_retry = (yyvsp[0].ulong_num);
          }
#line 22158 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 94:
#line 2345 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].ulong_num) > MASTER_DELAY_MAX)
            {
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       (uint) (yyvsp[0].ulong_num), (uint) MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[0].ulong_num);
          }
#line 22172 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 95:
#line 2355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl= (yyvsp[0].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
#line 22181 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 96:
#line 2360 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_ca= (yyvsp[0].lex_str).str;
          }
#line 22189 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 97:
#line 2364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_capath= (yyvsp[0].lex_str).str;
          }
#line 22197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 98:
#line 2368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_cert= (yyvsp[0].lex_str).str;
          }
#line 22205 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 99:
#line 2372 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_cipher= (yyvsp[0].lex_str).str;
          }
#line 22213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 100:
#line 2376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_key= (yyvsp[0].lex_str).str;
          }
#line 22221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 101:
#line 2380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[0].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
#line 22230 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 102:
#line 2385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_crl= (yyvsp[0].lex_str).str;
          }
#line 22238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 103:
#line 2389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_crlpath= (yyvsp[0].lex_str).str;
          }
#line 22246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 104:
#line 2394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[0].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
               my_yyabort_error((ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0),
                                 SLAVE_MAX_HEARTBEAT_PERIOD));

            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 22277 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 105:
#line 2421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
#line 22285 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 106:
#line 2425 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_do_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 22293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 107:
#line 2429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_ignore_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 22301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 112:
#line 2444 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 22309 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 116:
#line 2457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_do_domain_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 22317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 120:
#line 2470 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_ignore_domain_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 22325 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 121:
#line 2477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.log_file_name = (yyvsp[0].lex_str).str;
          }
#line 22333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 122:
#line 2481 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitly specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitly specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, (yyvsp[0].ulonglong_number));
          }
#line 22352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 123:
#line 2496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.relay_log_name = (yyvsp[0].lex_str).str;
          }
#line 22360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 124:
#line 2500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.relay_log_pos = (yyvsp[0].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
#line 22370 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 125:
#line 2506 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
#line 22380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 126:
#line 2512 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
#line 22390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 127:
#line 2518 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
#line 22400 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 128:
#line 2527 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
          }
#line 22409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 130:
#line 2536 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->mi.connection_name= (yyvsp[0].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME"));
#endif
         }
#line 22421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 131:
#line 2549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (!(lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_create_table()))
              MYSQL_YYABORT;
            lex->create_info.init();
            if (lex->set_command_with_check(SQLCOM_CREATE_TABLE, (yyvsp[-3].num), (yyvsp[-4].object_ddl_options) | (yyvsp[-1].object_ddl_options)))
               MYSQL_YYABORT;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            /*
              For CREATE TABLE we should not open the table even if it exists.
              If the table exists, we should either not create it or replace it
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
            lex->create_info.default_table_charset= NULL;
            lex->name= null_lex_str;
            lex->create_last_non_select_table= lex->last_table();
          }
#line 22447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 132:
#line 2571 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            create_table_set_open_action_and_adjust_tables(lex);
          }
#line 22457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 133:
#line 2579 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-6].key_type), (yyvsp[-3].lex_str), (yyvsp[-2].key_alg), (yyvsp[-7].object_ddl_options) | (yyvsp[-4].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 22468 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 134:
#line 2586 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 135:
#line 2589 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-5].key_type), (yyvsp[-2].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-6].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 22485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 136:
#line 2596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 137:
#line 2599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-5].key_type), (yyvsp[-2].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-6].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 22502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 138:
#line 2606 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 139:
#line 2608 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
#line 22517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 140:
#line 2613 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->set_command_with_check(SQLCOM_CREATE_DB, 0, (yyvsp[-5].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
               MYSQL_YYABORT;
            lex->name= (yyvsp[-2].lex_str);
          }
#line 22528 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 141:
#line 2620 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.set((yyvsp[0].object_ddl_options));
            Lex->create_view_mode= ((yyvsp[0].object_ddl_options).or_replace() ? VIEW_CREATE_OR_REPLACE :
                                                      VIEW_CREATE_NEW);
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
#line 22540 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 142:
#line 2627 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22546 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 143:
#line 2630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_USER, (yyvsp[-6].object_ddl_options) | (yyvsp[-4].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 22555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 144:
#line 2636 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_ROLE, (yyvsp[-5].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 22564 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 145:
#line 2641 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
#line 22572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 146:
#line 2645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
#line 22580 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 147:
#line 2648 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->set_command(SQLCOM_CREATE_SERVER, (yyvsp[0].object_ddl_options)); }
#line 22586 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 148:
#line 2650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 149:
#line 2655 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            Lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 22602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 150:
#line 2662 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->server_options.scheme= (yyvsp[-4].lex_str); }
#line 22608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 153:
#line 2672 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.username.str == 0);
            Lex->server_options.username= (yyvsp[0].lex_str);
          }
#line 22617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 154:
#line 2677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.host.str == 0);
            Lex->server_options.host= (yyvsp[0].lex_str);
          }
#line 22626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 155:
#line 2682 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.db.str == 0);
            Lex->server_options.db= (yyvsp[0].lex_str);
          }
#line 22635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 156:
#line 2687 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.owner.str == 0);
            Lex->server_options.owner= (yyvsp[0].lex_str);
          }
#line 22644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 157:
#line 2692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.password.str == 0);
            Lex->server_options.password= (yyvsp[0].lex_str);
          }
#line 22653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 158:
#line 2697 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.socket.str == 0);
            Lex->server_options.socket= (yyvsp[0].lex_str);
          }
#line 22662 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 159:
#line 2702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.port= (yyvsp[0].ulong_num);
          }
#line 22670 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 160:
#line 2709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[-3].simple_string);
            if (lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[0].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
#line 22690 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 161:
#line 2729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
#line 22702 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 162:
#line 2740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_expression= (yyvsp[-1].item);
            Lex->event_parse_data->interval= (yyvsp[0].interval);
          }
#line 22711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 164:
#line 2747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[0].item);
          }
#line 22719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 165:
#line 2753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 22725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 166:
#line 2755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
#line 22735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 167:
#line 2761 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
#line 22745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 168:
#line 2767 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
#line 22755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 169:
#line 2776 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, 0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
#line 22766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 170:
#line 2783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_starts= (yyvsp[0].item);
          }
#line 22774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 172:
#line 2791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_ends= (yyvsp[0].item);
          }
#line 22782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 173:
#line 2797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 22788 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 175:
#line 2803 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->on_completion= (yyvsp[-1].num)
                                    ? Event_parse_data::ON_COMPLETION_DROP
                                    : Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
#line 22799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 176:
#line 2812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 22805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 177:
#line 2814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[0].lex_str);
            (yyval.num)= 1;
          }
#line 22814 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 178:
#line 2821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
              my_yyabort_error((ER_EVENT_RECURSION_FORBIDDEN, MYF(0)));
              
            if (!make_sp_head(thd, lex->event_parse_data->identifier, TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
#line 22849 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 179:
#line 2852 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->event_parse_data->body_changed= TRUE;
          }
#line 22863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 180:
#line 2865 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
#line 22879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 181:
#line 2880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(yyvsp[-2].lex_str).str || check_db_name(&(yyvsp[-2].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            if (check_routine_name(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
#line 22894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 182:
#line 2891 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[0].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name(db, (yyvsp[0].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
#line 22913 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 183:
#line 2908 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 184:
#line 2909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22925 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 185:
#line 2913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 186:
#line 2914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 187:
#line 2920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.comment= (yyvsp[0].lex_str); }
#line 22943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 188:
#line 2922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* Just parse it, we only have one language for now. */ }
#line 22949 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 189:
#line 2924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
#line 22955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 190:
#line 2926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
#line 22961 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 191:
#line 2928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
#line 22967 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 192:
#line 2930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
#line 22973 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 193:
#line 2932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 194:
#line 2937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 195:
#line 2938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.detistic= ! (yyvsp[-1].num); }
#line 22991 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 196:
#line 2943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
#line 22999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 197:
#line 2947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
#line 23007 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 198:
#line 2954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[0].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[0].spname), TYPE_ENUM_PROCEDURE);
          }
#line 23020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 199:
#line 2962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 204:
#line 2978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->value_list.push_back((yyvsp[0].item), thd->mem_root);
          }
#line 23034 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 205:
#line 2982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->value_list.push_back((yyvsp[0].item), thd->mem_root);
          }
#line 23042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 210:
#line 3000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_PARAM, MYF(0), (yyvsp[0].lex_str).str));

            sp_variable *spvar= spc->add_variable(thd, (yyvsp[0].lex_str));

            lex->init_last_field(&spvar->field_def, (yyvsp[0].lex_str).str,
                                 thd->variables.collation_database);
            (yyval.spvar)= spvar;
          }
#line 23060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 211:
#line 3014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_variable *spvar= (yyvsp[-1].spvar);

            Lex->set_last_field_type((yyvsp[0].Lex_field_type));
            if (lex->sphead->fill_field_definition(thd, lex, lex->last_field))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

            (yyval.spvar)= spvar;
          }
#line 23079 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 216:
#line 3042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyvsp[0].spvar)->mode=(yyvsp[-1].spvar_mode); }
#line 23085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 217:
#line 3046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
#line 23091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 218:
#line 3047 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
#line 23097 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 219:
#line 3048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_OUT; }
#line 23103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 220:
#line 3049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_INOUT; }
#line 23109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 221:
#line 3053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 223:
#line 3058 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 225:
#line 3064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
#line 23129 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 226:
#line 3068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[-1].spblock).vars || (yyvsp[-1].spblock).conds) && ((yyvsp[-2].spblock).curs || (yyvsp[-2].spblock).hndlrs))
              my_yyabort_error((ER_SP_VARCOND_AFTER_CURSHNDLR, MYF(0)));
            if ((yyvsp[-1].spblock).curs && (yyvsp[-2].spblock).hndlrs)
              my_yyabort_error((ER_SP_CURSOR_AFTER_HANDLER, MYF(0)));
            (yyval.spblock).vars= (yyvsp[-2].spblock).vars + (yyvsp[-1].spblock).vars;
            (yyval.spblock).conds= (yyvsp[-2].spblock).conds + (yyvsp[-1].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[-2].spblock).hndlrs + (yyvsp[-1].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[-2].spblock).curs + (yyvsp[-1].spblock).curs;
          }
#line 23148 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 227:
#line 3086 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;

            // get the last variable:
            uint num_vars= pctx->context_var_count();
            uint var_idx= pctx->var_context2runtime(num_vars - 1);
            sp_variable *spvar= pctx->find_variable(var_idx);

            lex->sphead->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[0].num));
            thd->lex->init_last_field(&spvar->field_def, spvar->name.str,
                                      thd->variables.collation_database);
          }
#line 23167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 228:
#line 3102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            Item *dflt_value_item= (yyvsp[0].item);
            Lex->set_last_field_type((yyvsp[-1].Lex_field_type));

            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null(thd);
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[-3].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
              bool last= i == num_vars - 1;
            
              if (!spvar)
                MYSQL_YYABORT;
            
              if (!last)
                spvar->field_def= *lex->last_field;

              spvar->default_value= dflt_value_item;
              spvar->field_def.field_name= spvar->name.str;
            
              if (lex->sphead->fill_field_definition(thd, lex,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new (lex->thd->mem_root)
                                 sp_instr_set(lex->sphead->instructions(),
                                               pctx, var_idx, dflt_value_item,
                                               (yyvsp[-1].Lex_field_type).field_type(), lex, last);
              if (is == NULL || lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[-3].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
#line 23226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 229:
#line 3157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[-3].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_COND, MYF(0), (yyvsp[-3].lex_str).str));
            if(spc->add_condition(thd, (yyvsp[-3].lex_str), (yyvsp[0].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
#line 23242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 230:
#line 3169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[-2].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new (thd->mem_root) sp_instr_hpush_jump(sp->instructions(),
                   ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[-2].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(thd, i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0)))
              MYSQL_YYABORT;
          }
#line 23273 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 231:
#line 3196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[-5].num) == sp_handler::CONTINUE)
            {
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(thd, i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
#line 23309 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 232:
#line 3228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[-3].lex_str), &offp, TRUE))
              my_yyabort_error((ER_SP_DUP_CURS, MYF(0), (yyvsp[-3].lex_str).str));

            i= new (thd->mem_root)
                 sp_instr_cpush(sp->instructions(), ctx, (yyvsp[0].lex),
                                ctx->current_cursor_count());
            if (i == NULL || sp->add_instr(i) || ctx->add_cursor((yyvsp[-3].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
#line 23332 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 233:
#line 3249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd);
          }
#line 23340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 234:
#line 3253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
              my_yyabort_error((ER_SP_BAD_CURSOR_SELECT, MYF(0)));
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 23357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 235:
#line 3268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_handler::EXIT; }
#line 23363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 236:
#line 3269 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_handler::CONTINUE; }
#line 23369 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 237:
#line 3275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 23375 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 238:
#line 3277 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)+= 1; }
#line 23381 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 239:
#line 3282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[0].spcondvalue)))
              my_yyabort_error((ER_SP_DUP_HANDLER, MYF(0)));

            sp_instr_hpush_jump *i= (sp_instr_hpush_jump *)sp->last_instruction();
            i->add_condition((yyvsp[0].spcondvalue));
          }
#line 23397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 240:
#line 3297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* mysql errno */
            if ((yyvsp[0].ulong_num) == 0)
              my_yyabort_error((ER_WRONG_VALUE, MYF(0), "CONDITION", "0"));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[0].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 23409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 242:
#line 3309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[0].lex_str)) || is_sqlstate_completion((yyvsp[0].lex_str).str))
              my_yyabort_error((ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[0].lex_str).str));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[0].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 23429 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 243:
#line 3327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 244:
#line 3328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23441 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 245:
#line 3333 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= (yyvsp[0].spcondvalue);
          }
#line 23449 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 246:
#line 3337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[0].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 23459 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 247:
#line 3343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 23469 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 248:
#line 3349 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 23479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 249:
#line 3355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 23489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 250:
#line 3364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[-1].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 23504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 251:
#line 3378 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_condition_value *cond;

            /* SIGNAL foo cannot be used outside of stored programs */
            if (lex->spcont == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            cond= lex->spcont->find_condition((yyvsp[0].lex_str), false);
            if (cond == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            if (cond->type != sp_condition_value::SQLSTATE)
              my_yyabort_error((ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0)));
            (yyval.spcondvalue)= cond;
          }
#line 23523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 252:
#line 3393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= (yyvsp[0].spcondvalue); }
#line 23529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 253:
#line 3398 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= NULL; }
#line 23535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 254:
#line 3400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= (yyvsp[0].spcondvalue); }
#line 23541 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 255:
#line 3405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
#line 23549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 257:
#line 3413 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[-2].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[0].item);
          }
#line 23561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 258:
#line 3422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[-2].diag_condition_item_name);
            if (info->m_item[index] != NULL)
              my_yyabort_error((ER_DUP_SIGNAL_SET, MYF(0),
                                Diag_condition_item_names[index].str));
            info->m_item[index]= (yyvsp[0].item);
          }
#line 23575 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 259:
#line 3438 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 23581 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 260:
#line 3440 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[0].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[0].item);
          }
#line 23603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 261:
#line 3458 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 23609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 262:
#line 3464 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
#line 23615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 263:
#line 3466 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
#line 23621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 264:
#line 3468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
#line 23627 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 265:
#line 3470 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
#line 23633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 266:
#line 3472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
#line 23639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 267:
#line 3474 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
#line 23645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 268:
#line 3476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
#line 23651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 269:
#line 3478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
#line 23657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 270:
#line 3480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
#line 23663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 271:
#line 3482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
#line 23669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 272:
#line 3484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
#line 23675 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 273:
#line 3486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
#line 23681 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 274:
#line 3491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[-1].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 23697 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 275:
#line 3506 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Diagnostics_information *info= (yyvsp[0].diag_info);

            info->set_which_da((yyvsp[-2].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 23713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 276:
#line 3521 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
#line 23719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 277:
#line 3523 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
#line 23725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 278:
#line 3528 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[0].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
#line 23735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 279:
#line 3534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[-1].item), (yyvsp[0].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
#line 23745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 280:
#line 3543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[0].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 23755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 281:
#line 3549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].stmt_info_list)->push_back((yyvsp[0].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[-2].stmt_info_list);
          }
#line 23765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 282:
#line 3558 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[0].stmt_info_item_name), (yyvsp[-2].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
#line 23775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 283:
#line 3567 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(thd, (yyvsp[0].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 23788 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 284:
#line 3576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 23798 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 285:
#line 3585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
#line 23804 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 286:
#line 3587 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
#line 23810 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 287:
#line 3596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 23816 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 288:
#line 3601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[0].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 23826 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 289:
#line 3607 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].cond_info_list)->push_back((yyvsp[0].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[-2].cond_info_list);
          }
#line 23836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 290:
#line 3616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[0].cond_info_item_name), (yyvsp[-2].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
#line 23846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 291:
#line 3625 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
#line 23852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 292:
#line 3627 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
#line 23858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 293:
#line 3629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
#line 23864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 294:
#line 3631 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
#line 23870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 295:
#line 3633 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
#line 23876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 296:
#line 3635 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
#line 23882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 297:
#line 3637 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
#line 23888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 298:
#line 3639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
#line 23894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 299:
#line 3641 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
#line 23900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 300:
#line 3643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
#line 23906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 301:
#line 3645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
#line 23912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 302:
#line 3647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
#line 23918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 303:
#line 3649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
#line 23924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 304:
#line 3654 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[0].lex_str).str));
            spc->add_variable(thd, (yyvsp[0].lex_str));
            (yyval.num)= 1;
          }
#line 23940 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 305:
#line 3666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[0].lex_str).str));
            spc->add_variable(thd, (yyvsp[0].lex_str));
            (yyval.num)= (yyvsp[-2].num) + 1;
          }
#line 23956 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 306:
#line 3680 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = NULL; }
#line 23962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 307:
#line 3681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 23968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 324:
#line 3720 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->sphead->new_cont_backpatch(NULL);
          }
#line 23978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 325:
#line 3726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->do_cont_backpatch(); }
#line 23984 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 326:
#line 3730 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
#line 23996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 327:
#line 3738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            /* "USE db" doesn't work in a procedure */
            if (lex->sql_command == SQLCOM_CHANGE_DB)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "USE"));
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new (thd->mem_root)
                sp_instr_stmt(sp->instructions(), lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_start() - sp->m_tmp_query;;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 24042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 328:
#line 3783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 24048 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 329:
#line 3785 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
              my_yyabort_error((ER_SP_BADRETURN, MYF(0)));

            sp_instr_freturn *i;

            i= new (thd->mem_root)
                 sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[0].item),
                                  sp->m_return_field_def.sql_type, lex);
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;
            sp->m_flags|= sp_head::HAS_RETURN;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 24072 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 330:
#line 3808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[0].lex_str));

            if (! lab)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[0].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;
            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., SP_LAB_ITER),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            n= ctx->diff_handlers(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(hpop);
            }
            n= ctx->diff_cursors(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(cpop);
            }
            i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL)
              MYSQL_YYABORT;
            sp->push_backpatch(thd, i, lab);  /* Jumping forward */
            sp->add_instr(i);
          }
#line 24123 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 331:
#line 3858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[0].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[0].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;

            n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL ||
                  sp->add_instr(hpop))
                MYSQL_YYABORT;
            }
            n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL ||
                  sp->add_instr(cpop))
                MYSQL_YYABORT;
            }
            i= new (thd->mem_root)
              sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 24165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 332:
#line 3899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[0].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 24184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 333:
#line 3917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[-1].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[-1].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 24203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 334:
#line 3932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 335:
#line 3937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[0].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 24228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 339:
#line 3961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
#line 24246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 340:
#line 3975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
#line 24264 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 341:
#line 3991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 24270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 342:
#line 3993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, ctx, (yyvsp[-1].item), lex);
            if (i == NULL ||
                sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 24290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 343:
#line 4009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0));
          }
#line 24306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 344:
#line 4021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
#line 24316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 348:
#line 4036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;

            /**
              An example of the CASE statement in use is
            <pre>
            CREATE PROCEDURE proc_19194_simple(i int)
            BEGIN
              DECLARE str CHAR(10);

              CASE i
                WHEN 1 THEN SET str="1";
                WHEN 2 THEN SET str="2";
                WHEN 3 THEN SET str="3";
                ELSE SET str="unknown";
              END CASE;

              SELECT str;
            END
            </pre>
              The actions are used to generate the following code:
            <pre>
            SHOW PROCEDURE CODE proc_19194_simple;
            Pos     Instruction
            0       set str@1 NULL
            1       set_case_expr (12) 0 i@0
            2       jump_if_not 5(12) (case_expr@0 = 1)
            3       set str@1 _latin1'1'
            4       jump 12
            5       jump_if_not 8(12) (case_expr@0 = 2)
            6       set str@1 _latin1'2'
            7       jump 12
            8       jump_if_not 11(12) (case_expr@0 = 3)
            9       set str@1 _latin1'3'
            10      jump 12
            11      set str@1 _latin1'unknown'
            12      stmt 0 "SELECT str"
            </pre>
            */

            Lex->sphead->new_cont_backpatch(NULL);

            /*
              BACKPATCH: Creating target label for the jump to after END CASE
              (instruction 12 in the example)
            */
            Lex->spcont->push_label(thd, empty_lex_str, Lex->sphead->instructions());
          }
#line 24370 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 349:
#line 4089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              BACKPATCH: Resolving forward jump from
              "case_stmt_action_then" to after END CASE
              (jump from instruction 4 to 12, 7 to 12 ... in the example)
            */
            Lex->sphead->backpatch(Lex->spcont->pop_label());

            if ((yyvsp[-3].num))
              Lex->spcont->pop_case_expr_id();

            Lex->sphead->do_cont_backpatch();
          }
#line 24388 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 350:
#line 4105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); /* For expr $2 */ }
#line 24394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 351:
#line 4107 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (case_stmt_action_expr(Lex, (yyvsp[0].item)))
              MYSQL_YYABORT;

            if (Lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 24406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 352:
#line 4115 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 24412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 353:
#line 4117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 24418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 358:
#line 4132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
#line 24426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 359:
#line 4136 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[0].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 24441 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 360:
#line 4148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
#line 24451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 361:
#line 4157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
#line 24459 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 362:
#line 4161 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[0].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 24472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 363:
#line 4171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
#line 24482 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 364:
#line 4180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new (thd->mem_root)
              sp_instr_error(ip, lex->spcont, ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 24497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 366:
#line 4194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 24503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 367:
#line 4195 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 24509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 368:
#line 4200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[-2].lex_str));

            if (lab)
              my_yyabort_error((ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[-2].lex_str).str));
            lex->name= (yyvsp[-2].lex_str);
          }
#line 24523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 369:
#line 4210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, (yyvsp[-1].splabel)->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            }
          }
#line 24535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 370:
#line 4221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
#line 24543 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 371:
#line 4225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 372:
#line 4230 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
#line 24559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 373:
#line 4236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 374:
#line 4240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->push_label(thd, lex->name,
                                                   lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
#line 24578 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 375:
#line 4251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[-2].spblock).hndlrs)
            {
              i= new (thd->mem_root)
                sp_instr_hpop(sp->instructions(), ctx, (yyvsp[-2].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[-2].spblock).curs)
            {
              i= new (thd->mem_root)
                sp_instr_cpop(sp->instructions(), ctx, (yyvsp[-2].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
            (yyval.splabel) = lex->spcont->pop_label();
          }
#line 24609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 376:
#line 4281 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
#line 24624 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 377:
#line 4295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[-1].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(thd, i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 24644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 378:
#line 4311 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
#line 24660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 379:
#line 4326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 24666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 380:
#line 4328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[-2].item), lab->ip, lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
#line 24685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 381:
#line 4346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            if ((yyvsp[0].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str,
                                lab->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            }
          }
#line 24700 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 382:
#line 4359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            DBUG_ASSERT(lab->name.length == 0);
          }
#line 24710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 383:
#line 4368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
          }
#line 24719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 384:
#line 4373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 385:
#line 4375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
#line 24735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 386:
#line 4381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 387:
#line 4383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
          }
#line 24750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 388:
#line 4388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24756 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 389:
#line 4393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
#line 24765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 390:
#line 4399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 391:
#line 4401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
#line 24781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 392:
#line 4408 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 393:
#line 4410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
#line 24796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 394:
#line 4416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24802 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 395:
#line 4421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
#line 24808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 396:
#line 4423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
#line 24814 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 397:
#line 4428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
#line 24820 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 398:
#line 4430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
#line 24826 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 399:
#line 4432 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
#line 24832 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 403:
#line 4466 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24838 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 404:
#line 4468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[0].lex_str).str;
          }
#line 24847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 405:
#line 4478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
#line 24855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 406:
#line 4484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
#line 24863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 411:
#line 4507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24869 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 458:
#line 4601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[0].lex_str).str;
          }
#line 24878 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 459:
#line 4609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[0].lex_str).str;
          }
#line 24887 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 460:
#line 4617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[0].lex_str).str;
          }
#line 24896 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 461:
#line 4625 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[0].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
#line 24910 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 462:
#line 4638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[0].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
#line 24924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 463:
#line 4651 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
#line 24933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 464:
#line 4656 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
#line 24942 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 465:
#line 4661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
#line 24951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 466:
#line 4669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[0].ulonglong_number);
          }
#line 24960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 467:
#line 4677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[0].ulonglong_number);
          }
#line 24969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 468:
#line 4685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[0].ulonglong_number);
          }
#line 24978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 469:
#line 4693 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[0].ulonglong_number);
          }
#line 24987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 470:
#line 4701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[0].ulonglong_number);
          }
#line 24996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 471:
#line 4709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[0].ulonglong_number);
          }
#line 25005 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 472:
#line 4717 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP"));
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[0].ulong_num);
          }
#line 25016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 473:
#line 4727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT"));
            lex->alter_tablespace_info->ts_comment= (yyvsp[0].lex_str).str;
          }
#line 25027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 474:
#line 4737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE, MYF(0),
                                "STORAGE ENGINE"));
            lex->alter_tablespace_info->storage_engine= (yyvsp[0].db_type);
          }
#line 25039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 477:
#line 4753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
#line 25048 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 478:
#line 4758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT"));
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
#line 25059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 479:
#line 4767 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulonglong_number)= (yyvsp[0].ulonglong_number);}
#line 25065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 480:
#line 4769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[0].lex_str).str;
            uint str_len= (yyvsp[0].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G': text_shift_number+=30; break;
                case 'm':
                case 'M': text_shift_number+=20; break;
                case 'k':
                case 'K': text_shift_number+=10; break;
                default:
                  my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
              }
              if (prefix_number >> 31)
                my_yyabort_error((ER_SIZE_OVERFLOW_ERROR, MYF(0)));
              number= prefix_number << text_shift_number;
            }
            else
              my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
            (yyval.ulonglong_number)= number;
          }
#line 25100 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 481:
#line 4807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.option_list= NULL; }
#line 25106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 482:
#line 4808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25112 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 483:
#line 4809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 485:
#line 4817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 25124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 486:
#line 4817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 487:
#line 4819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 25136 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 488:
#line 4819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25142 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 489:
#line 4821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {

            Lex->create_info.add(DDL_options_st::OPT_LIKE);
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[0].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
#line 25157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 490:
#line 4834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table)= (yyvsp[0].table); }
#line 25163 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 491:
#line 4835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table)= (yyvsp[-1].table); }
#line 25169 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 492:
#line 4839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25175 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 494:
#line 4846 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Select->set_braces(0);
            Select->set_with_clause((yyvsp[-4].with_clause));
          }
#line 25184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 496:
#line 4853 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_with_clause((yyvsp[-4].with_clause));
          }
#line 25192 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 498:
#line 4858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 25198 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 499:
#line 4858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 500:
#line 4860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 25210 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 501:
#line 4860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 502:
#line 4865 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
#line 25230 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 503:
#line 4901 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 505:
#line 4907 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
#line 25254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 507:
#line 4925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
              my_yyabort_error((ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                                "--skip-partition"));
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), "partitioning",
                              "--with-plugin-partition"));
#endif
          }
#line 25270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 508:
#line 4940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(thd, ER_PARTITION_ENTRY_ERROR);
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
#line 25287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 509:
#line 4952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 510:
#line 4957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->safe_to_cache_query= 1; }
#line 25299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 512:
#line 4963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
#line 25310 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 513:
#line 4970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= HASH_PARTITION; }
#line 25316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 514:
#line 4971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25322 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 515:
#line 4973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= RANGE_PARTITION; }
#line 25328 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 516:
#line 4975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= RANGE_PARTITION; }
#line 25334 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 517:
#line 4977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= LIST_PARTITION; }
#line 25340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 518:
#line 4979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= LIST_PARTITION; }
#line 25346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 519:
#line 4983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 520:
#line 4985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->linear_hash_ind= TRUE;}
#line 25358 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 521:
#line 4990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
#line 25364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 522:
#line 4992 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch ((yyvsp[0].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 25382 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 523:
#line 5008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25388 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 524:
#line 5009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 525:
#line 5013 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25400 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 526:
#line 5014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 527:
#line 5019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[0].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of partition fields"));
          }
#line 25423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 528:
#line 5035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
#line 25433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 529:
#line 5045 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr(thd, (yyvsp[-3].simple_string) + 1, (yyvsp[-2].item), (yyvsp[-1].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
#line 25445 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 530:
#line 5056 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->part_info->set_part_expr(thd, (yyvsp[-3].simple_string) + 1, (yyvsp[-2].item), (yyvsp[-1].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
#line 25454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 531:
#line 5064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 532:
#line 5066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            uint num_parts= (yyvsp[0].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "partitions"));

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
#line 25474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 533:
#line 5078 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 534:
#line 5080 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->subpart_type= HASH_PARTITION; }
#line 25486 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 535:
#line 5081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25492 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 536:
#line 5084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
#line 25502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 537:
#line 5089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 538:
#line 5093 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 539:
#line 5094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 540:
#line 5099 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[0].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of subpartition fields"));
          }
#line 25536 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 541:
#line 5114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->safe_to_cache_query)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[0].item);
          }
#line 25549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 542:
#line 5125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 543:
#line 5127 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint num_parts= (yyvsp[0].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "subpartitions"));
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
#line 25568 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 544:
#line 5139 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "RANGE"));
            if (part_info->part_type == LIST_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "LIST"));
          }
#line 25582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 545:
#line 5149 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_PART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
#line 25605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 546:
#line 5170 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25611 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 547:
#line 5171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 548:
#line 5176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new (thd->mem_root) partition_element();

            if (!p_elem ||
                 part_info->partitions.push_back(p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
#line 25638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 549:
#line 5196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 550:
#line 5201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            if (check_ident_length(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            p_elem->partition_name= (yyvsp[0].lex_str).str;
          }
#line 25656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 551:
#line 5212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->error_if_requires_values())
                 MYSQL_YYABORT;
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
#line 25672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 552:
#line 5224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "RANGE", "LESS THAN"));
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
#line 25689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 553:
#line 5236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 554:
#line 5238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "LIST", "IN"));
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
#line 25712 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 555:
#line 5250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25718 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 556:
#line 5252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "LIST", "DEFAULT"));
            }
            else
              part_info->part_type= LIST_PARTITION;
            if (part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
         }
#line 25743 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 557:
#line 5276 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 25769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 558:
#line 5297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 559:
#line 5302 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val(thd))
              {
                MYSQL_YYABORT;
              }
            }
          }
#line 25808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 560:
#line 5331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(thd, ER_ROW_SINGLE_PARTITION_FIELD_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 25821 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 561:
#line 5342 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25827 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 562:
#line 5343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25833 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 563:
#line 5348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 25849 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 564:
#line 5359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 565:
#line 5361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
#line 25880 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 566:
#line 5384 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25886 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 567:
#line 5385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25892 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 568:
#line 5390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(thd, ER_MAXVALUE_IN_VALUES_IN);
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 25909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 569:
#line 5403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[0].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
#line 25929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 570:
#line 5423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 25947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 571:
#line 5437 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
#line 25974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 572:
#line 5462 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 573:
#line 5463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 574:
#line 5468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new (thd->mem_root)
                                           partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
#line 26024 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 575:
#line 5501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 576:
#line 5506 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_ident_length(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            Lex->part_info->curr_part_elem->partition_name= (yyvsp[0].lex_str).str;
          }
#line 26040 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 577:
#line 5514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 578:
#line 5515 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26052 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 579:
#line 5519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26058 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 580:
#line 5520 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26064 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 581:
#line 5525 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[0].lex_str).str; }
#line 26070 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 582:
#line 5527 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[0].db_type);
            part_info->default_engine_type= (yyvsp[0].db_type);
          }
#line 26080 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 583:
#line 5533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[0].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[0].lex_str).length;
          }
#line 26090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 584:
#line 5539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[0].ulong_num); }
#line 26096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 585:
#line 5541 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[0].ulonglong_number); }
#line 26102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 586:
#line 5543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[0].ulonglong_number); }
#line 26108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 587:
#line 5545 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[0].lex_str).str; }
#line 26114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 588:
#line 5547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[0].lex_str).str; }
#line 26120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 589:
#line 5549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[0].lex_str).str; }
#line 26126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 590:
#line 5559 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_with_clause((yyvsp[-4].with_clause));
          }
#line 26134 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 591:
#line 5565 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 26153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 592:
#line 5580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 26161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 597:
#line 5597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
#line 26173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 598:
#line 5607 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 599:
#line 5608 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 600:
#line 5612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 601:
#line 5613 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 602:
#line 5617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 603:
#line 5618 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 604:
#line 5622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 605:
#line 5623 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 606:
#line 5628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->check_exists= FALSE;
          }
#line 26229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 607:
#line 5632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->check_exists= TRUE;
          }
#line 26237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 608:
#line 5639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).init();
          }
#line 26245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 609:
#line 5643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_NOT_EXISTS);
          }
#line 26253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 610:
#line 5650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).init();
          }
#line 26261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 611:
#line 5654 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_OR_REPLACE);
          }
#line 26269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 619:
#line 5677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!lex->m_sql_cmd)
            {
              DBUG_ASSERT(lex->sql_command == SQLCOM_ALTER_TABLE);
              if (!(lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table()))
                MYSQL_YYABORT;
            }
            Storage_engine_name *opt=
              lex->m_sql_cmd->option_storage_engine_name();
            DBUG_ASSERT(opt); // Expect a proper Sql_cmd
            *opt= Storage_engine_name((yyvsp[0].lex_str));
            lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
#line 26288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 620:
#line 5692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.max_rows= (yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
#line 26297 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 621:
#line 5697 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.min_rows= (yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
#line 26306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 622:
#line 5702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.avg_row_length=(yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
#line 26315 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 623:
#line 5707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.password=(yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
#line 26324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 624:
#line 5712 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.comment=(yyvsp[0].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
#line 26333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 625:
#line 5717 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.auto_increment_value=(yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
#line 26342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 626:
#line 5722 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
#line 26361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 627:
#line 5737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
#line 26371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 628:
#line 5743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
#line 26390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 629:
#line 5758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
#line 26399 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 630:
#line 5763 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
#line 26418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 631:
#line 5778 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
#line 26428 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 632:
#line 5784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[0].ulong_num) == 0 || (yyvsp[0].ulong_num) > 0xffff)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
#line 26450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 633:
#line 5802 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
#line 26459 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 634:
#line 5807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
#line 26468 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 635:
#line 5812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
#line 26477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 636:
#line 5817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[0].choice);
          }
#line 26486 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 637:
#line 5822 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
#line 26495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 638:
#line 5827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.row_type= (yyvsp[0].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
#line 26504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 639:
#line 5832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
#line 26512 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 640:
#line 5836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list.first;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
#line 26538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 643:
#line 5860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.merge_insert_method= (yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
#line 26547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 644:
#line 5865 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.data_file_name= (yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
#line 26556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 645:
#line 5870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.index_file_name= (yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
#line 26565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 646:
#line 5875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.tablespace= (yyvsp[0].lex_str).str;}
#line 26571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 647:
#line 5877 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.storage_media= HA_SM_DISK;}
#line 26577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 648:
#line 5879 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
#line 26583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 649:
#line 5881 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.connect_string.str= (yyvsp[0].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[0].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
#line 26593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 650:
#line 5887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[0].ulong_num);
          }
#line 26602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 651:
#line 5892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[0].choice);
          }
#line 26611 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 652:
#line 5897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 26623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 653:
#line 5905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 26635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 654:
#line 5913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 26645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 655:
#line 5919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 26655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 656:
#line 5928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->create_info.add_table_option_default_charset((yyvsp[0].charset)))
              MYSQL_YYABORT;
          }
#line 26664 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 657:
#line 5936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[0].charset) &&
                 !((yyvsp[0].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[0].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[0].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
#line 26682 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 658:
#line 5953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Storage_engine_name((yyvsp[0].lex_str)).
                 resolve_storage_engine_with_error(thd, &(yyval.db_type),
                                            thd->lex->create_info.tmp_table()))
              MYSQL_YYABORT;
          }
#line 26693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 659:
#line 5963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[0].lex_str), false)))
              (yyval.db_type)= plugin_hton(plugin);
            else
              my_yyabort_error((ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 26705 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 660:
#line 5973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
#line 26711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 661:
#line 5974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_FIXED; }
#line 26717 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 662:
#line 5975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
#line 26723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 663:
#line 5976 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
#line 26729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 664:
#line 5977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
#line 26735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 665:
#line 5978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
#line 26741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 666:
#line 5979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_PAGE; }
#line 26747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 667:
#line 5983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
#line 26753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 668:
#line 5984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
#line 26759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 669:
#line 5985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
#line 26765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 670:
#line 5989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) STRING_RESULT; }
#line 26771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 671:
#line 5990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) REAL_RESULT; }
#line 26777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 672:
#line 5991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) DECIMAL_RESULT; }
#line 26783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 673:
#line 5992 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) INT_RESULT; }
#line 26789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 674:
#line 5998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
#line 26797 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 677:
#line 6009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 680:
#line 6016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.create_field)= (yyvsp[0].create_field); }
#line 26809 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 681:
#line 6018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.create_field)= (yyvsp[-1].create_field); }
#line 26815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 682:
#line 6023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[-1].lex_str), (yyvsp[0].key_alg), (yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 683:
#line 6028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26831 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 684:
#line 6030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[-2].lex_str), (yyvsp[0].key_alg), (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 685:
#line 6035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 686:
#line 6037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[0].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26857 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 687:
#line 6042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 688:
#line 6044 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[0].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 689:
#line 6049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 690:
#line 6053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[-1].lex_str).str ? (yyvsp[-1].lex_str) : (yyvsp[-4].lex_str), (yyvsp[0].key_alg), (yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 691:
#line 6058 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 692:
#line 6061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-4].key_type), (yyvsp[-2].lex_str).str ? (yyvsp[-2].lex_str) : (yyvsp[-5].lex_str), (yyvsp[0].key_alg), (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 26905 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 693:
#line 6066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 694:
#line 6068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->check_add_key((yyvsp[-1].object_ddl_options)) ||
               !(Lex->last_key= (new (thd->mem_root)
                                 Key(Key::MULTIPLE, (yyvsp[-4].lex_str).str ? (yyvsp[-4].lex_str) : (yyvsp[0].lex_str),
                                     HA_KEY_ALG_UNDEF, true, (yyvsp[-1].object_ddl_options)))))
              MYSQL_YYABORT;
            Lex->option_list= NULL;
          }
#line 26924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 695:
#line 6077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Key *key= (new (thd->mem_root)
                       Foreign_key((yyvsp[-5].lex_str).str ? (yyvsp[-5].lex_str) : (yyvsp[-9].lex_str),
                                   lex->last_key->columns,
                                   (yyvsp[0].table)->db,
                                   (yyvsp[0].table)->table,
                                   lex->ref_list,
                                   lex->fk_delete_opt,
                                   lex->fk_update_opt,
                                   lex->fk_match_option,
                                    (yyvsp[-6].object_ddl_options)));
            if (key == NULL)
              MYSQL_YYABORT;
            /*
              handle_if_exists_options() expectes the two keys in this order:
              the Foreign_key, followed by its auto-generated Key.
            */
            lex->alter_info.key_list.push_back(key, thd->mem_root);
            lex->alter_info.key_list.push_back(Lex->last_key, thd->mem_root);
            lex->option_list= NULL;

            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
#line 26954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 696:
#line 6106 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->add_constraint(&(yyvsp[-1].lex_str), (yyvsp[0].virtual_column), FALSE);
         }
#line 26962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 697:
#line 6112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.virtual_column)= (Virtual_column_info*) 0; }
#line 26968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 698:
#line 6113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.virtual_column)= (yyvsp[0].virtual_column);}
#line 26974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 699:
#line 6118 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Virtual_column_info *v=
              add_virtual_expression(thd, (yyvsp[-1].item));
            if (!v)
            {
              MYSQL_YYABORT;
            }
            (yyval.virtual_column)= v;
          }
#line 26988 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 700:
#line 6130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26994 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 701:
#line 6131 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27000 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 702:
#line 6135 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 27006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 703:
#line 6136 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 27012 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 704:
#line 6140 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 27018 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 705:
#line 6145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Create_field *f= new (thd->mem_root) Create_field();

            if (check_string_char_length(&(yyvsp[0].lex_str), 0, NAME_CHAR_LEN,
                                         system_charset_info, 1))
              my_yyabort_error((ER_TOO_LONG_IDENT, MYF(0), (yyvsp[0].lex_str).str));

            if (!f)
              MYSQL_YYABORT;

            lex->init_last_field(f, (yyvsp[0].lex_str).str, NULL);
            (yyval.create_field)= f;
          }
#line 27037 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 706:
#line 6160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            (yyval.create_field)= (yyvsp[-2].create_field);

            (yyval.create_field)->check_constraint= (yyvsp[0].virtual_column);

            if ((yyval.create_field)->check(thd))
              MYSQL_YYABORT;

            lex->alter_info.create_list.push_back((yyval.create_field), thd->mem_root);

            (yyval.create_field)->create_if_not_exists= Lex->check_exists;
            if ((yyval.create_field)->flags & PRI_KEY_FLAG)
              add_key_to_list(lex, &(yyvsp[-3].lex_str), Key::PRIMARY, Lex->check_exists);
            else if ((yyval.create_field)->flags & UNIQUE_KEY_FLAG)
              add_key_to_list(lex, &(yyvsp[-3].lex_str), Key::UNIQUE, Lex->check_exists);
          }
#line 27059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 707:
#line 6180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->set_last_field_type((yyvsp[0].Lex_field_type)); }
#line 27065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 709:
#line 6182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_field_type_st type;
            type.set(MYSQL_TYPE_LONGLONG);
            Lex->set_last_field_type(type);
            Lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG
                                     | UNSIGNED_FLAG | UNIQUE_KEY_FLAG;
          }
#line 27077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 711:
#line 6193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 712:
#line 6194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 713:
#line 6198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27095 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 716:
#line 6206 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->last_field->vcol_info= (yyvsp[0].virtual_column);
           Lex->last_field->flags&= ~NOT_NULL_FLAG; // undo automatic NOT NULL for timestamps
         }
#line 27104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 718:
#line 6214 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27110 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 719:
#line 6215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 720:
#line 6220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
#line 27124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 721:
#line 6224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
#line 27132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 722:
#line 6228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(TRUE);
          }
#line 27140 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 723:
#line 6232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(TRUE);
          }
#line 27148 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 724:
#line 6238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27154 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 725:
#line 6239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27160 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 726:
#line 6243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 728:
#line 6249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 27176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 729:
#line 6255 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 27186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 730:
#line 6260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->comment= (yyvsp[0].lex_str); }
#line 27192 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 731:
#line 6265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            MYSQL_YYABORT_UNLESS(Lex->parse_vcol_expr);
          }
#line 27205 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 732:
#line 6274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Virtual_column_info *v= add_virtual_expression(thd, (yyvsp[0].item));
            if (!v)
              MYSQL_YYABORT;
            Lex->last_field->vcol_info= v;
          }
#line 27216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 733:
#line 6284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect(thd, (yyvsp[0].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 27226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 735:
#line 6291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[0].item_list)->push_front((yyvsp[-2].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[0].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 27237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 736:
#line 6301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Virtual_column_info *v=
              add_virtual_expression(thd, (yyvsp[-1].item));
            if (!v)
            {
              MYSQL_YYABORT;
            }
            (yyval.virtual_column)= v;
          }
#line 27251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 740:
#line 6317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.virtual_column)= add_virtual_expression(thd, (yyvsp[0].item))))
              MYSQL_YYABORT;
          }
#line 27260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 741:
#line 6324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set((yyvsp[-2].field_type), (yyvsp[-1].simple_string)); }
#line 27266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 742:
#line 6325 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set((yyvsp[-2].field_type), (yyvsp[-1].Lex_length_and_dec)); }
#line 27272 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 743:
#line 6327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_FLOAT, (yyvsp[-1].Lex_length_and_dec));
            if ((yyvsp[-1].Lex_length_and_dec).length() && !(yyvsp[-1].Lex_length_and_dec).dec())
            {
              int err;
              ulonglong tmp_length= my_strtoll10((yyvsp[-1].Lex_length_and_dec).length(), NULL, &err);
              if (err || tmp_length > PRECISION_FOR_DOUBLE)
                my_yyabort_error((ER_WRONG_FIELD_SPEC, MYF(0),
                                  Lex->last_field->field_name));
              if (tmp_length > PRECISION_FOR_FLOAT)
                (yyval.Lex_field_type).set(MYSQL_TYPE_DOUBLE);
              else
                (yyval.Lex_field_type).set(MYSQL_TYPE_FLOAT);
            }
          }
#line 27292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 744:
#line 6343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_BIT, (yyvsp[0].simple_string));
          }
#line 27300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 745:
#line 6347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY, "1");
          }
#line 27308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 746:
#line 6351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY, "1");
          }
#line 27316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 747:
#line 6355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[-1].simple_string));
          }
#line 27324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 748:
#line 6359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[-1].simple_string));
            bincmp_collation(national_charset_info, (yyvsp[0].num));
          }
#line 27333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 749:
#line 6364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[0].simple_string));
          }
#line 27342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 750:
#line 6369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[-1].simple_string));
          }
#line 27350 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 751:
#line 6373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[-1].simple_string));
            bincmp_collation(national_charset_info, (yyvsp[0].num));
          }
#line 27359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 752:
#line 6378 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[0].simple_string));
          }
#line 27368 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 753:
#line 6383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].simple_string))
            {
              errno= 0;
              ulong length= strtoul((yyvsp[-1].simple_string), NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER_THD(thd, ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.Lex_field_type).set(MYSQL_TYPE_YEAR, (yyvsp[-1].simple_string));
          }
#line 27390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 754:
#line 6401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_DATE); }
#line 27396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 755:
#line 6403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                   MYSQL_TYPE_TIME2 : MYSQL_TYPE_TIME, (yyvsp[0].simple_string)); }
#line 27403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 756:
#line 6406 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                     MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME, (yyvsp[0].simple_string));
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                Unless --explicit-defaults-for-timestamp is given.
              */
              if (!opt_explicit_defaults_for_timestamp)
                Lex->last_field->flags|= NOT_NULL_FLAG;
              (yyval.Lex_field_type).set(opt_mysql56_temporal_format ? MYSQL_TYPE_TIMESTAMP2
                                                 : MYSQL_TYPE_TIMESTAMP, (yyvsp[0].simple_string));
            }
          }
#line 27424 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 757:
#line 6423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                   MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME, (yyvsp[0].simple_string)); }
#line 27431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 758:
#line 6426 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY_BLOB);
          }
#line 27440 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 759:
#line 6431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_BLOB, (yyvsp[0].simple_string));
          }
#line 27449 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 760:
#line 6436 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->last_field->geom_type= (yyvsp[-2].geom_type);
            (yyval.Lex_field_type).set(MYSQL_TYPE_GEOMETRY, (yyvsp[-1].Lex_length_and_dec));
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 27464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 761:
#line 6447 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB);
          }
#line 27473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 762:
#line 6452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_LONG_BLOB);
          }
#line 27482 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 763:
#line 6457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB);
          }
#line 27491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 764:
#line 6462 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
#line 27497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 765:
#line 6464 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_TINY_BLOB); }
#line 27503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 766:
#line 6466 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_BLOB, (yyvsp[-1].simple_string)); }
#line 27509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 767:
#line 6468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
#line 27515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 768:
#line 6470 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_LONG_BLOB); }
#line 27521 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 769:
#line 6472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[-1].Lex_length_and_dec));}
#line 27527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 770:
#line 6474 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[-1].Lex_length_and_dec));}
#line 27533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 771:
#line 6476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[-1].Lex_length_and_dec));}
#line 27539 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 772:
#line 6478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_ENUM); }
#line 27545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 773:
#line 6480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_SET); }
#line 27551 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 774:
#line 6482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
#line 27557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 775:
#line 6484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset= &my_charset_utf8mb4_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_LONG_BLOB);
          }
#line 27566 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 776:
#line 6491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_GEOMETRY; }
#line 27572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 777:
#line 6492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_GEOMETRYCOLLECTION; }
#line 27578 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 778:
#line 6493 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_POINT; }
#line 27584 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 779:
#line 6494 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTIPOINT; }
#line 27590 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 780:
#line 6495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_LINESTRING; }
#line 27596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 781:
#line 6496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTILINESTRING; }
#line 27602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 782:
#line 6497 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_POLYGON; }
#line 27608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 783:
#line 6498 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTIPOLYGON; }
#line 27614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 784:
#line 6502 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 785:
#line 6506 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 786:
#line 6507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 787:
#line 6511 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 788:
#line 6512 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 789:
#line 6516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27650 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 790:
#line 6517 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 791:
#line 6518 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27662 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 792:
#line 6519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 793:
#line 6520 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 794:
#line 6524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_LONG; }
#line 27680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 795:
#line 6525 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_TINY; }
#line 27686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 796:
#line 6526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_SHORT; }
#line 27692 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 797:
#line 6527 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_INT24; }
#line 27698 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 798:
#line 6528 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_LONGLONG; }
#line 27704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 799:
#line 6533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
#line 27713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 800:
#line 6538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
#line 27719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 801:
#line 6540 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
#line 27725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 802:
#line 6545 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->srid= 0; }
#line 27731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 803:
#line 6548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->srid=atoi((yyvsp[0].lex_str).str);
          }
#line 27739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 804:
#line 6554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec).set(0, 0);  }
#line 27745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 805:
#line 6555 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec).set((yyvsp[0].simple_string), 0); }
#line 27751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 806:
#line 6556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec)= (yyvsp[0].Lex_length_and_dec); }
#line 27757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 807:
#line 6560 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec).set((yyvsp[-3].lex_str).str, (yyvsp[-1].lex_str).str); }
#line 27763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 808:
#line 6564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 809:
#line 6565 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 810:
#line 6566 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG;}
#line 27781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 811:
#line 6567 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
#line 27787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 812:
#line 6568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
#line 27793 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 813:
#line 6569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
#line 27799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 814:
#line 6573 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[-1].lex_str).str; }
#line 27805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 815:
#line 6574 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[-1].lex_str).str; }
#line 27811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 816:
#line 6575 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[-1].lex_str).str; }
#line 27817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 817:
#line 6576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[-1].lex_str).str; }
#line 27823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 818:
#line 6580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (char*) 0; /* use default length */ }
#line 27829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 819:
#line 6581 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[0].simple_string); }
#line 27835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 820:
#line 6585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (char*) "1"; }
#line 27841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 821:
#line 6586 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[0].simple_string); }
#line 27847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 822:
#line 6590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec).set(0, 0); }
#line 27853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 823:
#line 6591 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_length_and_dec)= (yyvsp[0].Lex_length_and_dec); }
#line 27859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 824:
#line 6595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 825:
#line 6596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 826:
#line 6600 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 828:
#line 6605 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags&= ~ NOT_NULL_FLAG; }
#line 27883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 829:
#line 6606 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->default_value= (yyvsp[0].virtual_column); }
#line 27889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 830:
#line 6608 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->last_field->on_update= item;
          }
#line 27900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 831:
#line 6614 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
#line 27906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 832:
#line 6616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex=Lex;
            lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 27916 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 833:
#line 6622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[0].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[0].charset)->name,Lex->charset->csname));
            Lex->last_field->charset= (yyvsp[0].charset);
          }
#line 27927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 835:
#line 6632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= NOT_NULL_FLAG; }
#line 27933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 836:
#line 6634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 27943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 838:
#line 6641 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
#line 27955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 839:
#line 6649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
#line 27967 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 840:
#line 6657 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->last_field->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 27977 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 841:
#line 6663 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->last_field->option_list, &Lex->option_list_last);
          }
#line 27986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 842:
#line 6671 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27992 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 843:
#line 6672 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27998 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 844:
#line 6677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[0].lex_str).str,MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 28007 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 845:
#line 6681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_bin; }
#line 28013 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 846:
#line 6685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset);   }
#line 28019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 847:
#line 6686 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 28025 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 848:
#line 6690 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= NULL; }
#line 28031 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 849:
#line 6691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= (yyvsp[0].charset); }
#line 28037 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 850:
#line 6696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[0].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[0].lex_str).str)))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 28047 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 851:
#line 6701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_bin; }
#line 28053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 852:
#line 6705 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset);   }
#line 28059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 853:
#line 6706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 28065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 854:
#line 6711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[0].lex_str).str)))
              MYSQL_YYABORT;
          }
#line 28074 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 855:
#line 6718 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 28080 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 856:
#line 6719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset); }
#line 28086 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 857:
#line 6723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset); }
#line 28092 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 858:
#line 6724 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 28098 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 859:
#line 6728 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 860:
#line 6729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28110 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 861:
#line 6733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= (yyvsp[0].charset); }
#line 28116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 862:
#line 6734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_latin1; }
#line 28122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 863:
#line 6736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)= get_charset_by_csname("ucs2", MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2"));
          }
#line 28131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 864:
#line 6743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->charset= Lex->last_field->charset= (yyvsp[0].charset);
         }
#line 28139 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 865:
#line 6749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(NULL, false); }
#line 28145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 866:
#line 6750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(&my_charset_bin, false); }
#line 28151 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 867:
#line 6751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation((yyvsp[-1].charset), (yyvsp[0].num)); }
#line 28157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 868:
#line 6752 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(NULL, true); }
#line 28163 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 869:
#line 6753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation((yyvsp[0].charset), true); }
#line 28169 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 870:
#line 6755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!my_charset_same(Lex->charset, (yyvsp[-1].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                Lex->charset->name, (yyvsp[-1].charset)->csname));
          }
#line 28179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 871:
#line 6760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 28185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 872:
#line 6764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 28191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 873:
#line 6765 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= true; }
#line 28197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 874:
#line 6770 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          if ((yyvsp[0].ulong_num) == 0)
          {
            my_parse_error(thd, ER_SYNTAX_ERROR);
            MYSQL_YYABORT;
          }
        }
#line 28209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 875:
#line 6778 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[-2].ulong_num); }
#line 28215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 876:
#line 6782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 28221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 877:
#line 6783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
#line 28227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 878:
#line 6787 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
#line 28233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 879:
#line 6790 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 28239 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 880:
#line 6791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 28245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 881:
#line 6792 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[-1].ulong_num) | (yyvsp[0].ulong_num); }
#line 28251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 882:
#line 6793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num) ; }
#line 28257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 883:
#line 6798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.ulong_num)= (yyvsp[0].ulong_num) < 1 ? 1 : ((yyvsp[0].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[0].ulong_num));
          (yyval.ulong_num)--;
        }
#line 28266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 884:
#line 6806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.ulong_num)= (1 | (yyvsp[0].ulong_num)) << (yyvsp[-1].ulong_num);
        }
#line 28274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 885:
#line 6812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 28280 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 886:
#line 6813 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)|= (yyvsp[0].ulong_num); }
#line 28286 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 887:
#line 6818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          uint start= (yyvsp[-2].ulong_num);
          uint end= (yyvsp[0].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
#line 28297 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 888:
#line 6827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 28303 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 889:
#line 6828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 28309 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 890:
#line 6832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 28315 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 891:
#line 6833 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 28321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 894:
#line 6847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)=(yyvsp[-3].table);
          }
#line 28329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 895:
#line 6854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ref_list.empty(); }
#line 28335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 897:
#line 6860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key, thd->mem_root);
          }
#line 28346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 898:
#line 6867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key, thd->mem_root);
          }
#line 28359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 899:
#line 6879 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
#line 28365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 900:
#line 6881 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
#line 28371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 901:
#line 6883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
#line 28377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 902:
#line 6885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
#line 28383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 903:
#line 6890 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= FK_OPTION_UNDEF;
            lex->fk_delete_opt= FK_OPTION_UNDEF;
          }
#line 28393 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 904:
#line 6896 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[0].m_fk_option);
            lex->fk_delete_opt= FK_OPTION_UNDEF;
          }
#line 28403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 905:
#line 6902 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[0].m_fk_option);
          }
#line 28413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 906:
#line 6909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[-3].m_fk_option);
            lex->fk_delete_opt= (yyvsp[0].m_fk_option);
          }
#line 28423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 907:
#line 6916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[0].m_fk_option);
            lex->fk_delete_opt= (yyvsp[-3].m_fk_option);
          }
#line 28433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 908:
#line 6924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_RESTRICT; }
#line 28439 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 909:
#line 6925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_CASCADE; }
#line 28445 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 910:
#line 6926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_SET_NULL; }
#line 28451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 911:
#line 6927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_NO_ACTION; }
#line 28457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 912:
#line 6928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= FK_OPTION_SET_DEFAULT; }
#line 28463 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 913:
#line 6932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::PRIMARY; }
#line 28469 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 914:
#line 6933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::UNIQUE; }
#line 28475 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 915:
#line 6937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28481 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 916:
#line 6938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 917:
#line 6942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28493 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 919:
#line 6947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 920:
#line 6948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 921:
#line 6949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 922:
#line 6953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::MULTIPLE; }
#line 28517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 923:
#line 6954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::UNIQUE; }
#line 28523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 924:
#line 6958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::FULLTEXT;}
#line 28529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 925:
#line 6963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 28542 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 926:
#line 6974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28548 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 927:
#line 6975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 28554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 928:
#line 6979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28560 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 929:
#line 6980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 28566 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 930:
#line 6984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 931:
#line 6985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 28578 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 938:
#line 7004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
#line 28584 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 939:
#line 7005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 28590 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 940:
#line 7010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
#line 28596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 941:
#line 7011 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 28602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 942:
#line 7012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 28608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 943:
#line 7017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.algorithm= (yyvsp[0].key_alg); }
#line 28614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 944:
#line 7019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.algorithm= (yyvsp[0].key_alg); }
#line 28620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 945:
#line 7024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.block_size= (yyvsp[0].ulong_num); }
#line 28626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 946:
#line 7026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.comment= (yyvsp[0].lex_str); }
#line 28632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 947:
#line 7028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 28644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 948:
#line 7036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 28656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 949:
#line 7044 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 28666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 950:
#line 7050 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
#line 28675 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 955:
#line 7068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (plugin_is_ready(&(yyvsp[0].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->last_key->key_create_info.parser_name= (yyvsp[0].lex_str);
            else
              my_yyabort_error((ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 28686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 956:
#line 7077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
#line 28692 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 957:
#line 7078 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
#line 28698 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 958:
#line 7079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
#line 28704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 959:
#line 7084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_key->columns.push_back((yyvsp[-1].key_part), thd->mem_root);
          }
#line 28712 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 960:
#line 7088 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_key->columns.push_back((yyvsp[-1].key_part), thd->mem_root);
          }
#line 28720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 961:
#line 7095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
#line 28730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 962:
#line 7101 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int key_part_len= atoi((yyvsp[-1].lex_str).str);
            if (!key_part_len)
              my_yyabort_error((ER_KEY_PART_0, MYF(0), (yyvsp[-3].lex_str).str));
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[-3].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
#line 28743 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 963:
#line 7112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 28749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 964:
#line 7113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 28755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 965:
#line 7117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 28761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 966:
#line 7118 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 28767 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 967:
#line 7123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->interval_list.push_back((yyvsp[0].string), thd->mem_root); }
#line 28773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 968:
#line 7125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->interval_list.push_back((yyvsp[0].string), thd->mem_root); }
#line 28779 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 969:
#line 7134 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->name= null_lex_str;
            Lex->only_view= FALSE;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->select_lex.init_order();
            Lex->create_info.init();
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
#line 28797 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 970:
#line 7148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
#line 28811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 971:
#line 7158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
#line 28825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 972:
#line 7168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
#line 28834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 973:
#line 7173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[-2].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
#line 28847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 974:
#line 7182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "DATABASE"));
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[-4].lex_str);
          }
#line 28859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 975:
#line 7190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 28871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 976:
#line 7198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[-2].spname);
          }
#line 28882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 977:
#line 7205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 28894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 978:
#line 7213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[-2].spname);
          }
#line 28905 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 979:
#line 7220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_mode= VIEW_ALTER;
          }
#line 28917 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 980:
#line 7228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 981:
#line 7235 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_algorithm= VIEW_ALGORITHM_INHERIT;
            lex->create_view_mode= VIEW_ALTER;
          }
#line 28936 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 982:
#line 7244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28942 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 983:
#line 7246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[0].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_begin= (yyvsp[-2].simple_string);
          }
#line 28963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 984:
#line 7267 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyvsp[-4].num) || (yyvsp[-3].num) || (yyvsp[-2].num) || (yyvsp[-1].num) || (yyvsp[0].num)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_end= (char*)YYLIP->get_cpp_ptr();
          }
#line 28981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 985:
#line 7281 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
#line 28990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 986:
#line 7286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
#line 28999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 987:
#line 7291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
#line 29008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 988:
#line 7296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
#line 29017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 989:
#line 7301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 29027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 990:
#line 7305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 29033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 991:
#line 7309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.set((yyvsp[-4].object_ddl_options));
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
#line 29042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 992:
#line 7316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 29048 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 993:
#line 7317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 29054 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 994:
#line 7318 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 29060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 995:
#line 7319 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 29066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 996:
#line 7323 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 29072 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 997:
#line 7325 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[0].spname); 
            (yyval.num)= 1;
          }
#line 29085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 998:
#line 7336 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 29091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 999:
#line 7337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 29097 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1000:
#line 7341 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 29103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1001:
#line 7342 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 29109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1003:
#line 7348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 29121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1004:
#line 7356 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 29133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1010:
#line 7378 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
            DBUG_ASSERT(!Lex->if_exists());
            Lex->create_info.add((yyvsp[-1].object_ddl_options));
          }
#line 29143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1011:
#line 7385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[-1].num);
          }
#line 29153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1012:
#line 7392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 29168 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1014:
#line 7405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
#line 29183 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1015:
#line 7416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 29197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1017:
#line 7428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 29212 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1019:
#line 7440 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->alter_info.num_parts= (yyvsp[0].ulong_num);
          }
#line 29223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1020:
#line 7447 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 29237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1022:
#line 7459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[-1].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[-1].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 29264 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1023:
#line 7485 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
#line 29272 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1024:
#line 7492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
#line 29280 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1026:
#line 7501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            DBUG_ASSERT(!Lex->create_info.if_not_exists());
            lex->create_info.set((yyvsp[-1].object_ddl_options));
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 29298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1027:
#line 7515 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29304 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1029:
#line 7521 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
#line 29313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1030:
#line 7526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->part_info->num_parts= (yyvsp[0].ulong_num);
          }
#line 29321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1031:
#line 7533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 29336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1033:
#line 7548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
#line 29344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1034:
#line 7552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
#line 29352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1035:
#line 7556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
#line 29361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1036:
#line 7563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1037:
#line 7564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1038:
#line 7569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[0].lex_str).str,
                                                          thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
#line 29386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1041:
#line 7590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
#line 29395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1042:
#line 7598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[-1].create_field)->after= (yyvsp[0].const_simple_string);
          }
#line 29404 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1043:
#line 7603 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 29413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1044:
#line 7608 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
#line 29422 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1045:
#line 7613 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_CHECK_CONSTRAINT;
	  }
#line 29430 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1046:
#line 7617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->alter_info.flags|= Alter_info::ALTER_ADD_CHECK_CONSTRAINT;
           Lex->add_constraint(&(yyvsp[-1].lex_str), (yyvsp[0].virtual_column), TRUE);
         }
#line 29439 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1047:
#line 7623 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= (Alter_info::ALTER_CHANGE_COLUMN |
                                     Alter_info::ALTER_RENAME_COLUMN);
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[-1].create_field)->change= (yyvsp[-2].lex_str).str;
            (yyvsp[-1].create_field)->after= (yyvsp[0].const_simple_string);
          }
#line 29451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1048:
#line 7632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[-1].create_field)->change= (yyvsp[-1].create_field)->field_name;
            (yyvsp[-1].create_field)->after= (yyvsp[0].const_simple_string);
          }
#line 29462 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1049:
#line 7639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::COLUMN, (yyvsp[-1].lex_str).str, (yyvsp[-2].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
#line 29476 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1050:
#line 7649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::CHECK_CONSTRAINT,
                                        (yyvsp[0].lex_str).str, (yyvsp[-1].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_CHECK_CONSTRAINT;
          }
#line 29491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1051:
#line 7660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[0].lex_str).str, (yyvsp[-1].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
#line 29505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1052:
#line 7670 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, primary_key_name,
                                        FALSE));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
#line 29520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1053:
#line 7681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[0].lex_str).str, (yyvsp[-1].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
#line 29534 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1054:
#line 7691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
#line 29544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1055:
#line 7697 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
#line 29554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1056:
#line 7703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (check_expression((yyvsp[0].virtual_column), (yyvsp[-3].lex_str).str, VCOL_DEFAULT))
              MYSQL_YYABORT;
            Alter_column *ac= new (thd->mem_root) Alter_column((yyvsp[-3].lex_str).str,(yyvsp[0].virtual_column));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
#line 29569 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1057:
#line 7714 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_column *ac= (new (thd->mem_root)
                               Alter_column((yyvsp[-2].lex_str).str, (Virtual_column_info*) 0));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
#line 29583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1058:
#line 7724 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[0].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[0].table)->table.str,(yyvsp[0].table)->table.length, FALSE) ||
                ((yyvsp[0].table)->db.str && check_db_name(&(yyvsp[0].table)->db)))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[0].table)->table.str));
            lex->name= (yyvsp[0].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
#line 29603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1059:
#line 7740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(yyvsp[-1].charset))
            {
              (yyvsp[-1].charset)= thd->variables.collation_database;
            }
            (yyvsp[0].charset)= (yyvsp[0].charset) ? (yyvsp[0].charset) : (yyvsp[-1].charset);
            if (!my_charset_same((yyvsp[-1].charset),(yyvsp[0].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[0].charset)->name, (yyvsp[-1].charset)->csname));
            if (Lex->create_info.add_alter_list_item_convert_to_charset((yyvsp[0].charset)))
              MYSQL_YYABORT;
            Lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
#line 29621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1060:
#line 7754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
#line 29630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1061:
#line 7759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
#line 29638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1062:
#line 7763 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
#line 29647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1070:
#line 7781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
#line 29656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1071:
#line 7786 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 29665 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1072:
#line 7794 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
#line 29674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1073:
#line 7799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 29683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1074:
#line 7806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1075:
#line 7807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1076:
#line 7811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 0;}
#line 29701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1077:
#line 7812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1;}
#line 29707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1078:
#line 7816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 0;}
#line 29713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1084:
#line 7830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1;}
#line 29719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1085:
#line 7832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
#line 29728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1086:
#line 7840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_DEFAULT; }
#line 29734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1087:
#line 7841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_RESTRICT; }
#line 29740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1088:
#line 7842 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_CASCADE; }
#line 29746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1089:
#line 7846 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.const_simple_string)= NULL; }
#line 29752 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1090:
#line 7848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.const_simple_string)= (yyvsp[0].lex_str).str;
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
#line 29761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1091:
#line 7853 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.const_simple_string)= first_keyword;
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
#line 29770 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1092:
#line 7860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1093:
#line 7861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1094:
#line 7862 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29788 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1095:
#line 7863 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29794 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1096:
#line 7868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
#line 29805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1097:
#line 7875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1098:
#line 7877 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
            /* If you change this code don't forget to update STOP SLAVE too */
          }
#line 29822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1099:
#line 7883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1100:
#line 7885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
#line 29839 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1101:
#line 7892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
#line 29850 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1102:
#line 7902 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[0].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[0].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[0].num);
          }
#line 29867 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1103:
#line 7918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= 0;
          }
#line 29875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1104:
#line 7922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[0].num);
          }
#line 29883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1105:
#line 7929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[0].num);
          }
#line 29891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1106:
#line 7933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[-2].num) | (yyvsp[0].num);
          }
#line 29899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1107:
#line 7940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
#line 29907 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1108:
#line 7944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
#line 29915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1109:
#line 7948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
#line 29923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1110:
#line 7954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt= 0; }
#line 29929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1111:
#line 7956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1114:
#line 7965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1115:
#line 7966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt|=SLAVE_SQL; }
#line 29947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1116:
#line 7967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt|=SLAVE_IO; }
#line 29953 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1117:
#line 7971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1118:
#line 7973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
               my_yyabort_error((ER_BAD_SLAVE_UNTIL_COND, MYF(0)));
          }
#line 29972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1119:
#line 7982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.gtid_pos_str = (yyvsp[0].lex_str);
          }
#line 29980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1122:
#line 7994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 29991 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1123:
#line 8001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 29997 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1124:
#line 8005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= 0; }
#line 30003 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1125:
#line 8006 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= T_QUICK; }
#line 30009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1126:
#line 8007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= T_EXTEND; }
#line 30015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1128:
#line 8012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->only_view= TRUE; }
#line 30021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1130:
#line 8017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[0].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 30035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1131:
#line 8027 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 30047 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1132:
#line 8037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags = T_MEDIUM; }
#line 30053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1133:
#line 8038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1134:
#line 8042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1135:
#line 8043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1136:
#line 8047 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_QUICK; }
#line 30077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1137:
#line 8048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_EXTEND; }
#line 30083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1138:
#line 8049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
#line 30089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1139:
#line 8053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 30095 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1140:
#line 8054 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FROM_MYSQL; }
#line 30101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1141:
#line 8059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 30115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1142:
#line 8069 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 30127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1146:
#line 8089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1147:
#line 8091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
#line 30141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1148:
#line 8098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1149:
#line 8100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1150:
#line 8104 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1151:
#line 8106 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX* lex= thd->lex;
            lex->column_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
#line 30170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1153:
#line 8117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1154:
#line 8119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX* lex= thd->lex;
            lex->index_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
#line 30187 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1156:
#line 8131 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30193 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1157:
#line 8133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
#line 30202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1158:
#line 8138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
#line 30211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1159:
#line 8146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1162:
#line 8153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->index_list->push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
          }
#line 30227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1163:
#line 8160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back((LEX_STRING*)
                                        thd->memdup(&str, sizeof(LEX_STRING)),
                                        thd->mem_root);
          }
#line 30238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1164:
#line 8170 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[0].lex_str);
            Lex->ident.str=    NULL;
            Lex->ident.length= 0;
          }
#line 30249 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1165:
#line 8178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[-3].lex_str);
            Lex->ident=   (yyvsp[0].lex_str);
          }
#line 30259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1167:
#line 8187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->only_view= TRUE; }
#line 30265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1169:
#line 8191 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 30279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1170:
#line 8201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "CHECK"));
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 30293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1171:
#line 8213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags = T_MEDIUM; }
#line 30299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1172:
#line 8214 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1173:
#line 8218 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1174:
#line 8219 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1175:
#line 8223 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_QUICK; }
#line 30323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1176:
#line 8224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_FAST; }
#line 30329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1177:
#line 8225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_MEDIUM; }
#line 30335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1178:
#line 8226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_EXTEND; }
#line 30341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1179:
#line 8227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
#line 30347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1180:
#line 8228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
#line 30353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1181:
#line 8232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 30359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1182:
#line 8233 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
#line 30365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1183:
#line 8238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 30379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1184:
#line 8248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 30391 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1185:
#line 8258 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 30397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1186:
#line 8259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 30403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1187:
#line 8260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 30409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1188:
#line 8265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
#line 30417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1189:
#line 8269 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1190:
#line 8271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
#line 30431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1191:
#line 8278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[-2].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 30441 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1192:
#line 8284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[-2].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 30451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1195:
#line 8298 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(thd, (yyvsp[-2].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(thd, (yyvsp[0].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
#line 30465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1196:
#line 8311 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.reset();
          }
#line 30473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1197:
#line 8315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 30483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1202:
#line 8334 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 30494 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1203:
#line 8344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 30505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1204:
#line 8353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 30511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1205:
#line 8354 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str) = default_key_cache_base; }
#line 30517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1206:
#line 8359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
#line 30527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1207:
#line 8365 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 30533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1212:
#line 8380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), NULL, (yyvsp[0].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 30544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1213:
#line 8390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-3].table), NULL, (yyvsp[0].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 30555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1214:
#line 8400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
#line 30563 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1216:
#line 8407 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
#line 30573 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1218:
#line 8416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 30579 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1220:
#line 8422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 30585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1221:
#line 8423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
#line 30591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1222:
#line 8433 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->current_select->set_with_clause((yyvsp[-1].with_clause));
          }
#line 30601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1231:
#line 8455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
#line 30613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1232:
#line 8464 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
#line 30621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1234:
#line 8471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
#line 30633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1235:
#line 8480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
#line 30641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1237:
#line 8487 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
#line 30653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1238:
#line 8496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
#line 30661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1240:
#line 8504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(true);
          }
#line 30669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1241:
#line 8512 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->current_select->braces);
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
#line 30678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1242:
#line 8516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-1].select_lex); }
#line 30684 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1243:
#line 8522 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
#line 30693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1245:
#line 8529 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
#line 30702 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1246:
#line 8539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
#line 30711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1248:
#line 8546 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
#line 30720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1249:
#line 8555 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(false);
          }
#line 30728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1250:
#line 8559 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(false);
          }
#line 30736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1252:
#line 8564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(false);
          }
#line 30744 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1253:
#line 8568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(false);
          }
#line 30752 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1269:
#line 8608 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 30764 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1270:
#line 8616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 30772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1275:
#line 8644 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
#line 30782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1278:
#line 8659 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT"));
          }
#line 30791 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1282:
#line 8673 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE"));

            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
#line 30812 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1283:
#line 8690 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE"));

            Lex->safe_to_cache_query=1;
            Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
          }
#line 30833 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1285:
#line 8711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_WRITE;
            lex->current_select->set_lock_for_tables(TL_WRITE, false);
            lex->safe_to_cache_query=0;
          }
#line 30844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1286:
#line 8718 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_READ_WITH_SHARED_LOCKS;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS, false);
            lex->safe_to_cache_query=0;
          }
#line 30856 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1289:
#line 8731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root)
                          Item_field(thd, &thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
#line 30871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1290:
#line 8745 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_item_to_list(thd, (yyvsp[-1].item)))
              MYSQL_YYABORT;
          }
#line 30880 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1291:
#line 8750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT((yyvsp[-3].simple_string) < (yyvsp[-1].simple_string));

            if (add_item_to_list(thd, (yyvsp[-2].item)))
              MYSQL_YYABORT;
            if ((yyvsp[0].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[0].lex_str).str))
                my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[0].lex_str).str));
              (yyvsp[-2].item)->is_autogenerated_name= FALSE;
              (yyvsp[-2].item)->set_name(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[-2].item)->name)
            {
              (yyvsp[-2].item)->set_name(thd, (yyvsp[-3].simple_string), (uint) ((yyvsp[-1].simple_string) - (yyvsp[-3].simple_string)), thd->charset());
            }
          }
#line 30903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1292:
#line 8771 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_tok_start();
          }
#line 30911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1293:
#line 8777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_tok_end();
          }
#line 30919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1294:
#line 8783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
#line 30927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1295:
#line 8789 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
#line 30935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1296:
#line 8795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=null_lex_str;}
#line 30941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1297:
#line 8796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 30947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1298:
#line 8797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 30953 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1299:
#line 8798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 30959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1300:
#line 8799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 30965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1301:
#line 8803 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= NOT_FIXED_DEC;  }
#line 30971 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1302:
#line 8804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= NOT_FIXED_DEC;  }
#line 30977 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1303:
#line 8805 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].ulong_num); }
#line 30983 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1304:
#line 8809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;  }
#line 30989 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1305:
#line 8810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;  }
#line 30995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1306:
#line 8811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].ulong_num); }
#line 31001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1307:
#line 8815 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 31007 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1308:
#line 8816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 31013 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1309:
#line 8822 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[-2].item)))
            {
              item1= (Item_cond_or*) (yyvsp[-2].item);
              if (is_cond_or((yyvsp[0].item)))
              {
                item3= (Item_cond_or*) (yyvsp[0].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[0].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[0].item), thd->mem_root);
                (yyval.item) = (yyvsp[-2].item);
              }
            }
            else if (is_cond_or((yyvsp[0].item)))
            {
              item3= (Item_cond_or*) (yyvsp[0].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[-2].item), thd->mem_root);
              (yyval.item) = (yyvsp[0].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item)= new (thd->mem_root) Item_cond_or(thd, (yyvsp[-2].item), (yyvsp[0].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 31068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1310:
#line 8873 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* XOR is a proprietary extension */
            (yyval.item)= new (thd->mem_root) Item_func_xor(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31079 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1311:
#line 8880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[-2].item)))
            {
              item1= (Item_cond_and*) (yyvsp[-2].item);
              if (is_cond_and((yyvsp[0].item)))
              {
                item3= (Item_cond_and*) (yyvsp[0].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[0].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[0].item), thd->mem_root);
                (yyval.item) = (yyvsp[-2].item);
              }
            }
            else if (is_cond_and((yyvsp[0].item)))
            {
              item3= (Item_cond_and*) (yyvsp[0].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[-2].item), thd->mem_root);
              (yyval.item) = (yyvsp[0].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item)= new (thd->mem_root) Item_cond_and(thd, (yyvsp[-2].item), (yyvsp[0].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 31126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1312:
#line 8923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= negate_expression(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31136 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1313:
#line 8929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1314:
#line 8935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1315:
#line 8941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1316:
#line 8947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1317:
#line 8953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1318:
#line 8959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31196 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1319:
#line 8965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31206 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1320:
#line 8971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1321:
#line 8977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1322:
#line 8983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (*(yyvsp[-1].boolfunc2creator))(0)->create(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1323:
#line 8989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= all_any_subquery_creator(thd, (yyvsp[-5].item), (yyvsp[-4].boolfunc2creator), (yyvsp[-3].num), (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1325:
#line 8999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[-4].item), (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31256 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1326:
#line 9005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[-5].item), (yyvsp[-1].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1327:
#line 9014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[-4].item), true, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1328:
#line 9020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-6].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_func_in(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1329:
#line 9028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[-5].item), false, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1330:
#line 9034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-7].item), thd->mem_root);
            Item_func_in *item= new (thd->mem_root) Item_func_in(thd, *(yyvsp[-1].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
#line 31314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1331:
#line 9043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_between(thd, (yyvsp[-4].item), (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1332:
#line 9049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
#line 31336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1333:
#line 9057 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item1= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[-3].item));
            Item *item4= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[0].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(thd, item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31350 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1334:
#line 9067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_like(thd, (yyvsp[-2].item), (yyvsp[0].item), escape(thd), false);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1335:
#line 9073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->escape_used= true;
            (yyval.item)= new (thd->mem_root) Item_func_like(thd, (yyvsp[-4].item), (yyvsp[-2].item), (yyvsp[0].item), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1336:
#line 9080 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_like(thd, (yyvsp[-3].item), (yyvsp[0].item), escape(thd), false);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
#line 31382 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1337:
#line 9087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->escape_used= true;
            Item *item= new (thd->mem_root) Item_func_like(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[0].item), true);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
#line 31394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1338:
#line 9095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31404 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1339:
#line 9101 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_regex(thd, (yyvsp[-3].item), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1341:
#line 9114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1342:
#line 9120 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31437 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1343:
#line 9126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1344:
#line 9132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1345:
#line 9138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1346:
#line 9144 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1347:
#line 9150 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-4].item), (yyvsp[-1].item), (yyvsp[0].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1348:
#line 9156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-4].item), (yyvsp[-1].item), (yyvsp[0].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1349:
#line 9162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31507 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1350:
#line 9168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_div(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1351:
#line 9174 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1352:
#line 9180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1353:
#line 9186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1354:
#line 9192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1364:
#line 9221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
#line 31563 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1365:
#line 9222 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
#line 31569 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1366:
#line 9223 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
#line 31575 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1367:
#line 9224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_le_creator; }
#line 31581 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1368:
#line 9225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
#line 31587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1369:
#line 9226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
#line 31593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1370:
#line 9230 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 31599 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1371:
#line 9231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1372:
#line 9236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_NULL); /* automatic type */
            Lex->charset= NULL;
	  }
#line 31614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1373:
#line 9240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type)= (yyvsp[0].Lex_dyncol_type); }
#line 31620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1374:
#line 9244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type)= (yyvsp[0].Lex_dyncol_type); Lex->charset= NULL; }
#line 31626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1375:
#line 9245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type)= (yyvsp[0].Lex_dyncol_type); Lex->charset= NULL; }
#line 31632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1376:
#line 9246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type)= (yyvsp[0].Lex_dyncol_type); }
#line 31638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1377:
#line 9250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_INT); }
#line 31644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1378:
#line 9251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_UINT);  }
#line 31650 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1379:
#line 9252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE);  }
#line 31656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1380:
#line 9253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE); }
#line 31662 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1381:
#line 9254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE); }
#line 31668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1382:
#line 9255 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DECIMAL, (yyvsp[0].Lex_length_and_dec)); }
#line 31674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1383:
#line 9259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DATE); }
#line 31680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1384:
#line 9260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_TIME, 0, (yyvsp[0].simple_string)); }
#line 31686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1385:
#line 9261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_dyncol_type).set(DYN_COL_DATETIME, 0, (yyvsp[0].simple_string)); }
#line 31692 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1386:
#line 9266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= thd->variables.collation_connection; }
#line 31698 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1387:
#line 9268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_STRING);
          }
#line 31706 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1388:
#line 9272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_STRING);
            Lex->charset= national_charset_info;
          }
#line 31715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1389:
#line 9280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[-3].item);
     (yyval.dyncol_def)->value= (yyvsp[-1].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[0].Lex_dyncol_type).dyncol_type();
     (yyval.dyncol_def)->cs= lex->charset;
     if ((yyvsp[0].Lex_dyncol_type).length())
       (yyval.dyncol_def)->len= strtoul((yyvsp[0].Lex_dyncol_type).length(), NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if ((yyvsp[0].Lex_dyncol_type).dec())
       (yyval.dyncol_def)->frac= strtoul((yyvsp[0].Lex_dyncol_type).dec(), NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
#line 31739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1390:
#line 9303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[0].dyncol_def), thd->mem_root);
       }
#line 31750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1391:
#line 9310 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
         (yyvsp[-2].dyncol_def_list)->push_back((yyvsp[0].dyncol_def), thd->mem_root);
         (yyval.dyncol_def_list)= (yyvsp[-2].dyncol_def_list);
       }
#line 31759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1398:
#line 9351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item_param); }
#line 31765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1402:
#line 9356 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1403:
#line 9363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect(thd, (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1404:
#line 9369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[-1].item)->type() == Item::STRING_ITEM)
            {
              Item_string *item= (Item_string *) (yyvsp[-1].item);
              enum_field_types type= item->odbc_temporal_literal_type(&(yyvsp[-2].lex_str));
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd, item->val_str(NULL),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[-1].item);
          }
#line 31814 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1405:
#line 9393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-5].item_list)->push_front((yyvsp[-2].item), thd->mem_root);
            Item_func_match *i1= new (thd->mem_root) Item_func_match(thd, *(yyvsp[-5].item_list),
                                                                     (yyvsp[-1].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(thd, i1);
            (yyval.item)= i1;
          }
#line 31828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1406:
#line 9403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[-3].item), (yyvsp[-1].Lex_cast_type).type(), (yyvsp[-1].Lex_cast_type).length(), (yyvsp[-1].Lex_cast_type).dec(),
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1407:
#line 9411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(thd, *(yyvsp[-2].item_list), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31850 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1408:
#line 9417 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[-3].item), (yyvsp[-1].Lex_cast_type).type(), (yyvsp[-1].Lex_cast_type).length(), (yyvsp[-1].Lex_cast_type).dec(),
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1409:
#line 9424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset(thd, (yyvsp[-3].item), (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1410:
#line 9430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_splocal *il= (yyvsp[-1].item)->get_item_splocal();
            if (il)
              my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str));
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context(),
                                                         (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1411:
#line 9440 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(thd, Lex->current_context(),
                                                        (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31896 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1413:
#line 9451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *i1= new (thd->mem_root) Item_string(thd, (yyvsp[0].lex_str).str,
                                                      (yyvsp[0].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation(thd, (yyvsp[-2].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1414:
#line 9461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[-1].item); }
#line 31917 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1415:
#line 9463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[0].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31928 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1416:
#line 9470 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31938 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1417:
#line 9476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item);
          }
#line 31946 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1418:
#line 9480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item)->neg(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31956 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1419:
#line 9486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1420:
#line 9492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= negate_expression(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1421:
#line 9499 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[0].item), (yyvsp[-3].item), (yyvsp[-2].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1422:
#line 9514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 31996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1423:
#line 9520 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[-3].item_list), (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1424:
#line 9526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 32019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1425:
#line 9535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 32032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1426:
#line 9544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1427:
#line 9550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32052 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1428:
#line 9556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32062 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1429:
#line 9562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert(thd, (yyvsp[-7].item), (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32072 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1430:
#line 9568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[-1].item), thd->mem_root);
            list->push_front((yyvsp[-3].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1431:
#line 9582 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-5].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *(yyvsp[-1].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32105 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1432:
#line 9593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_left(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1433:
#line 9599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32125 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1434:
#line 9605 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_month(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1435:
#line 9611 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_right(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1436:
#line 9617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_second(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1437:
#line 9623 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast(thd, (yyvsp[-1].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1438:
#line 9630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast(thd, (yyvsp[-1].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32177 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1439:
#line 9637 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time(thd, (yyvsp[-3].item), (yyvsp[-1].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32187 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1440:
#line 9643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1441:
#line 9649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1442:
#line 9655 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1443:
#line 9661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1444:
#line 9667 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1445:
#line 9673 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1446:
#line 9679 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1447:
#line 9685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1448:
#line 9691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_user(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
#line 32279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1449:
#line 9699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_year(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1450:
#line 9720 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1451:
#line 9727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32310 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1452:
#line 9733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1453:
#line 9740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32332 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1454:
#line 9748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1455:
#line 9755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1456:
#line 9761 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_extract(thd, (yyvsp[-3].interval), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32362 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1457:
#line 9767 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format(thd, (yyvsp[-3].date_time_type), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32372 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1458:
#line 9773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1459:
#line 9780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_locate(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32393 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1460:
#line 9786 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32404 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1461:
#line 9793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1462:
#line 9799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32424 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1463:
#line 9805 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32434 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1464:
#line 9811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1465:
#line 9817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1466:
#line 9823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local(thd, (yyvsp[0].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32476 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1467:
#line 9841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-1].item), (yyvsp[-3].item), (yyvsp[-5].interval_time_st), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32486 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1468:
#line 9847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff(thd, (yyvsp[-3].item), (yyvsp[-1].item), (yyvsp[-5].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1469:
#line 9853 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32507 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1470:
#line 9860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1471:
#line 9867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1472:
#line 9875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[-3].item), *(yyvsp[-1].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32539 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1473:
#line 9882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[-3].item), *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1474:
#line 9889 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1475:
#line 9896 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[-1].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32569 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1476:
#line 9903 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].Lex_cast_type).type(),
                                        (yyvsp[-1].Lex_cast_type).length(), (yyvsp[-1].Lex_cast_type).dec(),
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1477:
#line 9920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1478:
#line 9926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1479:
#line 9932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32612 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1480:
#line 9938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1481:
#line 9944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_database(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 32633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1482:
#line 9951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_if(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1483:
#line 9957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1484:
#line 9963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1485:
#line 9972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_back((yyvsp[-1].item), thd->mem_root);

            (yyval.item)= new (thd->mem_root) Item_func_last_value(thd, *list);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1486:
#line 9983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-3].item_list)->push_back((yyvsp[-1].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_func_last_value(thd, *(yyvsp[-3].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1487:
#line 9990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32699 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1488:
#line 9996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1489:
#line 10002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=  new (thd->mem_root)
              Item_func_password(thd, (yyvsp[-1].item), Item_func_password::OLD);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1490:
#line 10009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item* i1;
            i1= new (thd->mem_root) Item_func_password(thd, (yyvsp[-1].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
#line 32732 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1491:
#line 10017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_quarter(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32742 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1492:
#line 10023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32752 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1493:
#line 10029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32762 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1494:
#line 10035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1495:
#line 10041 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 32784 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1496:
#line 10049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_round(thd, (yyvsp[-3].item), (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32794 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1497:
#line 10055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32804 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1498:
#line 10061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32814 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1499:
#line 10067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[-2].item), 0, 0, (yyvsp[-1].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32824 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1500:
#line 10073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, (yyvsp[-5].item), 0, (yyvsp[-2].ulong_num),
                                        (yyvsp[-1].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1501:
#line 10081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_char_typecast(thd, (yyvsp[-4].item), (yyvsp[-1].ulong_num),
                                                               &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, item, 0, (yyvsp[-1].ulong_num),
                                        MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1502:
#line 10093 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[-7].item), (yyvsp[-5].ulong_num), (yyvsp[-3].ulong_num),
                                                            (yyvsp[-1].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1503:
#line 10100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[0].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 32879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1504:
#line 10115 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_precise_rel(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                 Item_func::SP_CONTAINS_FUNC));
          }
#line 32889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1505:
#line 10121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
#line 32900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1506:
#line 10128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
#line 32911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1507:
#line 10135 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
#line 32922 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1508:
#line 10142 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
#line 32933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1509:
#line 10149 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
#line 32944 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1510:
#line 10156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point(thd, (yyvsp[-3].item), (yyvsp[-1].item)));
          }
#line 32952 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1511:
#line 10160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
#line 32963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1512:
#line 10179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
#line 32986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1513:
#line 10198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[-4].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[-4].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[-4].lex_str), (yyvsp[-1].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[-2].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[-1].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[-4].lex_str), (yyvsp[-1].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
#line 33043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1514:
#line 10251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[-5].lex_str).str || check_db_name(&(yyvsp[-5].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-5].lex_str).str));
            if (check_routine_name(&(yyvsp[-3].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[-5].lex_str), (yyvsp[-3].lex_str), true, (yyvsp[-1].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
#line 33082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1515:
#line 10289 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].num) | (yyvsp[0].num); }
#line 33088 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1516:
#line 10291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_BOOL; }
#line 33094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1517:
#line 10295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_NL; }
#line 33100 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1518:
#line 10296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_NL; }
#line 33106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1519:
#line 10300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;         }
#line 33112 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1520:
#line 10301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_EXPAND; }
#line 33118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1521:
#line 10305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= NULL; }
#line 33124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1522:
#line 10306 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list); }
#line 33130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1523:
#line 10311 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 33141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1524:
#line 10318 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 33150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1525:
#line 10326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[0].lex_str).str)
            {
              (yyvsp[-2].item)->is_autogenerated_name= FALSE;
              (yyvsp[-2].item)->set_name(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[-2].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[-2].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[-2].item)->set_name(thd, (yyvsp[-3].simple_string), (uint) ((yyvsp[-1].simple_string) - (yyvsp[-3].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[-2].item);
          }
#line 33178 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1526:
#line 10353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[-1].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1527:
#line 10359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[-1].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33198 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1528:
#line 10365 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1529:
#line 10371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1530:
#line 10377 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1531:
#line 10383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_int(thd, (int32) 0L, 1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1532:
#line 10392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1533:
#line 10398 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr++; }
#line 33257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1534:
#line 10400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr--; }
#line 33263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1535:
#line 10402 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, *(yyvsp[-2].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33273 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1536:
#line 10408 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1537:
#line 10419 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1538:
#line 10425 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33303 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1539:
#line 10431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1540:
#line 10437 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[-1].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1541:
#line 10443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[-1].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1542:
#line 10449 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1543:
#line 10455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1544:
#line 10461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[-1].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1545:
#line 10467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[-1].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1546:
#line 10473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr++; }
#line 33379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1547:
#line 10477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(thd, Lex->current_context(), (yyvsp[-5].num), (yyvsp[-3].item_list),
                                         sel->gorder_list, (yyvsp[-1].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[-3].item_list)->empty();
            sel->gorder_list.empty();
          }
#line 33395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1548:
#line 10492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_window_func(thd, (Item_sum *) (yyvsp[-2].item), (yyvsp[0].lex_str_ptr));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            if (Select->add_window_func((Item_window_func *) (yyval.item)))
              MYSQL_YYABORT;
          }
#line 33407 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1549:
#line 10501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (Select->add_window_spec(thd, lex->win_ref,
                                        Select->group_list,
                                        Select->order_list,
                                        lex->win_frame))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_window_func(thd, (Item_sum *) (yyvsp[-2].item),
                                                      thd->lex->win_spec); 
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            if (Select->add_window_func((Item_window_func *) (yyval.item)))
              MYSQL_YYABORT;
          }
#line 33426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1551:
#line 10521 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            ((Item_sum *) (yyvsp[0].item))->mark_as_window_func_sum_expr();
          }
#line 33434 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1552:
#line 10528 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_row_number(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1553:
#line 10535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1554:
#line 10542 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_dense_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1555:
#line 10549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_percent_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1556:
#line 10556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_cume_dist(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1557:
#line 10563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_ntile(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33494 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1558:
#line 10570 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_first_value(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1559:
#line 10577 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_last_value(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1560:
#line 10584 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_nth_value(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1561:
#line 10591 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* No second argument defaults to 1. */
            Item* item_offset= new (thd->mem_root) Item_uint(thd, 1);
            if (item_offset == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_lead(thd, (yyvsp[-1].item), item_offset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1562:
#line 10602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_lead(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33548 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1563:
#line 10609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* No second argument defaults to 1. */
            Item* item_offset= new (thd->mem_root) Item_uint(thd, 1);
            if (item_offset == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_lag(thd, (yyvsp[-1].item), item_offset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1564:
#line 10620 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_lag(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1565:
#line 10629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str_ptr)= (LEX_STRING *) thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
#line 33582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1566:
#line 10638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (! Lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
          }
#line 33591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1567:
#line 10643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item);
          }
#line 33599 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1568:
#line 10650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[-2].lex_str), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item, thd->mem_root);
          }
#line 33613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1569:
#line 10660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
#line 33625 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1570:
#line 10668 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[-1].lex_str).str && (yyvsp[0].lex_str).str && check_reserved_words(&(yyvsp[-1].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[-2].var_type), (yyvsp[-1].lex_str), (yyvsp[0].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
#line 33642 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1571:
#line 10683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 33648 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1572:
#line 10684 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 33654 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1573:
#line 10689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
#line 33664 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1574:
#line 10694 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 33670 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1577:
#line 10704 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_gorder_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 33676 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1578:
#line 10706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_gorder_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 33682 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1579:
#line 10711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 33695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1580:
#line 10720 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[0].item);
          }
#line 33704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1581:
#line 10728 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[0].simple_string)); Lex->charset= &my_charset_bin; }
#line 33710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1582:
#line 10730 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= thd->variables.collation_connection; }
#line 33716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1583:
#line 10732 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[-2].simple_string)); }
#line 33722 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1584:
#line 10734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset= national_charset_info;
            (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[0].simple_string), 0);
          }
#line 33731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1585:
#line 10738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type)= (yyvsp[0].Lex_cast_type); Lex->charset= NULL; }
#line 33737 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1586:
#line 10739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type)= (yyvsp[0].Lex_cast_type); Lex->charset= NULL; }
#line 33743 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1587:
#line 10743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
#line 33749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1588:
#line 10744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
#line 33755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1589:
#line 10745 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
#line 33761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1590:
#line 10746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_UNSIGNED_INT); }
#line 33767 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1591:
#line 10747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_UNSIGNED_INT); }
#line 33773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1592:
#line 10748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_DECIMAL, (yyvsp[0].Lex_length_and_dec)); }
#line 33779 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1593:
#line 10749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_DOUBLE, (yyvsp[0].Lex_length_and_dec));  }
#line 33785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1594:
#line 10753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_DATE); }
#line 33791 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1595:
#line 10754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_TIME, 0, (yyvsp[0].simple_string)); }
#line 33797 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1596:
#line 10755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.Lex_cast_type).set(ITEM_CAST_DATETIME, 0, (yyvsp[0].simple_string)); }
#line 33803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1597:
#line 10759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= NULL; }
#line 33809 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1598:
#line 10760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list);}
#line 33815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1599:
#line 10765 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 33826 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1600:
#line 10772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 33835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1601:
#line 10779 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list); }
#line 33841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1602:
#line 10780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[-1].item_list); }
#line 33847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1603:
#line 10785 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 33858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1604:
#line 10792 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 33867 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1605:
#line 10799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= NULL; }
#line 33873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1606:
#line 10800 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 33879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1607:
#line 10804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= NULL; }
#line 33885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1608:
#line 10805 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 33891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1609:
#line 10810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[-2].item), thd->mem_root);
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 33903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1610:
#line 10818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-4].item_list)->push_back((yyvsp[-2].item), thd->mem_root);
            (yyvsp[-4].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-4].item_list);
          }
#line 33913 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1611:
#line 10828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)= (yyvsp[0].table_list); }
#line 33919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1612:
#line 10830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(thd)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 33932 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1613:
#line 10841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[0].table_list)); }
#line 33938 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1614:
#line 10852 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 33944 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1615:
#line 10853 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[-1].table_list); }
#line 33950 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1616:
#line 10859 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 33956 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1617:
#line 10861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));
          }
#line 33964 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1618:
#line 10879 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));

            if (unlikely(Select->add_cross_joined_table((yyvsp[-2].table_list), (yyvsp[0].table_list), (yyvsp[-1].num))))
              MYSQL_YYABORT;
          }
#line 33975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1619:
#line 10887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-3].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 33987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1620:
#line 10895 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	    (yyvsp[-3].table_list)->straight=(yyvsp[-4].num);
            add_join_on(thd, (yyvsp[-3].table_list), (yyvsp[0].item));
            (yyvsp[-3].table_list)->on_context= Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
#line 33998 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1621:
#line 10903 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && (yyvsp[-1].table_list));
          }
#line 34006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1622:
#line 10907 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
	    (yyvsp[-5].table_list)->straight=(yyvsp[-6].num);
            add_join_natural((yyvsp[-7].table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select); 
	    (yyval.table_list)=(yyvsp[-5].table_list); 
          }
#line 34016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1623:
#line 10913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));
	    (yyvsp[0].table_list)->straight=(yyvsp[-1].num);
            add_join_natural((yyvsp[-3].table_list),(yyvsp[0].table_list),NULL,Select);
          }
#line 34026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1624:
#line 10922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-5].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 34038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1625:
#line 10930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            add_join_on(thd, (yyvsp[-3].table_list), (yyvsp[0].item));
            (yyvsp[-3].table_list)->on_context= Lex->pop_context();
            (yyvsp[-3].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[-3].table_list);
            Select->parsing_place= NO_MATTER;
          }
#line 34050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1626:
#line 10938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].table_list) && (yyvsp[0].table_list));
          }
#line 34058 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1627:
#line 10942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            add_join_natural((yyvsp[-9].table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select); 
            (yyvsp[-5].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[-5].table_list); 
          }
#line 34068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1628:
#line 10948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[0].table_list));
            add_join_natural((yyvsp[-5].table_list),(yyvsp[0].table_list),NULL,Select);
            (yyvsp[0].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[0].table_list);
          }
#line 34079 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1629:
#line 10958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-5].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 34091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1630:
#line 10966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on(thd, (yyval.table_list), (yyvsp[0].item));
            (yyvsp[-7].table_list)->on_context= Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
#line 34104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1631:
#line 10975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].table_list) && (yyvsp[0].table_list));
          }
#line 34112 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1632:
#line 10979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select);
          }
#line 34123 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1633:
#line 10986 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[0].table_list));
            add_join_natural((yyvsp[0].table_list),(yyvsp[-5].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
#line 34135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1634:
#line 10997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 34141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1635:
#line 10998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 34147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1636:
#line 10999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 34153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1637:
#line 11003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = (yyvsp[0].num); }
#line 34159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1638:
#line 11004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 34165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1639:
#line 11012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string_list)= 0;}
#line 34171 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1641:
#line 11018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string_list)= (yyvsp[-2].string_list);
          }
#line 34179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1644:
#line 11037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
#line 34188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1645:
#line 11042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[-3].table), (yyvsp[-1].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[-2].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
#line 34203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1646:
#line 11074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[-2].table_list) || (yyvsp[0].lex_str_ptr)) && (yyvsp[-3].select_lex)->embedding &&
                !(yyvsp[-3].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[-2].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new (thd->mem_root) Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(thd,
                                               ti, (yyvsp[0].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[0].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[-2].table_list);
            }
            /*
              Fields in derived table can be used in upper select in
              case of merge. We do not add HAVING fields because we do
              not merge such derived. We do not add union because
              also do not merge them
            */
            if ((yyval.table_list) && (yyval.table_list)->derived &&
                !(yyval.table_list)->derived->first_select()->next_select())
              (yyval.table_list)->select_lex->add_where_field((yyval.table_list)->derived->first_select());
          }
#line 34270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1647:
#line 11140 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= (yyvsp[-6].select_lex);
            SELECT_LEX_UNIT *unit= (yyvsp[-3].select_lex)->master_unit();
            Table_ident *ti= new (thd->mem_root) Table_ident(unit);
            if (ti == NULL)
              MYSQL_YYABORT;
            (yyvsp[-3].select_lex)->set_with_clause((yyvsp[-4].with_clause));
            lex->current_select= sel;
            if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                             ti, (yyvsp[0].lex_str_ptr), 0,
                                             TL_READ, MDL_SHARED_READ)))
              MYSQL_YYABORT;
            sel->add_joined_table((yyval.table_list));
          }
#line 34290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1649:
#line 11179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 34302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1650:
#line 11187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 34314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1655:
#line 11201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->pop_context(); }
#line 34320 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1656:
#line 11202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->pop_context(); }
#line 34326 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1657:
#line 11203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->pop_context(); }
#line 34332 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1660:
#line 11214 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_braces(0);
          }
#line 34340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1661:
#line 11221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 34352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1662:
#line 11229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 34360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1663:
#line 11237 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            /* for normal joins, $2 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[-1].select_lex)->end_nested_join(lex->thd)) && (yyvsp[0].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[0].table_list) && (yyval.table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 34378 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1664:
#line 11259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].num))
              Select->set_braces(1);
            (yyval.table_list)= NULL;
          }
#line 34388 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1665:
#line 11267 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 34409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1666:
#line 11284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 34417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1668:
#line 11291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= Select; }
#line 34423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1669:
#line 11296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if ((yyvsp[0].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
#line 34433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1670:
#line 11304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            TABLE_LIST *embedding= lex->current_select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
#line 34446 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1671:
#line 11315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1672:
#line 11316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34458 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1673:
#line 11321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
#line 34466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1674:
#line 11324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
#line 34472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1675:
#line 11325 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
#line 34478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1676:
#line 11326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
#line 34484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1677:
#line 11330 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
#line 34490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1678:
#line 11331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
#line 34496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1679:
#line 11336 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_index_hint_type((yyvsp[-2].index_hint), (yyvsp[0].num));
          }
#line 34504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1681:
#line 11341 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[0].num));
          }
#line 34512 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1686:
#line 11354 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->alloc_index_hints(thd); }
#line 34518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1688:
#line 11358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {  Select->clear_index_hints(); }
#line 34524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1690:
#line 11363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, NULL, 0); }
#line 34530 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1691:
#line 11364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34536 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1692:
#line 11369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length); }
#line 34542 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1693:
#line 11371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
#line 34548 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1696:
#line 11381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.string_list)= new (thd->mem_root) List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s, thd->mem_root);
          }
#line 34563 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1697:
#line 11392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[-2].string_list)->push_back(s, thd->mem_root);
            (yyval.string_list)= (yyvsp[-2].string_list);
          }
#line 34577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1698:
#line 11404 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1699:
#line 11405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
#line 34589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1700:
#line 11406 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
#line 34595 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1701:
#line 11407 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
#line 34601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1702:
#line 11408 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
#line 34607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1703:
#line 11409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
#line 34613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1704:
#line 11410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
#line 34619 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1705:
#line 11411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
#line 34625 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1706:
#line 11412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
#line 34631 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1707:
#line 11413 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
#line 34637 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1708:
#line 11414 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
#line 34643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1709:
#line 11415 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
#line 34649 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1710:
#line 11419 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_DAY; }
#line 34655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1711:
#line 11420 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
#line 34661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1712:
#line 11421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
#line 34667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1713:
#line 11422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
#line 34673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1714:
#line 11423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
#line 34679 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1715:
#line 11424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
#line 34685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1716:
#line 11425 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
#line 34691 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1717:
#line 11426 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
#line 34697 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1718:
#line 11427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
#line 34703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1719:
#line 11431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
#line 34709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1720:
#line 11432 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
#line 34715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1721:
#line 11433 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
#line 34721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1722:
#line 11434 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
#line 34727 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1726:
#line 11444 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str_ptr)=0; }
#line 34733 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1727:
#line 11446 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) thd->memdup(&(yyvsp[0].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
#line 34743 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1730:
#line 11459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->where= 0; }
#line 34749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1731:
#line 11461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= IN_WHERE;
          }
#line 34757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1732:
#line 11465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond(thd, (yyvsp[0].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
          }
#line 34769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1734:
#line 11477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= IN_HAVING;
          }
#line 34777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1735:
#line 11481 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond(thd, (yyvsp[0].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
          }
#line 34789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1738:
#line 11501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_group_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 34795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1739:
#line 11503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_group_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 34801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1740:
#line 11507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1741:
#line 11509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                                "global union parameters"));
            lex->current_select->olap= CUBE_TYPE;

            my_yyabort_error((ER_NOT_SUPPORTED_YET, MYF(0), "CUBE"));
          }
#line 34828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1742:
#line 11526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                                "global union parameters"));
            lex->current_select->olap= ROLLUP_TYPE;
          }
#line 34847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1743:
#line 11548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1744:
#line 11551 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1747:
#line 11561 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            if (Select->add_window_def(thd, (yyvsp[-2].lex_str_ptr), lex->win_ref,
                                       Select->group_list,
                                       Select->order_list,
                                       lex->win_frame ))
              MYSQL_YYABORT;
          }
#line 34872 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1748:
#line 11573 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->prepare_add_window_spec(thd); }
#line 34878 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1750:
#line 11580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34884 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1751:
#line 11582 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->lex->win_ref= (LEX_STRING *) thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING));
            if (thd->lex->win_ref == NULL)
              MYSQL_YYABORT;
          }
#line 34894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1752:
#line 11590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 34900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1754:
#line 11595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 34906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1756:
#line 11600 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1757:
#line 11602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->win_frame=
              new (thd->mem_root) Window_frame((yyvsp[-2].frame_units),
                                               lex->frame_top_bound,
                                               lex->frame_bottom_bound,
                                               (yyvsp[0].frame_exclusion));
            if (lex->win_frame == NULL)
              MYSQL_YYABORT;
          }
#line 34927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1758:
#line 11615 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_units)= Window_frame::UNITS_ROWS; }
#line 34933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1759:
#line 11616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_units)= Window_frame::UNITS_RANGE; }
#line 34939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1760:
#line 11621 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->frame_top_bound= (yyvsp[0].window_frame_bound);
            lex->frame_bottom_bound=
              new (thd->mem_root)
                Window_frame_bound(Window_frame_bound::CURRENT, NULL);
            if (lex->frame_bottom_bound == NULL)
              MYSQL_YYABORT;
          }
#line 34953 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1761:
#line 11631 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->frame_top_bound= (yyvsp[-2].window_frame_bound);
            lex->frame_bottom_bound= (yyvsp[0].window_frame_bound);
          }
#line 34963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1762:
#line 11640 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.window_frame_bound)= new (thd->mem_root) 
                  Window_frame_bound(Window_frame_bound::PRECEDING, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
#line 34974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1763:
#line 11647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::CURRENT, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
#line 34985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1764:
#line 11654 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::PRECEDING, (yyvsp[-1].item)); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
#line 34996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1765:
#line 11663 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.window_frame_bound)= (yyvsp[0].window_frame_bound); }
#line 35002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1766:
#line 11665 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::FOLLOWING, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
#line 35013 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1767:
#line 11672 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::FOLLOWING, (yyvsp[-1].item)); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
#line 35024 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1768:
#line 11681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_exclusion)= Window_frame::EXCL_NONE; }
#line 35030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1769:
#line 11683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_exclusion)= Window_frame::EXCL_CURRENT_ROW; }
#line 35036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1770:
#line 11685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_exclusion)= Window_frame::EXCL_GROUP; }
#line 35042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1771:
#line 11687 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_exclusion)= Window_frame::EXCL_TIES; }
#line 35048 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1772:
#line 11689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.frame_exclusion)= Window_frame::EXCL_NONE; }
#line 35054 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1776:
#line 11707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            bool ascending= ((yyvsp[0].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[-1].item), ascending))
              MYSQL_YYABORT;
          }
#line 35064 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1779:
#line 11725 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE &&
                !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(thd))
                MYSQL_YYABORT;
            }
            if (sel->master_unit()->is_union() && !sel->braces)
            {
               /*
                 At this point we don't know yet whether this is the last
                 select in union or not, but we move ORDER BY to
                 fake_select_lex anyway. If there would be one more select
                 in union mysql_new_select will correctly throw error.
               */
               DBUG_ASSERT(sel->master_unit()->fake_select_lex);
               lex->current_select= sel->master_unit()->fake_select_lex;
             }
          }
#line 35111 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1780:
#line 11768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {

          }
#line 35119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1781:
#line 11775 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_order_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 35125 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1782:
#line 11777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_order_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 35131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1783:
#line 11781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =  1; }
#line 35137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1784:
#line 11782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =1; }
#line 35143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1785:
#line 11783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =0; }
#line 35149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1786:
#line 11787 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1787:
#line 11788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1788:
#line 11793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            if (sel->master_unit()->is_union() && !sel->braces)
            {
              /* Move LIMIT that belongs to UNION to fake_select_lex */
              Lex->current_select= sel->master_unit()->fake_select_lex;
              DBUG_ASSERT(Select);
            }
          }
#line 35175 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1789:
#line 11806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            if (!sel->select_limit->basic_const_item() ||
                sel->select_limit->val_int() > 0)
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 35186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1790:
#line 11814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 35194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1791:
#line 11818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 35202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1792:
#line 11825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
#line 35213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1793:
#line 11832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            sel->offset_limit= (yyvsp[-2].item);
            sel->explicit_limit= 1;
          }
#line 35224 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1794:
#line 11839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[-2].item);
            sel->offset_limit= (yyvsp[0].item);
            sel->explicit_limit= 1;
          }
#line 35235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1795:
#line 11849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[0].lex_str), false)))
          {
            uint pos_in_query= 0;
            uint len_in_query= 0;
            if (!lex->clone_spec_offset)
            {
              pos_in_query= (uint)(lip->get_tok_start() -
                                   lex->sphead->m_tmp_query);
              len_in_query= (uint)(lip->get_ptr() -
                                   lip->get_tok_start());
            }
            splocal= new (thd->mem_root)
              Item_splocal(thd, (yyvsp[0].lex_str), spv->offset, spv->sql_type(),
                           pos_in_query, len_in_query);
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
            my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));
          if (splocal->type() != Item::INT_ITEM)
            my_yyabort_error((ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0)));
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
#line 35274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1796:
#line 11884 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyvsp[0].item_param)->limit_clause_param= TRUE;
        }
#line 35282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1797:
#line 11888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1798:
#line 11894 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1799:
#line 11900 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1800:
#line 11909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[0].item);
          }
#line 35321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1801:
#line 11917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
#line 35330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1802:
#line 11922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
#line 35341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1803:
#line 11928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
#line 35347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1804:
#line 11929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
#line 35353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1805:
#line 11933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1806:
#line 11934 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1807:
#line 11935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1808:
#line 11939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1809:
#line 11940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 35383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1810:
#line 11941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1811:
#line 11942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1812:
#line 11943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1813:
#line 11944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35407 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1814:
#line 11948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1815:
#line 11949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 35419 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1816:
#line 11950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1817:
#line 11951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1818:
#line 11952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT; }
#line 35437 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1819:
#line 11956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1820:
#line 11957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35449 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1821:
#line 11958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1822:
#line 11959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1823:
#line 11960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1824:
#line 11964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1825:
#line 11965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1826:
#line 11966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulonglong_number)= strtoull((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 35485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1827:
#line 11967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 35491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1828:
#line 11968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT; }
#line 35497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1829:
#line 11973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_ONLY_INTEGERS_ALLOWED); }
#line 35503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1832:
#line 11982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.choice)= (yyvsp[0].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
#line 35509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1833:
#line 11983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.choice)= HA_CHOICE_UNDEF; }
#line 35515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1834:
#line 11988 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            DBUG_ASSERT(&lex->select_lex == lex->current_select);

            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(thd, &lex->current_select->context,
                                           NULL, NULL, (yyvsp[0].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);

            /*
              PROCEDURE CLAUSE cannot handle subquery as one of its parameter,
              so set expr_allows_subselect as false to disallow any subqueries
              further. Reset expr_allows_subselect back to true once the
              parameters are reduced.
            */
            Lex->expr_allows_subselect= false;
          }
#line 35545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1835:
#line 12014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Subqueries are allowed from now.*/
            Lex->expr_allows_subselect= true;
          }
#line 35554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1836:
#line 12021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35560 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1837:
#line 12022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35566 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1840:
#line 12032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_proc_to_list(thd, (yyvsp[-1].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[-1].item)->name)
              (yyvsp[-1].item)->set_name(thd, (yyvsp[-2].simple_string), (uint) ((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)), thd->charset());
          }
#line 35577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1841:
#line 12041 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->describe &&
                (!(lex->result= new (thd->mem_root) select_dumpvar(thd))))
              MYSQL_YYABORT;
          }
#line 35588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1842:
#line 12048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35594 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1844:
#line 12053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1845:
#line 12057 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->result)
            {
              if ((yyvsp[0].myvar) == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)Lex->result)->var_list.push_back((yyvsp[0].myvar), thd->mem_root);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(Lex->describe);
            }
          }
#line 35621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1846:
#line 12077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.myvar) = Lex->result ? new (thd->mem_root) my_var_user((yyvsp[0].lex_str)) : NULL;
          }
#line 35629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1847:
#line 12081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_variable *t;

            if (!Lex->spcont || !(t= Lex->spcont->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));
            (yyval.myvar) = Lex->result ? (new (thd->mem_root)
                                my_var_sp((yyvsp[0].lex_str), t->offset, t->sql_type(),
                                          Lex->sphead)) :
                                NULL;
          }
#line 35644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1849:
#line 12099 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange=
                    new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str, 0)) ||
                !(lex->result=
                    new (thd->mem_root) select_export(thd, lex->exchange)))
              MYSQL_YYABORT;
          }
#line 35658 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1850:
#line 12109 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->cs= (yyvsp[0].charset); }
#line 35664 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1852:
#line 12112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result=
                      new (thd->mem_root) select_dump(thd, lex->exchange)))
                MYSQL_YYABORT;
            }
          }
#line 35681 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1853:
#line 12125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
#line 35689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1854:
#line 12136 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
#line 35699 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1855:
#line 12142 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->insert_list= (yyvsp[0].item_list);
          }
#line 35707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1856:
#line 12153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_TABLE, (yyvsp[-2].num), (yyvsp[0].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 35718 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1857:
#line 12160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35724 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1858:
#line 12161 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1859:
#line 12162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[-3].lex_str).str, (yyvsp[-4].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
#line 35751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1860:
#line 12179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_DB, (yyvsp[-1].object_ddl_options));
            lex->name= (yyvsp[0].lex_str);
          }
#line 35761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1861:
#line 12185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[-2].lex_str).str && check_db_name(&(yyvsp[-2].lex_str)))
               my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[-3].object_ddl_options));
            spname= new (thd->mem_root) sp_name((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
#line 35780 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1862:
#line 12200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[-1].object_ddl_options));
            spname= new (thd->mem_root) sp_name(db, (yyvsp[0].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
#line 35800 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1863:
#line 12216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            lex->set_command(SQLCOM_DROP_PROCEDURE, (yyvsp[-1].object_ddl_options));
            lex->spname= (yyvsp[0].spname);
          }
#line 35812 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1864:
#line 12224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_USER, (yyvsp[-2].object_ddl_options));
          }
#line 35820 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1865:
#line 12228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_ROLE, (yyvsp[-2].object_ddl_options));
          }
#line 35828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1866:
#line 12232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_VIEW, (yyvsp[0].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 35839 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1867:
#line 12239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35845 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1868:
#line 12241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->spname= (yyvsp[0].spname);
            Lex->set_command(SQLCOM_DROP_EVENT, (yyvsp[-1].object_ddl_options));
          }
#line 35854 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1869:
#line 12246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_TRIGGER, (yyvsp[-1].object_ddl_options));
            lex->spname= (yyvsp[0].spname);
          }
#line 35864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1870:
#line 12252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
#line 35873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1871:
#line 12257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
#line 35882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1872:
#line 12262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_SERVER, (yyvsp[-1].object_ddl_options));
            Lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 35891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1875:
#line 12275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[0].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 35903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1876:
#line 12286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[0].string_list)))
              MYSQL_YYABORT;
          }
#line 35917 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1879:
#line 12304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[0].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 35929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1880:
#line 12315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
#line 35938 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1881:
#line 12320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
#line 35947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1882:
#line 12328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_NONE);
        }
#line 35955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1883:
#line 12332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_EXISTS);
        }
#line 35963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1884:
#line 12338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 35969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1885:
#line 12339 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= HA_LEX_CREATE_TMP_TABLE; }
#line 35975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1886:
#line 12347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
#line 35986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1887:
#line 12355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_lock_for_tables((yyvsp[-2].lock_type), true);
            Lex->current_select= &Lex->select_lex;
          }
#line 35995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1888:
#line 12360 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1889:
#line 12365 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
#line 36012 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1890:
#line 12372 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_lock_for_tables((yyvsp[-1].lock_type), true);
            Lex->current_select= &Lex->select_lex;
          }
#line 36021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1891:
#line 12377 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1892:
#line 12382 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 36040 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1893:
#line 12390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 36046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1894:
#line 12392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
#line 36058 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1895:
#line 12399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE; }
#line 36064 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1896:
#line 12403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= (yyvsp[0].lock_type); }
#line 36070 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1897:
#line 12405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
#line 36082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1898:
#line 12415 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36088 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1899:
#line 12416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1900:
#line 12421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
#line 36105 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1901:
#line 12430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36111 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1902:
#line 12431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36117 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1903:
#line 12432 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36123 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1904:
#line 12434 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!(lex->insert_list= new (thd->mem_root) List_item) ||
                lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
#line 36134 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1906:
#line 12445 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 36140 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1907:
#line 12446 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 36146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1908:
#line 12450 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36152 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1909:
#line 12451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36158 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1910:
#line 12452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1915:
#line 12467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[-2].item), thd->mem_root) ||
                lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 36175 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1916:
#line 12476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36181 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1917:
#line 12477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36187 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1918:
#line 12481 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36193 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1919:
#line 12482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36199 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1920:
#line 12487 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
              if (!(Lex->insert_list= new (thd->mem_root) List_item))
                MYSQL_YYABORT;
          }
#line 36208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1921:
#line 12492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
#line 36218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1922:
#line 12500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36224 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1924:
#line 12506 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 36233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1925:
#line 12511 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 36242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1926:
#line 12518 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item);}
#line 36248 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1927:
#line 12520 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 36258 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1928:
#line 12526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_ignore_value(thd, Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 36268 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1930:
#line 12535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates= DUP_UPDATE; }
#line 36274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1932:
#line 12543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
#line 36285 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1933:
#line 12551 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *slex= &Lex->select_lex;
            if (slex->table_list.elements > 1)
              Lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (slex->get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       slex->get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            slex->set_lock_for_tables((yyvsp[-4].lock_type), slex->table_list.elements == 1);
          }
#line 36308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1934:
#line 12569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1937:
#line 12579 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_item_to_list(thd, (yyvsp[-2].item)) || add_value_to_list(thd, (yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 36323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1940:
#line 12592 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[-2].item), thd->mem_root) || 
              lex->value_list.push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 36334 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1941:
#line 12601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
#line 36340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1942:
#line 12602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 36346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1943:
#line 12609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
#line 36361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1945:
#line 12624 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[0].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 36376 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1946:
#line 12635 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36382 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1947:
#line 12636 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36388 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1948:
#line 12638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 36398 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1949:
#line 12644 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
#line 36407 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1950:
#line 12649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 36417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1951:
#line 12655 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
#line 36426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1956:
#line 12673 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Table_ident *ti= new (thd->mem_root) Table_ident((yyvsp[-1].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 36443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1957:
#line 12686 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Table_ident *ti= new (thd->mem_root) Table_ident(thd, (yyvsp[-3].lex_str), (yyvsp[-1].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 36460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1958:
#line 12701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1959:
#line 12702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1960:
#line 12706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1961:
#line 12707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1962:
#line 12711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= OPTION_QUICK; }
#line 36490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1963:
#line 12712 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
#line 36496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1964:
#line 12713 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1; }
#line 36502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1965:
#line 12718 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 36517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1966:
#line 12729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 36529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1973:
#line 12753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_CPU;
    }
#line 36537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1974:
#line 12757 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
#line 36545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1975:
#line 12761 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
#line 36553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1976:
#line 12765 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
#line 36561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1977:
#line 12769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
#line 36569 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1978:
#line 12773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_IPC;
    }
#line 36577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1979:
#line 12777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
#line 36585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1980:
#line 12781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
#line 36593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1981:
#line 12785 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_ALL;
    }
#line 36601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1982:
#line 12792 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_query_id= 0;
    }
#line 36609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1983:
#line 12796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_query_id= atoi((yyvsp[0].lex_str).str);
    }
#line 36617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1984:
#line 12805 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->create_info.init();
          }
#line 36630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1985:
#line 12814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 36638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1986:
#line 12821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
#line 36649 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1987:
#line 12828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
#line 36661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1988:
#line 12836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
#line 36673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1989:
#line 12844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
#line 36685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1990:
#line 12852 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
#line 36697 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1991:
#line 12860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[-1].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
#line 36709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1992:
#line 12868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
#line 36720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1993:
#line 12875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ident= (yyvsp[0].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
#line 36731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1994:
#line 12882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
#line 36741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1995:
#line 12888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.db_type= (yyvsp[-1].db_type); }
#line 36747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1996:
#line 12890 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.db_type= NULL; }
#line 36753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1997:
#line 12892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[-1].simple_string))
              (yyvsp[-2].table)->change_db((yyvsp[-1].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[-2].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
#line 36766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1998:
#line 12901 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
#line 36774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1999:
#line 12905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
#line 36782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2000:
#line 12909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
#line 36791 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2002:
#line 12915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
#line 36800 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2004:
#line 12920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[-1].simple_string))
              (yyvsp[-2].table)->change_db((yyvsp[-1].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[-2].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
#line 36813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2005:
#line 12929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
#line 36824 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2006:
#line 12936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
#line 36833 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2007:
#line 12941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
#line 36842 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2008:
#line 12946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
#line 36851 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2009:
#line 12951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (void) create_select_for_variable("warning_count"); }
#line 36857 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2010:
#line 12953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (void) create_select_for_variable("error_count"); }
#line 36863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2011:
#line 12955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
#line 36869 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2012:
#line 12957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
#line 36875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2013:
#line 12959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
#line 36881 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2014:
#line 12961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              MYSQL_YYABORT;
          }
#line 36892 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2015:
#line 12968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[-2].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_STATUS))
              MYSQL_YYABORT;
          }
#line 36904 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2016:
#line 12976 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
#line 36910 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2017:
#line 12978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[-2].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_VARIABLES))
              MYSQL_YYABORT;
          }
#line 36922 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2018:
#line 12986 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
#line 36933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2019:
#line 12993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
#line 36944 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2020:
#line 13000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
#line 36955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2021:
#line 13007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[-1].lex_user);
          }
#line 36965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2022:
#line 13013 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_SHOW_CREATE_DB, (yyvsp[-1].object_ddl_options));
            Lex->name= (yyvsp[0].lex_str);
          }
#line 36974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2023:
#line 13018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,0))
              MYSQL_YYABORT;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
#line 36986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2024:
#line 13026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
#line 36998 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2025:
#line 13034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
#line 37006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2026:
#line 13038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
#line 37015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2027:
#line 13043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
#line 37026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2028:
#line 13050 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
#line 37035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2029:
#line 13055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[0].spname);
          }
#line 37046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2030:
#line 13062 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[0].spname);
          }
#line 37057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2031:
#line 13069 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[0].spname);
          }
#line 37067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2032:
#line 13075 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_CREATE_USER;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user;
          }
#line 37078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2033:
#line 13082 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->sql_command= SQLCOM_SHOW_CREATE_USER;
             Lex->grant_user= (yyvsp[0].lex_user);
          }
#line 37087 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2034:
#line 13087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
#line 37098 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2035:
#line 13094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
#line 37109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2036:
#line 13101 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[0].spname);
          }
#line 37118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2037:
#line 13106 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[0].spname);
          }
#line 37127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2038:
#line 13111 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->spname= (yyvsp[0].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
#line 37136 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2039:
#line 13116 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[0].item));
          }
#line 37147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2040:
#line 13123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             bool in_plugin;
             lex->sql_command= SQLCOM_SHOW_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[-2].lex_str).str, &in_plugin);
             if (!table || !table->old_format || !in_plugin)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[-1].simple_string));
               MYSQL_YYABORT;
             }
             if (lex->wild && table->idx_field1 < 0)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[0].simple_string));
               MYSQL_YYABORT;
             }
             if (make_schema_select(thd, Lex->current_select, table))
               MYSQL_YYABORT;
           }
#line 37170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2041:
#line 13145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
#line 37176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2042:
#line 13147 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
#line 37182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2043:
#line 13149 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
#line 37188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2048:
#line 13163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= 0; }
#line 37194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2049:
#line 13164 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[0].lex_str).str; }
#line 37200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2050:
#line 13168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->verbose=0; }
#line 37206 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2051:
#line 13169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->verbose=1; }
#line 37212 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2054:
#line 13178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.log_file_name = 0; }
#line 37218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2055:
#line 13179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.log_file_name = (yyvsp[0].lex_str).str; }
#line 37224 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2056:
#line 13183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.pos = 4; /* skip magic number */ }
#line 37230 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2057:
#line 13184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.pos = (yyvsp[0].ulonglong_number); }
#line 37236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2058:
#line 13188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= 0; }
#line 37242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2059:
#line 13190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
            (yyval.simple_string)= (yyvsp[-1].simple_string);
          }
#line 37254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2060:
#line 13198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->where= normalize_cond(thd, (yyvsp[0].item));
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
            (yyval.simple_string)= (yyvsp[-1].simple_string);
          }
#line 37265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2061:
#line 13209 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[0].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
#line 37280 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2062:
#line 13220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 37288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2063:
#line 13224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_NORMAL; }
#line 37294 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2064:
#line 13226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
#line 37303 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2072:
#line 13247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->analyze_stmt= true;
          }
#line 37311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2073:
#line 13253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_EXTENDED; }
#line 37317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2074:
#line 13254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_PARTITIONS; }
#line 37323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2075:
#line 13255 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2076:
#line 13259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2077:
#line 13261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, "JSON"))
              Lex->explain_json= true;
            else if (!my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, "TRADITIONAL"))
              DBUG_ASSERT(Lex->explain_json==false);
            else
              my_yyabort_error((ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 37348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2078:
#line 13272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2079:
#line 13273 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->wild= (yyvsp[0].string); }
#line 37360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2080:
#line 13275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
#line 37372 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2081:
#line 13289 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 37383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2082:
#line 13296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2083:
#line 13301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
#line 37403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2084:
#line 13311 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2086:
#line 13316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2087:
#line 13318 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          TABLE_LIST *tables= Lex->query_tables;
          for (; tables; tables= tables->next_global)
          {
            tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
            tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
            tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
          }
        }
#line 37429 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2088:
#line 13331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_READ_LOCK | (yyvsp[0].num); }
#line 37435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2089:
#line 13333 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(thd, ER_NO_TABLES_USED);
              MYSQL_YYABORT;
            } 
            Lex->type|= REFRESH_FOR_EXPORT;
          }
#line 37448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2090:
#line 13340 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2092:
#line 13346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2093:
#line 13351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_ERROR_LOG; }
#line 37466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2094:
#line 13353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_ENGINE_LOG; }
#line 37472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2095:
#line 13355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_GENERAL_LOG; }
#line 37478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2096:
#line 13357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_SLOW_LOG; }
#line 37484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2097:
#line 13359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_BINARY_LOG; }
#line 37490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2098:
#line 13361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS"));
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
#line 37502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2099:
#line 13369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
#line 37508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2100:
#line 13371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_HOSTS; }
#line 37514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2101:
#line 13373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_GRANT; }
#line 37520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2102:
#line 13375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name= empty_lex_str;
          }
#line 37529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2103:
#line 13380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_STATUS; }
#line 37535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2104:
#line 13382 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE"));
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
#line 37547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2105:
#line 13390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_MASTER; }
#line 37553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2106:
#line 13392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_DES_KEY_FILE; }
#line 37559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2107:
#line 13394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_USER_RESOURCES; }
#line 37565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2108:
#line 13396 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->type|= REFRESH_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[-1].lex_str).str);
             if (!table || !table->reset_table)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[0].simple_string));
               MYSQL_YYABORT;
             }
             Lex->view_list.push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[-1].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
           }
#line 37582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2109:
#line 13411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2110:
#line 13412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37594 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2111:
#line 13416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2112:
#line 13418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37606 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2116:
#line 13428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint32 value= (uint32) (yyvsp[0].ulonglong_number);
            if ((yyvsp[0].ulonglong_number) > UINT_MAX32)
            {
              my_printf_error(ER_BINLOG_CANT_DELETE_GTID_DOMAIN,
                              "The value of gtid domain being deleted ('%llu') "
                              "exceeds its maximum size "
                              "of 32 bit unsigned integer", MYF(0), (yyvsp[0].ulonglong_number));
              MYSQL_YYABORT;
            }
            insert_dynamic(&Lex->delete_gtid_domain, (uchar*) &value);
          }
#line 37623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2117:
#line 13443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num)= 0;}
#line 37629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2118:
#line 13444 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num)= REFRESH_CHECKPOINT; }
#line 37635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2119:
#line 13449 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
#line 37644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2120:
#line 13454 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37650 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2123:
#line 13463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_SLAVE; }
#line 37656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2124:
#line 13465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 37662 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2125:
#line 13467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->type|= REFRESH_MASTER;
             Lex->next_binlog_file_number= 0;
          }
#line 37671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2127:
#line 13472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_QUERY_CACHE;}
#line 37677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2128:
#line 13476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->reset_slave_info.all= false; }
#line 37683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2129:
#line 13477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->reset_slave_info.all= true; }
#line 37689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2130:
#line 13481 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2131:
#line 13483 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->next_binlog_file_number = (yyvsp[0].ulong_num);
          }
#line 37703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2132:
#line 13490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
#line 37713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2133:
#line 13496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2135:
#line 13505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->to_log = (yyvsp[0].lex_str).str;
          }
#line 37727 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2136:
#line 13509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[0].item), thd->mem_root);
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
#line 37738 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2137:
#line 13521 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
#line 37750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2138:
#line 13529 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->kill_signal= (killed_state) ((yyvsp[-1].num) | (yyvsp[0].num));
          }
#line 37758 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2139:
#line 13535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_HARD_BIT; }
#line 37764 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2140:
#line 13536 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_HARD_BIT; }
#line 37770 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2141:
#line 13537 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 37776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2142:
#line 13541 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_CONNECTION; }
#line 37782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2143:
#line 13542 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_QUERY; }
#line 37788 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2144:
#line 13544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
            Lex->value_list.push_front((yyvsp[0].item), thd->mem_root);
          }
#line 37798 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2145:
#line 13552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 37804 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2146:
#line 13553 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 37810 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2147:
#line 13558 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->value_list.push_front((yyval.item), thd->mem_root);
         }
#line 37818 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2148:
#line 13562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root);
            Lex->kill_type= KILL_TYPE_USER;
          }
#line 37827 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2149:
#line 13569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
#line 37833 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2150:
#line 13576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[0].lex_str).str;
          }
#line 37843 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2151:
#line 13587 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            mysql_init_select(lex);

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[0].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
#line 37859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2152:
#line 13599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[-2].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str, 0, (yyvsp[-5].filetype))))
              MYSQL_YYABORT;
          }
#line 37873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2153:
#line 13609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[-9].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[0].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
            lex->many_values.empty();
          }
#line 37888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2154:
#line 13620 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->cs= (yyvsp[0].charset); }
#line 37894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2155:
#line 13624 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2156:
#line 13628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.filetype)= FILETYPE_CSV; }
#line 37906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2157:
#line 13629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.filetype)= FILETYPE_XML; }
#line 37912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2158:
#line 13633 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=0;}
#line 37918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2159:
#line 13634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1;}
#line 37924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2160:
#line 13638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
#line 37930 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2161:
#line 13640 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 37942 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2162:
#line 13647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 37948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2163:
#line 13651 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates=DUP_ERROR; }
#line 37954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2164:
#line 13652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates=DUP_REPLACE; }
#line 37960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2165:
#line 13653 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1; }
#line 37966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2170:
#line 13668 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[0].string);
          }
#line 37975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2171:
#line 13673 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[0].string);
            lex->exchange->opt_enclosed= 1;
          }
#line 37986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2172:
#line 13680 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[0].string);
          }
#line 37995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2173:
#line 13685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[0].string);
          }
#line 38004 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2178:
#line 13703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[0].string);
          }
#line 38013 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2179:
#line 13708 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[0].string);
          }
#line 38022 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2180:
#line 13715 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 38028 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2181:
#line 13717 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->line_term = (yyvsp[0].string); }
#line 38034 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2183:
#line 13723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[-1].lex_str).str);
          }
#line 38043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2184:
#line 13730 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 38049 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2185:
#line 13731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 38055 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2186:
#line 13735 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2187:
#line 13736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2188:
#line 13737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2189:
#line 13742 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 38079 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2190:
#line 13744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 38085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2191:
#line 13748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.item)= (yyvsp[0].item);}
#line 38091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2192:
#line 13750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2193:
#line 13758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38107 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2194:
#line 13759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38113 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2197:
#line 13769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[-4].item), thd->mem_root) || 
                lex->value_list.push_back((yyvsp[-1].item), thd->mem_root))
                MYSQL_YYABORT;
            (yyvsp[-1].item)->set_name_no_truncate(thd, (yyvsp[-2].simple_string), (uint) ((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)), thd->charset());
          }
#line 38125 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2198:
#line 13782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(thd, tmp.str, tmp.length,
                                                cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2199:
#line 13806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38169 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2200:
#line 13818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_string_with_introducer(thd, (yyvsp[0].lex_str).str,
                                                                (yyvsp[0].lex_str).length, (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38180 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2201:
#line 13825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_string* item= (Item_string*) (yyvsp[-1].item);
            item->append((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[0].lex_str).str,
                                                                (yyvsp[0].lex_str).length);
            }
          }
#line 38200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2202:
#line 13844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[0].lex_str).str,
                                             (yyvsp[0].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
#line 38212 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2203:
#line 13851 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string)= (yyvsp[0].string); }
#line 38218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2204:
#line 13857 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 38235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2205:
#line 13870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_hex_string(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 38248 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2206:
#line 13879 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_bin_string(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 38265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2207:
#line 13895 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            bool rc;
            if (! lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
            const char *query_start= lex->sphead && !lex->clone_spec_offset ?
                                     lex->sphead->m_tmp_query : lip->get_buf();
            item= new (thd->mem_root) Item_param(thd,
                                                 (uint)(lip->get_tok_start() -
                                                        query_start));
            if (!((yyval.item_param)= item))
              MYSQL_YYABORT;
            if (!lex->clone_spec_offset)
              rc= lex->param_list.push_back(item, thd->mem_root);
            else
              rc= item->add_as_clone(thd);
            if (rc)
              my_yyabort_error((ER_OUT_OF_RESOURCES, MYF(0)));

          }
#line 38292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2208:
#line 13920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item_num); }
#line 38298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2209:
#line 13922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[0].item_num)->max_length++;
            (yyval.item)= (yyvsp[0].item_num)->neg(thd);
          }
#line 38307 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2210:
#line 13929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 38313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2211:
#line 13930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item_num); }
#line 38319 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2212:
#line 13931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 38325 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2213:
#line 13933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            YYLIP->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item)= new (thd->mem_root) Item_null(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
#line 38343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2214:
#line 13947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_bool(thd, (char*) "FALSE",0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2215:
#line 13953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_bool(thd, (char*) "TRUE",1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2216:
#line 13959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2217:
#line 13965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_hex_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2218:
#line 13971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38393 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2219:
#line 13977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_string_with_introducer *item_str;
            /*
              Pass NULL as name. Name will be set in the "select_item" rule and
              will include the introducer and the original hex/bin notation.
            */
            item_str= new (thd->mem_root)
               Item_string_with_introducer(thd, NULL, (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length(),
                                           (yyvsp[-1].charset));
            if (!item_str || !item_str->check_well_formed_result(true))
              MYSQL_YYABORT;

            (yyval.item)= item_str;
          }
#line 38412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2220:
#line 13995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[0].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[0].lex_str).str, NULL, &error),
                           (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 38426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2221:
#line 14005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[0].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[0].lex_str).str, NULL, &error),
                           (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 38440 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2222:
#line 14015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 38450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2223:
#line 14021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
#line 38463 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2224:
#line 14030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_float(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
#line 38475 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2225:
#line 14042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
#line 38485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2226:
#line 14048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
#line 38495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2227:
#line 14054 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
#line 38505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2228:
#line 14063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.with_clause)= 0; }
#line 38511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2229:
#line 14065 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.with_clause)= (yyvsp[0].with_clause);
          }
#line 38519 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2230:
#line 14073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             With_clause *with_clause=
             new With_clause((yyvsp[0].num), Lex->curr_with_clause);
             if (with_clause == NULL)
               MYSQL_YYABORT;
             Lex->derived_tables|= DERIVED_WITH;
             Lex->curr_with_clause= with_clause;
             with_clause->add_to_list(Lex->with_clauses_list_last_next);
          }
#line 38533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2231:
#line 14083 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.with_clause)= Lex->curr_with_clause;
            Lex->curr_with_clause= Lex->curr_with_clause->pop();
          }
#line 38542 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2232:
#line 14091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 38548 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2233:
#line 14092 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 38554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2236:
#line 14105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[0].lex_str_list)= new List<LEX_STRING> (Lex->with_column_list);
            if ((yyvsp[0].lex_str_list) == NULL)
              MYSQL_YYABORT;
            Lex->with_column_list.empty();
          }
#line 38565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2237:
#line 14112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            const char *query_start= lex->sphead ? lex->sphead->m_tmp_query
                                                 : thd->query();
            char *spec_start= (yyvsp[-3].simple_string) + 1;
            With_element *elem= new With_element((yyvsp[-8].lex_str_ptr), *(yyvsp[-7].lex_str_list), (yyvsp[-2].select_lex)->master_unit());
	    if (elem == NULL || Lex->curr_with_clause->add_with_element(elem))
	      MYSQL_YYABORT;
            if (elem->set_unparsed_spec(thd, spec_start, (yyvsp[-1].simple_string),
                                        (uint) (spec_start - query_start)))
              MYSQL_YYABORT;
	  }
#line 38582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2238:
#line 14129 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str_list)= NULL; }
#line 38588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2239:
#line 14131 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str_list)= NULL; }
#line 38594 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2240:
#line 14137 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->with_column_list.push_back((LEX_STRING*)
                    thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)));
	  }
#line 38603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2241:
#line 14142 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->with_column_list.push_back((LEX_STRING*)
                    thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)));
          }
#line 38612 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2242:
#line 14151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str_ptr)= (LEX_STRING *) thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
#line 38622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2243:
#line 14165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 38628 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2244:
#line 14166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 38634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2245:
#line 14171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
#line 38647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2246:
#line 14180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[-4].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[-2].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
#line 38663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2247:
#line 14194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 38669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2248:
#line 14199 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
                my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));

              Item_splocal *splocal;
              uint pos_in_query= 0;
              uint len_in_query= 0;
              if (!lex->clone_spec_offset)
              {
                pos_in_query= (uint)(lip->get_tok_start_prev() -
                                     lex->sphead->m_tmp_query);
                len_in_query= (uint)(lip->get_tok_end() -
                                     lip->get_tok_start_prev());
              }
              splocal= new (thd->mem_root)
                         Item_splocal(thd, (yyvsp[0].lex_str), spv->offset, spv->sql_type(),
                                      pos_in_query, len_in_query);
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, NullS, (yyvsp[0].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[0].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 38724 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2249:
#line 14249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 38730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2250:
#line 14254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[0].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, NullS, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2251:
#line 14270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 38757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2252:
#line 14275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[-2].lex_str).str[0]=='N' || (yyvsp[-2].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT"));

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE"));

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool tmp_read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(thd, Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[0].lex_str).str,
                                            SELECT_ACL,
                                            tmp_read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[-2].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 38833 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2253:
#line 14347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[-2].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2254:
#line 14371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[-4].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[-2].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 schema,
                                                 (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38892 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2255:
#line 14400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 38898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2256:
#line 14402 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[-4].lex_str).str, table->db))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-4].lex_str).str));
            if (my_strcasecmp(table_alias_charset, (yyvsp[-2].lex_str).str,
                              table->table_name))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            (yyval.lex_str)=(yyvsp[0].lex_str);
          }
#line 38912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2257:
#line 14412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[-2].lex_str).str, table->alias))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            (yyval.lex_str)=(yyvsp[0].lex_str);
          }
#line 38923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2258:
#line 14418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 38929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2259:
#line 14423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[0].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2260:
#line 14429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[-2].lex_str), (yyvsp[0].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38949 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2261:
#line 14435 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* For Delphi */
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[0].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2262:
#line 14445 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[-1].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38970 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2263:
#line 14451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[-3].lex_str), (yyvsp[-1].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2264:
#line 14460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new (thd->mem_root) Table_ident(thd, db, (yyvsp[0].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 38991 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2265:
#line 14469 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 38997 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2266:
#line 14471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              uint wlen= Well_formed_prefix(cs, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length).length();
              if (wlen < (yyvsp[0].lex_str).length)
              {
                ErrConvString err((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[0].lex_str);
            }
            else
            {
              if (thd->convert_with_error(system_charset_info, &(yyval.lex_str),
                                          thd->charset(), (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length))
                MYSQL_YYABORT;
            }
          }
#line 39023 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2267:
#line 14496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
#line 39038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2268:
#line 14510 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
#line 39053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2269:
#line 14524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
#line 39069 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2270:
#line 14538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 39075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2271:
#line 14540 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 39086 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2272:
#line 14549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 39092 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2273:
#line 14551 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 39103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2274:
#line 14560 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 39109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2275:
#line 14562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 39120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2276:
#line 14571 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 39126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2277:
#line 14572 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 39132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2278:
#line 14573 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 39138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2279:
#line 14578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[0].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
#line 39155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2280:
#line 14591 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[-2].lex_str); (yyval.lex_user)->host=(yyvsp[0].lex_str);
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
#line 39189 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2281:
#line 14621 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
#line 39201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2284:
#line 14633 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           if ((yyvsp[0].lex_user)->user.str != current_user.str && (yyvsp[0].lex_user)->host.str == 0)
             (yyvsp[0].lex_user)->host= host_not_specified;
           (yyval.lex_user)= (yyvsp[0].lex_user);
         }
#line 39211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2285:
#line 14642 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2286:
#line 14643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2287:
#line 14644 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2288:
#line 14645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2289:
#line 14646 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2290:
#line 14647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2291:
#line 14648 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2292:
#line 14649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2293:
#line 14650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2294:
#line 14651 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39271 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2295:
#line 14652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39277 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2296:
#line 14653 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2297:
#line 14654 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2298:
#line 14655 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39295 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2299:
#line 14656 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2300:
#line 14657 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39307 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2301:
#line 14658 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2302:
#line 14659 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39319 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2303:
#line 14660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39325 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2304:
#line 14661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39331 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2305:
#line 14662 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39337 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2306:
#line 14663 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2307:
#line 14664 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39349 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2308:
#line 14665 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39355 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2309:
#line 14666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2310:
#line 14667 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2311:
#line 14668 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2312:
#line 14669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2313:
#line 14670 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2314:
#line 14671 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39391 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2315:
#line 14672 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2316:
#line 14673 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2317:
#line 14674 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2318:
#line 14675 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2319:
#line 14676 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2320:
#line 14677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2321:
#line 14678 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2322:
#line 14679 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39439 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2323:
#line 14680 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39445 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2324:
#line 14681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2325:
#line 14682 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2326:
#line 14683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39463 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2327:
#line 14684 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39469 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2328:
#line 14685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39475 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2329:
#line 14686 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39481 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2330:
#line 14687 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2331:
#line 14688 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39493 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2332:
#line 14689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2333:
#line 14690 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2334:
#line 14691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2335:
#line 14692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2336:
#line 14693 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2337:
#line 14694 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2338:
#line 14695 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2339:
#line 14696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39541 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2340:
#line 14697 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2341:
#line 14698 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2342:
#line 14699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2343:
#line 14700 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2344:
#line 14701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2345:
#line 14702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2346:
#line 14703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2347:
#line 14704 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2348:
#line 14705 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39595 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2349:
#line 14706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2350:
#line 14707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2351:
#line 14708 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2352:
#line 14709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39619 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2353:
#line 14710 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39625 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2354:
#line 14711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39631 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2355:
#line 14712 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39637 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2357:
#line 14717 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2358:
#line 14726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39649 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2359:
#line 14727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2360:
#line 14728 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2361:
#line 14729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2362:
#line 14730 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2363:
#line 14731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39679 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2364:
#line 14732 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2365:
#line 14733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39691 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2366:
#line 14734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39697 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2367:
#line 14735 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2368:
#line 14736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2369:
#line 14737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2370:
#line 14738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2371:
#line 14739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39727 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2372:
#line 14740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39733 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2373:
#line 14741 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2374:
#line 14742 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2375:
#line 14743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2376:
#line 14744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2377:
#line 14745 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2378:
#line 14746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2379:
#line 14747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2380:
#line 14748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2381:
#line 14749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2382:
#line 14750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39793 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2383:
#line 14751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2384:
#line 14752 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2385:
#line 14753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2386:
#line 14754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2387:
#line 14755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2388:
#line 14756 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2389:
#line 14757 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2390:
#line 14758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2391:
#line 14759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2392:
#line 14760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2393:
#line 14761 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2394:
#line 14762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2395:
#line 14763 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2396:
#line 14764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2397:
#line 14765 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2398:
#line 14766 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2399:
#line 14767 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2400:
#line 14768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39901 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2401:
#line 14769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39907 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2402:
#line 14770 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39913 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2403:
#line 14771 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2404:
#line 14772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39925 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2405:
#line 14773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2406:
#line 14774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2407:
#line 14779 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2408:
#line 14780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39949 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2409:
#line 14781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2410:
#line 14782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39961 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2411:
#line 14783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39967 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2412:
#line 14784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39973 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2413:
#line 14785 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2414:
#line 14786 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2415:
#line 14787 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39991 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2416:
#line 14788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39997 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2417:
#line 14789 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40003 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2418:
#line 14790 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2419:
#line 14791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2420:
#line 14792 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2421:
#line 14793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2422:
#line 14794 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2423:
#line 14795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2424:
#line 14796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2425:
#line 14797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40051 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2426:
#line 14798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2427:
#line 14799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2428:
#line 14800 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40069 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2429:
#line 14801 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2430:
#line 14802 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2431:
#line 14803 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40087 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2432:
#line 14804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2433:
#line 14805 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2434:
#line 14806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40105 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2435:
#line 14807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40111 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2436:
#line 14808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40117 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2437:
#line 14809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40123 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2438:
#line 14810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40129 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2439:
#line 14811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2440:
#line 14812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2441:
#line 14813 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2442:
#line 14814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2443:
#line 14815 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2444:
#line 14816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2445:
#line 14817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40171 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2446:
#line 14818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40177 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2447:
#line 14819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40183 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2448:
#line 14820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40189 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2449:
#line 14821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40195 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2450:
#line 14822 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2451:
#line 14823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2452:
#line 14824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2453:
#line 14825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40219 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2454:
#line 14826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2455:
#line 14827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2456:
#line 14828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2457:
#line 14829 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2458:
#line 14830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40249 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2459:
#line 14831 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2460:
#line 14832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2461:
#line 14833 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2462:
#line 14834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40273 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2463:
#line 14835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2464:
#line 14836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40285 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2465:
#line 14837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2466:
#line 14838 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40297 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2467:
#line 14839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40303 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2468:
#line 14840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40309 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2469:
#line 14841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40315 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2470:
#line 14842 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2471:
#line 14843 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40327 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2472:
#line 14844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2473:
#line 14845 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2474:
#line 14846 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40345 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2475:
#line 14847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40351 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2476:
#line 14848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2477:
#line 14849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2478:
#line 14850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40369 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2479:
#line 14851 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40375 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2480:
#line 14852 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40381 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2481:
#line 14853 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40387 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2482:
#line 14854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40393 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2483:
#line 14855 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40399 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2484:
#line 14856 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40405 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2485:
#line 14857 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40411 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2486:
#line 14858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2487:
#line 14859 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2488:
#line 14860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40429 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2489:
#line 14861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2490:
#line 14862 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40441 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2491:
#line 14863 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2492:
#line 14864 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40453 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2493:
#line 14865 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40459 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2494:
#line 14866 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2495:
#line 14867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40471 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2496:
#line 14868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2497:
#line 14869 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2498:
#line 14870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2499:
#line 14871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2500:
#line 14872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40501 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2501:
#line 14873 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40507 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2502:
#line 14874 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40513 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2503:
#line 14875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40519 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2504:
#line 14876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2505:
#line 14877 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40531 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2506:
#line 14878 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2507:
#line 14879 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40543 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2508:
#line 14880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2509:
#line 14881 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2510:
#line 14882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2511:
#line 14883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2512:
#line 14884 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40573 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2513:
#line 14885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40579 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2514:
#line 14886 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2515:
#line 14887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2516:
#line 14888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2517:
#line 14889 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2518:
#line 14890 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2519:
#line 14891 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2520:
#line 14892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2521:
#line 14893 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40627 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2522:
#line 14894 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2523:
#line 14895 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2524:
#line 14896 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2525:
#line 14897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2526:
#line 14898 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2527:
#line 14899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2528:
#line 14900 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2529:
#line 14901 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40675 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2530:
#line 14902 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40681 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2531:
#line 14903 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2532:
#line 14904 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2533:
#line 14905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40699 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2534:
#line 14906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40705 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2535:
#line 14907 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2536:
#line 14908 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40717 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2537:
#line 14909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2538:
#line 14910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2539:
#line 14911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2540:
#line 14912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2541:
#line 14913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2542:
#line 14914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2543:
#line 14915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2544:
#line 14916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2545:
#line 14917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2546:
#line 14918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2547:
#line 14919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2548:
#line 14920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2549:
#line 14921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2550:
#line 14922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2551:
#line 14923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2552:
#line 14924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2553:
#line 14925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40819 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2554:
#line 14926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2555:
#line 14927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40831 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2556:
#line 14928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40837 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2557:
#line 14929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40843 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2558:
#line 14930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40849 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2559:
#line 14931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2560:
#line 14932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2561:
#line 14933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40867 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2562:
#line 14934 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2563:
#line 14935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2564:
#line 14936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2565:
#line 14937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2566:
#line 14938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2567:
#line 14939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2568:
#line 14940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2569:
#line 14941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2570:
#line 14942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2571:
#line 14943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2572:
#line 14944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2573:
#line 14945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2574:
#line 14946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2575:
#line 14947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2576:
#line 14948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2577:
#line 14949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2578:
#line 14950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2579:
#line 14951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2580:
#line 14952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2581:
#line 14953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2582:
#line 14954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40993 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2583:
#line 14955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2584:
#line 14956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41005 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2585:
#line 14957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2586:
#line 14958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2587:
#line 14959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41023 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2588:
#line 14960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41029 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2589:
#line 14961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2590:
#line 14962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41041 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2591:
#line 14963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41047 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2592:
#line 14964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2593:
#line 14965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2594:
#line 14966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2595:
#line 14967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2596:
#line 14968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2597:
#line 14969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2598:
#line 14970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2599:
#line 14971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41095 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2600:
#line 14972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2601:
#line 14973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41107 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2602:
#line 14974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41113 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2603:
#line 14975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2604:
#line 14976 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41125 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2605:
#line 14977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2606:
#line 14978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2607:
#line 14979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2608:
#line 14980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2609:
#line 14981 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2610:
#line 14982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2611:
#line 14983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2612:
#line 14984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2613:
#line 14985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2614:
#line 14986 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2615:
#line 14987 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2616:
#line 14988 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2617:
#line 14989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2618:
#line 14990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2619:
#line 14991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2620:
#line 14992 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2621:
#line 14993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2622:
#line 14994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2623:
#line 14995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41239 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2624:
#line 14996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2625:
#line 14997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2626:
#line 14998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2627:
#line 14999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2628:
#line 15000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2629:
#line 15001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2630:
#line 15002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2631:
#line 15003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2632:
#line 15004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2633:
#line 15005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2634:
#line 15006 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2635:
#line 15007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2636:
#line 15008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2637:
#line 15009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2638:
#line 15010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2639:
#line 15011 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2640:
#line 15012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2641:
#line 15013 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2642:
#line 15014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2643:
#line 15015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2644:
#line 15016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2645:
#line 15017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2646:
#line 15018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2647:
#line 15019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2648:
#line 15020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2649:
#line 15021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2650:
#line 15022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2651:
#line 15023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41407 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2652:
#line 15024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2653:
#line 15025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41419 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2654:
#line 15026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2655:
#line 15027 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2656:
#line 15028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41437 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2657:
#line 15029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2658:
#line 15030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41449 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2659:
#line 15031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2660:
#line 15032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2661:
#line 15033 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2662:
#line 15034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2663:
#line 15035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2664:
#line 15036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2665:
#line 15037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2666:
#line 15038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2667:
#line 15039 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2668:
#line 15051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->autocommit= 0;
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 41517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2669:
#line 15061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2670:
#line 15063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->option_type= OPT_SESSION;
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->autocommit= 0;
          }
#line 41535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2671:
#line 15071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0), "SET STATEMENT"));
            lex->stmt_var_list= lex->var_list;
            lex->var_list.empty();
          }
#line 41547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2672:
#line 15079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2675:
#line 15095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
#line 41562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2677:
#line 15101 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= OPT_DEFAULT;
          }
#line 41570 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2678:
#line 15105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
#line 41579 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2679:
#line 15110 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= (yyvsp[0].var_type);
          }
#line 41587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2681:
#line 15120 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 41596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2683:
#line 15126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 41605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2686:
#line 15140 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 41613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2687:
#line 15144 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 41622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2688:
#line 15149 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 41630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2689:
#line 15153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 41639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2690:
#line 15162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= (yyvsp[0].var_type);
          }
#line 41647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2693:
#line 15170 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 41653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2694:
#line 15171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41659 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2695:
#line 15172 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41665 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2696:
#line 15176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2697:
#line 15177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 41677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2698:
#line 15178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2699:
#line 15179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2700:
#line 15183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_DEFAULT; }
#line 41695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2701:
#line 15184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 41701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2702:
#line 15185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2703:
#line 15186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 41713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2704:
#line 15192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if ((yyvsp[-2].variable).var && (yyvsp[-2].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[-2].variable), lex->option_type, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceding local variable is illegal.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 41737 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2705:
#line 15216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if ((yyvsp[-2].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(thd, &(yyvsp[-2].variable).base_name, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[-2].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[-2].variable), lex->option_type, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[-2].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
          }
#line 41767 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2706:
#line 15242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[-2].lex_str), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new (thd->mem_root) set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var, thd->mem_root);
          }
#line 41782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2707:
#line 15253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            struct sys_var_with_base tmp= (yyvsp[-2].variable);
            if (tmp.var == trg_new_row_fake_var)
            {
              my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), 3, "NEW");
              MYSQL_YYABORT;
            }
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[-3].var_type), (yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 41803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2708:
#line 15270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[0].charset) ? (yyvsp[0].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= (new (thd->mem_root)
                  set_var_collation_client(cs2,
                                           thd->variables.collation_database,
                                            cs2));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 41821 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2709:
#line 15284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(thd, ER_SYNTAX_ERROR);

            MYSQL_YYABORT;
          }
#line 41840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2710:
#line 15299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[-1].charset) ? (yyvsp[-1].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[0].charset) ? (yyvsp[0].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new (thd->mem_root) set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 41863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2711:
#line 15318 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            LEX_USER *user;
            if (!(user=(LEX_USER *) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role(user,
                                                             (yyvsp[0].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 41884 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2712:
#line 15335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role((yyvsp[0].lex_user), (yyvsp[-2].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 41900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2713:
#line 15347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_role *var= new (thd->mem_root) set_var_role((yyvsp[0].lex_str));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 41912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2714:
#line 15355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_password *var= (new (thd->mem_root)
                                    set_var_password(lex->definer));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 41928 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2715:
#line 15371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[0].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[0].lex_str);
            }
          }
#line 41958 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2716:
#line 15397 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[-2].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "OLD")))
            {
              if ((yyvsp[-2].lex_str).str[0]=='O' || (yyvsp[-2].lex_str).str[0]=='o')
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", ""));
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after "));
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[0].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[0].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[-2].lex_str);
            }
          }
#line 41999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2717:
#line 15434 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[0].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
#line 42014 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2722:
#line 15455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[0].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_read_only"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 42033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2723:
#line 15473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[0].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_isolation"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 42052 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2724:
#line 15490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= true; }
#line 42058 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2725:
#line 15491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 42064 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2726:
#line 15495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
#line 42070 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2727:
#line 15496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
#line 42076 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2728:
#line 15497 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
#line 42082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2729:
#line 15498 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
#line 42088 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2730:
#line 15503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (spc && spc->find_variable(pw, false))
              my_yyabort_error((ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str));
            if (!(lex->definer= (LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            lex->definer->user= current_user;
            lex->definer->plugin= empty_lex_str;
            lex->definer->auth= empty_lex_str;
          }
#line 42106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2731:
#line 15516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer= (yyvsp[-1].lex_user); }
#line 42112 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2732:
#line 15520 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer->pwhash= (yyvsp[0].lex_str);}
#line 42118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2733:
#line 15521 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer->pwtext= (yyvsp[-1].lex_str); }
#line 42124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2734:
#line 15523 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->definer->pwtext= (yyvsp[-1].lex_str);
            Lex->definer->pwhash.str= Item_func_password::alloc(thd,
                                   (yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length, Item_func_password::OLD);
            Lex->definer->pwhash.length=  SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
          }
#line 42135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2735:
#line 15532 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 42141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2736:
#line 15533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=0; }
#line 42147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2737:
#line 15535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ON",  2);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 42157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2738:
#line 15541 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ALL", 3);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 42167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2739:
#line 15547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "binary", 6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 42177 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2740:
#line 15558 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "LOCK"));
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
#line 42189 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2741:
#line 15566 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42195 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2742:
#line 15570 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 42201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2743:
#line 15571 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 42207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2746:
#line 15581 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[0].num);
            bool lock_for_write= lock_type >= TL_WRITE_ALLOW_WRITE;
            ulong table_options= lock_for_write ? TL_OPTION_UPDATING : 0;
            enum_mdl_type mdl_type= !lock_for_write
                                    ? MDL_SHARED_READ
                                    : lock_type == TL_WRITE_CONCURRENT_INSERT
                                      ? MDL_SHARED_WRITE
                                      : MDL_SHARED_NO_READ_WRITE;

            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), (yyvsp[-1].lex_str_ptr), table_options,
                                           lock_type, mdl_type))
              MYSQL_YYABORT;
          }
#line 42226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2747:
#line 15598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_READ_NO_INSERT; }
#line 42232 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2748:
#line 15599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_WRITE_DEFAULT; }
#line 42238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2749:
#line 15601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 42246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2750:
#line 15605 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
#line 42252 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2751:
#line 15606 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_READ; }
#line 42258 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2752:
#line 15611 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "UNLOCK"));
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
#line 42270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2753:
#line 15619 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42276 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2754:
#line 15628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-2].table), (yyvsp[0].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
#line 42289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2755:
#line 15637 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), 0, 0))
              MYSQL_YYABORT;
          }
#line 42302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2756:
#line 15646 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int(thd, (int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), 0, 0))
              MYSQL_YYABORT;
          }
#line 42323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2757:
#line 15663 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
#line 42338 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2758:
#line 15676 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ident= null_lex_str; }
#line 42344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2759:
#line 15677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ident= (yyvsp[-1].lex_str); }
#line 42350 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2760:
#line 15681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RFIRST; }
#line 42356 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2761:
#line 15682 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RNEXT;  }
#line 42362 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2762:
#line 15686 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RFIRST; }
#line 42368 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2763:
#line 15687 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RNEXT;  }
#line 42374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2764:
#line 15688 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RPREV;  }
#line 42380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2765:
#line 15689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RLAST;  }
#line 42386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2766:
#line 15691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[0].ha_rkey_mode);
            if (!(lex->insert_list= new (thd->mem_root) List_item))
              MYSQL_YYABORT;
          }
#line 42398 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2767:
#line 15699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42404 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2768:
#line 15703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
#line 42410 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2769:
#line 15704 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
#line 42416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2770:
#line 15705 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
#line 42422 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2771:
#line 15706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
#line 42428 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2772:
#line 15707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
#line 42434 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2773:
#line 15714 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42440 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2774:
#line 15719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
#line 42450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2775:
#line 15725 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
#line 42465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2776:
#line 15736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
#line 42480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2777:
#line 15747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
#line 42488 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2778:
#line 15751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[-2].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
#line 42499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2779:
#line 15758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[-2].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2780:
#line 15767 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 42515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2781:
#line 15769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 42521 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2782:
#line 15774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2783:
#line 15780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
#line 42537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2784:
#line 15787 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
#line 42552 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2785:
#line 15799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
#line 42567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2786:
#line 15810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[-3].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
#line 42578 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2787:
#line 15817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[-3].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42590 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2788:
#line 15828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer = 0; }
#line 42596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2789:
#line 15829 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer = (yyvsp[0].lex_user); }
#line 42602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2790:
#line 15833 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= false; }
#line 42608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2791:
#line 15834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= true; }
#line 42614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2792:
#line 15839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2793:
#line 15844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2794:
#line 15852 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->reset_auth();
          }
#line 42643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2795:
#line 15862 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            CHARSET_INFO *cs= system_charset_info;
            /* trim end spaces (as they'll be lost in mysql.user anyway) */
            (yyvsp[0].lex_str).length= cs->cset->lengthsp(cs, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            (yyvsp[0].lex_str).str[(yyvsp[0].lex_str).length] = '\0';
            if ((yyvsp[0].lex_str).length == 0)
              my_yyabort_error((ER_INVALID_ROLE, MYF(0), ""));
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[0].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         cs, 0))
              MYSQL_YYABORT;
          }
#line 42666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2799:
#line 15889 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2800:
#line 15891 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
#line 42681 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2805:
#line 15909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = SELECT_ACL;}
#line 42687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2806:
#line 15910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2807:
#line 15912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = INSERT_ACL;}
#line 42699 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2808:
#line 15913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42705 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2809:
#line 15915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = UPDATE_ACL; }
#line 42711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2810:
#line 15916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42717 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2811:
#line 15918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = REFERENCES_ACL;}
#line 42723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2812:
#line 15919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2813:
#line 15920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= DELETE_ACL;}
#line 42735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2814:
#line 15921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2815:
#line 15922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= INDEX_ACL;}
#line 42747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2816:
#line 15923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= ALTER_ACL;}
#line 42753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2817:
#line 15924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_ACL;}
#line 42759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2818:
#line 15925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= DROP_ACL;}
#line 42765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2819:
#line 15926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= EXECUTE_ACL;}
#line 42771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2820:
#line 15927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= RELOAD_ACL;}
#line 42777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2821:
#line 15928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHUTDOWN_ACL;}
#line 42783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2822:
#line 15929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= PROCESS_ACL;}
#line 42789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2823:
#line 15930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= FILE_ACL;}
#line 42795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2824:
#line 15931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 42801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2825:
#line 15932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHOW_DB_ACL;}
#line 42807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2826:
#line 15933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SUPER_ACL;}
#line 42813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2827:
#line 15934 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_TMP_ACL;}
#line 42819 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2828:
#line 15935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= LOCK_TABLES_ACL; }
#line 42825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2829:
#line 15936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= REPL_SLAVE_ACL; }
#line 42831 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2830:
#line 15937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= REPL_CLIENT_ACL; }
#line 42837 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2831:
#line 15938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_VIEW_ACL; }
#line 42843 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2832:
#line 15939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHOW_VIEW_ACL; }
#line 42849 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2833:
#line 15940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_PROC_ACL; }
#line 42855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2834:
#line 15941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= ALTER_PROC_ACL; }
#line 42861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2835:
#line 15942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_USER_ACL; }
#line 42867 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2836:
#line 15943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= EVENT_ACL;}
#line 42873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2837:
#line 15944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= TRIGGER_ACL; }
#line 42879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2838:
#line 15945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
#line 42885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2839:
#line 15949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2840:
#line 15950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 42897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2843:
#line 15960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SUBJECT"));
            lex->x509_subject=(yyvsp[0].lex_str).str;
          }
#line 42908 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2844:
#line 15967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "ISSUER"));
            lex->x509_issuer=(yyvsp[0].lex_str).str;
          }
#line 42919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2845:
#line 15974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "CIPHER"));
            lex->ssl_cipher=(yyvsp[0].lex_str).str;
          }
#line 42930 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2846:
#line 15984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 42945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2847:
#line 15995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[-2].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 42958 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2848:
#line 16004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 42971 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2849:
#line 16013 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[0].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
#line 42984 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2850:
#line 16025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 42993 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2851:
#line 16030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 43002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2852:
#line 16038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 43011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2853:
#line 16043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 43020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2854:
#line 16051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 43029 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2855:
#line 16056 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 43038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2860:
#line 16067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-3].lex_user);
            (yyvsp[-3].lex_user)->pwtext= (yyvsp[0].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
          }
#line 43049 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2861:
#line 16074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.lex_user)= (yyvsp[-4].lex_user); 
            (yyvsp[-4].lex_user)->pwhash= (yyvsp[0].lex_str);
          }
#line 43058 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2862:
#line 16079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-3].lex_user);
            (yyvsp[-3].lex_user)->plugin= (yyvsp[0].lex_str);
            (yyvsp[-3].lex_user)->auth= empty_lex_str;
          }
#line 43068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2863:
#line 16085 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-5].lex_user);
            (yyvsp[-5].lex_user)->plugin= (yyvsp[-2].lex_str);
            (yyvsp[-5].lex_user)->auth= (yyvsp[0].lex_str);
          }
#line 43078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2864:
#line 16091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 43084 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2865:
#line 16096 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
#line 43093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2869:
#line 16110 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            String *new_str= new (thd->mem_root) String((const char*) (yyvsp[0].lex_str).str,(yyvsp[0].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= (new (thd->mem_root)
                                LEX_COLUMN(*new_str,lex->which_columns));
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col, thd->mem_root);
            }
          }
#line 43123 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2871:
#line 16140 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
#line 43131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2872:
#line 16144 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
#line 43139 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2873:
#line 16148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
#line 43147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2874:
#line 16152 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
#line 43155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2875:
#line 16159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
#line 43165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2876:
#line 16165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
#line 43175 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2877:
#line 16171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
#line 43185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2878:
#line 16177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[0].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
#line 43195 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2879:
#line 16183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.max_statement_time= (yyvsp[0].item_num)->val_real();
            lex->mqh.specified_limits|= USER_RESOURCES::MAX_STATEMENT_TIME;
          }
#line 43205 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2880:
#line 16191 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2881:
#line 16192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2882:
#line 16196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2884:
#line 16202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2885:
#line 16203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2886:
#line 16207 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2887:
#line 16208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 43247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2888:
#line 16212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2889:
#line 16213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2890:
#line 16217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 43265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2891:
#line 16218 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43271 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2892:
#line 16223 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
#line 43281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2893:
#line 16228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2894:
#line 16233 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_COMPOUND;
            Lex->sphead->set_stmt_end(thd);
            Lex->sphead->restore_thd_mem_root(thd);
          }
#line 43297 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2895:
#line 16241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 43303 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2896:
#line 16242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 43309 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2897:
#line 16246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43315 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2898:
#line 16247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2899:
#line 16252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
#line 43327 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2900:
#line 16253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_NO; }
#line 43333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2901:
#line 16254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_YES; }
#line 43339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2902:
#line 16259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
#line 43345 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2903:
#line 16260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_YES; }
#line 43351 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2904:
#line 16261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_NO; }
#line 43357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2905:
#line 16265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2906:
#line 16266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43369 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2907:
#line 16271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[-1].m_yes_no_unk) != TVL_YES || (yyvsp[0].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[-1].m_yes_no_unk);
            lex->tx_release= (yyvsp[0].m_yes_no_unk);
          }
#line 43382 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2908:
#line 16283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[-1].m_yes_no_unk) != TVL_YES || (yyvsp[0].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[-1].m_yes_no_unk);
            lex->tx_release= (yyvsp[0].m_yes_no_unk);
          }
#line 43395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2909:
#line 16293 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 43405 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2910:
#line 16302 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 43415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2911:
#line 16311 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 43425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2912:
#line 16324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2914:
#line 16330 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), TRUE))
              MYSQL_YYABORT;
          }
#line 43440 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2915:
#line 16335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
#line 43452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2916:
#line 16346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), TRUE))
              MYSQL_YYABORT;
          }
#line 43461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2917:
#line 16351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->pop_context();
          }
#line 43469 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2918:
#line 16357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
#line 43487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2919:
#line 16371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
#line 43496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2922:
#line 16387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), FALSE))
              MYSQL_YYABORT;
          }
#line 43505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2923:
#line 16394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1; }
#line 43511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2924:
#line 16395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1; }
#line 43517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2925:
#line 16396 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=0; }
#line 43523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2926:
#line 16410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
#line 43531 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2927:
#line 16416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-2].select_lex); }
#line 43537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2928:
#line 16417 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-2].select_lex); }
#line 43543 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2929:
#line 16421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-1].select_lex); }
#line 43549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2930:
#line 16422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-1].select_lex); }
#line 43555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2931:
#line 16426 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[0].select_lex); }
#line 43561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2932:
#line 16427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[0].select_lex); }
#line 43567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2933:
#line 16428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= (yyvsp[-1].select_lex); }
#line 43573 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2934:
#line 16434 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyvsp[-1].select_lex)->set_with_clause((yyvsp[-2].with_clause));
            (yyval.select_lex)= (yyvsp[-1].select_lex);
          }
#line 43582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2935:
#line 16441 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
#line 43605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2936:
#line 16462 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;

            /*
              A subquery (and all the subsequent query blocks in a UNION) can
              add columns to an outer query block. Reserve space for them.
              Aggregate functions in having clause can also add fields to an
              outer select.
            */
            for (SELECT_LEX *temp= child->master_unit()->first_select();
                 temp != NULL; temp= temp->next_select())
            {
              lex->current_select->select_n_where_fields+=
                temp->select_n_where_fields;
              lex->current_select->select_n_having_items+=
                temp->select_n_having_items;
            }
          }
#line 43634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2941:
#line 16499 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_STRAIGHT_JOIN; }
#line 43640 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2942:
#line 16501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
#line 43652 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2943:
#line 16508 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_DISTINCT; }
#line 43658 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2944:
#line 16509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_SMALL_RESULT; }
#line 43664 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2945:
#line 16510 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_BIG_RESULT; }
#line 43670 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2946:
#line 16512 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
#line 43680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2947:
#line 16518 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
#line 43690 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2948:
#line 16523 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_ALL; }
#line 43696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2949:
#line 16534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43702 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2950:
#line 16536 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43708 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2951:
#line 16538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43714 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2965:
#line 16571 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
#line 43729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2966:
#line 16585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->definer= (yyvsp[0].lex_user);
            Lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
            Lex->ssl_cipher= Lex->x509_subject= Lex->x509_issuer= 0;
            bzero(&(Lex->mqh), sizeof(Lex->mqh));
          }
#line 43740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2967:
#line 16601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
#line 43746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2968:
#line 16603 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
#line 43752 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2969:
#line 16605 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
#line 43758 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2970:
#line 16610 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
#line 43764 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2971:
#line 16612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
#line 43770 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2972:
#line 16614 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
#line 43776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2973:
#line 16619 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
#line 43794 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2975:
#line 16637 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 43800 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2977:
#line 16643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
#line 43810 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2978:
#line 16649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
#line 43820 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2979:
#line 16657 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
#line 43830 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2980:
#line 16663 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            size_t len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            uint not_used;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select,
                            &not_used);
            lex->parsing_options.allows_variable= TRUE;
            lex->current_select->set_with_clause((yyvsp[-2].with_clause));
          }
#line 43847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2985:
#line 16690 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_NONE; }
#line 43853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2986:
#line 16692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
#line 43859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2987:
#line 16694 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
#line 43865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2988:
#line 16696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
#line 43871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2989:
#line 16707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.trigger_action_order_type)= TRG_ORDER_FOLLOWS; }
#line 43877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2990:
#line 16709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.trigger_action_order_type)= TRG_ORDER_PRECEDES; }
#line 43883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2991:
#line 16714 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
              (yyval.trg_execution_order).ordering_clause= TRG_ORDER_NONE;
              (yyval.trg_execution_order).anchor_trigger_name.str= NULL;
              (yyval.trg_execution_order).anchor_trigger_name.length= 0;
            }
#line 43893 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2992:
#line 16721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
              (yyval.trg_execution_order).ordering_clause= (yyvsp[-1].trigger_action_order_type);
              (yyval.trg_execution_order).anchor_trigger_name= (yyvsp[0].lex_str);
            }
#line 43902 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2993:
#line 16731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[0].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 43911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2994:
#line 16740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $10 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
#line 43919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2995:
#line 16746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $14 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
#line 43927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2996:
#line 16751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->trg_chistics.ordering_clause_begin= YYLIP->get_cpp_ptr();
          }
#line 43935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2997:
#line 16755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $19 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER"));

            lex->stmt_definition_begin= (yyvsp[-16].simple_string);
            lex->ident.str= (yyvsp[-9].simple_string);
            lex->ident.length= (yyvsp[-5].simple_string) - (yyvsp[-9].simple_string);
            lex->spname= (yyvsp[-13].spname);
            (*static_cast<st_trg_execution_order*>(&lex->trg_chistics))= ((yyvsp[0].trg_execution_order));
            lex->trg_chistics.ordering_clause_end= lip->get_cpp_ptr();

            if (!make_sp_head(thd, (yyvsp[-13].spname), TYPE_ENUM_TRIGGER))
              MYSQL_YYABORT;

            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
#line 43959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2998:
#line 16775 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $21 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[-9].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
#line 43987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2999:
#line 16807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { thd->lex->udf.type= UDFTYPE_AGGREGATE; }
#line 43993 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3000:
#line 16808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { thd->lex->udf.type= UDFTYPE_FUNCTION;  }
#line 43999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3001:
#line 16814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[-5].object_ddl_options)))
              MYSQL_YYABORT;
            if (is_native_function(thd, & (yyvsp[-4].lex_str)))
              my_yyabort_error((ER_NATIVE_FCT_NAME_COLLISION, MYF(0), (yyvsp[-4].lex_str).str));
            lex->sql_command= SQLCOM_CREATE_FUNCTION;
            lex->udf.name= (yyvsp[-4].lex_str);
            lex->udf.returns= (Item_result) (yyvsp[-2].num);
            lex->udf.dl= (yyvsp[0].lex_str).str;
          }
#line 44015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3002:
#line 16832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $5 */
            LEX *lex= Lex;
            Lex_input_stream *lip= YYLIP;
            const char* tmp_param_begin;

            if (lex->add_create_options_with_check((yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
            lex->spname= (yyvsp[-1].spname);

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION"));

            if (!make_sp_head(thd, (yyvsp[-1].spname), TYPE_ENUM_FUNCTION))
              MYSQL_YYABORT;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
#line 44039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3003:
#line 16853 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
#line 44047 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3004:
#line 16857 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $10 */
            LEX *lex= Lex;
            lex->init_last_field(&lex->sphead->m_return_field_def, NULL,
                                 thd->variables.collation_database);
          }
#line 44057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3005:
#line 16863 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $12 */
            Lex->set_last_field_type((yyvsp[0].Lex_field_type));
            if (Lex->sphead->fill_field_definition(thd, Lex, Lex->last_field))
              MYSQL_YYABORT;
          }
#line 44067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3006:
#line 16869 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
#line 44078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3007:
#line 16876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
              my_yyabort_error((ER_SP_NORETURN, MYF(0), sp->m_qname.str));
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to
                occur before the call), the warning will provide a hint
                explaining the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER_THD(thd, ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
#line 44131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3008:
#line 16928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;

            if (Lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE"));

            if (!make_sp_head(thd, (yyvsp[0].spname), TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;
            Lex->spname= (yyvsp[0].spname);
          }
#line 44147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3009:
#line 16940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
#line 44159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3010:
#line 16949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
#line 44167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3011:
#line 16953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
#line 44175 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3012:
#line 16957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
#line 44188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3013:
#line 16971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
#line 44196 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3014:
#line 16975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
#line 44204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3015:
#line 16979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
#line 44212 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3016:
#line 16983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
#line 44220 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3017:
#line 16987 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
#line 44228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3018:
#line 16991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
#line 44236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3019:
#line 16998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[0].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length(), 0, 0);
          }
#line 44247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3020:
#line 17005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].string)->length() <= MAXGTRIDSIZE && (yyvsp[0].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[-2].string)->ptr(), (yyvsp[-2].string)->length(), (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length());
          }
#line 44258 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3021:
#line 17012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].string)->length() <= MAXGTRIDSIZE && (yyvsp[-2].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[0].ulong_num), (yyvsp[-4].string)->ptr(), (yyvsp[-4].string)->length(), (yyvsp[-2].string)->ptr(), (yyvsp[-2].string)->length());
          }
#line 44269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3022:
#line 17021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 44275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3023:
#line 17022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 44281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3024:
#line 17026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 44287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3025:
#line 17027 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_JOIN;        }
#line 44293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3026:
#line 17028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_RESUME;      }
#line 44299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3027:
#line 17032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 44305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3028:
#line 17033 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_ONE_PHASE;   }
#line 44311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3029:
#line 17038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 44317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3030:
#line 17040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_SUSPEND;     }
#line 44323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3032:
#line 17045 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 44329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3033:
#line 17046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_FOR_MIGRATE; }
#line 44335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3034:
#line 17051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[-2].lex_str);
            lex->ident= (yyvsp[0].lex_str);
          }
#line 44346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3035:
#line 17058 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 44357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3036:
#line 17068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[0].lex_str);
          }
#line 44367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3037:
#line 17074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 44378 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3038:
#line 17085 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            YYERROR;
          }
#line 44386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;


#line 44390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (thd, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, thd);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, thd);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
